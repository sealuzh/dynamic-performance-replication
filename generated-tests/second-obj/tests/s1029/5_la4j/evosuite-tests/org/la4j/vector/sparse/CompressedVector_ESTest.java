/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:56:43 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import java.util.Spliterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 13);
      boolean boolean0 = compressedVector0.nonZeroAt(13);
      assertEquals(13, compressedVector0.length());
      assertFalse(boolean0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(37);
      double double0 = compressedVector0.product();
      assertEquals(0.0, double0, 0.01);
      
      compressedVector0.getOrElse(4, 0.0);
      assertEquals(37, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-120);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("z2V~mmP3p&wtaM^;.}Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = compressedVector0.non(vectorPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.iterator();
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(16);
      assertEquals(16, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector.zero(6);
      MockRandom mockRandom0 = new MockRandom(6);
      // Undeclared exception!
      try { 
        CompressedVector.random(6, (double) 6, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-504), vectorFunction0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.random((-3704), (double) (-3704), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(32, (-639));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -639.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1);
      Vector vector0 = compressedVector0.blankOfLength(1);
      assertTrue(vector0.equals((Object)compressedVector0));
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-504)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-504), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1978, 1340);
      compressedVector0.setAll(1978);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt(1340, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = null;
      try {
        compressedVector0 = new CompressedVector(17, 2007);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2007.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 31;
      CompressedVector compressedVector0 = new CompressedVector(31, 31);
      int int1 = (-2048);
      // Undeclared exception!
      try { 
        compressedVector0.is((VectorPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      CompressedVector compressedVector0 = CompressedVector.zero(2);
      assertEquals(2, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)13, (double)2).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap1, 8);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(8, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      compressedVector1.setAll(2);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(8, compressedVector1.length());
      assertEquals(8, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      VectorIterator vectorIterator0 = compressedVector1.nonZeroIterator();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(8, compressedVector1.length());
      assertEquals(8, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (-2023);
      doubleArray0[1] = (double) (-2023);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(3, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, (-2023.0), 0.0}, doubleArray0, 0.01);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertNotNull(decimalFormat0);
      
      String string0 = compressedVector0.mkString((NumberFormat) decimalFormat0);
      assertEquals(3, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertNotNull(string0);
      assertArrayEquals(new double[] {0.0, (-2023.0), 0.0}, doubleArray0, 0.01);
      assertEquals("0 -2,023 0", string0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-5776), vectorFunction0);
      assertEquals(3, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, (-2023.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.set((-2048), (-2048));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-2048' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-370), vectorFunction0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1977);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1977, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1977, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1977, denseVector0.length());
      assertNotNull(denseVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(1977, 1977);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1977' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)16;
      doubleArray0[5] = (double) (byte)16;
      int[] intArray0 = new int[1];
      doubleArray0[0] = (double) (byte)16;
      CompressedVector compressedVector0 = new CompressedVector(1282, (byte)16, doubleArray0, intArray0);
      assertEquals(16, compressedVector0.cardinality());
      assertEquals(1282, compressedVector0.length());
      assertEquals(0.0124804992199688, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2, 2);
      assertEquals(2, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(2, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random(2248, 1.0, (Random) mockRandom0);
      assertEquals(2248, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2248, compressedVector0.length());
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(1433.815587739529);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2009);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(2009, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertNotNull(sparseVector0);
      
      compressedVector0.set(4, 1434.9447);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertSame(compressedVector0, sparseVector0);
      
      double double0 = sparseVector0.max();
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertEquals(2009, sparseVector0.length());
      assertEquals(4.977600796416127E-4, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.cardinality());
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertEquals(1434.9447, double0, 0.01);
      
      compressedVector0.swapElements(4, 2009);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertSame(compressedVector0, sparseVector0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      compressedVector0.setAll(2009);
      assertEquals(2009, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertSame(compressedVector0, sparseVector0);
      
      compressedVector0.set(4, 4);
      assertEquals(2009, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertSame(compressedVector0, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 13);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      assertEquals(13, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(13);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      assertEquals(13, compressedVector0.length());
      assertFalse(boolean0);
      
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2009);
      assertEquals(2009, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      Vector vector0 = Vector.unit(1409);
      assertEquals(1409, vector0.length());
      assertNotNull(vector0);
      
      compressedVector0.set(16, 1434.9447);
      assertEquals(2009, compressedVector0.length());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements(949, 4);
      assertEquals(2009, compressedVector0.length());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compressedVector0.mkString((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2, 2);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(0.0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-500), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(3);
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements(3, (-4453));
      assertEquals(3, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(176);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 176;
      doubleArray0[1] = (double) 176;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {176.0, 176.0}, doubleArray0, 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt((-351));
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertArrayEquals(new double[] {176.0, 176.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spliterator<Float> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(spliterator0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 1173);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(8.525149190110827E-4, compressedVector1.density(), 0.01);
      assertEquals(1173, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      boolean boolean0 = compressedVector1.nonZeroAt(1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(8.525149190110827E-4, compressedVector1.density(), 0.01);
      assertEquals(1173, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(32, 32);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(32, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(32);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(32, compressedVector0.length());
      assertEquals(32, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Long long0 = new Long((-611L));
      assertNotNull(long0);
      assertEquals((-611L), (long)long0);
      
      boolean boolean0 = linkedList0.add(long0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4);
      assertEquals(4, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = (double) 5;
      doubleArray0[1] = (double) 4;
      doubleArray0[1] = (double) 5;
      doubleArray0[3] = (double) 4;
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 5;
      intArray0[3] = 5;
      intArray0[4] = 4;
      intArray0[5] = 5;
      CompressedVector compressedVector1 = new CompressedVector(4, 5, doubleArray0, intArray0);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(4, compressedVector1.length());
      assertEquals(1.25, compressedVector1.density(), 0.01);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertArrayEquals(new double[] {0.0, 5.0, 0.0, 4.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {4, 5, 0, 5, 4, 5}, intArray0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(5, vectorFunction0);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(4, compressedVector1.length());
      assertEquals(1.25, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {0.0, 5.0, 0.0, 4.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {4, 5, 0, 5, 4, 5}, intArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4);
      assertEquals(4, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 4;
      doubleArray0[1] = (double) 5;
      doubleArray0[3] = (double) 4;
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[3] = 5;
      intArray0[4] = 4;
      intArray0[5] = 5;
      CompressedVector compressedVector1 = new CompressedVector(4, 5, doubleArray0, intArray0);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(1.25, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.length());
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertArrayEquals(new double[] {5.0, 5.0, 0.0, 4.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {4, 0, 0, 5, 4, 5}, intArray0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(5.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(0, vectorFunction0);
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(1.25, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {5.0, 5.0, 5.0, 4.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {4, 0, 0, 5, 4, 5}, intArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4);
      assertEquals(4, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 4;
      doubleArray0[1] = (double) 5;
      doubleArray0[3] = (double) 4;
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[2] = 5;
      intArray0[4] = 4;
      CompressedVector compressedVector1 = new CompressedVector(4, 5, doubleArray0, intArray0);
      assertEquals(4, compressedVector1.length());
      assertEquals(5, compressedVector1.cardinality());
      assertEquals(1.25, compressedVector1.density(), 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertArrayEquals(new double[] {5.0, 5.0, 0.0, 4.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {4, 0, 5, 0, 4, 0}, intArray0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(5.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector1.updateAt(5, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-954.54408)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-370), vectorFunction0);
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements((-744), (-177));
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2009);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2009, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      Vector vector0 = Vector.unit(1372);
      assertEquals(1372, vector0.length());
      assertNotNull(vector0);
      
      compressedVector0.set(16, (-278.64983465364145));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2009, compressedVector0.length());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      
      compressedVector0.swapElements(4, 16);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2009, compressedVector0.length());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(37, 4);
      assertEquals(37, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      double double0 = compressedVector0.product();
      assertEquals(37, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = compressedVector0.getOrElse(4, 0.0);
      assertEquals(37, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      Integer integer0 = new Integer((-693));
      assertNotNull(integer0);
      assertEquals((-693), (int)integer0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      assertNotNull(ooPlaceInnerProduct0);
      
      CompressedVector compressedVector0 = CompressedVector.zero(1409);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1409, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(17);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1409, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(17, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1151);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(1151, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(2381.62103509459);
      assertEquals(1151, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1151, compressedVector0.length());
      
      int int0 = 45;
      double double0 = compressedVector0.getOrElse(45, 907.2408183837);
      assertEquals(1151, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1151, compressedVector0.length());
      assertEquals(2381.62103509459, double0, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(9, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-691);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {(-691.0)}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertArrayEquals(new double[] {(-691.0)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength((-691));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -691
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2009, 2009);
      assertEquals(2009, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spliterator<Float> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(spliterator0);
      
      Vector vector0 = Vector.unit(1409);
      assertEquals(1409, vector0.length());
      assertNotNull(vector0);
      
      compressedVector0.set(1409, 2009);
      assertEquals(2009, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(2009, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(2009, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertNotNull(byteArray0);
      
      boolean boolean0 = compressedVector0.nonZeroAt(1409);
      assertEquals(2009, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertTrue(boolean0);
      
      double double0 = compressedVector0.getOrElse(0, (-1993.60577943));
      assertEquals(2009, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals((-1993.60577943), double0, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.set(2009, (-1993.60577943));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2009' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.iterator();
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(vectorIterator0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-90), vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2009);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Vector vector0 = Vector.unit(1409);
      assertEquals(1409, vector0.length());
      assertNotNull(vector0);
      
      compressedVector0.set(16, 1409);
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Vector vector1 = Vector.unit(17);
      assertEquals(17, vector1.length());
      assertNotSame(vector1, vector0);
      assertFalse(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      
      compressedVector0.set(16, 0.0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      compressedVector0.swapElements(949, (-11));
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements(0, 0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) 4;
      doubleArray0[1] = (double) 5;
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = 16;
      intArray0[5] = 16;
      CompressedVector compressedVector1 = new CompressedVector(16, 5, doubleArray0, intArray0);
      assertEquals(16, compressedVector1.length());
      assertEquals(0.3125, compressedVector1.density(), 0.01);
      assertEquals(5, compressedVector1.cardinality());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertArrayEquals(new double[] {16.0, 5.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {4, 5, 5, 5, 16, 16}, intArray0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(16, vectorFunction0);
      assertEquals(0.25, compressedVector1.density(), 0.01);
      assertEquals(4, compressedVector1.cardinality());
      assertEquals(16, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {16.0, 5.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {4, 5, 5, 5, 16, 16}, intArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)compressedVector0.toColumnMatrix();
      assertEquals(0.25, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(1, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(4, cCSMatrix0.rows());
      assertEquals(0.25, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-4039.925210537083)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1975), vectorFunction0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      compressedVector0.setAll(1.0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.length());
      assertEquals(4, compressedVector0.cardinality());
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[5] = (double) 1254;
      doubleArray0[3] = (double) 1254;
      doubleArray0[4] = (double) 1254;
      doubleArray0[5] = (double) 1254;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = 2535.74;
      doubleArray0[8] = (double) 1;
      int[] intArray0 = new int[6];
      intArray0[0] = 1254;
      intArray0[3] = 2284;
      intArray0[4] = (-51);
      intArray0[5] = 1;
      CompressedVector compressedVector0 = new CompressedVector(1254, 1, doubleArray0, intArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1254, compressedVector0.length());
      assertEquals(7.974481658692185E-4, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 1254.0, 1254.0, 1254.0, 1.0, 2535.74, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1254, 0, 0, 2284, (-51), 1}, intArray0);
      
      compressedVector0.set(1, (-570.955898));
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1254, compressedVector0.length());
      assertEquals(0.001594896331738437, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-570.955898), 1.0, 0.0, 1254.0, 1254.0, 1254.0, 1.0, 2535.74, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1, 1254, 0, 2284, (-51), 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 48;
      CompressedVector compressedVector0 = new CompressedVector(2009);
      assertEquals(2009, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      Float float0 = new Float((float) 2009);
      assertNotNull(float0);
      assertEquals(2009.0F, (float)float0, 0.01F);
      
      Integer integer0 = new Integer(2009);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(2009, (int)integer0);
      
      compressedVector0.set(1389, 1389);
      assertEquals(2009, compressedVector0.length());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements(1389, 2009);
      assertEquals(2009, compressedVector0.length());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2009);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      Vector vector0 = Vector.unit(9);
      assertEquals(9, vector0.length());
      assertNotNull(vector0);
      
      compressedVector0.set(10, (-166.02540166218742));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      
      compressedVector0.swapElements(4, 10);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      compressedVector0.swapElements(1409, 4);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      
      Vector vector1 = Vector.unit(9);
      assertEquals(9, vector1.length());
      assertNotSame(vector1, vector0);
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2009);
      assertEquals(2009, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      Vector vector0 = Vector.unit(17);
      assertEquals(17, vector0.length());
      assertNotNull(vector0);
      
      compressedVector0.set(1409, 1409);
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      assertNotNull(ooPlaceInnerProduct0);
      
      Double double0 = ooPlaceInnerProduct0.apply((SparseVector) compressedVector0, (SparseVector) compressedVector0);
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(double0);
      assertEquals(1985281.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 17;
      CompressedVector compressedVector0 = new CompressedVector(2009);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      Float float0 = new Float((float) 2009);
      assertNotNull(float0);
      assertEquals(2009.0F, (float)float0, 0.01F);
      
      float float1 = new Integer(2009);
      assertEquals(2009, float1, 0.01F);
      
      compressedVector0.set(1389, 1389);
      assertEquals(2009, compressedVector0.length());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.swapElements(1389, 875);
      assertEquals(2009, compressedVector0.length());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 4;
      CompressedVector compressedVector0 = CompressedVector.zero(2009);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Float float0 = new Float((float) 4);
      assertNotNull(float0);
      assertEquals(4.0F, (float)float0, 0.01F);
      
      boolean boolean0 = linkedList0.add(float0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      compressedVector0.set(1409, 1409);
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      
      compressedVector0.set(3, 3);
      assertEquals(9.955201592832255E-4, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      
      compressedVector0.swapElements(3, 1409);
      assertEquals(9.955201592832255E-4, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      
      double double0 = compressedVector0.euclideanNorm();
      assertEquals(9.955201592832255E-4, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1409.003193750816, double0, 0.01);
      
      compressedVector0.setAll(2174.344455230908);
      assertEquals(2009, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = (-2);
      int int1 = 2009;
      CompressedVector compressedVector0 = CompressedVector.zero(2009);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Float float0 = new Float((double) (-2));
      assertNotNull(float0);
      assertEquals((-2.0F), (float)float0, 0.01F);
      
      boolean boolean0 = linkedList0.add(float0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Spliterator<Float> spliterator0 = linkedList0.spliterator();
      assertEquals(1, linkedList0.size());
      assertNotNull(spliterator0);
      
      int int2 = 16;
      compressedVector0.setAll(390.14);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.cardinality());
      assertEquals(2009, compressedVector0.length());
      
      compressedVector0.set(16, 1434.9447);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2009, compressedVector0.cardinality());
      assertEquals(2009, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-2), 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 13);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0.07692307692307693, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(13, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)13, (double)2, (-1046.3141215846), 0.0, (double)2).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.update(vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(2009);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2009, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Spliterator<Float> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(spliterator0);
      
      int int0 = 1409;
      Vector vector0 = Vector.unit(1409);
      assertEquals(1409, vector0.length());
      assertNotNull(vector0);
      
      compressedVector0.set(28, 1434.9447);
      assertEquals(2009, compressedVector0.length());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      int int1 = 16;
      compressedVector0.swapElements(4, 16);
      assertEquals(2009, compressedVector0.length());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      compressedVector0.swapElements(949, 4);
      assertEquals(2009, compressedVector0.length());
      assertEquals(4.977600796416127E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Vector vector1 = Vector.unit(1409);
      assertEquals(1409, vector1.length());
      assertNotSame(vector1, vector0);
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      assertArrayEquals(new double[] {4.0}, doubleArray0, 0.01);
      
      double double0 = new Float((double) 2009);
      assertEquals(2009.0F, double0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.update(vectorFunction0);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {4.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-418.009953255);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertNotNull(byteArray0);
      
      int int0 = (-2537);
      boolean boolean0 = compressedVector0.nonZeroAt((-2537));
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertFalse(boolean0);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(14, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      double double0 = compressedVector1.norm();
      assertEquals(0.07142857142857142, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(14, compressedVector0.length());
      assertEquals(0.07142857142857142, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(14, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertEquals(418.009953255, double0, 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("xaymCJ/h-H$jV(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }
}
