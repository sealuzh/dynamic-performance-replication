/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 18:57:50 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Integer>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, Object>((Map<HashMap<Integer, Integer>, Map<Object, Object>>) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      doubleKeyMap0.put(hashMap0, (Object) hashMap0, (Object) hashMap0);
      Object object0 = doubleKeyMap0.get(hashMap0, (Object) "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Map<HashMap<Object, Object>, String>, Map<HashMap<Map<HashMap<Object, Object>, String>, Integer>, String>> hashMap0 = new HashMap<Map<HashMap<Object, Object>, String>, Map<HashMap<Map<HashMap<Object, Object>, String>, Integer>, String>>();
      HashMap<HashMap<Object, Object>, String> hashMap1 = new HashMap<HashMap<Object, Object>, String>();
      HashMap<HashMap<Map<HashMap<Object, Object>, String>, Integer>, String> hashMap2 = new HashMap<HashMap<Map<HashMap<Object, Object>, String>, Integer>, String>();
      hashMap0.put(hashMap1, hashMap2);
      DoubleKeyMap<Map<HashMap<Object, Object>, String>, HashMap<Map<HashMap<Object, Object>, String>, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Object, Object>, String>, HashMap<Map<HashMap<Object, Object>, String>, Integer>, String>(hashMap0);
      Map<HashMap<Map<HashMap<Object, Object>, String>, Integer>, String> map0 = doubleKeyMap0.remove((Map<HashMap<Object, Object>, String>) hashMap1);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Map<HashMap<Object, Object>, String>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Map<HashMap<Object, Object>, String>>, Object, String>();
      Map<Map<HashMap<Object, Object>, String>, Map<Object, HashMap<Map<HashMap<Object, Object>, String>, Object>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<HashMap<Object, Object>, String>, Object, HashMap<Map<HashMap<Object, Object>, String>, Object>> doubleKeyMap1 = new DoubleKeyMap<Map<HashMap<Object, Object>, String>, Object, HashMap<Map<HashMap<Object, Object>, String>, Object>>(map0);
      HashMap<HashMap<Map<HashMap<Object, Object>, String>, Integer>, Map<Integer, String>> hashMap0 = new HashMap<HashMap<Map<HashMap<Object, Object>, String>, Integer>, Map<Integer, String>>();
      DoubleKeyMap<HashMap<Map<HashMap<Object, Object>, String>, Integer>, Integer, String> doubleKeyMap2 = new DoubleKeyMap<HashMap<Map<HashMap<Object, Object>, String>, Integer>, Integer, String>(hashMap0);
      Map<HashMap<Object, Object>, String> map1 = doubleKeyMap2.newMap();
      Map<HashMap<Object, HashMap<String, Map>>, HashMap<Object, Map<HashMap<Object, String>, Map<Integer, Map<Integer, Object>>>>> map2 = doubleKeyMap2.newMap();
      HashMap<Map<HashMap<Object, Object>, String>, Object> hashMap1 = new HashMap<Map<HashMap<Object, Object>, String>, Object>();
      doubleKeyMap1.put(map1, (Object) map2, hashMap1);
      HashMap<HashMap<Object, Object>, String> hashMap2 = new HashMap<HashMap<Object, Object>, String>();
      Map<Object, HashMap<Map<HashMap<Object, Object>, String>, Object>> map3 = doubleKeyMap1.remove((Map<HashMap<Object, Object>, String>) hashMap2);
      assertEquals(1, map3.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Map<Integer, Integer>> hashMap0 = new HashMap<String, Map<Integer, Integer>>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      hashMap0.put("", hashMap1);
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(hashMap0);
      Map<Integer, Integer> map0 = doubleKeyMap0.get("");
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1008);
      DoubleKeyMap<String, Map<HashMap<Object, Object>, String>, Object> doubleKeyMap0 = new DoubleKeyMap<String, Map<HashMap<Object, Object>, String>, Object>();
      Map<HashMap<Map<HashMap<Object, Object>, String>, Integer>, Map<Integer, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<HashMap<Map<HashMap<Object, Object>, String>, Integer>, Integer, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Map<HashMap<Object, Object>, String>, Integer>, Integer, String>(map0);
      Map<HashMap<Object, Object>, String> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<Map<HashMap<Object, Object>, String>, Map<HashMap<Object, Object>, String>, Integer> doubleKeyMap2 = new DoubleKeyMap<Map<HashMap<Object, Object>, String>, Map<HashMap<Object, Object>, String>, Integer>();
      doubleKeyMap2.put(map1, map1, integer0);
      Map<Map<HashMap<Object, Object>, String>, Integer> map2 = doubleKeyMap2.get(map1);
      assertEquals(1, map2.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<Object, Object>, String>, Object, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Object, Object>, String>, Object, HashMap<Integer, Object>>();
      Class<Map> class0 = Map.class;
      HashMap<HashMap<Object, String>, Map<Object, Object>> hashMap0 = new HashMap<HashMap<Object, String>, Map<Object, Object>>();
      DoubleKeyMap<HashMap<Object, String>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, String>, Object, Object>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Object object0 = doubleKeyMap1.remove(hashMap1, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap0.remove((Integer) null, "$v?Dc'Tk.D a");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, Map<Integer, HashMap<String, Map<HashMap<Object, Object>, String>>>> hashMap0 = new HashMap<Object, Map<Integer, HashMap<String, Map<HashMap<Object, Object>, String>>>>();
      DoubleKeyMap<Object, Integer, HashMap<String, Map<HashMap<Object, Object>, String>>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<String, Map<HashMap<Object, Object>, String>>>(hashMap0);
      HashMap<Object, Map<Map<HashMap<Object, Object>, String>, Integer>> hashMap1 = new HashMap<Object, Map<Map<HashMap<Object, Object>, String>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<HashMap<Object, Object>, String>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Map<HashMap<Object, Object>, String>, Integer>(hashMap1, class0);
      HashMap<HashMap<Object, Object>, String> hashMap2 = new HashMap<HashMap<Object, Object>, String>();
      Integer integer0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Map<HashMap<Object, Object>, String>) hashMap2);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Map<Integer, Integer>> hashMap0 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>(hashMap0);
      Object object0 = new Object();
      Map<Integer, Integer> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, Integer>();
      Integer integer0 = doubleKeyMap0.get((HashMap<String, Object>) null, "");
      Class<Map> class0 = Map.class;
      HashMap<HashMap<Object, String>, Map<Integer, String>> hashMap0 = new HashMap<HashMap<Object, String>, Map<Integer, String>>();
      DoubleKeyMap<HashMap<Object, String>, Integer, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, String>, Integer, String>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(hashMap1, integer0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<HashMap<Integer, Integer>, Map<Object, Object>> hashMap1 = new HashMap<HashMap<Integer, Integer>, Map<Object, Object>>();
      DoubleKeyMap<HashMap<Integer, Integer>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, Object>(hashMap1);
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>();
      Integer integer0 = new Integer((-687));
      Object object0 = doubleKeyMap1.put(integer0, (Object) hashMap0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<Object, Object>, String>, HashMap<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Object, Object>, String>, HashMap<String, Object>, Object>();
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>();
      Map<String, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>(map0);
      Object object0 = doubleKeyMap2.put((String) null, (Object) doubleKeyMap0, (Object) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<HashMap<Map<HashMap<Object, Object>, String>, String>, Map<String, HashMap<Integer, Integer>>> hashMap0 = new HashMap<HashMap<Map<HashMap<Object, Object>, String>, String>, Map<String, HashMap<Integer, Integer>>>();
      DoubleKeyMap<HashMap<Map<HashMap<Object, Object>, String>, String>, String, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<HashMap<Object, Object>, String>, String>, String, HashMap<Integer, Integer>>(hashMap0);
      HashMap<Object, Map<Object, String>> hashMap1 = new HashMap<Object, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(hashMap1, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) doubleKeyMap0, (Object) null, "='doTVY+ T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>(hashMap0);
      HashMap<HashMap<Integer, Integer>, Map<Object, Object>> hashMap1 = new HashMap<HashMap<Integer, Integer>, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Integer, Integer>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, Object>(hashMap1, class0);
      Object object0 = doubleKeyMap1.get((HashMap<Integer, Integer>) null, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>(hashMap0, class0);
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      String string0 = doubleKeyMap0.get(object0, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Map<HashMap<Object, Object>, Object>> hashMap0 = new HashMap<Integer, Map<HashMap<Object, Object>, Object>>();
      DoubleKeyMap<Integer, HashMap<Object, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Object>, Object>(hashMap0);
      Map<HashMap<Object, Object>, Object> map0 = doubleKeyMap0.get((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, Map<HashMap<Object, Object>, HashMap<Map<HashMap<Object, Object>, String>, Object>>> hashMap0 = new HashMap<Integer, Map<HashMap<Object, Object>, HashMap<Map<HashMap<Object, Object>, String>, Object>>>();
      DoubleKeyMap<Integer, HashMap<Object, Object>, HashMap<Map<HashMap<Object, Object>, String>, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Object>, HashMap<Map<HashMap<Object, Object>, String>, Object>>(hashMap0);
      DoubleKeyMap<Map<Object, Map<Object, Map<HashMap<Object, Object>, String>>>, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Map<Object, Map<HashMap<Object, Object>, String>>>, Integer, String>();
      Map<Object, Map<Object, Map<HashMap<Object, Object>, String>>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Object, Map<HashMap<Object, Object>, String>> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Map<HashMap<Object, Object>, String>>(map0);
      Map<Object, Map<HashMap<Object, Object>, String>> map1 = doubleKeyMap2.get((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, String>((Map<String, Map<Object, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Map<HashMap<Object, Object>, String>>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Map<HashMap<Object, Object>, String>>, Object, String>();
      Map<Map<HashMap<Object, Object>, String>, Map<Object, HashMap<Map<HashMap<Object, Object>, String>, Object>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<HashMap<Object, Object>, String>, Object, HashMap<Map<HashMap<Object, Object>, String>, Object>> doubleKeyMap1 = new DoubleKeyMap<Map<HashMap<Object, Object>, String>, Object, HashMap<Map<HashMap<Object, Object>, String>, Object>>(map0);
      Map<Object, HashMap<Map<HashMap<Object, Object>, String>, Object>> map1 = doubleKeyMap1.remove((Map<HashMap<Object, Object>, String>) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      DoubleKeyMap<Object, Map<HashMap<Object, Object>, String>, String> doubleKeyMap0 = new DoubleKeyMap<Object, Map<HashMap<Object, Object>, String>, String>();
      hashMap1.put("", integer0);
      Map<Integer, Map<HashMap<String, Integer>, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, HashMap<String, Integer>, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<String, Integer>, Object>(map0);
      DoubleKeyMap<HashMap<Map<HashMap<Object, Object>, String>, Integer>, Integer, String> doubleKeyMap2 = new DoubleKeyMap<HashMap<Map<HashMap<Object, Object>, String>, Integer>, Integer, String>();
      Map<String, Map<Map<String, Map<HashMap<Object, String>, Integer>>, Integer>> map1 = doubleKeyMap2.newMap();
      doubleKeyMap1.put(integer0, hashMap0, (Object) map1);
      doubleKeyMap1.remove(integer0, hashMap1);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Object object0 = doubleKeyMap0.remove(integer0, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Integer, HashMap<String, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, Integer>, Object>();
      DoubleKeyMap<HashMap<Map<HashMap<Object, Object>, String>, Integer>, Integer, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Map<HashMap<Object, Object>, String>, Integer>, Integer, String>();
      Map<String, Map<Map<String, Map<HashMap<Object, String>, Integer>>, Integer>> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put(integer0, hashMap0, (Object) map0);
      HashMap hashMap1 = (HashMap)doubleKeyMap0.put(integer0, hashMap0, (Object) hashMap0);
      assertTrue(hashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Integer>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, Object>((Map<HashMap<Integer, Integer>, Map<Object, Object>>) null);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      doubleKeyMap0.put(hashMap0, (Object) hashMap0, (Object) hashMap0);
      HashMap hashMap1 = (HashMap)doubleKeyMap0.get(hashMap0, (Object) hashMap0);
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, String>, Integer, HashMap<Integer, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Integer, HashMap<Integer, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Object, Map<HashMap<Object, Object>, String>, String> doubleKeyMap0 = new DoubleKeyMap<Object, Map<HashMap<Object, Object>, String>, String>();
      Map<Integer, Map<HashMap<String, Integer>, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, HashMap<String, Integer>, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<String, Integer>, Object>(map0);
      DoubleKeyMap<HashMap<Map<HashMap<Object, Object>, String>, Integer>, Integer, String> doubleKeyMap2 = new DoubleKeyMap<HashMap<Map<HashMap<Object, Object>, String>, Integer>, Integer, String>();
      Map<String, Map<Map<String, Map<HashMap<Object, String>, Integer>>, Integer>> map1 = doubleKeyMap2.newMap();
      doubleKeyMap1.put(integer0, hashMap0, (Object) map1);
      assertEquals(1, map0.size());
      
      doubleKeyMap1.remove(integer0, hashMap0);
      assertTrue(map0.isEmpty());
  }
}
