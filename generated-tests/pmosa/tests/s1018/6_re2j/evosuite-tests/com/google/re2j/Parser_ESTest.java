/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:49:38 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Parser;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        Parser.parse("AQz)aya", 8128);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Parser parser0 = new Parser("", 0);
      Regexp[] regexpArray0 = new Regexp[6];
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("U*cuXmM+", 92);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = Parser.parse("", 124);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp4;
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp5 = new Regexp(regexp_Op1);
      Regexp regexp6 = new Regexp(regexp5);
      regexpArray0[5] = regexp6;
      regexp6.flags = 0;
      regexp2.flags = 1534;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 120, (-2343));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        Parser.parse("?,xpK(3-)df66C", 2029);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Parser.parse("?", 56);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "\\P";
      int int0 = (-451);
      Parser.parse("P", (-451));
      try { 
        Parser.parse(string0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\P`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\t", 16);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Parser.parse("s(?P<", 372);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid named capture: `(?P<`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 1496;
      try { 
        Parser.parse("/(", 1496);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `/(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = (-3771);
      try { 
        Parser.parse("(a", (-3771));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(a`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Parser.parse("H(?", 1089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Regexp regexp0 = Parser.parse("1\"<lZ8,:y/", 65);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 0;
      Parser parser0 = new Parser("U> <P$L!Mr9X.Aa", 0);
      Regexp regexp0 = Parser.parse("U> <P$L!Mr9X.Aa", 0);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      int int1 = (-537);
      int int2 = (-214);
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-537), (-214));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -537
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "<yp<SI2^Zd<4|+";
      try { 
        Parser.parse("<yp<SI2^Zd<4|+", 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `+`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":^", 16);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Parser.parse("|?:niX5GZF,W9mn5H", 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Regexp regexp0 = Parser.parse("D", 2029);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        Parser.parse("[", 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        Parser.parse("[\u0005!s>p|>(M=$? ", 2072);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[\u0005!s>p|>(M=$? `
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[S]", 1549);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        Parser.parse("[:-(@Ke", 1621);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid character class range: `:-(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Parser parser0 = new Parser("p?Re\"Ox7TV#om9Bs", 120457);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("p?Re\"Ox7TV#om9Bs", 120457);
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp1);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp3);
      regexpArray0[4] = regexp4;
      Regexp regexp5 = new Regexp(regexp1);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = Parser.parse("", 120457);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = new Regexp(regexp_Op0);
      regexpArray0[7] = regexp7;
      Regexp regexp8 = Parser.parse("", 120457);
      regexpArray0[8] = regexp8;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 120457, 120457);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|", 1717);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("VDcql4l/||", 0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp0);
      regexpArray0[4] = regexp4;
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = new Regexp(regexp4);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = new Regexp(regexp4);
      regexpArray0[7] = regexp7;
      Regexp regexp8 = Parser.parse("VDcql4l/||", 0);
      regexpArray0[8] = regexp8;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 0, 0);
      assertNotSame(regexpArray0, regexpArray1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        Parser.parse("(", 2537);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Regexp regexp0 = Parser.parse("1|", 3873);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Parser parser0 = new Parser(":|", 0);
      Regexp regexp0 = Parser.parse(":|", 0);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 64;
      Parser parser0 = new Parser("", 64);
      Parser.parse("P", 64);
      Regexp[] regexpArray0 = new Regexp[0];
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, int0, int0);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("A{$>nW:vMu,YV", 0);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp2;
      int int0 = 4831;
      Regexp regexp3 = Parser.parse("A{$>nW:vMu,YV", 4831);
      regexpArray0[3] = regexp3;
      regexp2.cap = 7097;
      Regexp.Op regexp_Op2 = Regexp.Op.ANY_CHAR;
      Regexp regexp4 = new Regexp(regexp_Op2);
      Regexp regexp5 = new Regexp(regexp4);
      regexpArray0[4] = regexp5;
      Regexp.Op regexp_Op3 = Regexp.Op.CAPTURE;
      Regexp regexp6 = new Regexp(regexp_Op3);
      regexpArray0[5] = regexp6;
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        Parser.parse("{(", 2537);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `{(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{", 8129);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Parser parser0 = new Parser("{?[irw`$'", 55296);
      Regexp regexp0 = Parser.parse("{M", (-2403));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "[:upper:]";
      int int0 = 329;
      Regexp regexp0 = Parser.parse("[:upper:]", 329);
      regexp0.reinit();
      Regexp regexp1 = Parser.parse("[:upper:]", 329);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      regexp1.name = "[:upper:]";
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      int int1 = 57;
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      regexp1.runes = intArray0;
      regexp1.equals(regexp0.runes);
      regexp1.op = regexp_Op0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 57, 329);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 57
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        Parser.parse(")Uz!^N8}g7Y#;", (-1620));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Regexp regexp0 = Parser.parse("2Ex*}?nCm", 0);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "VDcql4l/||";
      int int0 = 93;
      Regexp regexp0 = Parser.parse("VDcql4l/||", 93);
      Regexp regexp1 = new Regexp(regexp0);
      Parser.parse("7xRp%", 57);
      Parser.parse("7xRp%", (-2458));
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp regexp3 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        Parser.parse((String) null, 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Parser.parse("(?", 120778);
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Parser.parse("(?", 120778);
      Regexp[] regexpArray0 = new Regexp[0];
      Parser.subarray(regexpArray0, 120629, 120629);
      try { 
        Parser.parse("(?", 120629);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Parser parser0 = new Parser("Q|", 1024);
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("Q|", 1024);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[2] = regexp3;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp1);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = new Regexp(regexp_Op0);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse(":t$M]Kuu;A&f-~yMc", 3426);
      regexpArray0[6] = regexp7;
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      Regexp regexp8 = new Regexp(regexp_Op1);
      regexpArray0[7] = regexp8;
      Regexp regexp9 = new Regexp(regexp_Op1);
      regexpArray0[8] = regexp9;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 3426, (-466));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Parser.parse("(?", 120778);
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Parser.parse("(?", 120778);
      Regexp regexp1 = Parser.parse("_CP8&<>a@#51U;", (-51));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Parser parser0 = new Parser("Soft_Dotted", 2160);
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("pl,>uYjjHz", 2160);
      regexpArray0[1] = regexp2;
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp3;
      int int0 = 1;
      int int1 = 91;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Parser parser0 = new Parser("8U43f.tb4E!e{y2@[", 120628);
      try { 
        Parser.parse("8U43f.tb4E!e{y2@[", 120628);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Regexp regexp0 = Parser.parse("A*P\u0001", 0);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "^dSA\\";
      Parser.parse("^dSA", 85);
      int int0 = 3274;
      String string1 = "\\C";
      int int1 = 3088;
      try { 
        Parser.parse(string1, int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid escape sequence: `\\C`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Regexp regexp0 = Parser.parse(":|u", 0);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Parser parser0 = new Parser(":|u", 0);
      Regexp[] regexpArray0 = new Regexp[7];
      Regexp regexp0 = Parser.parse("com.google.re2j.Parser$Stack", 102);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("com.google.re2j.Parser$Stack", 0);
      regexpArray0[1] = regexp2;
      Regexp regexp3 = Parser.parse(":|u", 801);
      regexpArray0[2] = regexp3;
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp4 = new Regexp(regexp_Op0);
      regexpArray0[3] = regexp4;
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp5;
      Regexp regexp6 = Parser.parse("s2XjUHkyxI\"m2", 801);
      regexpArray0[5] = regexp6;
      Regexp regexp7 = Parser.parse(":|u", 801);
      assertFalse(regexp7.equals((Object)regexp6));
      
      regexpArray0[6] = regexp7;
      Parser.subarray(regexpArray0, 120488, 120488);
      Regexp regexp8 = Parser.parse("s2XjUHkyxI\"m2", 2546);
      assertFalse(regexp8.equals((Object)regexp6));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Regexp regexp0 = Parser.parse("|1", 937);
      Regexp[] regexpArray0 = new Regexp[6];
      regexpArray0[0] = regexp0;
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op0);
      assertFalse(regexp1.equals((Object)regexp0));
      
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 937, 937);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        Parser.parse("!89cu0<=b(F+o", 77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `!89cu0<=b(F+o`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int int0 = 1553;
      try { 
        Parser.parse("P\"tZA\"_N+[_Wv", 1553);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[_Wv`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        Parser.parse("[", 2244);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        Parser.parse("pw NSt^A\"G[", 452);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Regexp regexp0 = Parser.parse("9\u0001j", 41);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("[:\u0000-x{10FFFF}]", 2404);
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2404, 3150);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2404
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Regexp regexp0 = Parser.parse("J\"Svvo!>B\"p_y\u0015N@", (-2571));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Regexp regexp0 = Parser.parse(";%.;j{", 2713);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?:)", 1149);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Regexp regexp0 = Parser.parse("~8(u|)B%IK", 2072);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Parser parser0 = new Parser("Soft_Dotted", 2160);
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      Regexp regexp2 = Parser.parse("fe]W;+|mODO{b8>Dq$", 2072);
      assertFalse(regexp2.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Regexp regexp0 = Parser.parse("T|^L", 3420);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        Parser.parse("y|Qv)", 1132);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Parser parser0 = new Parser("[:]:R", (-2259));
      Regexp[] regexpArray0 = new Regexp[3];
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("[:]:R", (-2259));
      regexpArray0[1] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[2] = regexp2;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 99, 720);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 99
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[-]", 124);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Regexp regexp0 = Parser.parse("d", (-3507));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Parser parser0 = new Parser(":|u", 0);
      Regexp[] regexpArray0 = new Regexp[7];
      Parser.parse(":|u", 0);
      Regexp[] regexpArray1 = Regexp.EMPTY_SUBS;
      assertFalse(regexpArray1.equals((Object)regexpArray0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Regexp regexp0 = Parser.parse("]|^I&;.1'U^U3D<", (-419));
      Parser parser0 = new Parser("{]\"DG/`}kT5/LlkWA", 2423);
      Regexp regexp1 = Parser.parse("]|^I&;.1'U^U3D<", 41);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = (-2259);
      Parser parser0 = new Parser("[:]:R", (-2259));
      try { 
        Parser.parse("(?(?", 1400);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?(`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Regexp regexp0 = Parser.parse("com.google.re2j.Parser$Stack", 102);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = Parser.parse("cp1\u0006:", (-236));
      assertFalse(regexp2.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Regexp regexp0 = Parser.parse("P", 968);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Parser parser0 = new Parser("[:]:R", (-2259));
      Regexp regexp0 = Parser.parse("[:]:R", (-51));
      Parser.parse("|CrOaa`XwzY*d&\"", 1240);
      Regexp regexp1 = Parser.parse("Jo4N9T4V-r}59uZoLx", (-2259));
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Regexp regexp0 = Parser.parse("4AE+|l", 2029);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Regexp regexp0 = Parser.parse("1", 151);
      Regexp regexp1 = Parser.parse("C", 2529);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      int int0 = (-2904);
      int int1 = 46;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2904
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 3616;
      try { 
        Parser.parse("{1/y`)Lw9w}W&", 3616);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Regexp regexp0 = Parser.parse("{2<", 56);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Parser.parse("]|^I&;.1'U^U3D<", (-419));
      Parser.parse("(?P<", 4667);
      Parser.parse("]|^I&;.1'U^U3D<", 1008);
      Parser parser0 = new Parser("(?P<", 80);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Parser.parse("", 8);
      Parser parser0 = new Parser("", (-1760));
      try { 
        Parser.parse("{$@L5qYXsdXi[-(@Ke", 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-(@Ke`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[-]", (-1355));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[2];
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("D", 92);
      regexpArray0[1] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 92, 11008);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 92
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Regexp regexp0 = Parser.parse("x", 44);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "[^\\x00-\\x{10FFFF]";
      Parser.parse("[^x00-x{10FFFF]", 17);
      int int0 = 1436;
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x00-x{10FFFF}", 76);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Regexp regexp0 = Parser.parse("wx.", 53);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Regexp regexp0 = Parser.parse("^x0-x{10FFF}", 85);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "\\x{";
      int int0 = 3919;
      Parser parser0 = new Parser("x{", 3919);
      Parser.parse("x{", 40);
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp0 = null;
      try {
        regexp0 = new Regexp(regexpArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 17);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = (-15);
      try { 
        Parser.parse("{$@L5qYXsdXi[-(@Ke", (-15));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-(@Ke`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Regexp regexp0 = Parser.parse("u\tmN", 3828);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        Parser.parse("[$59Ws-", (-3596));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[$59Ws-`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[C]ks", 2029);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Regexp regexp0 = Parser.parse("Pattern_White_Space", 85);
      Regexp regexp1 = Parser.parse("\nJ", 85);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[6];
      String string0 = " d(:\\b6!,";
      try { 
        Parser.parse(" d(:\b6!,", 1000);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): ` d(:\b6!,`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Parser parser0 = new Parser("H[%c3r$Tw,p103,-zS", (-5414));
      try { 
        Parser.parse("H[%c3r$Tw,p103,-zS", 2897);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[%c3r$Tw,p103,-zS`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        Parser.parse("(?UPQ", 3308);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?UP`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Parser parser0 = new Parser("\r", 901);
      Regexp regexp0 = Parser.parse("\r", 901);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Regexp[] regexpArray0 = new Regexp[9];
      Regexp regexp0 = Parser.parse("invalid named capture", 8);
      regexpArray0[0] = regexp0;
      Regexp regexp1 = Parser.parse("invalid named capture", 8);
      regexpArray0[1] = regexp1;
      Regexp regexp2 = Parser.parse("s!ebr7k`@|p\f_-v", 8);
      regexpArray0[2] = regexp2;
      Regexp regexp3 = new Regexp(regexp1);
      regexpArray0[3] = regexp3;
      Regexp regexp4 = new Regexp(regexp3);
      regexpArray0[4] = regexp4;
      int[] intArray0 = new int[8];
      intArray0[0] = 8;
      intArray0[1] = 8;
      intArray0[2] = 8;
      intArray0[3] = 8;
      intArray0[4] = 8;
      intArray0[5] = 8;
      intArray0[6] = 8;
      intArray0[7] = 8;
      regexp0.runes = intArray0;
      Regexp regexp5 = new Regexp(regexp0);
      regexpArray0[5] = regexp5;
      Regexp regexp6 = Parser.parse("Cuneiform", 8);
      regexpArray0[6] = regexp6;
      Regexp regexp7 = new Regexp(regexp0);
      regexpArray0[7] = regexp7;
      Regexp regexp8 = new Regexp(regexp4);
      regexpArray0[8] = regexp8;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 115, 8);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Regexp regexp0 = Parser.parse("\u0007C", (-1588));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{10FFF}]", 257);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[:x00-x{10FFFF}]", 105);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[^x00-x{10FFFF}]", 12);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Regexp regexp0 = Parser.parse("jxI4qx-cL6Z7vJWm_~", 2253);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Regexp regexp0 = Parser.parse("A", 3325);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Regexp regexp0 = Parser.parse("%Sz}r-{3}5:fvZc7MM", 36);
      Parser parser0 = new Parser("E_\"i", 1016);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, (-1106), 3645);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1106
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Regexp regexp0 = Parser.parse("%S}r-{3}fvZc7MM", 4081);
      Parser parser0 = new Parser("%S}r-{3}fvZc7MM", (-1143));
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Regexp regexp0 = Parser.parse(",:*FF$mh`\u0004c=", 52);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Regexp regexp0 = Parser.parse("B", 120);
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 124, 124);
      assertNotSame(regexpArray1, regexpArray0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        Parser.parse("(?i:", 973);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ): `(?i:`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Parser.parse("[:xK0-x{10FFFF}]", 105);
      String string0 = "\\p25N@";
      int int0 = 41;
      Parser parser0 = new Parser(string0, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Regexp regexp0 = Parser.parse("G8=uJ1rdP|g6T-i", 45);
      regexp0.toString();
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[7] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 45, 45);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Regexp regexp0 = Parser.parse("V}|v2", 1845);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[\u0000-x10FFFF}]", 60);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Regexp regexp0 = Parser.parse("z", 112);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Regexp regexp0 = Parser.parse("5ZJ{584DS", (-1700));
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Regexp regexp0 = Parser.parse("~[-S-]Fy", 425);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Regexp regexp0 = Parser.parse("[S-]", 40);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Regexp regexp0 = Parser.parse("zf;Q3|iP`{h", 118);
      Regexp regexp1 = Parser.parse("[:-S-]Fy", 40);
      assertFalse(regexp1.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?s:.)", (-1851));
      regexp0.min = (-87);
      Regexp regexp1 = Parser.parse("J29wK", 11726);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      regexpArray0[6] = regexp1;
      regexpArray0[7] = regexp1;
      // Undeclared exception!
      try { 
        Parser.subarray(regexpArray0, 2270, 11726);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2270
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pP", 2244);
      assertNotNull(regexp0);
      
      Parser parser0 = new Parser("EjzaiLD", 2244);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Regexp regexp0 = Parser.parse("pP", 3045);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      Regexp[] regexpArray1 = Parser.subarray(regexpArray0, 3045, 3045);
      assertFalse(regexpArray1.equals((Object)regexpArray0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Regexp regexp0 = Parser.parse("(?-s:.)", 124);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        Parser.parse("(?-Q:.)", (-166452516));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: invalid or unsupported Perl syntax: `(?-Q`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        Parser.parse("(?-s:*_", 4037);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `*`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Regexp regexp0 = Parser.parse("tw\u0003s^}", 1000);
      assertNotNull(regexp0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Parser parser0 = new Parser("(p", 58);
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexpArray0[0] = regexp0;
      String string0 = ":y|:8K&#]3DR&$)";
      int int0 = 5;
      try { 
        Parser.parse(":y|:8K&#]3DR&$)", 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }
}
