/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 23:50:24 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FocusTraversalPolicy;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelListener;
import java.awt.font.FontRenderContext;
import java.awt.geom.AffineTransform;
import java.awt.geom.Dimension2D;
import java.awt.image.IndexColorModel;
import java.beans.VetoableChangeListener;
import java.io.PrintStream;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import javax.help.HelpSet;
import javax.help.plaf.basic.BasicHelpUI;
import javax.swing.ActionMap;
import javax.swing.DebugGraphics;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeCellEditor;
import org.apache.batik.apps.svgbrowser.Application;
import org.apache.batik.apps.svgbrowser.JSVGViewerFrame;
import org.apache.batik.dom.GenericDocumentType;
import org.apache.batik.dom.svg12.SVG12DOMImplementation;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerJPEGEncoder;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFEncryptionParams;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.pdf.PDFResourceContext;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.wml.dom.WMLDocumentImpl;
import org.apache.xalan.templates.OutputProperties;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.PSVIDOMImplementationImpl;
import org.apache.xml.serializer.ToUnknownStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import plugins.map.MapDialog;
import sun.swing.PrintColorUIResource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMinimumSize((Dimension) null);
      jDayChooser0.repaint();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.getDay();
      JList<AWTKeyStroke> jList0 = new JList<AWTKeyStroke>();
      Color color0 = jList0.getSelectionBackground();
      jDayChooser0.setWeekdayForeground(color0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      Locale locale0 = Locale.PRC;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean0 = jDayChooser_DecoratorButton0.isBorderPainted();
      assertFalse(boolean0);
      
      jDayChooser0.updateUI();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMonth(42);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(31, int0);
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      jDayChooser0.printComponents(pDFDocumentGraphics2D0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 902, (-2932L), 29, 5146, 'i');
      KeyEvent.getExtendedKeyCodeForChar(42);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.setLocale(locale0);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      FocusEvent focusEvent0 = new FocusEvent(jList0, 151);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.hasExtensions();
      JComponent.setDefaultLocale(locale0);
      jDayChooser0.setYear(44);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.repaint(44, 44, 44, 44);
      jDayChooser0.setYearChooser(jYearChooser0);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      System.setCurrentTimeMillis(44);
      jDayChooser0.getLocale();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      FontInfo fontInfo0 = pDFDocumentGraphics2D0.getFontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFEncryptionParams pDFEncryptionParams0 = new PDFEncryptionParams();
      pDFDocument0.setEncryption(pDFEncryptionParams0);
      PDFResources pDFResources0 = new PDFResources(13);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, pDFDocument0, pDFResourceContext0, "day", "ISO-8859-1", 0.0F);
      jMonthChooser0.paint(pDFGraphics2D0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.getMaxSelectableDate();
      Color color1 = jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(238, color1.getBlue());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(coreDocumentImpl0);
      jDayChooser_DecoratorButton0.paint(sVGGraphics2D0);
      Color color0 = Color.gray;
      jDayChooser0.setDecorationBackgroundColor(color0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      jDayChooser_DecoratorButton0.addContainerListener((ContainerListener) null);
      Locale locale0 = Locale.CHINESE;
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser1.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton2 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.isBorderPainted();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.updateUI();
      jDayChooser1.setMaxDayCharacters(4);
      int int0 = SwingConstants.CENTER;
      Color.getColor("ISO-8859-1", 3);
      jDayChooser1.setLocale(locale0);
      jDayChooser0.updateUI();
      jDayChooser1.setMaxDayCharacters(3);
      int int1 = SwingConstants.CENTER;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ISO-8859-1";
      stringArray0[1] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = SwingConstants.NORTH;
      jDayChooser0.repaint();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3126, 3126, 24, 33, 'Y');
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(14);
      FontRenderContext fontRenderContext0 = new FontRenderContext(affineTransform0, true, false);
      Font font0 = new Font("day", 1, 33);
      int[] intArray0 = new int[3];
      intArray0[0] = 33;
      intArray0[1] = 14;
      intArray0[2] = (int) 'Y';
      font0.createGlyphVector(fontRenderContext0, intArray0);
      jDayChooser0.setFont(font0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initialized = false;
      Color.getColor(";M5}p:t^CGT(");
      Color.getColor("day", (Color) null);
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVisibleRect();
      Font font0 = new Font("day", 0, 0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setFont(font0);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(700);
      GraphicContext graphicContext0 = new GraphicContext();
      Color color0 = graphicContext0.getBackground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 24, 33, 3366, 21, 'c');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setMonth(2463);
      jDayChooser0.getMaxSelectableDate();
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      ToUnknownStream toUnknownStream1 = new ToUnknownStream();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setDayBordersVisible(false);
      Color color1 = jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(2, color1.getTransparency());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(700);
      GraphicContext graphicContext0 = new GraphicContext();
      Color color0 = graphicContext0.getBackground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 28, (-377L), 30, 596, '<', 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.setEnabled(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int int0 = SwingConstants.CENTER;
      int int1 = SwingConstants.NORTH;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      jDayChooser0.focusLost(focusEvent0);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 1, 0, 1, 1039, 'v', 1039);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.value = (-170);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getToolTipLocation((MouseEvent) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jYearChooser0.setFocusCycleRoot(false);
      jDayChooser0.addKeyListener(jDayChooser1);
      jDayChooser0.setYearChooser(jYearChooser0);
      SystemColor systemColor0 = SystemColor.controlHighlight;
      jDayChooser0.setForeground(systemColor0);
      Locale locale0 = Locale.GERMANY;
      jDayChooser0.setLocale(locale0);
      Locale locale1 = JComponent.getDefaultLocale();
      locale1.toLanguageTag();
      jDayChooser0.setLocale(locale1);
      JPanel jPanel0 = jDayChooser1.getDayPanel();
      MockDate mockDate0 = new MockDate(959L);
      mockDate0.getTime();
      Date date0 = jDayChooser1.setMinSelectableDate(mockDate0);
      jDayChooser1.setMaxSelectableDate(date0);
      jDayChooser0.setMonth((-170));
      jDayChooser0.setLocale(locale0);
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, (-38), (-38), 31, (-38), 'n');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.text;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2158, 2158, 2158, 33, 'c');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getDecorationBackgroundColor();
      Font.getFont("day");
      // Undeclared exception!
      try { 
        Font.getFont((String) null, (Font) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.text;
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      Locale locale0 = Locale.CHINESE;
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setDoubleBuffered(false);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser_DecoratorButton0.addContainerListener((ContainerListener) null);
      Locale locale1 = Locale.CHINESE;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.isBorderPainted();
      Locale locale2 = Locale.TRADITIONAL_CHINESE;
      jDayChooser0.setLocale(locale1);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(4);
      int int0 = SwingConstants.CENTER;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setMonth(20);
      jDayChooser0.getSundayForeground();
      jDayChooser0.drawDays();
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.control;
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.getLocation();
      jDayChooser0.initDecorations();
      jDayChooser0.setYear(0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.requestFocus(true);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.setFocus();
      JButton jButton0 = new JButton("icc-color(");
      jDayChooser0.selectedDay = jButton0;
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setYear(23);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setYear(0);
      jDayChooser0.setFocus();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.control;
      jDayChooser0.setSundayForeground(systemColor0);
      Point point0 = jDayChooser0.getLocation();
      jDayChooser0.setLocation(point0);
      jDayChooser0.initDecorations();
      jDayChooser0.setYear(0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.requestFocus(true);
      defaultTreeCellRenderer0.getFont();
      jDayChooser0.setFont((Font) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getWidth();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser_DecoratorButton0.getMultiClickThreshhold();
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.PRC;
      jDayChooser_DecoratorButton0.isBorderPainted();
      jDayChooser0.setLocale(locale1);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(0);
      int int0 = SwingConstants.CENTER;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jDayChooser0.setMonth(1926);
      jDayChooser0.getSundayForeground();
      jDayChooser0.drawDays();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setDay(1224);
      assertEquals(31, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(31);
      jDayChooser0.setSundayForeground((Color) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getWidth();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser_DecoratorButton0.getMultiClickThreshhold();
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.PRC;
      jDayChooser_DecoratorButton0.isBorderPainted();
      jDayChooser0.setLocale(locale1);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters((-412));
      int int0 = SwingConstants.CENTER;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jDayChooser0.setMonth(31);
      jDayChooser0.getSundayForeground();
      jDayChooser0.drawDays();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setDay(0);
      assertEquals(1, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.control;
      jDayChooser0.setSundayForeground(systemColor0);
      Point point0 = jDayChooser0.getLocation();
      jDayChooser0.setLocation(point0);
      jDayChooser0.initDecorations();
      jDayChooser0.setYear(0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.requestFocus(true);
      defaultTreeCellRenderer0.getFont();
      jDayChooser0.setFont((Font) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      int int0 = SwingConstants.CENTER;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jDayChooser1.setMonth(0);
      Color color0 = jDayChooser1.getSundayForeground();
      assertEquals((-6029312), color0.getRGB());
      assertEquals(14, jDayChooser1.getDay());
      
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.drawDays();
      jDayChooser2.getMinSelectableDate();
      assertFalse(jDayChooser2.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.text;
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addContainerListener((ContainerListener) null);
      jDayChooser_DecoratorButton0.getMnemonic();
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Timestamp timestamp0 = new Timestamp(947L);
      jDayChooser0.setSelectableDateRange((Date) null, timestamp0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getDay();
      assertEquals(14, jDayChooser1.getDay());
      
      Color color0 = Color.PINK;
      jDayChooser0.setForeground(systemColor0);
      jDayChooser1.setDay((-1011));
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HsqlProperties.argArrayToProps(stringArray0, "eUhM9");
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addContainerListener((ContainerListener) null);
      int int0 = SwingConstants.NORTH;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 2152, 1, 2152, 36, 'c');
      jDayChooser0.keyPressed(keyEvent0);
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      ToUnknownStream toUnknownStream1 = new ToUnknownStream();
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.control;
      jDayChooser0.setSundayForeground(systemColor0);
      Point point0 = jDayChooser0.getLocation();
      jDayChooser0.setLocation(point0);
      jDayChooser0.initDecorations();
      jDayChooser0.setYear(0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.requestFocus(true);
      defaultTreeCellRenderer0.getFont();
      jDayChooser0.setFont((Font) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.text;
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      int int0 = 460;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 460, (-952L), 34, 37, 'w');
      jDayChooser0.keyPressed(keyEvent0);
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      ToUnknownStream toUnknownStream1 = new ToUnknownStream();
      String[] stringArray0 = new String[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "org/apache/xml/serializer";
      stringArray0[1] = "day";
      stringArray0[2] = "org.apache.xml.serializer";
      stringArray0[3] = "day";
      stringArray0[4] = "org.apache.xml.serializer";
      stringArray0[5] = "org/apache/xml/serializer";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      String[] stringArray0 = new String[0];
      HsqlProperties.argArrayToProps(stringArray0, "day");
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addContainerListener(containerListener1);
      int int0 = SwingConstants.NORTH;
      Color color0 = new Color(1, true);
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.text;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.addContainerListener((ContainerListener) null);
      jDayChooser_DecoratorButton1.paint((Graphics) null);
      Locale locale0 = Locale.CHINESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.updateUI();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day", true);
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser_DecoratorButton1, (-2407), (-827L), (-2407), (-2228), 'y', menuElementArray0, (MenuSelectionManager) null);
      menuKeyEvent0.consume();
      jDayChooser0.keyTyped(menuKeyEvent0);
      jDayChooser0.getDayPanel();
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 597, 597, 975, (-1268), '8', (MenuElement[]) null, (MenuSelectionManager) null);
      menuKeyEvent0.consume();
      jDayChooser0.keyTyped(menuKeyEvent0);
      jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HsqlProperties.argArrayToProps(stringArray0, "eUhM9");
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int int0 = SwingConstants.NORTH;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 2152, 1, 2152, 36, 'c');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      ToUnknownStream toUnknownStream1 = new ToUnknownStream();
      jDayChooser0.getDayPanel();
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      String[] stringArray0 = new String[0];
      HsqlProperties.argArrayToProps(stringArray0, "day");
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addContainerListener(containerListener1);
      int int0 = SwingConstants.NORTH;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2152, 0L, 18, 34, 'c');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getName();
      XmlDocument xmlDocument0 = new XmlDocument();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "JYearChooser";
      stringArray0[1] = "JYearChooser";
      stringArray0[2] = "day";
      stringArray0[3] = "year";
      xmlDocument0.createElementNS("JYearChooser", "JYearChooser");
      stringArray0[4] = "day";
      xmlDocument0.chooseLocale(stringArray0);
      JComponent.setDefaultLocale((Locale) null);
      jDayChooser0.setYearChooser(jYearChooser0);
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.drawDays();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setYearChooser(jYearChooser0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.control;
      jDayChooser0.setSundayForeground(systemColor0);
      Point point0 = jDayChooser0.getLocation();
      jDayChooser0.setLocation(point0);
      jDayChooser0.initDecorations();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 1L, 9, 0, '2', 0);
      jDayChooser0.keyPressed(keyEvent0);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setFocus();
      jDayChooser0.setYear(48);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.setMaxSelectableDate(date0);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone.getTimeZone(zoneId0);
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser1.today;
      jDayChooser1.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setMaxDayCharacters(0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getDecorationBackgroundColor();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.firePropertyChange("day", false, false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, (-1428), (-889L), 1308, 40, 'c');
      jDayChooser0.keyPressed(keyEvent0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(36);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      ContainerListener containerListener2 = AWTEventMulticaster.add(containerListener1, (ContainerListener) null);
      AWTEventMulticaster.remove(containerListener2, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addContainerListener((ContainerListener) null);
      jDayChooser_DecoratorButton0.getMnemonic();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2521, 2521, 0, 0, 'y');
      jDayChooser0.keyPressed(keyEvent0);
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      ToUnknownStream toUnknownStream1 = new ToUnknownStream();
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean1 = toUnknownStream1.addAttributeAlways("org/apache/xml/serializer", "JDayChooser", "22", (String) null, "%SYh#u|H|V", true);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay((-2830));
      Locale locale0 = Locale.KOREAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", locale0);
      ParsePosition parsePosition0 = new ParsePosition(1650);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setEnabled(true);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent((Component) null, (-612), 3, (-2830), (-1395), '^');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Timestamp timestamp0 = new Timestamp(0L);
      Date date0 = jDayChooser0.setMaxSelectableDate(timestamp0);
      jDayChooser0.setSelectableDateRange(date0, timestamp0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setEnabled(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3, 3, 3, 3, '@');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.setFocus();
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      toUnknownStream0.addAttributeAlways("E{x/?13[`5bPZ]I", "#lr$OR{pNe=TY@?7j", "#lr$OR{pNe=TY@?7j", "accessories.plugins.time.JDayChooser", (String) null, true);
      // Undeclared exception!
      try { 
        toUnknownStream0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.serializer.SerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(31);
      jDayChooser0.setSundayForeground((Color) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add(containerListener1, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.addNotify();
      jDayChooser0.setYear(9687);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 31, 22, 38, (-829), '*');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setFocus();
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      toUnknownStream0.addAttributeAlways("zK'", (String) null, "West", "day", "zK'", true);
      // Undeclared exception!
      try { 
        toUnknownStream0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.serializer.SerializerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HsqlProperties.delimitedArgPairsToProps("ea0UhM9", "ea0UhM9", "ea0UhM9", "ea0UhM9");
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 36, 15, (-829), 38, '<');
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.keyPressed(keyEvent0);
      KeyEvent.getExtendedKeyCodeForChar(1049);
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ToUnknownStream toUnknownStream1 = new ToUnknownStream();
      jDayChooser0.getDayPanel();
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters((-989));
      int int0 = SwingConstants.CENTER;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(31);
      jDayChooser0.setSundayForeground((Color) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addContainerListener((ContainerListener) null);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      Locale locale0 = Locale.PRC;
      jDayChooser_DecoratorButton0.isBorderPainted();
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(7);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMonth(15);
      jDayChooser0.getDaysInMonth();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 15, 31, 927, 31, 't');
      KeyEvent.getExtendedKeyCodeForChar(543);
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(30, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      SystemColor systemColor0 = SystemColor.controlText;
      Color.getColor("|\u0007!KYKb>EA^iI@=");
      systemColor0.getColorSpace();
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(31);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.addAncestorListener(ancestorListener0);
      jDayChooser0.setSundayForeground((Color) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      AWTEventMulticaster.add(containerListener1, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addContainerListener((ContainerListener) null);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.PRC;
      jDayChooser_DecoratorButton0.isBorderPainted();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(7);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMonth(15);
      jDayChooser0.getSundayForeground();
      assertEquals(30, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.control;
      jDayChooser0.setSundayForeground(systemColor0);
      Point point0 = jDayChooser0.getLocation();
      jDayChooser0.setLocation(point0);
      point0.move((-1), 3);
      jDayChooser0.initDecorations();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1), 1L, 9, 0, '2', 3);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setFocus();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener2 = AWTEventMulticaster.add(containerListener0, containerListener1);
      AWTEventMulticaster.remove(containerListener2, containerListener2);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setFont((Font) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.focusGained((FocusEvent) null);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.updateUI();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      jDayChooser0.setYear((-41));
      JDayChooser jDayChooser1 = new JDayChooser();
      Color color0 = jDayChooser0.getBackground();
      jDayChooser1.setForeground(color0);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser1.setMaxSelectableDate((Date) null);
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      canvasGraphicsNode0.getParent();
      CanvasGraphicsNode canvasGraphicsNode1 = new CanvasGraphicsNode();
      Locale.lookup(canvasGraphicsNode1, canvasGraphicsNode0);
      MockGregorianCalendar mockGregorianCalendar0 = null;
      try {
        mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(31);
      jDayChooser0.setSundayForeground((Color) null);
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      AWTEventMulticaster.add(containerListener1, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener1);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addContainerListener((ContainerListener) null);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      Locale locale0 = Locale.CHINESE;
      Locale locale1 = Locale.PRC;
      jDayChooser_DecoratorButton0.isBorderPainted();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(7);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMonth(15);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int int0 = SwingConstants.NORTH;
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.addContainerListener((ContainerListener) null);
      int int1 = SwingConstants.NORTH;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 2152, 1, 2158, 39, '6');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyPressed(keyEvent0);
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      ToUnknownStream toUnknownStream1 = new ToUnknownStream();
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(31);
      jDayChooser0.setSundayForeground((Color) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)0;
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.addContainerListener((ContainerListener) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("it");
      jDayChooser0.list((PrintStream) mockPrintStream0, 30);
      jDayChooser0.createImage(30, (int) (byte)0);
      DefaultComboBoxModel<String> defaultComboBoxModel0 = new DefaultComboBoxModel<String>();
      JList<String> jList0 = new JList<String>(defaultComboBoxModel0);
      Object object0 = new Object();
      DefaultComboBoxModel<String> defaultComboBoxModel1 = new DefaultComboBoxModel<String>();
      defaultComboBoxModel0.addElement("z<\"W8#A?");
      Stack<String> stack0 = new Stack<String>();
      JList<String> jList1 = new JList<String>(stack0);
      jList1.getSelectionForeground();
      Color color0 = Color.YELLOW;
      jDayChooser0.setForeground(color0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "z<\"W8#A?";
      stringArray0[1] = "$j=";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      System.setCurrentTimeMillis((-1112L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(31);
      Boolean boolean0 = new Boolean("");
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setWeekOfYearVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.weekOfYearVisible = true;
      Locale locale0 = Locale.CHINESE;
      locale0.getUnicodeLocaleAttributes();
      jDayChooser1.setLocale(locale0);
      jDayChooser0.updateUI();
      jDayChooser1.setMaxDayCharacters(2);
      jDayChooser0.getSelectedDay();
      boolean boolean1 = jDayChooser1.isWeekOfYearVisible();
      assertEquals(2, jDayChooser1.getMaxDayCharacters());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.text;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.addContainerListener((ContainerListener) null);
      jDayChooser_DecoratorButton1.paint((Graphics) null);
      Locale locale0 = Locale.CHINESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.getDaysInMonth();
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.firePropertyChange("Stylesheet directed termination", 0.213F, 0.213F);
      jDayChooser0.getDecorationBackgroundColor();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-187), 0L, (-1575), 1660, '~');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser1.yearChooser;
      jDayChooser1.getActionMap();
      jDayChooser0.getMinSelectableDate();
      jDayChooser1.focusLost((FocusEvent) null);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(coreDocumentImpl0);
      jDayChooser_DecoratorButton0.paint(sVGGraphics2D0);
      Color color0 = Color.gray;
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setMonth(179);
      Stack<AWTKeyStroke> stack0 = new Stack<AWTKeyStroke>();
      JTree jTree0 = new JTree(stack0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      jTree0.getCellEditor();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0, (TreeCellEditor) null);
      defaultTreeCellEditor0.getFont();
      jDayChooser0.setFont((Font) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-2846));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.text;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getDecorationBackgroundColor();
      Font font0 = new Font("?_0?tAJ\"mcQ[p*+1.", 238, 238);
      Font.getFont("FhALNl5", font0);
      jDayChooser0.setFont(font0);
      jDayChooser0.focusGained((FocusEvent) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.text;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getDecorationBackgroundColor();
      Font font0 = new Font("day", 10, (-1333));
      jDayChooser0.setFont(font0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setMonth(6);
      jDayChooser0.drawDays();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 1966, 1966, 47, 1966, 'p', 4);
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 870);
      focusEvent0.setSource((Object) null);
      jDayChooser0.focusGained(focusEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RrOQ(0e@ujrCY$pC");
      jDayChooser_DecoratorButton0.isFocusable();
      System.setCurrentTimeMillis(870);
      jDayChooser0.setEnabled(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(870, (-3345), (-1805), 870, 7, (-1526));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      SystemColor systemColor1 = SystemColor.inactiveCaptionBorder;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getPropertyChangeListeners();
      int int0 = 420;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 420, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Timestamp timestamp0 = new Timestamp(0L);
      timestamp0.getTime();
      Date date0 = jDayChooser0.setMaxSelectableDate(timestamp0);
      jDayChooser0.setSelectableDateRange(date0, timestamp0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setEnabled(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      jDayChooser0.requestFocus();
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.getLocale();
      jDayChooser0.keyReleased((KeyEvent) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = (-2380);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2380));
      focusEvent0.paramString();
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null);
      DebugGraphics.flashCount();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2380), (-2380), (-2380));
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, (-2380), "day", 2051);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(coreDocumentImpl0);
      jDayChooser_DecoratorButton0.paint(sVGGraphics2D0);
      Color color0 = Color.gray;
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 47, 4971L, 90, 1906, 's');
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.drawWeeks();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Boolean boolean0 = GVTAttributedCharacterIterator.TextAttribute.OVERLINE_ON;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MenuElement[] menuElementArray0 = new MenuElement[2];
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem();
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      JMenu jMenu0 = new JMenu("Metal", true);
      menuElementArray0[1] = (MenuElement) jMenu0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-660), 0L, (-660), 108, 'X', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.setKeyCode((-660));
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addListeners(6);
      Font.getFont("day");
      jDayChooser0.setFont((Font) null);
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke(63707, 6);
      ActionEvent actionEvent0 = new ActionEvent(aWTKeyStroke0, (-1073), "plugins.map.FreeMindMapController$LimitSearchToRegionAction", 63707);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.KeyStroke cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.doLayout();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 707);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      Color color0 = Color.CYAN;
      jDayChooser1.setSundayForeground(color0);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 36;
      GridLayout gridLayout0 = new GridLayout(36, 36);
      Dimension dimension0 = gridLayout0.minimumLayoutSize(jDayChooser0);
      gridLayout0.preferredLayoutSize(jDayChooser0);
      dimension0.clone();
      jDayChooser0.getSize(dimension0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Boolean boolean0 = new Boolean("JDayChooser");
      ActionEvent actionEvent0 = new ActionEvent("JDayChooser", 708, "gamma", 708, 44);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getClientProperty(boolean0);
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.minSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertSame(date1, date0);
      
      jDayChooser0.repaint(445L, 0, 0, 0, 0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2372, (-1L), (-1560), (-1560), 'g');
      jDayChooser0.keyTyped(keyEvent0);
      MockDate mockDate0 = new MockDate(382, 382, 2372, (-1560), 3049);
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.day = (-4017);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setToolTipText("SAVEPOINT");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.initDecorations();
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale.lookup(stack0, canvasGraphicsNode0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.doLayout();
      Locale locale0 = Locale.UK;
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setDecorationBackgroundVisible(true);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(700);
      jDayChooser0.setDecorationBordersVisible(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1925), true);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getDecorationBackgroundColor();
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Boolean boolean0 = new Boolean("day");
      jDayChooser0.setMonth(970);
      boolean boolean1 = jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(boolean1);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.control;
      jDayChooser0.setSundayForeground(systemColor0);
      Point point0 = jDayChooser0.getLocation();
      jDayChooser0.setLocation(point0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 1L, 9, 0, ')', 0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setFocus();
      jDayChooser0.setYear(48);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "JDayChooser";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = new Boolean("day");
      String[] stringArray0 = new String[8];
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      jDayChooser0.paintAll(pDFDocumentGraphics2D0);
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1385, true);
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 8806, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.paintImmediately(1155, 9999, 9999, 9999);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.drawDays();
      jDayChooser0.getSundayForeground();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 8472, true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.createVolatileImage(2148, 9999);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 10;
      jDayChooser0.createVolatileImage(10, 10);
      jDayChooser0.isPaintingTile();
      jDayChooser0.setDay(53);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setFocus();
      jDayChooser0.getDay();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(31);
      Boolean boolean0 = new Boolean("");
      JDayChooser jDayChooser1 = new JDayChooser();
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      
      jDayChooser1.setWeekOfYearVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      Locale locale0 = Locale.CHINESE;
      jDayChooser1.setLocale(locale0);
      jDayChooser0.updateUI();
      jDayChooser1.setMaxDayCharacters(2);
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      jDayChooser0.setSundayForeground((Color) null);
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      stringArray0[8] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isWeekOfYearVisible();
      GraphicContext graphicContext0 = new GraphicContext();
      Font font0 = graphicContext0.getFont();
      jDayChooser0.setFont(font0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setDecorationBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      OutputProperties outputProperties0 = new OutputProperties("14");
      String string0 = "org.apache.batik.bridge.SVGSwitchElementBridge";
      ImageHandlerJPEGEncoder imageHandlerJPEGEncoder0 = null;
      try {
        imageHandlerJPEGEncoder0 = new ImageHandlerJPEGEncoder((String) null, "org.apache.batik.bridge.SVGSwitchElementBridge");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir should not be null
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlignmentY(434.882F);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-1), "day", (-1), (-1));
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
      sVG12DOMImplementation0.getLocale();
      jDayChooser0.locale = null;
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String string0 = "Windows";
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 225, "Windows", 225, 0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.setAlignmentY(1.0F);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getTopLevelAncestor();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      jDayChooser0.setFocus();
      jDayChooser0.setMonth((-2356));
      jDayChooser0.setYear(700);
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-2383), "day", 0L, 6);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 22, "day", 22, 22);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.getHierarchyBoundsListeners();
      jDayChooser0.removeMouseWheelListener((MouseWheelListener) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      jDayChooser0.setMaxDayCharacters(23);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Windows");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.addNotify();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(600);
      jMonthChooser0.scrollRectToVisible(rectangle0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "month");
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Windows");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.addNotify();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JTableHeader jTableHeader0 = new JTableHeader();
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(600);
      jMonthChooser0.scrollRectToVisible(rectangle0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "month");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.control;
      jDayChooser0.setSundayForeground(systemColor0);
      Point point0 = jDayChooser0.getLocation();
      jDayChooser0.setLocation(point0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 1L, 9, 7, ')', 0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.isDayBordersVisible();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYear((-1268));
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      SystemColor systemColor1 = SystemColor.controlLtHighlight;
      Color.getColor("day", (Color) systemColor1);
      jDayChooser0.drawDays();
      jDayChooser0.setEnabled(false);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getMinSelectableDate();
      SystemColor systemColor2 = SystemColor.inactiveCaptionBorder;
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Rectangle rectangle0 = new Rectangle();
      jDayChooser0.scrollRectToVisible(rectangle0);
      jDayChooser0.getInheritsPopupMenu();
      jDayChooser0.setDayBordersVisible(false);
      Locale locale0 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) canvasGraphicsNode0, locale_FilteringMode0);
      JLabel jLabel0 = new JLabel("day");
      KeyEvent keyEvent0 = new KeyEvent(jLabel0, 591, 0, 948, 0, 'b');
      jDayChooser0.keyTyped(keyEvent0);
      MockDate mockDate0 = new MockDate(11, 28, 0, 16, 316);
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      SystemColor systemColor1 = SystemColor.textHighlight;
      Color.getColor("day", (Color) systemColor1);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      Locale locale0 = jDayChooser0.getLocale();
      jDayChooser0.keyTyped((KeyEvent) null);
      jDayChooser0.setFocus();
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay((-2830));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 10;
      jDayChooser0.createVolatileImage(10, 10);
      jDayChooser0.isPaintingTile();
      jDayChooser0.setDay(22);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setFocus();
      jDayChooser0.getDay();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 597, 597, 975, (-1268), '8', (MenuElement[]) null, (MenuSelectionManager) null);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      jDayChooser0.setToolTipText("day");
      stringArray0[1] = "day";
      jDayChooser0.setYear(47);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBackgroundVisible();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      jDayChooser0.setFocusTraversalPolicyProvider(true);
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setWeekdayForeground((Color) null);
      HelpSet helpSet0 = new HelpSet();
      Locale locale0 = helpSet0.getLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Windows");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.addNotify();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.windowText;
      jDayChooser1.setDecorationBackgroundColor(systemColor0);
      PSVIDOMImplementationImpl pSVIDOMImplementationImpl0 = new PSVIDOMImplementationImpl();
      String string0 = "!-nV+er/eP<shi`J[M";
      GenericDocumentType genericDocumentType0 = new GenericDocumentType("day", "!-nV+er/eP<shi`J[M", "attribute-set");
      WMLDocumentImpl wMLDocumentImpl0 = null;
      try {
        wMLDocumentImpl0 = new WMLDocumentImpl(genericDocumentType0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // WRONG_DOCUMENT_ERR: A node is used in a different document than the one that created it.
         //
         verifyException("org.apache.xerces.dom.CoreDocumentImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 864L, 0, 0, 'U');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.getLocale();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 100, 0, 262, 262, 'U');
      jDayChooser1.keyReleased(keyEvent0);
      jDayChooser0.getLocale();
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setWeekOfYearVisible(false);
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      Color.getColor("Dialog Plain 11", (Color) systemColor0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 864L, 0, 0, 'U');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.getLocale();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.paintImmediately(1155, 9999, 9999, 9999);
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jMonthChooser0.firePropertyChange("\"sF^a(q<Qzn5&>L`", (-1.0E-4), (double) 9999);
      JMonthChooser jMonthChooser1 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setFocus();
      StringContent stringContent0 = new StringContent(452);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StringContent stringContent1 = new StringContent();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent1, styleContext0);
      Element element0 = defaultStyledDocument0.getDefaultRootElement();
      LabelView labelView0 = new LabelView(element0);
      labelView0.getBackground();
      jDayChooser0.setWeekdayForeground((Color) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.repaint(445L, 0, 0, 0, 0);
      jDayChooser0.drawWeeks();
      jDayChooser0.updateUI();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.maxDayCharacters = 0;
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.control;
      jDayChooser0.setSundayForeground(systemColor0);
      Point point0 = jDayChooser0.getLocation();
      jDayChooser0.setLocation(point0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1939), 1L, 9, 0, ')', 0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMinSelectableDate();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((ContainerListener) aWTEventMulticaster0, (ContainerListener) aWTEventMulticaster0);
      jDayChooser0.addContainerListener((ContainerListener) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("attribute-set");
      jDayChooser0.list((PrintStream) mockPrintStream0, 58);
      jDayChooser0.createImage(14, 58);
      DefaultComboBoxModel<String> defaultComboBoxModel0 = new DefaultComboBoxModel<String>();
      JList<String> jList0 = new JList<String>(defaultComboBoxModel0);
      defaultComboBoxModel0.getSelectedItem();
      PrintColorUIResource printColorUIResource0 = (PrintColorUIResource)jList0.getSelectionForeground();
      jDayChooser0.setForeground(printColorUIResource0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setWeekOfYearVisible(false);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StringContent stringContent0 = new StringContent();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      Element element0 = defaultStyledDocument0.getDefaultRootElement();
      LabelView labelView0 = new LabelView(element0);
      labelView0.getBackground();
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jMonthChooser0.firePropertyChange("day", (double) 0, 1548.6457386651);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setFocus();
      StringContent stringContent0 = new StringContent((-2775));
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      Element element0 = defaultStyledDocument0.getDefaultRootElement();
      LabelView labelView0 = new LabelView(element0);
      labelView0.getBackground();
      jDayChooser0.setWeekdayForeground((Color) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setSundayForeground((Color) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Rectangle rectangle0 = new Rectangle();
      jDayChooser0.scrollRectToVisible(rectangle0);
      jDayChooser0.getInheritsPopupMenu();
      jDayChooser0.setDayBordersVisible(false);
      Locale locale0 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) canvasGraphicsNode0, locale_FilteringMode0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.drawDays();
      jDayChooser0.setEnabled(true);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getMinSelectableDate();
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.repaint(445L, 0, 0, 0, 0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2372, (-1L), 5, 5, 'g');
      jDayChooser0.keyTyped(keyEvent0);
      MockDate mockDate0 = new MockDate(382, 382, 2372, 5, 3049);
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getSelectedDay();
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      jDayChooser0.setActionMap(actionMap0);
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      jDayChooser0.setWeekdayForeground(colorUIResource0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.paintImmediately(1155, 9999, 9999, 9999);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.drawDays();
      jDayChooser0.getSundayForeground();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 1331, (-574L), 0, 810, 'W', 9999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.repaint(445L, 0, 0, 0, 0);
      jDayChooser0.drawWeeks();
      jDayChooser0.updateUI();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.maxDayCharacters = 0;
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.removeAll();
      jDayChooser0.getHierarchyBoundsListeners();
      jDayChooser0.firePropertyChange("org.apache.batik.apps.svgbrowser.JSVGViewerFrame$ToggleDebuggerAction", 2241L, 1972L);
      int int0 = 0;
      jDayChooser0.addListeners(0);
      jDayChooser0.addListeners(0);
      Integer integer0 = StrokingTextPainter.WRITING_MODE_TTB;
      int int1 = 13;
      Integer.remainderUnsigned(429, 13);
      ActionEvent actionEvent0 = new ActionEvent(integer0, 0, "day");
      actionEvent0.paramString();
      actionEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Cursor cursor0 = jDayChooser0.getCursor();
      jDayChooser0.setCursor(cursor0);
      jDayChooser0.isWeekOfYearVisible();
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "accessories.plugins.time.JDayChooser$DecoratorButton", 2738);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 0, 'W');
      jDayChooser0.keyTyped(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Rectangle rectangle0 = new Rectangle();
      jDayChooser0.scrollRectToVisible(rectangle0);
      jDayChooser0.getInheritsPopupMenu();
      jDayChooser0.setDayBordersVisible(false);
      Locale locale0 = Locale.UK;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.drawDays();
      jDayChooser0.setEnabled(true);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getMinSelectableDate();
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(100, (-2054), byteArray0, 1399, true, 1866);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.doLayout();
      jDayChooser0.getLocale();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.drawWeeks();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 6, (-2083L), 14, 6, 'b');
      KeyStroke.getKeyStrokeForEvent(keyEvent0);
      jDayChooser0.remove((Component) jDayChooser1);
      // Undeclared exception!
      try { 
        AWTKeyStroke.getAWTKeyStroke("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String formatted incorrectly
         //
         verifyException("java.awt.AWTKeyStroke", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.text;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2243.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1334.7103F);
      floatArray0[3] = 0.0F;
      systemColor0.getRGBComponents(floatArray0);
      Color.getColor("0");
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getItemListeners();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      Locale locale0 = Locale.CHINESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setMaxDayCharacters(1);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-40));
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      JButton[] jButtonArray0 = new JButton[6];
      Application application0 = mock(Application.class, new ViolatedAssumptionAnswer());
      JSVGViewerFrame jSVGViewerFrame0 = null;
      try {
        jSVGViewerFrame0 = new JSVGViewerFrame(application0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.revalidate();
      jDayChooser0.getSundayForeground();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("");
      String string0 = "Font";
      try { 
        mockSimpleDateFormat0.parse("Font");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"Font\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = (-1153);
      jDayChooser0.firePropertyChange("Z3IX-!Y[", (short)12305, (short)12305);
      int int1 = (-2422);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.createVolatileImage((-1153), (-2422));
      jDayChooser0.decorationBordersVisible = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.isDecorationBordersVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1263);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInheritsPopupMenu();
      jDayChooser0.setDayBordersVisible(true);
      Locale locale0 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      locale0.getExtensionKeys();
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) canvasGraphicsNode0, locale_FilteringMode0);
      jDayChooser0.setLocale(locale0);
      SystemColor systemColor0 = SystemColor.controlText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.getLocale();
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 5, (-1L), 0, 49, '*');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.getLocale();
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.controlText;
      SystemColor systemColor1 = SystemColor.textHighlight;
      Color.getColor("day", (Color) systemColor1);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.getLocale();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 7, 0, '!');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.getLocale();
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      jDayChooser0.addContainerListener((ContainerListener) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("attribute-set");
      int int0 = 58;
      jDayChooser0.list((PrintStream) mockPrintStream0, 58);
      jDayChooser0.createImage(14, 58);
      DefaultComboBoxModel<String> defaultComboBoxModel0 = new DefaultComboBoxModel<String>();
      JList<String> jList0 = new JList<String>(defaultComboBoxModel0);
      defaultComboBoxModel0.getSelectedItem();
      Color color0 = jList0.getSelectionForeground();
      jDayChooser0.setForeground(color0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setWeekOfYearVisible(false);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(3156);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(false);
      float float0 = (-1323.0F);
      float float1 = 0.0F;
      float float2 = 0.0F;
      Color color0 = null;
      try {
        color0 = new Color((-1323.0F), (-1323.0F), 0.0F, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Red Green
         //
         verifyException("java.awt.Color", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Point point0 = jDayChooser0.getLocation();
      jDayChooser0.setLocation(point0);
      jDayChooser0.getMinSelectableDate();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      jDayChooser0.setFocusTraversalPolicyProvider(true);
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "T.\\%pQDX";
      stringArray0[7] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange((String) null, (byte)0, (byte)0);
      SystemColor systemColor0 = SystemColor.textInactiveText;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (-1129);
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (-3258);
      floatArray0[6] = (float) (-3258);
      Color.RGBtoHSB((-1129), (-1129), (-3258), floatArray0);
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFocusTraversalPolicy();
      defaultTreeCellRenderer0.getMouseMotionListeners();
      Class<JButton> class0 = JButton.class;
      BasicHelpUI.getIcon(class0, "day");
      defaultTreeCellRenderer0.setIcon((Icon) null);
      defaultTreeCellRenderer0.addContainerListener((ContainerListener) null);
      Dimension dimension0 = defaultTreeCellRenderer0.getPreferredSize();
      int int0 = 8926;
      dimension0.clone();
      dimension0.setSize((double) 8926, 1398.5);
      // Undeclared exception!
      try { 
        dimension0.setSize((Dimension2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.geom.Dimension2D", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 0;
      int int1 = (-854);
      char char0 = '^';
      MenuElement[] menuElementArray0 = new MenuElement[8];
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }
}
