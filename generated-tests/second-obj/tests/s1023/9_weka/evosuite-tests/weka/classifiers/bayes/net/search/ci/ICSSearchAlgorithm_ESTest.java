/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:34:12 GMT 2018
 */

package weka.classifiers.bayes.net.search.ci;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.lazy.LWL;
import weka.classifiers.lazy.kstar.KStarConstants;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.core.Attribute;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.WordTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ICSSearchAlgorithm_ESTest extends ICSSearchAlgorithm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.setOptions((String[]) null);
      String string0 = iCSSearchAlgorithm0.maxCardinalityTipText();
      assertEquals("When determining whether an edge exists a search is performed for a set Z that separates the nodes. MaxCardinality determines the maximum size of the set Z. This greatly influences the length of the search. Default value is 2.", string0);
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean[][] booleanArray0 = new boolean[6][1];
      BayesNet bayesNet0 = new BayesNet();
      ICSSearchAlgorithm.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains((-1714));
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@A";
      stringArray0[1] = "-cardinality";
      stringArray0[2] = "@";
      stringArray0[4] = "";
      try { 
        iCSSearchAlgorithm0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.getOptions();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      boolean[][] booleanArray0 = new boolean[1][8];
      iCSSearchAlgorithm0.setMaxCardinality(2462);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.existsSepSet(75, 2462, 75, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      int[] intArray0 = new int[3];
      intArray0[0] = (-1714);
      intArray0[1] = (-1714);
      intArray0[2] = (-1714);
      iCSSearchAlgorithm_SeparationSet0.m_set = intArray0;
      boolean boolean0 = iCSSearchAlgorithm_SeparationSet0.contains((-1714));
      assertTrue(boolean0);
      
      String string0 = iCSSearchAlgorithm_SeparationSet0.getRevision();
      assertEquals(2, iCSSearchAlgorithm0.getMaxCardinality());
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      int[] intArray0 = new int[3];
      intArray0[1] = (-1);
      intArray0[0] = (-1);
      iCSSearchAlgorithm_SeparationSet0.m_set = intArray0;
      iCSSearchAlgorithm_SeparationSet0.contains((-1));
      boolean[][] booleanArray0 = new boolean[1][7];
      BayesNet bayesNet0 = new BayesNet();
      String string0 = CostMatrix.FILE_EXTENSION;
      String[] stringArray0 = new String[3];
      stringArray0[1] = ".cost";
      stringArray0[1] = ".cost";
      String string1 = CostMatrix.FILE_EXTENSION;
      assertEquals(".cost", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      iCSSearchAlgorithm0.getRevision();
      boolean[][] booleanArray0 = new boolean[8][6];
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("`|r", arrayList0, 3);
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.setSearchAlgorithm(iCSSearchAlgorithm0);
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      Locale.getISOCountries();
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.next((-2438), 3, 1, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2437
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      iCSSearchAlgorithm0.getScoreType();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean[][] booleanArray0 = new boolean[6][6];
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet1 = iCSSearchAlgorithm0.new SeparationSet();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("[?d>1w)", arrayList0, 3);
      arrayList0.add((Attribute) null);
      BayesNet bayesNet0 = new BayesNet();
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("'m |?`?3", protectedProperties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Attribute attribute1 = new Attribute("date", protectedProperties0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances((String) null, arrayList0, 1);
      int int0 = KStarConstants.B_ENTROPY;
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      iCSSearchAlgorithm0.setMaxCardinality(0);
      BayesNet bayesNet0 = iCSSearchAlgorithm0.m_BayesNet;
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("QNT>");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      String[] stringArray0 = multiClassClassifierUpdateable0.getOptions();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      AbstractClassifier.runClassifier(multiClassClassifierUpdateable0, stringArray0);
      Instances instances0 = new Instances("", arrayList0, 0);
      BayesNet bayesNet0 = new BayesNet();
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      int int0 = LinearRegression.SELECTION_M5;
      boolean[][] booleanArray0 = new boolean[0][2];
      iCSSearchAlgorithm0.next(3, 1540, (-3448), booleanArray0);
      iCSSearchAlgorithm0.getMaxCardinality();
      iCSSearchAlgorithm0.listOptions();
      iCSSearchAlgorithm0.existsSepSet(493, 243, 2, booleanArray0);
      String string0 = iCSSearchAlgorithm0.getRevision();
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("'m |?`?3", protectedProperties0);
      Attribute attribute1 = new Attribute("date", protectedProperties0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances((String) null, arrayList0, 1);
      int int0 = KStarConstants.B_ENTROPY;
      arrayList0.add(attribute1);
      instances0.clear();
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.CISearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      SelectedTag selectedTag0 = iCSSearchAlgorithm0.getScoreType();
      ICSSearchAlgorithm.SeparationSet iCSSearchAlgorithm_SeparationSet0 = iCSSearchAlgorithm0.new SeparationSet();
      selectedTag0.getRevision();
      selectedTag0.getRevision();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.setMethod(selectedTag0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(")\n", arrayList0, 3);
      BayesNet bayesNet0 = new BayesNet();
      iCSSearchAlgorithm0.search((BayesNet) null, instances0);
      iCSSearchAlgorithm0.listOptions();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      ArrayList<String> arrayList3 = new ArrayList<String>(3);
      Attribute attribute0 = new Attribute(".bsi", arrayList3);
      arrayList0.add(attribute0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "date";
      stringArray0[1] = "date";
      stringArray0[2] = "numeric";
      stringArray0[3] = "8034";
      stringArray0[4] = "^QYk*)5-]d";
      iCSSearchAlgorithm0.setOptions(stringArray0);
      Instances instances1 = new Instances("relational", arrayList2, 1);
      arrayList2.add(attribute0);
      boolean[][] booleanArray0 = new boolean[9][5];
      boolean[] booleanArray1 = new boolean[8];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = true;
      booleanArray1[5] = true;
      booleanArray1[7] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[0];
      booleanArray0[1] = booleanArray2;
      booleanArray0[2] = booleanArray1;
      boolean[] booleanArray3 = new boolean[7];
      booleanArray3[0] = false;
      booleanArray3[1] = true;
      booleanArray3[2] = true;
      booleanArray3[3] = true;
      booleanArray3[4] = true;
      booleanArray3[5] = true;
      booleanArray3[6] = true;
      boolean[] booleanArray4 = new boolean[2];
      booleanArray0[4] = booleanArray4;
      boolean[] booleanArray5 = new boolean[5];
      booleanArray5[0] = false;
      booleanArray5[1] = true;
      booleanArray5[2] = true;
      booleanArray5[3] = true;
      booleanArray5[4] = true;
      boolean[] booleanArray6 = new boolean[8];
      booleanArray6[0] = true;
      booleanArray6[1] = true;
      booleanArray6[2] = true;
      booleanArray6[3] = false;
      booleanArray6[4] = true;
      booleanArray6[5] = false;
      booleanArray6[6] = true;
      booleanArray6[7] = false;
      booleanArray0[6] = booleanArray6;
      boolean[] booleanArray7 = new boolean[0];
      booleanArray0[7] = booleanArray7;
      boolean[] booleanArray8 = new boolean[2];
      booleanArray8[0] = false;
      booleanArray8[1] = true;
      booleanArray0[8] = booleanArray8;
      iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = ".bsi";
      stringArray1[3] = "@relation";
      try { 
        iCSSearchAlgorithm0.setOptions(stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.globalInfo();
      boolean[][] booleanArray0 = new boolean[1][6];
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", arrayList0, 3);
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.globalInfo();
      bayesNet0.setSearchAlgorithm(iCSSearchAlgorithm0);
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute(".bsi", instances0);
      arrayList0.add(attribute0);
      Locale.getISOLanguages();
      Attribute attribute1 = new Attribute("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", "6", 0);
      arrayList0.add(attribute1);
      iCSSearchAlgorithm0.setMaxCardinality(3);
      System.setCurrentTimeMillis(0);
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      int int0 = KStarConstants.M_DELETE;
      // Undeclared exception!
      try { 
        iCSSearchAlgorithm0.calcArcDirections(booleanArray0, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute("hJ^6s,HKd");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("date", (byte)0);
      Instances instances0 = new Instances("hJ^6s,HKd", arrayList0, 4489);
      arrayList0.add(attribute1);
      attribute0.value(2);
      iCSSearchAlgorithm0.setMaxCardinality((-1420));
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      byteArray0[0] = (byte) (-111);
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute("hJ^6s,HKd");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("date", (byte)0);
      Instances instances0 = new Instances("hJ^6s,HKd", arrayList0, 4489);
      arrayList0.add(attribute1);
      arrayList0.add(attribute1);
      attribute0.value(2);
      iCSSearchAlgorithm0.setMaxCardinality((-1420));
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-111);
      byteArray0[0] = (byte) (-111);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("hJ^6s,HKd");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("date", (byte)0);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("hJ^6s,HKd", arrayList0, 4489);
      arrayList0.add(attribute1);
      arrayList0.add(attribute1);
      attribute0.value(2);
      iCSSearchAlgorithm0.setMaxCardinality((-1420));
      try { 
        iCSSearchAlgorithm0.search((BayesNet) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.net.search.ci.ICSSearchAlgorithm", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ICSSearchAlgorithm iCSSearchAlgorithm0 = new ICSSearchAlgorithm();
      iCSSearchAlgorithm0.globalInfo();
      boolean[][] booleanArray0 = new boolean[1][6];
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", arrayList0, 3);
      BayesNet bayesNet0 = new BayesNet();
      iCSSearchAlgorithm0.search(bayesNet0, instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale.getISOLanguages();
      Attribute attribute0 = new Attribute("This Bayes Network learning algorithm uses conditional independence tests to find a skeleton, finds V-nodes and applies a set of rules to find the directions of the remaining arrows.", "6", 0);
      arrayList0.add(attribute0);
      System.setCurrentTimeMillis(0);
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      int int0 = KStarConstants.M_DELETE;
      iCSSearchAlgorithm0.globalInfo();
      Properties properties0 = new Properties();
      properties0.keys();
      iCSSearchAlgorithm0.existsSepSet(0, (-2860), 2, booleanArray0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances1 = new Instances("relational", arrayList1, 2);
      int int1 = KStarConstants.B_ENTROPY;
      Attribute attribute1 = new Attribute("i+GGf\"lXd", instances0, (-1018));
      arrayList1.add(attribute1);
      int int2 = LWL.CONSTANT;
      iCSSearchAlgorithm0.initAsNaiveBayesTipText();
      ICSSearchAlgorithm iCSSearchAlgorithm1 = new ICSSearchAlgorithm();
      try { 
        iCSSearchAlgorithm0.search(bayesNet0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
