/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 01:37:02 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 3805;
      intArray0[1] = 331;
      intArray0[2] = 11826;
      intArray0[3] = 11831;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {3805, 331, 11826, 11831}, intArray0);
      
      CharClass charClass1 = charClass0.appendRange(11826, 11826);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {3805, 331, 11826, 11831}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendNegatedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 3804, 332, 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendRange(11809, 66640);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 3804, 332, 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      int[][] intArray1 = new int[2][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass4 = charClass1.appendNegatedTable(intArray1);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {0, 3804, 1, 1114111}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 742;
      intArray0[1] = 11688;
      intArray0[2] = 6312;
      intArray0[3] = (-553);
      intArray0[4] = (-275);
      intArray0[5] = 1146;
      intArray0[6] = 92728;
      intArray0[7] = (-2125);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {742, 11688, 6312, (-553), (-275), 1146, 92728, (-2125)}, intArray0);
      
      CharClass charClass1 = charClass0.appendRange(3315, 807);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {742, 11688, 6312, (-553), (-275), 1146, 92728, (-2125)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral(3294, (-1599));
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {742, 11688, 6312, (-553), (-275), 1146, 92728, (-2125)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {742, 11688, 6312, (-553), (-275), 1146, 92728, (-2125)}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {742, 11688, 6312, (-553), (-275), 1146, 92728, (-2125)}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      
      CharClass charClass5 = charClass4.negateClass();
      assertNotNull(charClass5);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {742, 11688, 6312, (-553), (-275), 1146, 92728, (-2125)}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      
      // Undeclared exception!
      charClass5.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-188);
      intArray0[1] = 66640;
      intArray0[2] = 42866;
      intArray0[3] = 3578;
      intArray0[4] = (-12069909);
      intArray0[5] = 2160;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-188), 66640, 42866, 3578, (-12069909), 2160}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(1003, 285);
      assertNotNull(charClass1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-188), 66640, 42866, 3578, (-12069909), 2160}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-188), 66640, 42866, 3578, (-12069909), 66640}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[][] intArray1 = new int[2][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass3 = charClass2.appendTable(intArray1);
      assertNotNull(charClass3);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-188), 66640, 42866, 3578, (-12069909), 66640}, intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass1 = charClass0.appendRange(1058, 1058);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1058, 1058}, intArray0);
      assertSame(charClass0, charClass1);
      
      String string1 = charClass0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[0x422]", string1);
      assertSame(charClass0, charClass1);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1058, 1058}, intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 234;
      CharClass charClass1 = charClass0.appendLiteral(234, 234);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int1 = 2731;
      int int2 = 113980;
      // Undeclared exception!
      charClass1.appendFoldedRange(2731, 113980);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[7][7];
      int[] intArray1 = new int[8];
      intArray1[0] = (-1);
      intArray1[1] = 525;
      intArray1[2] = 681;
      intArray1[3] = (-485);
      intArray1[4] = 91;
      intArray1[5] = (-1071);
      intArray1[6] = 438;
      intArray1[7] = (-222);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 66639;
      intArray2[1] = 438;
      intArray2[2] = 438;
      intArray2[3] = 525;
      intArray2[4] = (-1071);
      intArray2[5] = 91;
      intArray2[6] = 91;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-222);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 438;
      intArray4[1] = 5;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      
      intArray5[0] = (-485);
      intArray5[1] = (-485);
      intArray5[2] = (-485);
      intArray5[3] = 525;
      intArray5[4] = (-1071);
      intArray5[5] = (-1071);
      intArray5[6] = 91;
      intArray5[7] = 525;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray4));
      
      intArray6[0] = 66639;
      intArray6[1] = (-485);
      intArray6[2] = (-222);
      intArray6[3] = 525;
      intArray6[4] = 438;
      intArray6[5] = 266;
      intArray6[6] = 66639;
      intArray6[7] = 681;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[1];
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray2));
      
      intArray7[0] = 681;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, 266);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2854;
      intArray0[1] = (-1591);
      intArray0[2] = (-2312);
      intArray0[3] = (-572);
      intArray0[4] = 2;
      intArray0[5] = 4;
      intArray0[6] = 29;
      intArray0[7] = 1710;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2854, (-1591), (-2312), (-572), 2, 4, 29, 1710}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2854, (-1591), (-2312), (-572), 2, 4, 29, 1710}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.appendRange((-205), (-572));
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2854, (-1591), (-2312), (-572), 2, 4, 29, 1710}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass1.appendLiteral(1710, 944);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2854, (-1591), (-2312), (-572), 2, 4, 29, 1710}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertNotNull(charClass5);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2854, (-1591), (-2312), (-572), 2, 4, 29, 1710}, intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      
      CharClass charClass6 = charClass5.appendClassWithSign(intArray0, 2368);
      assertNotNull(charClass6);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2854, (-1591), (-2312), (-572), 2, 4, 29, 1710}, intArray0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      
      CharClass charClass7 = charClass5.appendLiteral(1723, 1710);
      assertNotNull(charClass7);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2854, (-1591), (-2312), (-572), 2, 4, 29, 1710}, intArray0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass3);
      
      // Undeclared exception!
      try { 
        charClass6.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2697);
      intArray0[1] = (-1688);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-2697), (-1688)}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-2697));
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-2697), 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray1 = new int[7][0];
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-2697), 1114111}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      String string0 = CharClass.charClassToString(intArray0, (-1688));
      assertNotNull(string0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-2697), 1114111}, intArray0);
      assertEquals("[]", string0);
      
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, (-2697));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-946);
      intArray0[0] = (-946);
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-946)}, intArray0);
      
      int int1 = 899;
      CharClass charClass1 = charClass0.appendRange((-5320), 899);
      assertNotNull(charClass1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-946)}, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = (-1272);
      CharClass charClass1 = charClass0.appendLiteral((-1272), 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[1][1];
      int[] intArray1 = new int[2];
      intArray1[0] = (-1272);
      intArray1[1] = 0;
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray0, 1518);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 64;
      intArray0[1] = 1874;
      intArray0[2] = 993;
      intArray0[3] = 1497;
      intArray0[4] = 974;
      intArray0[5] = 43570;
      intArray0[6] = (-1519);
      intArray0[7] = 258;
      CharClass charClass0 = new CharClass(intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {64, 1874, 993, 1497, 974, 43570, (-1519), 258}, intArray0);
      
      int[][] intArray1 = new int[6][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 120;
      intArray2[1] = 258;
      intArray2[2] = 42737;
      intArray2[3] = 64;
      intArray2[4] = 64;
      intArray1[3] = intArray2;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertArrayEquals(new int[] {64, 1874, 993, 1497, 974, 1114111, (-1519), 1056}, intArray0);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1503);
      intArray0[1] = 2981;
      intArray0[2] = 1964;
      intArray0[3] = 105187;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[8][4];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray2 = new int[7];
      intArray2[0] = 1964;
      intArray2[1] = 1964;
      intArray2[2] = 1964;
      intArray2[3] = 2981;
      intArray2[4] = (-1503);
      intArray2[5] = 105187;
      intArray2[6] = (-1503);
      intArray1[5] = intArray2;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      int[][] intArray3 = new int[4][7];
      intArray3[0] = intArray0;
      intArray3[1] = intArray2;
      intArray3[2] = intArray0;
      int[] intArray4 = new int[6];
      intArray4[0] = 1964;
      intArray4[1] = 4;
      intArray4[2] = (-1503);
      intArray4[3] = 2771;
      intArray4[4] = 2981;
      intArray4[5] = 1964;
      intArray3[3] = intArray4;
      CharClass charClass2 = charClass1.appendTableWithSign(intArray3, (-1361));
      CharClass charClass3 = charClass2.appendClass(intArray0);
      CharClass charClass4 = charClass3.appendRange(2038, (-1503));
      CharClass charClass5 = charClass4.appendNegatedClass(intArray0);
      // Undeclared exception!
      charClass5.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[5];
      intArray0[0] = 2130;
      intArray0[1] = 108;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-477);
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 912;
      intArray0[1] = (-558);
      intArray0[2] = 1;
      intArray0[3] = (-3959306);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass0.appendFoldedRange((-3959306), (-663));
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      CharClass charClass3 = charClass2.negateClass();
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, 187);
      CharClass charClass5 = charClass4.cleanClass();
      charClass1.appendClass(intArray0);
      String string0 = charClass5.toString();
      assertEquals("[0xfffffdd3-0x38f 0x1-0xffc395f6]", string0);
      
      CharClass charClass6 = charClass4.appendLiteral(912, 1);
      int[] intArray1 = charClass6.toArray();
      CharClass.charClassToString(intArray1, (-1367));
      charClass1.appendFoldedClass(intArray1);
      charClass3.appendLiteral(912, (-1367));
      CharClass charClass7 = new CharClass();
      int[] intArray2 = charClass3.toArray();
      assertEquals(258, intArray2.length);
      
      charClass5.appendFoldedRange(187, (-558));
      assertArrayEquals(new int[] {912, (-558), 1, (-3959306)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = null;
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[5][7];
      int[] intArray1 = new int[9];
      intArray1[0] = (-1502);
      intArray1[1] = 2869;
      intArray1[2] = (-3959306);
      intArray1[3] = (-883);
      intArray1[4] = (-1);
      intArray1[5] = (-1986);
      intArray1[6] = (-929);
      intArray1[7] = (-1993);
      intArray1[8] = 432;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = (-1993);
      intArray2[1] = (-1986);
      intArray2[2] = (-929);
      intArray2[3] = (-1);
      intArray2[4] = (-883);
      intArray2[5] = (-1502);
      intArray2[6] = (-1993);
      intArray2[7] = (-1502);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = (-1);
      intArray3[1] = (-1502);
      intArray3[2] = (-1);
      intArray3[3] = (-1502);
      intArray3[4] = (-3959306);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      intArray4[0] = 432;
      intArray4[1] = 432;
      intArray4[2] = 2598;
      intArray4[3] = (-1502);
      intArray4[4] = 432;
      intArray4[5] = (-1986);
      intArray4[6] = 432;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      intArray5[0] = 1323;
      intArray5[1] = 2598;
      intArray5[2] = 2598;
      intArray5[3] = 432;
      intArray5[4] = (-1502);
      intArray5[5] = (-883);
      intArray5[6] = 3106;
      intArray5[7] = (-929);
      intArray0[4] = intArray5;
      // Undeclared exception!
      charClass0.appendTableWithSign(intArray0, (-929));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1178);
      intArray0[1] = (-1442);
      intArray0[2] = (-1630);
      intArray0[3] = (-1264);
      intArray0[4] = (-3144);
      intArray0[5] = 142;
      intArray0[6] = 1323;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2424;
      intArray0[1] = (-3910);
      intArray0[2] = 9703;
      intArray0[3] = (-1576);
      intArray0[4] = 659;
      intArray0[5] = 0;
      intArray0[6] = 2;
      intArray0[7] = (-2338);
      intArray0[8] = 972;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.appendRange(258, (-682));
      CharClass charClass3 = charClass2.cleanClass();
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[7];
      intArray1[0] = 2922;
      intArray1[1] = (-682);
      intArray1[2] = (-682);
      intArray1[3] = (-682);
      intArray1[4] = 258;
      intArray1[5] = 258;
      intArray1[6] = 258;
      intArray0[0] = intArray1;
      CharClass charClass4 = charClass3.appendTable(intArray0);
      // Undeclared exception!
      try { 
        charClass4.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = 1114111;
      intArray0[1] = 913;
      intArray0[2] = (-249);
      intArray0[3] = (-2914);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass1.appendClass(intArray0);
      int[][] intArray1 = new int[7][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass3 = charClass2.appendNegatedTable(intArray1);
      CharClass charClass4 = charClass3.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass4);
  }
}
