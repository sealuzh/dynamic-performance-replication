/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 11:39:19 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.VectorVectorOperation;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      int int0 = 0;
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV(")8A@3?dH]K~W@fs");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      int int0 = 17;
      Vector vector0 = compressedVector0.copyOfLength(17);
      CompressedVector compressedVector1 = CompressedVector.zero(17, 17);
      int[] intArray0 = new int[4];
      intArray0[0] = 17;
      intArray0[1] = 17;
      intArray0[2] = 17;
      intArray0[3] = 17;
      compressedVector1.subtract(vector0);
      // Undeclared exception!
      try { 
        compressedVector1.select(intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '17' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(39, 39);
      compressedVector0.toRowMatrix();
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertEquals(0.0, compressedVector1.density(), 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt(39);
      assertFalse(boolean0);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(37, 37);
      compressedVector0.nonZeroAt(37);
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(37);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      // Undeclared exception!
      try { 
        compressedVector0.forEach((Consumer<? super Double>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.iterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(38);
      compressedVector0.manhattanNorm();
      boolean boolean0 = compressedVector0.nonZeroAt(38);
      assertEquals(38, compressedVector0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      CompressedVector compressedVector0 = CompressedVector.fromCSV("");
      CompressedVector compressedVector1 = CompressedVector.fromCSV("");
      compressedVector1.shuffle();
      compressedVector0.multiply(0.0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)82;
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-56);
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.setAll(279.89711);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1780.38028;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-223.47664004);
      doubleArray0[4] = (-197.04);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 402.0988;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll(3733.031638108341);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      boolean boolean0 = compressedVector0.nonZeroAt(0);
      assertTrue(boolean0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV(" ");
      boolean boolean0 = compressedVector0.nonZeroAt(1000);
      assertEquals(0, compressedVector0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      short short0 = (short)9;
      CompressedVector compressedVector0 = CompressedVector.zero((int) (short)9);
      // Undeclared exception!
      try { 
        compressedVector0.update((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1044.7533864396;
      doubleArray0[1] = (-1422.5528);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer0 = Integer.valueOf(1865);
      short short0 = (short)16;
      Short short1 = new Short((short)16);
      Short.toUnsignedInt((short)0);
      hashMap0.put(integer0, short1);
      hashMap0.entrySet();
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(5, 2);
      compressedVector0.setAll(2);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      assertEquals(0.8, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 37;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      int int0 = (-6667);
      // Undeclared exception!
      try { 
        CompressedVector.zero(3521, (-6667));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -6667.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(194, 194);
      int int0 = 13;
      compressedVector0.set(13, 13);
      // Undeclared exception!
      try { 
        compressedVector0.toCSV((NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector.zero(268);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CompressedVector.random(353, (double) 268, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("Given vector should have the same length as number of rows in the given matrix: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector1 = CompressedVector.random(908, 0.0, (Random) mockRandom0);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(908, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(268);
      Vector.zero(1);
      compressedVector0.nonZeroAt(3);
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector.random(353, (double) 1, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(268, 841.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '268' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(33, 5);
      double double0 = compressedVector0.getOrElse(2, 5);
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(29, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.nonZeroIterator();
      int int0 = (-124);
      int int1 = 0;
      Locale locale0 = Locale.JAPANESE;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      compressedVector0.toCSV(numberFormat0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-124), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV(" ");
      compressedVector0.swapElements(282, 282);
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(136, 282);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '136' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toDiagonalMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-2354), vectorFunction0);
      compressedVector0.setAll(0.0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)40;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1044.7533864396;
      doubleArray0[1] = (-1422.5528);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1044.7533864396, (-2886.28472750525)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer0 = Integer.valueOf(1865);
      short short0 = (short)16;
      Short short1 = new Short((short)16);
      Short.toUnsignedInt((short)0);
      hashMap0.put(integer0, short1);
      hashMap0.entrySet();
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2774.179385;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1293.0798);
      doubleArray0[5] = 2209.75178859635;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.iterator();
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      int int0 = 0;
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      compressedVector0.product();
      // Undeclared exception!
      try { 
        compressedVector1.blankOfLength((-560));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -560
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 100.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-2354)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-2354), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)42;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.multiply((double) (byte)42);
      MockRandom mockRandom0 = new MockRandom((byte)42);
      // Undeclared exception!
      try { 
        CompressedVector.random(32, 5050.621, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2833.362022801031;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toBinary();
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      Vector vector0 = compressedVector0.blankOfLength(110);
      byte[] byteArray0 = compressedVector1.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      CompressedVector compressedVector2 = CompressedVector.fromMap(hashMap0, 110);
      assertTrue(compressedVector2.equals((Object)vector0));
      assertEquals(0.0, compressedVector2.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(803, 803);
      compressedVector0.nonZeroIterator();
      Locale locale0 = Locale.JAPANESE;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      compressedVector0.toCSV(numberFormat0);
      int int0 = 37;
      int int1 = 1101;
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(1101, 37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1101' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2146844611;
      doubleArray0[1] = (double) 2146844611;
      doubleArray0[2] = (double) 781;
      doubleArray0[3] = (double) 2146844611;
      doubleArray0[4] = (double) 781;
      doubleArray0[5] = (double) 2146844611;
      int[] intArray0 = new int[8];
      intArray0[0] = 781;
      intArray0[1] = 781;
      intArray0[2] = 2146844611;
      intArray0[3] = 2146844611;
      intArray0[4] = 2146844611;
      intArray0[5] = 2146844611;
      intArray0[6] = 781;
      intArray0[7] = 2146844611;
      CompressedVector compressedVector0 = new CompressedVector(781, 2146844611, doubleArray0, intArray0);
      VectorPredicate vectorPredicate0 = mock(VectorPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(vectorPredicate0).test(anyInt() , anyDouble());
      compressedVector0.non(vectorPredicate0);
      int int0 = (-577);
      MockRandom mockRandom0 = new MockRandom(23);
      compressedVector0.iterator();
      // Undeclared exception!
      try { 
        CompressedVector.random(23, (-1.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1044.7533864396;
      doubleArray0[1] = (-1422.5528);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-2146571765), vectorFunction0);
      CompressedVector compressedVector1 = CompressedVector.zero(48, 48);
      assertEquals(0.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 37;
      CompressedVector compressedVector0 = new CompressedVector(37);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      int int1 = (-30);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-30), 1865);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -30
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toDiagonalMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Short.toUnsignedInt((short)0);
      Integer integer0 = new Integer(16);
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer1 = new Integer((-1669));
      Integer integer2 = Integer.getInteger("[Jq]7s\"VW=/", (-1669));
      Integer.getInteger("n", integer2);
      Short short0 = new Short((short)3);
      hashMap0.put(integer1, short0);
      hashMap0.entrySet();
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 1557);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(37);
      compressedVector0.swapElements(1387, 8);
      assertEquals(37, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(37);
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 1387;
      intArray0[2] = 37;
      compressedVector0.swapElements(1387, 2);
      int int0 = 136;
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(136, 1387);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '136' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1044.7533864396;
      doubleArray0[1] = (-1422.5528);
      Short short0 = new Short((short)9);
      Short.toUnsignedInt((short) (-2890));
      Integer integer0 = new Integer((short) (-2890));
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer1 = new Integer(735);
      hashMap0.put(integer1, short0);
      hashMap0.entrySet();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 3445);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(271, vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(3445, compressedVector0.length());
      
      CompressedVector compressedVector1 = CompressedVector.zero(4);
      assertEquals(4, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1044.7533864396;
      doubleArray0[1] = (-1422.5528);
      Short short0 = new Short((short)9);
      Short.toUnsignedInt((short) (-2923));
      Integer integer0 = new Integer((short) (-2923));
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      hashMap0.clear();
      Integer integer1 = new Integer(3);
      hashMap0.put(integer1, short0);
      hashMap0.entrySet();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 3445);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(short) (-2923)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(271, vectorFunction0);
      CompressedVector.zero(4);
      compressedVector0.nonZeroIterator();
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)9;
      CompressedVector compressedVector0 = CompressedVector.fromBinary(byteArray0);
      SparseVector.zero((int) (byte)9);
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1044.7533864396;
      doubleArray0[1] = (-1422.5528);
      Short short0 = new Short((short)9);
      Short.toUnsignedInt((short) (-2890));
      Integer integer0 = new Integer((short) (-2890));
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer1 = new Integer(735);
      hashMap0.put(integer1, short0);
      hashMap0.entrySet();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 3445);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1778.027).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(271, vectorFunction0);
      CompressedVector compressedVector1 = CompressedVector.zero(4);
      compressedVector0.swapElements((short) (-2890), 16);
      // Undeclared exception!
      try { 
        compressedVector1.set(20, 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '20' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 1080;
      CompressedVector compressedVector0 = CompressedVector.zero(3, 3);
      compressedVector0.setAll(1080);
      int int1 = (-1066);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1381), 1080);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(24, 24);
      compressedVector0.setAll(Double.POSITIVE_INFINITY);
      compressedVector0.swapElements(24, (-2481));
      assertEquals(24, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1039);
      compressedVector0.set(78, 78);
      double double0 = compressedVector0.getOrElse(78, 1039);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(78.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(37);
      compressedVector0.sliceLeft(37);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)37).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(37, vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.sliceLeft(74);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '37' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 1031;
      CompressedVector compressedVector0 = new CompressedVector(1071, 1031);
      compressedVector0.setAll(1755.40187);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(9, 1071);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1044.7533864396;
      doubleArray0[1] = (-1422.5528);
      Short short0 = new Short((short)9);
      Short.toUnsignedInt((short) (-2890));
      Integer integer0 = new Integer((short) (-2890));
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer1 = new Integer(735);
      hashMap0.put(integer1, short0);
      hashMap0.entrySet();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 3445);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1422.5528)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((short) (-2890), vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(735, Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 1054;
      CompressedVector compressedVector0 = CompressedVector.zero(1068, 33);
      compressedVector0.setAll(1936.7102571109);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1068, 33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(37);
      compressedVector0.sliceLeft(37);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)37).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(37, vectorFunction0);
      boolean boolean0 = compressedVector0.nonZeroAt((-1498));
      assertEquals(0.02702702702702703, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(37, 3);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(3);
      assertEquals(3, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      
      compressedVector0.swapElements(37, 3);
      assertEquals(37, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(37, 37);
      compressedVector0.setAll(37);
      int int0 = (-1051);
      int int1 = 25;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1051), 25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1044.7533864396;
      Short short0 = new Short((short) (-1));
      Short.toUnsignedInt((short) (-1));
      Integer integer0 = new Integer((short)9);
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer1 = new Integer((short) (-1));
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>();
      Short short1 = new Short((short)8);
      Short short2 = new Short((short)9);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap1, 65535);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)65535).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(65535, vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(837, 65535);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1067);
      compressedVector0.set(22, 22);
      compressedVector0.swapElements(1067, 22);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1062, 1062);
      compressedVector0.setAll(2193.899);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1074), 30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1080, 1080);
      compressedVector0.setAll(1080);
      compressedVector0.set(3, 3);
      // Undeclared exception!
      try { 
        compressedVector0.slice((-1567), (-2138));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [-1567..-2138].
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      Short.toUnsignedInt((short) (-1));
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer0 = new Integer((short) (-1));
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>();
      Short short1 = new Short((short)9);
      Short short2 = new Short((short)9);
      CompressedVector compressedVector0 = CompressedVector.zero(65535);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)65535).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((short)9, vectorFunction0);
      Short.toUnsignedInt((short)9);
      compressedVector0.iterator();
      compressedVector0.equals((Object) short2);
      compressedVector0.swapElements((short)9, 65535);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      Short.toUnsignedInt((short) (-1));
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer0 = new Integer((short) (-1));
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>();
      Short short1 = new Short((short)9);
      Short short2 = new Short((short)9);
      CompressedVector compressedVector0 = CompressedVector.zero(65535);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)65535).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(65535, vectorFunction0);
      compressedVector0.iterator();
      compressedVector0.swapElements(842, 65535);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1054), vectorFunction1);
      compressedVector0.swapElements(842, 32);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1074, 1074);
      compressedVector0.setAll(1074);
      int int0 = 50;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(50, (-1051));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(889);
      compressedVector0.set(22, 22);
      Matrix matrix0 = compressedVector0.toColumnMatrix();
      Vector vector0 = compressedVector0.multiply(matrix0);
      compressedVector0.min();
      compressedVector0.swapElements((-153), 22);
      assertNotSame(compressedVector0, vector0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 59.31154550914;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toDiagonalMatrix();
      VectorVectorOperation<Byte> vectorVectorOperation0 = (VectorVectorOperation<Byte>) mock(VectorVectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((VectorOperation) null).when(vectorVectorOperation0).partiallyApply(any(org.la4j.vector.SparseVector.class));
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      Vector vector0 = compressedVector1.shuffle();
      Vector vector1 = compressedVector0.hadamardProduct(vector0);
      // Undeclared exception!
      try { 
        compressedVector0.apply(vectorVectorOperation0, vector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      int int0 = Double.MAX_EXPONENT;
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer0 = new Integer((short) (-1));
      HashMap<Integer, Short> hashMap1 = new HashMap<Integer, Short>();
      Short short1 = new Short((short)9);
      Short short2 = new Short((short)9);
      CompressedVector compressedVector0 = CompressedVector.zero(1023);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1023).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1023, vectorFunction0);
      compressedVector0.iterator();
      compressedVector0.swapElements(842, 1023);
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)9;
      doubleArray0[1] = (double) 1023;
      doubleArray0[2] = (double) 1023;
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) 1023;
      doubleArray0[5] = (double) 842;
      doubleArray0[6] = (double) 1023;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.to(vectorFactory0);
      assertEquals(8, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(1071);
      compressedVector0.set(3, 3);
      assertEquals(1, compressedVector0.cardinality());
      
      double[] doubleArray0 = new double[4];
      CompressedVector.fromArray(doubleArray0);
      CompressedVector compressedVector1 = new CompressedVector();
      compressedVector0.set(3, 0.0);
      assertEquals(0, compressedVector0.cardinality());
  }
}
