/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 06:09:13 GMT 2019
 */

package org.apache.commons.jxpath.ri.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import org.apache.commons.jxpath.ri.parser.SimpleCharStream;
import org.apache.commons.jxpath.ri.parser.Token;
import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathParserTokenManager_ESTest extends XPathParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"lang\"");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(32768L);
      assertEquals(6L, long0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AeJ,;D\"Z=0,jVx");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 5, 5, 5);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      xPathParserTokenManager0.setDebugStream((PrintStream) null);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"]\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-642), (-642));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals((-642), simpleCharStream0.getEndLine());
      assertEquals((-642), simpleCharStream0.getBeginColumn());
      assertEquals((-642), simpleCharStream0.getEndColumn());
      assertEquals((-642), simpleCharStream0.getLine());
      assertEquals((-642), simpleCharStream0.getBeginLine());
      assertEquals((-642), simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('\"', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-642), simpleCharStream0.getEndLine());
      assertEquals((-642), simpleCharStream0.getBeginColumn());
      assertEquals((-642), simpleCharStream0.getEndColumn());
      assertEquals((-642), simpleCharStream0.getLine());
      assertEquals((-642), simpleCharStream0.getBeginLine());
      assertEquals((-642), simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<sRNJ)0%RT/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0, 0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("id");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1133, 1133, 1133);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"lang\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      xPathParserTokenManager0.SwitchTo(0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-47);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-47)}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 422, 1702, 422);
      assertArrayEquals(new byte[] {(byte) (-47)}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, byteArray0.length);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-47)}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 422, column 1703.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"\t\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 9, 9);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char[] charArray0 = new char[1];
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, int0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 9, column 18.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-118);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte)103, (byte) (-118), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 59, 7, 7);
      assertArrayEquals(new byte[] {(byte)75, (byte)103, (byte) (-118), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)75, (byte)103, (byte) (-118), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)75, (byte)103, (byte) (-118), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(59, simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(59, simpleCharStream0.getLine());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(59, simpleCharStream0.getBeginLine());
      assertEquals("Kg", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(8, token0.endColumn);
      assertEquals(7, token0.beginColumn);
      assertEquals(59, token0.endLine);
      assertEquals(59, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-110);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)101);
      assertArrayEquals(new byte[] {(byte)60, (byte) (-110), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)60, (byte) (-110), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)60, (byte) (-110), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(pushbackInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, 797, (byte)0, (byte) (-110));
      assertArrayEquals(new byte[] {(byte)60, (byte) (-110), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertArrayEquals(new byte[] {(byte)60, (byte) (-110), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)60, (byte) (-110), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(797, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(797, simpleCharStream0.getLine());
      assertEquals(797, simpleCharStream0.getBeginLine());
      assertEquals("<", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(797, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(13, token0.kind);
      assertEquals(797, token0.beginLine);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 797, column 1.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Pk7B'.yt%s");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('P', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      stringReader0.reset();
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("k7B", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(2, token0.beginColumn);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("'.yt%sPk7B'", token1.toString());
      assertEquals(14, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(5, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(18, token1.kind);
      assertEquals(15, token1.endColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("contains");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3, 60, 3);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(67, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertEquals(67, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(60, simpleCharStream0.getBeginColumn());
      assertEquals("contains", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals(60, token0.beginColumn);
      assertEquals(59, token0.kind);
      assertEquals(67, token0.endColumn);
      assertEquals(3, token0.endLine);
      assertEquals(3, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("round");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1, 105);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(105, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(109, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(109, simpleCharStream0.getEndColumn());
      assertEquals("round", token0.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(109, token0.endColumn);
      assertEquals(76, token0.kind);
      assertEquals(105, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("boolean");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("boolean", token0.toString());
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("concat");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals("concat", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(6, token0.endColumn);
      assertEquals(57, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<=");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3, 3, 3);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals("<=", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token0.endLine);
      assertEquals(3, token0.beginLine);
      assertEquals(14, token0.kind);
      assertEquals(3, token0.beginColumn);
      assertEquals(4, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)46, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)46, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)46, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(".", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(82, token0.kind);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)101);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(pushbackInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, 797, (byte)0, (byte) (-110));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 797, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7|)7E1p,q<~0");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(55, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 683, 48);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(683, simpleCharStream0.getEndLine());
      assertEquals(683, simpleCharStream0.getLine());
      assertEquals(683, simpleCharStream0.getBeginLine());
      assertEquals(48, simpleCharStream0.getColumn());
      assertEquals(48, simpleCharStream0.getEndColumn());
      assertEquals(48, simpleCharStream0.getBeginColumn());
      assertEquals("|", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(683, token0.beginLine);
      assertEquals(48, token0.beginColumn);
      assertEquals(48, token0.endColumn);
      assertEquals(683, token0.endLine);
      assertEquals(8, token0.kind);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x#Ya$");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("x", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<sRNJ)0%RT/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 0, 0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      simpleCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("<", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(13, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("sRNJ", token1.toString());
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(78, token1.kind);
      assertEquals(5, token1.endColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tq+xL=&");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 98, 98);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(98, simpleCharStream0.getBeginLine());
      assertEquals(98, simpleCharStream0.getEndColumn());
      assertEquals(98, simpleCharStream0.getLine());
      assertEquals(98, simpleCharStream0.getColumn());
      assertEquals(98, simpleCharStream0.getBeginColumn());
      assertEquals(98, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('t', char0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(99, simpleCharStream0.getEndColumn());
      assertEquals(98, simpleCharStream0.getBeginLine());
      assertEquals(98, simpleCharStream0.getLine());
      assertEquals(99, simpleCharStream0.getColumn());
      assertEquals(99, simpleCharStream0.getBeginColumn());
      assertEquals(98, simpleCharStream0.getEndLine());
      assertEquals("q", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(98, token0.beginLine);
      assertEquals(99, token0.beginColumn);
      assertEquals(99, token0.endColumn);
      assertEquals(98, token0.endLine);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)53, (-999));
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(7, byteArray0.length);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(7, byteArray0.length);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)112, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-999), simpleCharStream0.getColumn());
      assertEquals(53, simpleCharStream0.getEndLine());
      assertEquals((-999), simpleCharStream0.getBeginColumn());
      assertEquals(53, simpleCharStream0.getBeginLine());
      assertEquals((-999), simpleCharStream0.getEndColumn());
      assertEquals(53, simpleCharStream0.getLine());
      assertEquals("p", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(53, token0.beginLine);
      assertEquals((-999), token0.endColumn);
      assertEquals(53, token0.endLine);
      assertEquals((-999), token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("node");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("node", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(31, token0.kind);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Am><Z(KC");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(65, int0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("m", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      StringReader stringReader0 = new StringReader("last");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 50, 50);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("last", token0.toString());
      assertEquals(50, token0.endLine);
      assertEquals(48, token0.kind);
      assertEquals(50, token0.beginLine);
      assertEquals(50, token0.beginColumn);
      assertEquals(53, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("j`L\"G>TJ:,Gk0eJ|H|");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 32, 100, 100);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(100, simpleCharStream0.getColumn());
      assertEquals(100, simpleCharStream0.getEndColumn());
      assertEquals(32, simpleCharStream0.getEndLine());
      assertEquals(100, simpleCharStream0.getBeginColumn());
      assertEquals(32, simpleCharStream0.getBeginLine());
      assertEquals(32, simpleCharStream0.getLine());
      assertEquals("j", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(100, token0.endColumn);
      assertEquals(32, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(32, token0.beginLine);
      assertEquals(100, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hgmbI-M");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 37, 48, 118);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(48, simpleCharStream0.getBeginColumn());
      assertEquals(37, simpleCharStream0.getBeginLine());
      assertEquals(37, simpleCharStream0.getLine());
      assertEquals(37, simpleCharStream0.getEndLine());
      assertEquals(54, simpleCharStream0.getColumn());
      assertEquals(54, simpleCharStream0.getEndColumn());
      assertEquals("hgmbI-M", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(37, token0.endLine);
      assertEquals(54, token0.endColumn);
      assertEquals(37, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(48, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ggPV");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("ggPV", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"descendant::\"");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'\"', 'd'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3207, 3207, 1311);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3215, simpleCharStream0.getEndColumn());
      assertEquals(3207, simpleCharStream0.getEndLine());
      assertEquals(3215, simpleCharStream0.getColumn());
      assertEquals(3207, simpleCharStream0.getBeginColumn());
      assertEquals(3207, simpleCharStream0.getBeginLine());
      assertEquals(3207, simpleCharStream0.getLine());
      assertEquals("escendant", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, simpleCharStream0.bufpos);
      assertEquals(3207, token0.beginLine);
      assertEquals(3207, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(3207, token0.endLine);
      assertEquals(3215, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("div");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 285, 285);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(287, simpleCharStream0.getEndColumn());
      assertEquals(285, simpleCharStream0.getLine());
      assertEquals(285, simpleCharStream0.getBeginLine());
      assertEquals(285, simpleCharStream0.getEndLine());
      assertEquals(287, simpleCharStream0.getColumn());
      assertEquals(285, simpleCharStream0.getBeginColumn());
      assertEquals("div", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(30, token0.kind);
      assertEquals(285, token0.beginColumn);
      assertEquals(285, token0.endLine);
      assertEquals(285, token0.beginLine);
      assertEquals(287, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("b", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ancestor::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1000), 48);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1000), simpleCharStream0.getEndLine());
      assertEquals(57, simpleCharStream0.getEndColumn());
      assertEquals((-1000), simpleCharStream0.getBeginLine());
      assertEquals(57, simpleCharStream0.getColumn());
      assertEquals(48, simpleCharStream0.getBeginColumn());
      assertEquals((-1000), simpleCharStream0.getLine());
      assertEquals("ancestor::", token0.toString());
      assertEquals(9, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(48, token0.beginColumn);
      assertEquals((-1000), token0.beginLine);
      assertEquals(38, token0.kind);
      assertEquals(57, token0.endColumn);
      assertEquals((-1000), token0.endLine);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals((-1000), simpleCharStream0.getEndLine());
      assertEquals(57, simpleCharStream0.getEndColumn());
      assertEquals((-1000), simpleCharStream0.getBeginLine());
      assertEquals(57, simpleCharStream0.getColumn());
      assertEquals(48, simpleCharStream0.getBeginColumn());
      assertEquals((-1000), simpleCharStream0.getLine());
      assertEquals(9, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`^OyHs3u");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^KXV%");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 71, 71);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 71, column 71.  Encountered: \"^\" (94), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"\t\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 9, 9);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(17, simpleCharStream0.getEndColumn());
      assertEquals(17, simpleCharStream0.getColumn());
      assertEquals(9, simpleCharStream0.getEndLine());
      assertEquals(9, simpleCharStream0.getBeginColumn());
      assertEquals(9, simpleCharStream0.getBeginLine());
      assertEquals(9, simpleCharStream0.getLine());
      assertEquals("\"\t\"", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(9, token0.beginColumn);
      assertEquals(9, token0.beginLine);
      assertEquals(18, token0.kind);
      assertEquals(9, token0.endLine);
      assertEquals(17, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      StringReader stringReader0 = new StringReader("Z");
      assertNotNull(stringReader0);
      
      simpleCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("Z", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("YC|nI|525Xqd0Tua");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1481, 17);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(18, simpleCharStream0.getColumn());
      assertEquals(1481, simpleCharStream0.getEndLine());
      assertEquals(1481, simpleCharStream0.getBeginLine());
      assertEquals(18, simpleCharStream0.getEndColumn());
      assertEquals(17, simpleCharStream0.getBeginColumn());
      assertEquals(1481, simpleCharStream0.getLine());
      assertEquals("YC", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1481, token0.endLine);
      assertEquals(1481, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(18, token0.endColumn);
      assertEquals(17, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("N", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M4lo].(/J_h6!jqfmS");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("M4lo", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(4, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JIn`^");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2152), 53);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-2152), simpleCharStream0.getBeginLine());
      assertEquals((-2152), simpleCharStream0.getEndLine());
      assertEquals(53, simpleCharStream0.getBeginColumn());
      assertEquals(55, simpleCharStream0.getEndColumn());
      assertEquals(55, simpleCharStream0.getColumn());
      assertEquals((-2152), simpleCharStream0.getLine());
      assertEquals("JIn", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(55, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(53, token0.beginColumn);
      assertEquals((-2152), token0.endLine);
      assertEquals((-2152), token0.beginLine);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertEquals((-2152), simpleCharStream0.getBeginLine());
      assertEquals((-2152), simpleCharStream0.getEndLine());
      assertEquals(53, simpleCharStream0.getBeginColumn());
      assertEquals(55, simpleCharStream0.getEndColumn());
      assertEquals(55, simpleCharStream0.getColumn());
      assertEquals((-2152), simpleCharStream0.getLine());
      assertEquals("JIn", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals((-2152), token1.endLine);
      assertEquals(53, token1.beginColumn);
      assertEquals((-2152), token1.beginLine);
      assertEquals(55, token1.endColumn);
      assertEquals(78, token1.kind);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("I!q^");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 102, 3, 102);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(102, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(102, simpleCharStream0.getBeginLine());
      assertEquals(102, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("I", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(102, token0.endLine);
      assertEquals(3, token0.endColumn);
      assertEquals(102, token0.beginLine);
      assertEquals(3, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HxM#");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1844, (-1938));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1844, simpleCharStream0.getLine());
      assertEquals(1844, simpleCharStream0.getBeginLine());
      assertEquals((-1938), simpleCharStream0.getBeginColumn());
      assertEquals((-1936), simpleCharStream0.getColumn());
      assertEquals((-1936), simpleCharStream0.getEndColumn());
      assertEquals(1844, simpleCharStream0.getEndLine());
      assertEquals("HxM", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1936), token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals((-1938), token0.beginColumn);
      assertEquals(1844, token0.endLine);
      assertEquals(1844, token0.beginLine);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(1844, simpleCharStream0.getLine());
      assertEquals(1844, simpleCharStream0.getBeginLine());
      assertEquals((-1938), simpleCharStream0.getBeginColumn());
      assertEquals((-1936), simpleCharStream0.getColumn());
      assertEquals((-1936), simpleCharStream0.getEndColumn());
      assertEquals(1844, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GdtL<Q%%yJTdBi`");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 62, 62);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(62, simpleCharStream0.getEndLine());
      assertEquals(62, simpleCharStream0.getBeginColumn());
      assertEquals(62, simpleCharStream0.getLine());
      assertEquals(65, simpleCharStream0.getEndColumn());
      assertEquals(62, simpleCharStream0.getBeginLine());
      assertEquals(65, simpleCharStream0.getColumn());
      assertEquals("GdtL", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(62, token0.beginColumn);
      assertEquals(65, token0.endColumn);
      assertEquals(62, token0.beginLine);
      assertEquals(62, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FrGq*E$sFo$b$M5C3");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1081, 115, 3);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1081, simpleCharStream0.getBeginLine());
      assertEquals(1081, simpleCharStream0.getLine());
      assertEquals(115, simpleCharStream0.getBeginColumn());
      assertEquals(118, simpleCharStream0.getColumn());
      assertEquals(118, simpleCharStream0.getEndColumn());
      assertEquals(1081, simpleCharStream0.getEndLine());
      assertEquals("FrGq", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1081, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(115, token0.beginColumn);
      assertEquals(1081, token0.beginLine);
      assertEquals(118, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CGj}cb<nt.");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3, 3);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndLine());
      assertEquals("CGj", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token0.endLine);
      assertEquals(3, token0.beginColumn);
      assertEquals(3, token0.beginLine);
      assertEquals(5, token0.endColumn);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B{");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 567, 567);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(567, simpleCharStream0.getBeginColumn());
      assertEquals(567, simpleCharStream0.getEndLine());
      assertEquals(567, simpleCharStream0.getEndColumn());
      assertEquals(567, simpleCharStream0.getColumn());
      assertEquals(567, simpleCharStream0.getLine());
      assertEquals(567, simpleCharStream0.getBeginLine());
      assertEquals("B", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(567, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(567, token0.beginColumn);
      assertEquals(567, token0.endLine);
      assertEquals(567, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AeJ,;D\"Z=0,jVx");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 5, 5, 5);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getLine());
      assertEquals("AeJ", token0.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, token0.endColumn);
      assertEquals(5, token0.endLine);
      assertEquals(5, token0.beginColumn);
      assertEquals(5, token0.beginLine);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ln@2");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("Ln", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("@", token1.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(86, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1920, (byte)84);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1919), byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals((-1919), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, byteArray0.length);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-1919), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, byteArray0.length);
      
      StringReader stringReader0 = new StringReader("?so");
      assertNotNull(stringReader0);
      
      simpleCharStream0.ReInit((Reader) stringReader0, (int) (byte)84, (int) (byte)84, (int) (byte)84);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1919), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 84, column 84.  Encountered: \"?\" (63), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">-A=");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(">", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(15, token0.kind);
      assertEquals(1, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 49, 5);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(49, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(49, simpleCharStream0.getEndLine());
      assertEquals(49, simpleCharStream0.getLine());
      assertEquals("=", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(49, token0.beginLine);
      assertEquals(11, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(49, token0.endLine);
      assertEquals(5, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":sRJ)0%RT/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-12), 6, 6);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals((-12), simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getBeginColumn());
      assertEquals((-12), simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals((-12), simpleCharStream0.getLine());
      assertEquals(":", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-12), token0.endLine);
      assertEquals(6, token0.beginColumn);
      assertEquals((-12), token0.beginLine);
      assertEquals(6, token0.endColumn);
      assertEquals(79, token0.kind);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("35Dz!zJOI6;JlHr");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("35", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(2, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("91g9EeRqPTbqd/");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(57, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-817), (-817));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-817), simpleCharStream0.getColumn());
      assertEquals((-817), simpleCharStream0.getLine());
      assertEquals((-817), simpleCharStream0.getEndColumn());
      assertEquals((-817), simpleCharStream0.getBeginColumn());
      assertEquals((-817), simpleCharStream0.getEndLine());
      assertEquals((-817), simpleCharStream0.getBeginLine());
      assertEquals("1", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(20, token0.kind);
      assertEquals((-817), token0.endLine);
      assertEquals((-817), token0.beginColumn);
      assertEquals((-817), token0.beginLine);
      assertEquals((-817), token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0^k^NZ<,`PlGBO[t");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("0", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      char char0 = simpleCharStream0.BeginToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      assertEquals('\u0000', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("/", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(6, token0.kind);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">-A=");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(62, int0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("-", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(10, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tq+xL=&");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 98, 98);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(99, simpleCharStream0.getColumn());
      assertEquals(98, simpleCharStream0.getLine());
      assertEquals(98, simpleCharStream0.getEndLine());
      assertEquals(99, simpleCharStream0.getEndColumn());
      assertEquals(98, simpleCharStream0.getBeginColumn());
      assertEquals(98, simpleCharStream0.getBeginLine());
      assertEquals("tq", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(99, token0.endColumn);
      assertEquals(98, token0.beginColumn);
      assertEquals(98, token0.endLine);
      assertEquals(98, token0.beginLine);
      assertEquals(78, token0.kind);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(98, simpleCharStream0.getLine());
      assertEquals(100, simpleCharStream0.getColumn());
      assertEquals(98, simpleCharStream0.getEndLine());
      assertEquals(100, simpleCharStream0.getEndColumn());
      assertEquals(100, simpleCharStream0.getBeginColumn());
      assertEquals(98, simpleCharStream0.getBeginLine());
      assertEquals("+", token1.toString());
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(100, token1.endColumn);
      assertEquals(98, token1.endLine);
      assertEquals(100, token1.beginColumn);
      assertEquals(98, token1.beginLine);
      assertEquals(9, token1.kind);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*Ys(nm(rp");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2472), (-2472));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-2472), simpleCharStream0.getEndLine());
      assertEquals((-2472), simpleCharStream0.getBeginLine());
      assertEquals((-2472), simpleCharStream0.getColumn());
      assertEquals((-2472), simpleCharStream0.getLine());
      assertEquals((-2472), simpleCharStream0.getBeginColumn());
      assertEquals((-2472), simpleCharStream0.getEndColumn());
      assertEquals("*", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-2472), token0.endLine);
      assertEquals(88, token0.kind);
      assertEquals((-2472), token0.beginColumn);
      assertEquals((-2472), token0.endColumn);
      assertEquals((-2472), token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, byteArray0.length);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(")", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(81, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V(jh5J8-L7}`");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 66, 82, 82);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(82, simpleCharStream0.getColumn());
      assertEquals(66, simpleCharStream0.getLine());
      assertEquals(66, simpleCharStream0.getEndLine());
      assertEquals(82, simpleCharStream0.getEndColumn());
      assertEquals(82, simpleCharStream0.getBeginColumn());
      assertEquals(66, simpleCharStream0.getBeginLine());
      assertEquals("V", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(82, token0.beginColumn);
      assertEquals(82, token0.endColumn);
      assertEquals(66, token0.endLine);
      assertEquals(66, token0.beginLine);
      assertEquals(78, token0.kind);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(83, simpleCharStream0.getColumn());
      assertEquals(66, simpleCharStream0.getLine());
      assertEquals(83, simpleCharStream0.getEndColumn());
      assertEquals(66, simpleCharStream0.getEndLine());
      assertEquals(83, simpleCharStream0.getBeginColumn());
      assertEquals(66, simpleCharStream0.getBeginLine());
      assertEquals("(", token1.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(83, token1.beginColumn);
      assertEquals(83, token1.endColumn);
      assertEquals(66, token1.endLine);
      assertEquals(66, token1.beginLine);
      assertEquals(80, token1.kind);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U%MQ.s");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("U", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"%\" (37), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#La$");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"descendant::\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 3207, 3207, 1311);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3207, simpleCharStream0.getEndLine());
      assertEquals(3220, simpleCharStream0.getEndColumn());
      assertEquals(3207, simpleCharStream0.getBeginColumn());
      assertEquals(3207, simpleCharStream0.getBeginLine());
      assertEquals(3207, simpleCharStream0.getLine());
      assertEquals(3220, simpleCharStream0.getColumn());
      assertEquals("\"descendant::\"", token0.toString());
      assertEquals(13, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3207, token0.beginLine);
      assertEquals(3220, token0.endColumn);
      assertEquals(3207, token0.beginColumn);
      assertEquals(3207, token0.endLine);
      assertEquals(18, token0.kind);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("preceding::");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(112, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("receding", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(8, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)101);
      assertArrayEquals(new byte[] {(byte)60, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)60, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(sequenceInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)60, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(pushbackInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, 797, (byte)0, (byte) (-110));
      assertArrayEquals(new byte[] {(byte)60, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(8, byteArray0.length);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 0);
      assertArrayEquals(new byte[] {(byte)60, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(8, byteArray0.length);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)60, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(797, simpleCharStream0.getLine());
      assertEquals(797, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(797, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("<", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(797, token0.endLine);
      assertEquals(13, token0.kind);
      assertEquals(797, token0.beginLine);
      assertEquals(8, byteArray0.length);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)60, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(797, simpleCharStream0.getLine());
      assertEquals(797, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(797, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"]\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-642), (-642));
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals((-642), simpleCharStream0.getEndLine());
      assertEquals((-642), simpleCharStream0.getBeginLine());
      assertEquals((-642), simpleCharStream0.getColumn());
      assertEquals((-642), simpleCharStream0.getLine());
      assertEquals((-642), simpleCharStream0.getBeginColumn());
      assertEquals((-642), simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals('\"', char0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals((-642), simpleCharStream0.getEndLine());
      assertEquals((-642), simpleCharStream0.getBeginLine());
      assertEquals((-642), simpleCharStream0.getColumn());
      assertEquals((-642), simpleCharStream0.getLine());
      assertEquals((-642), simpleCharStream0.getBeginColumn());
      assertEquals((-642), simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-642), simpleCharStream0.getEndLine());
      assertEquals((-642), simpleCharStream0.getBeginLine());
      assertEquals((-642), simpleCharStream0.getLine());
      assertEquals((-641), simpleCharStream0.getBeginColumn());
      assertEquals((-641), simpleCharStream0.getColumn());
      assertEquals((-641), simpleCharStream0.getEndColumn());
      assertEquals("]", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-642), token0.endLine);
      assertEquals((-641), token0.endColumn);
      assertEquals((-641), token0.beginColumn);
      assertEquals((-642), token0.beginLine);
      assertEquals(85, token0.kind);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i!vxB#cC|Rt`oE!Y");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("i", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 5, 5);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, (-2942));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2942. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Pk7B'.yt%s");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("Pk7B", token0.toString());
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\\'.yt%s\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("id");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1133, 1133, 1133);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1133, simpleCharStream0.getEndLine());
      assertEquals(1133, simpleCharStream0.getBeginLine());
      assertEquals(1133, simpleCharStream0.getLine());
      assertEquals(1134, simpleCharStream0.getEndColumn());
      assertEquals(1134, simpleCharStream0.getColumn());
      assertEquals(1133, simpleCharStream0.getBeginColumn());
      assertEquals("id", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1133, token0.beginLine);
      assertEquals(1133, token0.beginColumn);
      assertEquals(1134, token0.endColumn);
      assertEquals(1133, token0.endLine);
      assertEquals(51, token0.kind);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"lang\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertNotNull(xPathParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(xPathParserTokenManager0.debugStream);
      assertNotNull(mockPrintStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      xPathParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }
}
