/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 15:55:19 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Item;
import wheel.asm.Label;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2791));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2299, "{&", "{&", "{&", "{&");
      Item item0 = classWriter0.key3;
      FieldWriter fieldWriter1 = classWriter0.lastField;
      ByteVector byteVector0 = new ByteVector(4096);
      fieldWriter1.put(byteVector0);
      fieldWriter1.visitEnd();
      assertSame(fieldWriter1, fieldWriter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Label label0 = new Label();
      Object object0 = label0.info;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Fd;sb?", " ", " ", (Object) null);
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = classWriter0.lastField;
      AnnotationVisitor annotationVisitor0 = fieldWriter1.visitAnnotation(" ", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2791));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "{&", "{&", "{&", "{&");
      fieldWriter0.getSize();
      Item item0 = classWriter0.key3;
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.getSize();
      int int0 = Type.FLOAT;
      ByteVector byteVector0 = new ByteVector(4096);
      fieldWriter1.put(byteVector0);
      assertSame(fieldWriter1, fieldWriter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
      Label label0 = new Label();
      Object object0 = label0.info;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Fd;sb?", " ", "\"NS6|:Gg{<C", (Object) null);
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.visitAnnotation("\"NS6|:Gg{<C", false);
      fieldWriter1.getSize();
      fieldWriter1.visitEnd();
      assertSame(fieldWriter1, fieldWriter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2791));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2299, "{&", "{&", "{&", "{&");
      Item item0 = classWriter0.key3;
      FieldWriter fieldWriter1 = classWriter0.lastField;
      Attribute attribute0 = new Attribute("{&");
      fieldWriter1.visitAttribute(attribute0);
      int int0 = 4096;
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2791));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-65), "{&", "{&", "{&", "{&");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 91, "{&", "{&", "", "");
      Item item0 = classWriter0.key3;
      FieldWriter fieldWriter2 = classWriter0.lastField;
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
      assertNotSame(fieldWriter0, fieldWriter2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(468);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 26, "", "", "%kROg+", "%kROg+");
      fieldWriter0.visitEnd();
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.visitAnnotation("float", false);
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1842);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "8oBL`_f[iJ{cMK!", "E?R]P6VJTVC", "G", "E?R]P6VJTVC");
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation("E?R]P6VJTVC", true);
      fieldWriter0.visitEnd();
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2791));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2299, "{&", "{&", "{&", "{&");
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.visitAnnotation("RuntimeInvisibleAnnotations", true);
      ByteVector byteVector0 = new ByteVector(2299);
      fieldWriter1.put(byteVector0);
      assertSame(fieldWriter1, fieldWriter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(468);
      classWriter0.visitInnerClass("The wildcard array must not be null", "The wildcard array must not be null", "The wildcard array must not be null", 468);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 468, "The wildcard array must not be null", "The wildcard array must not be null", "%kROg+", "%kROg+");
      fieldWriter0.getSize();
      fieldWriter0.visitEnd();
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector(0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2791));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-65), "{&", "{&", "{&", "{&");
      fieldWriter0.getSize();
      Item item0 = classWriter0.key3;
      FieldWriter fieldWriter1 = classWriter0.lastField;
      int int0 = Type.FLOAT;
      ByteVector byteVector0 = new ByteVector(4096);
      fieldWriter1.put(byteVector0);
      assertSame(fieldWriter1, fieldWriter0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2791));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 7, "{&", "{&", (String) null, (Object) null);
      Item item0 = new Item(4673);
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
      Attribute attribute0 = new Attribute("{&");
      fieldWriter0.visitAttribute(attribute0);
      assertFalse(attribute0.isCodeAttribute());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(468);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 26, "", "", "%kROg+", "%kROg+");
      fieldWriter0.getSize();
      classWriter0.addUninitializedType("", 26);
      fieldWriter0.getSize();
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = new ByteVector();
      byteVector0.putUTF8("");
      byteVector0.putInt(1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 10);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 1, "W5R &7$", "", (String) null, "");
      fieldWriter1.getSize();
      fieldWriter0.visitAnnotation("", true);
      Attribute attribute0 = new Attribute("W5R &7$");
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2791));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-65), "{&", "{&", "{&", "{&");
      fieldWriter0.getSize();
      classWriter0.version = (-1249);
      Item item0 = classWriter0.key3;
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.getSize();
      ByteVector byteVector0 = new ByteVector(3979);
      fieldWriter0.put(byteVector0);
      assertSame(fieldWriter0, fieldWriter1);
  }
}
