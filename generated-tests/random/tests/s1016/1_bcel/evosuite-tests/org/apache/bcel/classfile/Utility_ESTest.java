/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 12:29:16 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.URI;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("{p+S207wK*F6SCEW", stringArray0);
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      assertEquals("()L{p+S207wK*F6SCEW;", string0);
      
      String string1 = Utility.methodSignatureToString("()L{p+S207wK*F6SCEW;", "{p+S207wK*F6SCEW", "compiled from\t\t");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("compiled from\t\t {p+S207wK*F6SCEW {p+S207wK*F6SCEW()", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0, true, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      assertEquals("{}", string2);
      
      String string3 = Utility.printArray((Object[]) stringArray0, true, true);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      assertEquals("{}", string3);
      
      String string4 = Utility.methodSignatureToString("()L{p+S207wK*F6SCEW;", "compiled from\t\t", "#SG=Sla4yu^O~");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("#SG=Sla4yu^O~ {p+S207wK*F6SCEW compiled from\t\t()", string4);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("()L{p+S207wK*F6SCEW;");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string5 = Utility.convertString("compiled from\t\t");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("compiled from\t\t", string5);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = Utility.getSignature("EK8nlvE6{+t");
      assertNotNull(string0);
      assertEquals("LEK8nlvE6{+t;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte) (-126);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 763, (int) (byte) (-126), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-34), (byte)1, (byte) (-121), (byte) (-83), (byte) (-110)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-83), (byte) (-34));
      assertNotNull(constantInvokeDynamic0);
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-83), constantInvokeDynamic0.getClassIndex());
      assertEquals((-34), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-83), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertNotNull(constantInvokeDynamic1);
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals((-83), constantInvokeDynamic0.getClassIndex());
      assertEquals((-34), constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((-83), constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals((-34), constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals((-83), constantInvokeDynamic1.getClassIndex());
      assertEquals((-83), constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)36, (byte) (-34), (byte)1, (byte) (-121), (byte) (-83), (byte) (-110)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertEquals(1, constantArray0.length);
      assertEquals("fload_2", string1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)53;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), (int) (byte)83, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 83
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short short0 = Utility.searchOpcode("\"h/!1WvAbT");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)99;
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte) (-60);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte)17, (byte) (-58), (byte)28, (byte)25, (byte) (-60), (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      
      byte byte1 = (byte)99;
      byteArray0[6] = (byte)99;
      byteArray0[7] = (byte) (-83);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte)28, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "r_shcP";
      String string1 = Utility.replace("r_shcP", "j|D;5X)Uip4e2", "r_shcP");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("r_shcP", string1);
      
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("r_shcP", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)114, (byte)95, (byte)115, (byte)104, (byte)99, (byte)80}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      try { 
        Utility.typeOfSignature("-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-123), 7);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)77, (byte) (-123), (byte)15, (byte) (-87), (byte)64, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals("0:    astore_2\n1:    i2l\n2:    dconst_1\n3:    ret\t\t%64\n5:    nop\n", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "(class_index = ";
      stringArray0[1] = "(class_index = ";
      stringArray0[2] = "(class_index = ";
      stringArray0[3] = "(class_index = ";
      stringArray0[4] = "(class_index = ";
      stringArray0[5] = "0:    astore_2\n1:    i2l\n2:    dconst_1\n3:    ret\t\t%64\n5:    nop\n";
      stringArray0[6] = "(class_index = ";
      String string1 = Utility.methodTypeToSignature("(class_index = ", stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, stringArray0.length);
      assertEquals("(L(class_index;L(class_index;L(class_index;L(class_index;L(class_index;L0:;L(class_index;)L(class_index;", string1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-29), (byte)5, (byte) (-70), (byte)38, (byte)59, (byte)102}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong(1496L);
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1496L, constantLong0.getBytes());
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertNotNull(constantLong1);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(1496L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals(1496L, constantLong1.getBytes());
      
      constantArray0[0] = (Constant) constantLong1;
      ConstantInteger constantInteger0 = new ConstantInteger(198);
      assertNotNull(constantInteger0);
      assertEquals(198, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-29), (byte)5, (byte) (-70), (byte)38, (byte)59, (byte)102}, byteArray0);
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertEquals(7, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertEquals("if_icmple\t\t#-7419", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = Utility.accessToString(11, false);
      assertNotNull(string0);
      assertEquals("public private static", string0);
      
      String string1 = Utility.format(73, 832, true, 'L');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEqualsstring1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)67;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-104);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf
      Constant constant0 = constantUtf8_0.copy();
      constantArray0[0] = constant0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getCachedInstance("public private static");
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 135, 766);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=$T(`cUpLZ<~29%ki");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =$T(`cUpLZ<~29%ki
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte) (-104);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 154, (int) (byte)82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)106, (byte) (-66), (byte)0, (byte)45, (byte)103, (byte)123, (byte) (-18), (byte) (-93)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)106, (byte) (-66), (byte)0, (byte)45, (byte)103, (byte)123, (byte) (-18), (byte) (-93)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertEquals("fmul", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)106, (byte) (-66), (byte)0, (byte)45, (byte)103, (byte)123, (byte) (-18), (byte) (-93)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertEquals("arraylength", string1);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)106, (byte) (-66), (byte)0, (byte)45, (byte)103, (byte)123, (byte) (-18), (byte) (-93)}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      assertEquals("nop", string2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Utility.accessToString((-1076348249), true);
      assertNotNull(string0);
      assertEquals("public private protected transient strictfp synthetic annotation", string0);
      
      boolean boolean0 = true;
      String string1 = Utility.compactClassName("public private protected transient strictfp synthetic annotation", true);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("public private protected transient strictfp synthetic annotation", string1);
      
      try { 
        Utility.typeOfSignature("#`e$l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #`e$l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)79;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 62, 259);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = Utility.clearBit((-212), (-212));
      assertEquals((-4308), int0);
      
      String string0 = Utility.format(65, 123, false, '*');
      assertNotNull(string0);
      assertEquals("*************************************************************************************************************************65", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)102, (byte)62, (byte)96, (byte)2}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)102, (byte)62, (byte)96, (byte)2}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(4, byteArray0.length);
      assertEquals("fsub", string1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "BootstrapMethods";
      boolean boolean0 = true;
      String string1 = Utility.compactClassName("BootstrapMethods", true);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("BootstrapMethods", string1);
      
      int int0 = (-1);
      int int1 = 91;
      boolean boolean1 = Utility.isSet((-1), 91);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byte byte0 = (byte) (-125);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)123;
      String string2 = Utility.toHexString(byteArray0);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-125), (byte)123}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, byteArray0.length);
      assertEquals("7b 83 7b", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-125), (byte)123}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      
      ConstantPool constantPool0 = null;
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-125), (byte)123}, byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, byteArray0.length);
      assertEquals("lshr", string3);
      
      String string4 = Utility.encode(byteArray0, true);
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-125), (byte)123}, byteArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(3, byteArray0.length);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string4);
      
      int int2 = 7;
      LocalVariable[] localVariableArray0 = new LocalVariable[8];
      Code code0 = null;
      try {
        code0 = new Code(91, 4, byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "%";
      try { 
        Utility.typeOfSignature("%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "3Qn,Fo;7f";
      try { 
        Utility.typeOfSignature("3Qn,Fo;7f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3Qn,Fo;7f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = Utility.accessToString(80, true);
      assertNotNull(string0);
      assertEquals("final volatile", string0);
      
      String string1 = Utility.fillup("dx?", 255, true, 'N');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dx?NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-95)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(9, 65);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(65, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(9, constantInterfaceMethodref0.getClassIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-59), (byte)122, (byte)7}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger(122);
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(122, constantInteger0.getBytes());
      
      constantArray0[0] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)122);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(122.0, constantDouble0.getBytes(), 0.01);
      
      constantArray0[1] = (Constant) constantDouble0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(258, (byte) (-59));
      assertNotNull(constantMethodref0);
      assertEquals(258, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals((-59), constantMethodref0.getNameAndTypeIndex());
      
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-105), (byte) (-59), (byte)122, (byte)7}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(3, constantPool0.getLength());
      assertEquals(4, byteArray0.length);
      assertEquals(3, constantArray0.length);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-116), (byte)95, (byte) (-10), (byte)11, (byte)123}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-116), (byte)95, (byte) (-10), (byte)11, (byte)123}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = Utility.isSet(95, 95);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isSet(95, 95);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('K');
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-117);
      byteArray0[8] = (byte) (-31);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, 71);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-36);
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte) (-28);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte) (-59), (byte)12, (byte) (-21), (byte)71, (byte) (-70), (byte) (-36), (byte)85, (byte) (-28)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2482), 1060, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-68);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-68), (-3954));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-19), (byte)56, (byte) (-68)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("0:    <illegal opcode>\n1:    fstore\t\t%188\n", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-108);
      byteArray0[5] = (byte) (-117);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-123);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 196, (int) (byte) (-108));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = Utility.clearBit(156, 156);
      assertEquals(156, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)99, (byte)63, (byte) (-70), (byte)121}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      assertNotNull(constantClass0);
      assertArrayEquals(new byte[] {(byte)99, (byte)63, (byte) (-70), (byte)121}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(25407, constantClass0.getNameIndex());
      assertEquals(4, byteArray0.length);
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1893, 1953);
      assertNotNull(constantFieldref0);
      assertEquals(1893, constantFieldref0.getClassIndex());
      assertEquals(1953, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(202);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      assertNotNull(filterOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals(4, pipedInputStream0.available());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[1];
      mockPrintWriter0.write(72);
      assertEquals(4, pipedInputStream0.available());
      
      objectArray0[0] = (Object) pipedInputStream0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(4, pipedInputStream0.available());
      assertEquals(1, objectArray0.length);
      
      int int0 = Utility.clearBit(72, 202);
      assertEquals(72, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-80);
      byteArray0[1] = (byte)68;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, 3364);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      assertEquals("{}", string0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        Utility.typeOfSignature("ExJ^.8&j0(.d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ExJ^.8&j0(.d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = Utility.getSignature("W:wEN6:>9@`t");
      assertNotNull(string0);
      assertEquals("LW:wEN6:>9@`t;", string0);
      
      String string1 = Utility.methodSignatureReturnType("LW:wEN6:>9@`t;");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("W:wEN6:>9@`t", string1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)48;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)92;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), (int) (byte)48, false);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-57), (byte)48, (byte) (-94), (byte) (-87), (byte)92}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(5, byteArray0.length);
      assertEquals("0:    ifnonnull\t\t#12450\n3:    ret\t\t%92\n", string2);
      
      String string3 = "4";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("LW:wEN6:>9@`t;", "0:    ifnonnull\t\t#12450\n3:    ret\t\t%92\n", "4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LW:wEN6:>9@`t;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = Utility.compactClassName("Wc4Fh1rg/OlG8Ss");
      assertNotNull(string0);
      assertEquals("Wc4Fh1rg.OlG8Ss", string0);
      
      String string1 = Utility.convertString("Wc4Fh1rg.OlG8Ss");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Wc4Fh1rg.OlG8Ss", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1109, (int) (byte)14, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)77;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)103, (int) (byte) (-56), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = Utility.format(126, (-166), true, 'n');
      assertNotNull(string0);
      assertEquals("126", string0);
      
      int int0 = Utility.clearBit(1027, 126);
      assertEquals(1027, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)98;
      String string1 = Utility.encode(byteArray0, true);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)79, (byte)112, (byte)98}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, byteArray0.length);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string2 = Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "rq5^|u", "class");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if_icmpge");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = Utility.classOrInterface((-272));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("interface", string3);
      
      String string4 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3928), 105);
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte)79, (byte)112, (byte)98}, byteArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(3, byteArray0.length);
      assertEquals("0:    iastore\n1:    irem\n2:    fadd\n", string4);
      
      String string5 = Utility.accessToString(335);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("public private protected static volatile native", string5);
      
      String string6 = Utility.encode(byteArray0, true);
      assertNotNull(string6);
      assertArrayEquals(new byte[] {(byte)79, (byte)112, (byte)98}, byteArray0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertEquals(3, byteArray0.length);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string6);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.signatureToString("BM#1nid4,G{BxY,X");
      assertNotNull(string0);
      assertEquals("byte", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-39);
      byteArray0[4] = (byte) (-78);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2061), (byte) (-39));
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-39), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((-2061), constantInterfaceMethodref0.getClassIndex());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1427, (byte) (-12));
      assertNotNull(constantFieldref0);
      assertEquals((-12), constantFieldref0.getNameAndTypeIndex());
      assertEquals(1427, constantFieldref0.getClassIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantString constantString0 = new ConstantString(913);
      assertNotNull(constantString0);
      assertEquals(913, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      
      ConstantString constantString1 = (ConstantString)constantString0.copy();
      assertNotNull(constantString1);
      assertTrue(constantString1.equals((Object)constantString0));
      assertEquals(913, constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      assertEquals((byte)8, constantString1.getTag());
      assertEquals(913, constantString1.getStringIndex());
      assertNotSame(constantString0, constantString1);
      assertNotSame(constantString1, constantString0);
      
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-12), (-128));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    saload
         // 1:    <illegal opcode>
         // 2:    lstore_3
         // 3:    <illegal opcode>
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byte byte0 = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)48;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 765, 146, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-99), (int) (byte)82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lload_3
         // 1:    ifgt\t\t#21174
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-95);
      byteArray0[8] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)101, (byte)101, (byte)0, (byte)125, (byte)48, (byte)0, (byte)0, (byte) (-95), (byte)62}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)101, (byte)101, (byte)0, (byte)125, (byte)48, (byte)0, (byte)0, (byte) (-95), (byte)62}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(9, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("lsub", string0);
      
      try { 
        Utility.typeOfSignature("XL_00>x\"j7l*=m*ZAxM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XL_00>x\"j7l*=m*ZAxM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "y_w\"zqCk}_n";
      String string1 = Utility.compactClassName("y_w\"zqCk}_n");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("y_w\"zqCk}_n", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)66;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string2 = Utility.toHexString(byteArray0);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)0, (byte)111, (byte)64, (byte)32, (byte)95, (byte)66}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(6, byteArray0.length);
      assertEquals("00 6f 40 20 5f 42", string2);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)111, (int) (byte)64, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)37;
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-22);
      byte byte1 = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte) (-1);
      byte byte2 = (byte) (-72);
      byteArray0[8] = (byte) (-72);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)37, (int) (byte) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 5. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)119;
      byteArray0[8] = (byte) (-104);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 154, (int) (byte)82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Utility.convertString("tableswitch");
      assertNotNull(string0);
      assertEquals("tableswitch", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-25);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)116, 565);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-123);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 196, (int) (byte) (-102));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(202);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      assertNotNull(filterOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(filterOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals(4, pipedInputStream0.available());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[1];
      mockPrintWriter0.write(72);
      assertEquals(4, pipedInputStream0.available());
      
      objectArray0[0] = (Object) pipedInputStream0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(4, pipedInputStream0.available());
      assertEquals(1, objectArray0.length);
      
      int int0 = Utility.clearBit(72, 202);
      assertEquals(72, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)68;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, 3364);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-72), (byte)8, (byte)19, (byte)34, (byte)48}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = Utility.compactClassName("Illegally nested brackets:", "float", false);
      assertNotNull(string0);
      assertEquals("Illegally nested brackets:", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)60;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-117), (byte)126, (byte)60, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-117), (byte)126, (byte)60, (byte) (-83), (byte)36}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("Illegally nested brackets:");
      assertNotNull(constantUtf8_0);
      assertEquals("Illegally nested brackets:", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString((byte) (-83));
      assertNotNull(constantString0);
      assertEquals((-83), constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      
      constantArray0[1] = (Constant) constantString0;
      ConstantString constantString1 = new ConstantString(78);
      assertNotNull(constantString1);
      assertFalse(constantString1.equals((Object)constantString0));
      assertEquals(78, constantString1.getStringIndex());
      assertEquals((byte)8, constantString1.getTag());
      
      constantArray0[2] = (Constant) constantString1;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      assertNotNull(constantFloat0);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-117), (byte)126, (byte)60, (byte) (-83), (byte)36}, byteArray0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(3.279467E-36F, constantFloat0.getBytes(), 0.01F);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      constantArray0[3] = (Constant) constantFloat0;
      ConstantString constantString2 = new ConstantString(constantString0);
      assertNotNull(constantString2);
      assertTrue(constantString2.equals((Object)constantString0));
      assertFalse(constantString2.equals((Object)constantString1));
      assertFalse(constantString0.equals((Object)constantString1));
      assertEquals((-83), constantString2.getStringIndex());
      assertEquals((byte)8, constantString2.getTag());
      assertEquals((-83), constantString0.getStringIndex());
      assertEquals((byte)8, constantString0.getTag());
      
      constantArray0[4] = (Constant) constantString2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertEquals(5, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)4, (byte) (-117), (byte)126, (byte)60, (byte) (-83), (byte)36}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertEquals(5, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertEquals(5, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("lreturn", string1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)86;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("istore_1");
      assertNotNull(constantUtf8_0);
      assertEquals("istore_1", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)64, (int) (byte)64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Utility.getSignature("Invalid method signature: ");
      assertNotNull(string0);
      assertEquals("LInvalid;", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Invalid method signature: ";
      stringArray0[1] = "LInvalid;";
      stringArray0[2] = "LInvalid;";
      stringArray0[3] = "Invalid method signature: ";
      stringArray0[4] = "Invalid method signature: ";
      stringArray0[5] = "dmul";
      stringArray0[6] = "Invalid method signature: ";
      stringArray0[7] = "LInvalid;";
      stringArray0[8] = "Invalid method signature: ";
      String string1 = Utility.methodTypeToSignature("Invalid method signature: ", stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, stringArray0.length);
      assertEquals("(LInvalid;LLInvalid;;LLInvalid;;LInvalid;LInvalid;Ldmul;LInvalid;LLInvalid;;LInvalid;)LInvalid;", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-79);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 173, 173);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = Utility.isSet(2872, 1115);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-32);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-32), 190);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-28), (byte)119, (byte) (-3), (byte) (-1), (byte) (-32)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("0:    <illegal opcode>\n1:    dneg\n2:    <illegal opcode>\n3:    impdep2\n4:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Utility.convertString("Blg8|X+");
      assertNotNull(string0);
      assertEquals("Blg8|X+", string0);
      
      String string1 = Utility.format(90, 26, false, 'n');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("nnnnnnnnnnnnnnnnnnnnnnnn90", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "nnnnnnnnnnnnnnnnnnnnnnnn90";
      stringArray0[1] = "nnnnnnnnnnnnnnnnnnnnnnnn90";
      stringArray0[2] = "org.apache.bcel.classfile.ParameterAnnotations";
      stringArray0[3] = "getstatic";
      stringArray0[4] = "Blg8|X+";
      stringArray0[5] = "Blg8|X+";
      String string2 = Utility.methodTypeToSignature("Blg8|X+", stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(6, stringArray0.length);
      assertEquals("(Lnnnnnnnnnnnnnnnnnnnnnnnn90;Lnnnnnnnnnnnnnnnnnnnnnnnn90;Lorg/apache/bcel/classfile/ParameterAnnotations;Lgetstatic;LBlg8|X+;LBlg8|X+;)LBlg8|X+;", string2);
      
      String string3 = Utility.compactClassName("(Lnnnnnnnnnnnnnnnnnnnnnnnn90;Lnnnnnnnnnnnnnnnnnnnnnnnn90;Lorg/apache/bcel/classfile/ParameterAnnotations;Lgetstatic;LBlg8|X+;LBlg8|X+;)LBlg8|X+;", "nnnnnnnnnnnnnnnnnnnnnnnn90", true);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("(Lnnnnnnnnnnnnnnnnnnnnnnnn90;Lnnnnnnnnnnnnnnnnnnnnnnnn90;Lorg.apache.bcel.classfile.ParameterAnnotations;Lgetstatic;LBlg8|X+;LBlg8|X+;)LBlg8|X+;", string3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte) (-69);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(19, 11);
      assertNotNull(constantNameAndType0);
      assertEquals(19, constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals(11, constantNameAndType0.getSignatureIndex());
      
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertEquals(1, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 26, (int) (byte) (-27));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Utility.format(1688, 1688, false, '/');
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature(string0, stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      
      String string2 = Utility.convertString(string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-87), (byte) (-83), (byte)2}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      int int0 = byteSequence0.readUnsignedByte();
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-87), (byte) (-83), (byte)2}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertEquals(189, int0);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-87), (byte) (-83), (byte)2}, byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      assertEquals("ret\t\t%173", string3);
      
      String string4 = " not found: ";
      boolean boolean0 = false;
      Method method0 = new Method();
      assertNotNull(method0);
      assertEquals(0, method0.getSignatureIndex());
      assertFalse(method0.isProtected());
      assertFalse(method0.isPrivate());
      assertFalse(method0.isAbstract());
      assertFalse(method0.isVarArgs());
      assertFalse(method0.isSynthetic());
      assertFalse(method0.isEnum());
      assertFalse(method0.isStrictfp());
      assertFalse(method0.isVolatile());
      assertFalse(method0.isFinal());
      assertFalse(method0.isAnnotation());
      assertFalse(method0.isStatic());
      assertFalse(method0.isNative());
      assertEquals(0, method0.getModifiers());
      assertEquals(0, method0.getAccessFlags());
      assertFalse(method0.isInterface());
      assertFalse(method0.isPublic());
      assertEquals(0, method0.getNameIndex());
      assertFalse(method0.isSynchronized());
      assertFalse(method0.isTransient());
      
      // Undeclared exception!
      try { 
        method0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)84;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.LocalVariableTable");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3783, (int) (byte)47, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "b:sm6!";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "b:sm6!");
      assertFalse(boolean0);
      
      String string1 = "org.apache.commons.io.filefilter.DirectoryFileFilter";
      byte[] byteArray0 = Utility.decode("org.apache.commons.io.filefilter.DirectoryFileFilter", false);
      assertNotNull(byteArray0);
      assertEquals(52, byteArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "org.apache.commons.io.filefilter.DirectoryFileFilter";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "org.apache.commons.io.filefilter.DirectoryFileFilter";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "b:sm6!";
      objectArray0[6] = (Object) "org.apache.commons.io.filefilter.DirectoryFileFilter";
      objectArray0[7] = (Object) "org.apache.commons.io.filefilter.DirectoryFileFilter";
      objectArray0[8] = (Object) null;
      String string2 = Utility.printArray(objectArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(9, objectArray0.length);
      assertEquals("{null, org.apache.commons.io.filefilter.DirectoryFileFilter, null, org.apache.commons.io.filefilter.DirectoryFileFilter, null, b:sm6!, org.apache.commons.io.filefilter.DirectoryFileFilter, org.apache.commons.io.filefilter.DirectoryFileFilter, null}", string2);
      
      try { 
        Utility.typeOfSignature("&ZCFS|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &ZCFS|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = Utility.compactClassName("org.apache.bcel.classfile.Attribute");
      assertNotNull(string0);
      assertEquals("org.apache.bcel.classfile.Attribute", string0);
      
      String string1 = Utility.format(105, 105, false, ']');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]105", string1);
      
      String string2 = Utility.compactClassName(" entries\n", true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" entries\n", string2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]105";
      String string3 = Utility.printArray(objectArray0, true);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, objectArray0.length);
      assertEquals("{]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]105}", string3);
      
      int int0 = Utility.setBit(105, 105);
      assertEquals(617, int0);
      
      String string4 = Utility.getSignature(" entries\n");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Lentries;", string4);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte) (-82);
      byteArray0[8] = (byte)1;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string5 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-83), (-4652));
      assertNotNull(string5);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)107, (byte)124, (byte) (-88), (byte) (-83), (byte) (-56), (byte) (-24), (byte) (-82), (byte)1}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertEquals(9, byteArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("0:    <illegal opcode>\n1:    dmul\n2:    iushr\n3:    jsr\t\t#-21045\n6:    <illegal opcode>\n7:    freturn\n8:    aconst_null\n", string5);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)91;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), 3298);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)2, (byte)3, (byte) (-4), (byte)49, (byte)12, (byte)70, (byte)91}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("0:    fcmpl\n1:    iconst_m1\n2:    iconst_0\n3:    <illegal opcode>\n4:    daload\n5:    fconst_1\n6:    fstore_3\n7:    dup_x2\n", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "z+QQ{}#-T%";
      stringArray0[1] = "z+QQ{}#-T%";
      stringArray0[2] = "z+QQ{}#-T%";
      stringArray0[3] = "z+QQ{}#-T%";
      String string0 = Utility.methodTypeToSignature("z+QQ{}#-T%", stringArray0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      assertEquals("(Lz+QQ{}#-T%;Lz+QQ{}#-T%;Lz+QQ{}#-T%;Lz+QQ{}#-T%;)Lz+QQ{}#-T%;", string0);
      
      String string1 = Utility.methodSignatureToString("(Lz+QQ{}#-T%;Lz+QQ{}#-T%;Lz+QQ{}#-T%;Lz+QQ{}#-T%;)Lz+QQ{}#-T%;", "z+QQ{}#-T%", "z+QQ{}#-T%", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("z+QQ{}#-T% z+QQ{}#-T% z+QQ{}#-T%(z+QQ{}#-T% arg1, z+QQ{}#-T% arg2, z+QQ{}#-T% arg3, z+QQ{}#-T% arg4)", string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("aQDR]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aQDR]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-121);
      byte byte0 = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-21);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-21), 240);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3275, 1880);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "D4O(in|@fZU";
      byte byte0 = Utility.typeOfSignature("D4O(in|@fZU");
      assertEquals((byte)7, byte0);
      
      String string1 = "The array of names must not be null";
      byte byte1 = Utility.typeOfSignature("The array of names must not be null");
      assertFalse(byte1 == byte0);
      assertEquals((byte)14, byte1);
      
      try { 
        Utility.typeOfMethodSignature("D4O(in|@fZU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: D4O(in|@fZU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      assertEquals("{}", string0);
      
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, objectArray0.length);
      assertEquals("{}", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)9;
      byte byte0 = (byte)97;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte)8;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      
      constantPool1.setConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)8, (int) (byte)9, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 9. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-95);
      byteArray0[8] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)101, (byte)96, (byte) (-16), (byte)125, (byte)48, (byte) (-82), (byte)0, (byte) (-95), (byte)62}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)101, (byte)96, (byte) (-16), (byte)125, (byte)48, (byte) (-82), (byte)0, (byte) (-95), (byte)62}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(9, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte) (-2);
      byte byte0 = (byte) (-43);
      byteArray0[7] = (byte) (-43);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1082), (int) (byte) (-2), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)124}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(1, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(170);
      assertNotNull(constantMethodType0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(170, constantMethodType0.getDescriptorIndex());
      
      ConstantMethodType constantMethodType1 = (ConstantMethodType)constantMethodType0.copy();
      assertNotNull(constantMethodType1);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(170, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(170, constantMethodType1.getDescriptorIndex());
      assertNotSame(constantMethodType0, constantMethodType1);
      assertNotSame(constantMethodType1, constantMethodType0);
      
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantClass constantClass0 = new ConstantClass(766);
      assertNotNull(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(766, constantClass0.getNameIndex());
      
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      assertNotNull(constantClass1);
      assertTrue(constantClass1.equals((Object)constantClass0));
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(766, constantClass0.getNameIndex());
      assertEquals(766, constantClass1.getNameIndex());
      assertEquals((byte)7, constantClass1.getTag());
      
      constantArray0[1] = (Constant) constantClass1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(840);
      assertNotNull(constantMethodType2);
      assertFalse(constantMethodType2.equals((Object)constantMethodType1));
      assertFalse(constantMethodType2.equals((Object)constantMethodType0));
      assertEquals((byte)16, constantMethodType2.getTag());
      assertEquals(840, constantMethodType2.getDescriptorIndex());
      
      constantArray0[2] = (Constant) constantMethodType2;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(654, 1799);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(1799, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals(654, constantInterfaceMethodref0.getClassIndex());
      
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)124}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(4, constantPool0.getLength());
      assertEquals(1, byteArray0.length);
      assertEquals(4, constantArray0.length);
      assertEquals("iushr", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER";
      String string1 = Utility.compactClassName("org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER", true);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER", string1);
      
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-126);
      byte byte0 = (byte)79;
      byteArray0[4] = (byte)79;
      ConstantPool constantPool0 = null;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 111, (int) (byte) (-65), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)125}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      
      String string0 = Utility.fillup("\tdefault = ", 4, true, '9');
      assertNotNull(string0);
      assertEquals("\tdefault = ", string0);
      
      String string1 = "YFvi=XDwzloTeKf\\C_";
      String string2 = Utility.compactClassName("YFvi=XDwzloTeKfC_", true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("YFvi=XDwzloTeKfC_", string2);
      
      String string3 = Utility.fillup("YFvi=XDwzloTeKfC_", 120, false, '9');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999YFvi=XDwzloTeKfC_", string3);
      
      try { 
        Utility.typeOfSignature("99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999YFvi=XDwzloTeKfC_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999YFvi=XDwzloTeKfC_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray1 = Utility.decode("1Xv$Iml]GzqnQi$", false);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(13, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)37;
      byteArray2[1] = (byte) (-24);
      byteArray2[2] = (byte)103;
      byteArray2[3] = (byte) (-79);
      byteArray2[4] = (byte) (-58);
      byteArray2[5] = (byte)104;
      String string0 = Utility.encode(byteArray2, true);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)37, (byte) (-24), (byte)103, (byte) (-79), (byte) (-58), (byte)104}, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(6, byteArray2.length);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = Utility.convertString("fR>c}9N");
      assertNotNull(string0);
      assertEquals("fR>c}9N", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-73), (byte)37, (byte)121, (byte)18, (byte)40, (byte) (-67)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      assertNotNull(constantDouble0);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(0.0, constantDouble0.getBytes(), 0.01);
      
      constantArray0[0] = (Constant) constantDouble0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-73), (byte)37);
      assertNotNull(constantNameAndType0);
      assertEquals(37, constantNameAndType0.getSignatureIndex());
      assertEquals((-73), constantNameAndType0.getNameIndex());
      assertEquals((byte)12, constantNameAndType0.getTag());
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-122), (byte) (-73), (byte)37, (byte)121, (byte)18, (byte)40, (byte) (-67)}, byteArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(2, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertEquals(7, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals("i2f", string1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = Utility.format(1688, 1688, false, '/');
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature(string0, stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      
      String string2 = Utility.convertString(string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-87), (byte) (-83), (byte)2}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~i([j@Q");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object0));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object4));
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertNotNull(object7);
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object3));
      
      objectArray0[7] = object7;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
      
      String string1 = Utility.printArray(objectArray0, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, objectArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)64, (byte) (-88), (byte) (-119), (byte) (-78), (byte)115, (byte) (-110)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      assertNotNull(constantFieldref0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)64, (byte) (-88), (byte) (-119), (byte) (-78), (byte)115, (byte) (-110)}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(42816, constantFieldref0.getClassIndex());
      assertEquals(43145, constantFieldref0.getNameAndTypeIndex());
      assertEquals(7, byteArray0.length);
      
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1987, (-1162));
      assertNotNull(constantInterfaceMethodref0);
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      assertEquals((-1162), constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals(1987, constantInterfaceMethodref0.getClassIndex());
      
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat((-1162));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1162.0F), constantFloat0.getBytes(), 0.01F);
      
      constantArray0[2] = (Constant) constantFloat0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertNotNull(constantMethodType0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)64, (byte) (-88), (byte) (-119), (byte) (-78), (byte)115, (byte) (-110)}, byteArray0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(45683, constantMethodType0.getDescriptorIndex());
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertNotNull(constantMethodType1);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)64, (byte) (-88), (byte) (-119), (byte) (-78), (byte)115, (byte) (-110)}, byteArray0);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(45683, constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals(45683, constantMethodType1.getDescriptorIndex());
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)64, (byte) (-88), (byte) (-119), (byte) (-78), (byte)115, (byte) (-110)}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4, constantPool0.getLength());
      assertEquals(7, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertEquals(4, constantArray0.length);
      assertEquals("i2c", string2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = Utility.convertString("ishr");
      assertNotNull(string0);
      assertEquals("ishr", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-24);
      String string1 = Utility.encode(byteArray0, false);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)65, (byte)33, (byte) (-24)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, byteArray0.length);
      assertEquals("A$n$e8", string1);
      
      String string2 = "QbAgd~#4an,VsCcQVEs";
      short short0 = Utility.searchOpcode("QbAgd~#4an,VsCcQVEs");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.typeOfSignature("QbAgd~#4an,VsCcQVEs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QbAgd~#4an,VsCcQVEs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "1";
      try { 
        Utility.typeOfSignature("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Utility.compactClassName("SAME_LOCALS_1_STACK_EXTENDED", "SAME_LOCALS_1_STACK_EXTENDED", false);
      assertNotNull(string0);
      assertEquals("SAME_LOCALS_1_STACK_EXTENDED", string0);
      
      String string1 = Utility.methodTypeToSignature("SAME_LOCALS_1_STACK_EXTENDED", (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("()LSAME_LOCALS_1_STACK_EXTENDED;", string1);
      
      int int0 = Utility.clearBit(214, 214);
      assertEquals(214, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-34);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-20), (byte) (-34)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()LSAME_LOCALS_1_STACK_EXTENDED;", false);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = Utility.encode(byteArray0, true);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-20), (byte) (-34)}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, byteArray0.length);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      String string3 = Utility.printArray((Object[]) null, false);
      assertNull(string3);
      
      String string4 = Utility.accessToString((int) (byte) (-20));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("protected static synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string4);
      
      String string5 = Utility.printArray((Object[]) null, false);
      assertNull(string5);
      
      String string6 = "getfield";
      MockFile mockFile0 = new MockFile("$l$8b$I$A$A$A$A$A$A$A", "getfield");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('D');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-71);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), (int) (byte) (-27));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    return
         // 1:    dload_1
         // 2:    <illegal opcode>
         // 3:    dload_1
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6UQU!}b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6UQU!}b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-2);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-2), 36);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)97, (byte) (-10), (byte) (-16), (byte)90, (byte)75, (byte) (-2)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals("0:    ladd\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    dup_x1\n4:    astore_0\n5:    impdep1\n", string0);
      
      boolean boolean0 = false;
      String string1 = Utility.accessToString((int) (byte) (-16), false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = Utility.accessToString(177);
      assertNotNull(string0);
      assertEquals("public final synchronized transient", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-75), (byte)117, (byte) (-95)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-75), (byte)117, (byte) (-95)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(4, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertEquals("dload_3", string1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = Utility.format((-2926), (-2926), false, 'R');
      assertNotNull(string0);
      assertEquals("-2926", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-50), (-3064));
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)14, (byte)54, (byte)83, (byte) (-50), (byte)11, (byte)51, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(7, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertEquals("0:    dconst_0\n1:    istore\t\t%83\n3:    <illegal opcode>\n4:    fconst_0\n5:    baload\n6:    nop\n", string1);
      
      String string2 = Utility.printArray((Object[]) constantArray0, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, constantArray0.length);
      assertEquals("", string2);
      
      String string3 = Utility.accessToString((int) (byte)51);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("public private final synchronized", string3);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)126;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[4] = object4;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals(5, objectArray0.length);
      
      String string1 = Utility.compactClassName("+MMJh4$R", "ifnull", false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("+MMJh4$R", string1);
      
      boolean boolean0 = Utility.isSet((-2718), (-2718));
      assertFalse(boolean0);
      
      String string2 = Utility.printArray(objectArray0, false);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(5, objectArray0.length);
      
      try { 
        Utility.typeOfSignature("+MMJh4$R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MMJh4$R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$1";
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = Utility.setBit(1, 1);
      assertEquals(3, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)66;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[4] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)104, (byte) (-1), (byte) (-79), (byte)66, (byte)5}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)104, (byte) (-1), (byte) (-79), (byte)66, (byte)5}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertEquals("imul", string0);
      
      String string1 = Utility.replace("\"Nyu?^fTC", "imul", "imul");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"Nyu?^fTC", string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("pnf`", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: pnf`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)98;
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)67, (byte)86, (byte) (-17), (byte)98}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals("43 56 ef 62", string0);
      
      try { 
        Utility.typeOfSignature(":Kj<B{~@eB%?JM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :Kj<B{~@eB%?JM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 203;
      String string0 = Utility.classOrInterface(203);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = Utility.getSignature("h'+sa+i:`%oQ8K<5C+");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Lh'+sa+i:`%oQ8K<5C+;", string1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Lh'+sa+i:`%oQ8K<5C+;";
      objectArray0[1] = (Object) "h'+sa+i:`%oQ8K<5C+";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[5] = object1;
      objectArray0[7] = (Object) "h'+sa+i:`%oQ8K<5C+";
      objectArray0[8] = (Object) "h'+sa+i:`%oQ8K<5C+";
      String string2 = Utility.printArray(objectArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(9, objectArray0.length);
      
      String string3 = Utility.compactClassName("class");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("class", string3);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)0;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 306, 556, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "*;)#*Fq-P";
      try { 
        Utility.typeOfSignature("*;)#*Fq-P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;)#*Fq-P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "AM";
      try { 
        Utility.typeOfSignature("AM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)101;
      byteArray0[8] = (byte)9;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)55, (byte)81, (byte) (-85), (byte) (-1), (byte)86, (byte)122, (byte) (-35), (byte)101, (byte)9}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit(178, (-4647));
      assertEquals(178, int0);
      
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-85);
      byteArray1[5] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-35), (-4647), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lconst_0
         // 1:    lconst_0
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-63), (byte) (-95), (byte) (-123), (byte)40, (byte)92}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-63));
      assertNotNull(constantMethodType0);
      assertEquals((-63), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      assertNotNull(constantMethodType1);
      assertTrue(constantMethodType1.equals((Object)constantMethodType0));
      assertEquals((-63), constantMethodType0.getDescriptorIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals((byte)16, constantMethodType1.getTag());
      assertEquals((-63), constantMethodType1.getDescriptorIndex());
      
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(190, (byte) (-63));
      assertNotNull(constantNameAndType0);
      assertEquals((byte)12, constantNameAndType0.getTag());
      assertEquals((-63), constantNameAndType0.getSignatureIndex());
      assertEquals(190, constantNameAndType0.getNameIndex());
      
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(191, 198);
      assertNotNull(constantInvokeDynamic0);
      assertEquals(191, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(191, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(198, constantInvokeDynamic0.getNameAndTypeIndex());
      
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      assertNotNull(constantInvokeDynamic1);
      assertTrue(constantInvokeDynamic1.equals((Object)constantInvokeDynamic0));
      assertEquals(191, constantInvokeDynamic0.getClassIndex());
      assertEquals((byte)18, constantInvokeDynamic0.getTag());
      assertEquals(191, constantInvokeDynamic0.getBootstrapMethodAttrIndex());
      assertEquals(198, constantInvokeDynamic0.getNameAndTypeIndex());
      assertEquals((byte)18, constantInvokeDynamic1.getTag());
      assertEquals(191, constantInvokeDynamic1.getClassIndex());
      assertEquals(198, constantInvokeDynamic1.getNameAndTypeIndex());
      assertEquals(191, constantInvokeDynamic1.getBootstrapMethodAttrIndex());
      
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 41349. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)60, (byte)94, (byte)74, (byte)115, (byte)44, (byte)78, (byte)79, (byte)113}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)60, (byte)94, (byte)74, (byte)115, (byte)44, (byte)78, (byte)79, (byte)113}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(8, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("istore_1", string0);
      
      File file0 = MockFile.createTempFile("istore_1", "istore_1");
      assertNotNull(file0);
      assertEquals("istore_10istore_1", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/istore_10istore_1", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('*');
      assertNotNull(printStream0);
      assertEquals("istore_10istore_1", file0.getName());
      assertFalse(file0.isDirectory());
      assertEquals(1L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/istore_10istore_1", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      
      Utility.printArray(printStream0, (Object[]) constantArray0);
      assertEquals("istore_10istore_1", file0.getName());
      assertEquals(4L, file0.length());
      assertFalse(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/istore_10istore_1", file0.toString());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.isAbsolute());
      assertEquals(0, constantArray0.length);
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      
      short short0 = Utility.searchOpcode("Visiting non-standard PMGClass object");
      assertEquals((short) (-1), short0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("istore_1", "istore_1", "istore_1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: istore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = Utility.format(92, (-1157), false, '#');
      assertNotNull(string0);
      assertEquals("92", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "92";
      objectArray0[1] = (Object) "92";
      objectArray0[2] = (Object) "92";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      boolean boolean0 = false;
      String string1 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      
      String string2 = Utility.format((-1157), (-1811), true, '#');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-1157", string2);
      
      String string3 = "BootstrapMethods";
      byte byte0 = Utility.typeOfSignature("BootstrapMethods");
      assertEquals((byte)8, byte0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)8;
      String string4 = Utility.encode(byteArray0, true);
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte) (-106), (byte)8, (byte)8, (byte)8, (byte)8, (byte)8, (byte)8}, byteArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(7, byteArray0.length);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string4);
      
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-106), (byte)8, (byte)8, (byte)8, (byte)8, (byte)8, (byte)8}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, byteArray0.length);
      assertTrue(boolean1);
      
      try { 
        Utility.methodSignatureArgumentTypes("H1UYJe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H1UYJe
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Utility.compactClassName("", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = Utility.convertString("4s");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("4s", string1);
      
      String string2 = Utility.signatureToString("BootstrapMethods(");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("byte", string2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 479, (int) (byte) (-16), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = null;
      String string0 = Utility.methodTypeToSignature("dup2_x1", (String[]) null);
      assertNotNull(string0);
      assertEquals("()Ldup2_x1;", string0);
      
      byte byte0 = Utility.typeOfMethodSignature("()Ldup2_x1;");
      assertEquals((byte)14, byte0);
      
      String string1 = Utility.compactClassName("!l8ebiV7");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("!l8ebiV7", string1);
      
      String string2 = Utility.methodTypeToSignature("java.lang.", (String[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("()Ljava/lang/;", string2);
      
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)11;
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-73);
      byte byte1 = (byte) (-66);
      byteArray0[2] = (byte) (-66);
      ConstantPool constantPool0 = null;
      int int0 = 197;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 183, 197);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=");
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString(1294, false);
      assertNotNull(string0);
      assertEquals("private protected static native abstract", string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteArray0.length);
      assertTrue(boolean1);
      
      String string1 = Utility.compactClassName("private protected static native abstract", "Lx[:HJ%b_P", true);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("private protected static native abstract", string1);
      
      String string2 = Utility.format(103, 59, true, '[');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("103[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[", string2);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-81);
      byteArray1[1] = (byte)31;
      byteArray1[2] = (byte)23;
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte) (-86);
      byteArray1[5] = (byte)8;
      byteArray1[6] = (byte)4;
      byteArray1[7] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-81), (byte)31, (byte)23, (byte)2, (byte) (-86), (byte)8, (byte)4, (byte)6}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray1.length);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte) (-81), (byte)31, (byte)23, (byte)2, (byte) (-86), (byte)8, (byte)4, (byte)6}, byteArray1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(8, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("dreturn", string3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = Utility.clearBit(1162, 1162);
      assertEquals(138, int0);
      
      String string0 = "4";
      try { 
        Utility.typeOfSignature("4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-37);
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)30;
      byte byte1 = (byte)91;
      byteArray0[2] = (byte)91;
      byte byte2 = (byte) (-117);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-11);
      byte byte3 = (byte)65;
      byteArray0[5] = (byte)65;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      constantPool0.setConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 830, (int) (byte)65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Utility.compactClassName("V", true);
      assertNotNull(string0);
      assertEquals("V", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte)45;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte)30, (byte)31, (byte)100, (byte)63, (byte) (-7), (byte) (-1), (byte) (-112), (byte)45}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertTrue(boolean0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, 2, (int) (byte)30, true);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)108, (byte)30, (byte)31, (byte)100, (byte)63, (byte) (-7), (byte) (-1), (byte) (-112), (byte)45}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(9, byteArray0.length);
      assertEquals("2:    lload_1\n3:    isub\n4:    lstore_0\n5:    <illegal opcode>\n6:    impdep2\n7:    d2f\n8:    aload_3\n", string1);
      
      String string2 = Utility.printArray((Object[]) null);
      assertNull(string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "2:    lload_1\n3:    isub\n4:    lstore_0\n5:    <illegal opcode>\n6:    impdep2\n7:    d2f\n8:    aload_3\n";
      stringArray0[1] = "V";
      stringArray0[2] = "2:    lload_1\n3:    isub\n4:    lstore_0\n5:    <illegal opcode>\n6:    impdep2\n7:    d2f\n8:    aload_3\n";
      String string3 = Utility.methodTypeToSignature("2:    lload_1\n3:    isub\n4:    lstore_0\n5:    <illegal opcode>\n6:    impdep2\n7:    d2f\n8:    aload_3\n", stringArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(3, stringArray0.length);
      assertEquals("(L2:;LV;L2:;)L2:;", string3);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)1;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      ConstantFloat constantFloat0 = new ConstantFloat(2687.546F);
      assertNotNull(constantFloat0);
      assertEquals(2687.546F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      String string0 = constantPool0.constantToString((Constant) constantFloat0);
      assertNotNull(string0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(2687.546F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals("2687.546", string0);
      
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1054), (int) (byte)80);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)80, (byte)1}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(2, byteArray0.length);
      assertEquals("0:    lastore\n1:    aconst_null\n", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)80, (byte)1}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      
      String string2 = Utility.accessToString(12, true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("protected static", string2);
      
      constantFloat0.setBytes((byte)80);
      assertEquals(80.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      String string3 = Utility.classOrInterface(482);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("class", string3);
      
      String string4 = Utility.compactClassName("protected static", "2687.546", false);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("protected static", string4);
      
      String string5 = Utility.printArray((Object[]) null);
      assertNull(string5);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)80;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)80;
      byteArray1[3] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)80, (byte)1, (byte)80, (byte)1}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray1.length);
      
      String string6 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string6);
      assertArrayEquals(new byte[] {(byte)80, (byte)1, (byte)80, (byte)1}, byteArray1);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(4, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("lastore", string6);
      
      int int0 = Utility.clearBit((-1429), 482);
      assertEquals((-1429), int0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString(", low = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `, low = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)125}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      
      String string0 = Utility.fillup("\tdefault = ", 4, true, '9');
      assertNotNull(string0);
      assertEquals("\tdefault = ", string0);
      
      String string1 = "YFvi=XDwzloTeKf\\C_";
      String string2 = Utility.compactClassName("YFvi=XDwzloTeKfC_", true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("YFvi=XDwzloTeKfC_", string2);
      
      String string3 = Utility.fillup("YFvi=XDwzloTeKfC_", 120, false, 'Y');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYFvi=XDwzloTeKfC_", string3);
      
      try { 
        Utility.typeOfSignature("YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYFvi=XDwzloTeKfC_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYFvi=XDwzloTeKfC_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-77);
      byte byte0 = (byte)62;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)16;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-77), (int) (byte)62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "0k-*MxcQ>}6a@";
      try { 
        Utility.typeOfSignature("0k-*MxcQ>}6a@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0k-*MxcQ>}6a@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)52;
      byteArray0[4] = (byte)52;
      byte byte0 = (byte)76;
      byteArray0[5] = (byte)76;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)65;
      byteArray0[8] = (byte) (-9);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (int) (byte)52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = Utility.clearBit(286, 286);
      assertEquals(286, int0);
      
      Object[] objectArray0 = new Object[4];
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals(4, objectArray0.length);
      assertEquals("null, null, null, null", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)67;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)61, (byte) (-13), (byte) (-116), (byte)67}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)61, (byte) (-13), (byte) (-116), (byte)67}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(4, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)61, (byte) (-13), (byte) (-116), (byte)67}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(4, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("istore_2", string1);
      
      try { 
        Utility.methodSignatureArgumentTypes("istore_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: istore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), 3041, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_0
         // 1:    <illegal opcode>
         // 2:    nop
         // 3:    lor
         // 4:    d2i
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.format((-3536), 1334, true, '1');
      assertNotNull(string0);
      
      int int0 = Utility.clearBit(1664, 1664);
      assertEquals(1664, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)5;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1875, 1664);
      assertNotNull(constantInterfaceMethodref0);
      assertEquals(1875, constantInterfaceMethodref0.getClassIndex());
      assertEquals(1664, constantInterfaceMethodref0.getNameAndTypeIndex());
      assertEquals((byte)11, constantInterfaceMethodref0.getTag());
      
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 435, (int) (byte) (-128), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 8770. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 61, 105, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)94;
      byteArray0[7] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-36), (byte)86, (byte)45, (byte) (-55), (byte) (-74), (byte)94, (byte) (-61)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(8, byteArray0.length);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-36), (byte)86, (byte)45, (byte) (-55), (byte) (-74), (byte)94, (byte) (-61)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(8, byteArray0.length);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, 57, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte) (-117);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-300), (-2622), false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-47), (byte)71, (byte)116, (byte)127, (byte) (-31), (byte)110, (byte) (-117)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("0:    <illegal opcode>\n1:    dstore_0\n2:    ineg\n3:    land\n4:    <illegal opcode>\n5:    fdiv\n6:    f2i\n", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";");
      assertFalse(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("JXAjPPVPDMp=\"/v9?");
      assertNotNull(string0);
      assertEquals("long", string0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Utility.isJavaIdentifierPart(')');
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      try { 
        Utility.typeOfSignature("R!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("JQ<=C\")*y");
      assertEquals((byte)11, byte0);
      
      String string0 = "(~/0";
      String string1 = "arraylength";
      boolean boolean0 = false;
      Method method0 = null;
      try {
        method0 = new Method((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = Utility.accessToString(107, false);
      assertNotNull(string0);
      assertEquals("public private static synchronized volatile", string0);
      
      String string1 = ")";
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = Utility.clearBit(1382, 1382);
      assertEquals(1318, int0);
      
      String string0 = Utility.compactClassName("ifgt");
      assertNotNull(string0);
      assertEquals("ifgt", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)81, (byte)4, (byte)15, (byte)89, (byte)102}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)81, 39);
      assertNotNull(constantMethodHandle0);
      assertEquals(39, constantMethodHandle0.getReferenceIndex());
      assertEquals(81, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertNotNull(constantMethodHandle1);
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertEquals(39, constantMethodHandle0.getReferenceIndex());
      assertEquals(81, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(81, constantMethodHandle1.getReferenceKind());
      assertEquals(39, constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(976, 1);
      assertNotNull(constantMethodref0);
      assertEquals(1, constantMethodref0.getNameAndTypeIndex());
      assertEquals(976, constantMethodref0.getClassIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)81, (byte)4, (byte)15, (byte)89, (byte)102}, byteArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(2, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool0, constantPool1);
      assertEquals("fastore", string1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)125;
      byte byte0 = (byte)86;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, 67, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = (-1623);
      int int1 = Utility.clearBit((-2082), (-1623));
      assertFalse(int1 == int0);
      assertEquals((-2594), int1);
      
      String string0 = Utility.replace("<illegal opcode>", "if_icmpgt", "<illegal opcode>");
      assertNotNull(string0);
      assertEquals("<illegal opcode>", string0);
      
      String string1 = Utility.compactClassName("<illegal opcode>", true);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("<illegal opcode>", string1);
      
      String string2 = Utility.convertString("i1aTofKA*?.m@[@/");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("i1aTofKA*?.m@[@/", string2);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)73;
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-118);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 53, (-2082), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-96);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9951, (int) (byte)103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ABHr8$f_.>js#?*{)");
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString((-1720948035));
      assertNotNull(string0);
      assertEquals("public protected static final synchronized transient interface strictfp annotation enum", string0);
      
      String string1 = "!Nnwr+g~ ";
      try { 
        Utility.typeOfSignature("!Nnwr+g~ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Nnwr+g~ 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)96;
      byteArray0[3] = (byte)83;
      byteArray0[0] = (byte)0;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte)63;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)63, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)96, (byte)0, (byte)83, (byte)0, (byte)16, (byte)116, (byte)63}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("0:    nop\n1:    iadd\n2:    nop\n3:    aastore\n4:    nop\n5:    bipush\t\t116\n7:    lstore_0\n", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    nop\n1:    iadd\n2:    nop\n3:    aastore\n4:    nop\n5:    bipush\t\t116\n7:    lstore_0\n", "0:    nop\n1:    iadd\n2:    nop\n3:    aastore\n4:    nop\n5:    bipush\t\t116\n7:    lstore_0\n", "0:    nop\n1:    iadd\n2:    nop\n3:    aastore\n4:    nop\n5:    bipush\t\t116\n7:    lstore_0\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    iadd
         // 2:    nop
         // 3:    aastore
         // 4:    nop
         // 5:    bipush\t\t116
         // 7:    lstore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)11;
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)40, (byte)103, (byte)86, (byte)82, (byte)40, (byte)11}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("91 28 67 56 52 28 0b", string0);
      
      int int0 = Utility.setBit((-563), (byte)11);
      assertEquals((-563), int0);
      
      String string1 = Utility.accessToString((int) (byte) (-111));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("public final transient native interface abstract strictfp synthetic annotation enum", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)40, (byte)103, (byte)86, (byte)82, (byte)40, (byte)11}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)40, (byte)103, (byte)86, (byte)82, (byte)40, (byte)11}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(7, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertEquals("i2b", string2);
      
      String string3 = Utility.getSignature("91 28 67 56 52 28 0b");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("L91;", string3);
      
      String string4 = Utility.convertString("L91;");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("L91;", string4);
      
      int int1 = Utility.clearBit((byte)40, (-1740));
      assertFalse(int1 == int0);
      assertEquals(40, int1);
      
      String string5 = Utility.printArray((Object[]) constantArray0, true, true);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals(0, constantArray0.length);
      assertEquals("{}", string5);
      
      try { 
        Utility.typeOfSignature(";7Z?1N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;7Z?1N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q};YU?PbW=");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = new Integer(1);
      assertEquals(1, int0);
      
      String string0 = Utility.classOrInterface(1);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)7;
      byteArray0[1] = (byte) (-69);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-69), (byte)0, (byte)21, (byte)49, (byte)0}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-69), (byte)0, (byte)21, (byte)49, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertEquals("iload_1", string1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "(C";
      try { 
        Utility.methodSignatureArgumentTypes("(C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-104), 7);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)77, (byte) (-104), (byte)16, (byte) (-87), (byte)64, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals("0:    astore_2\n1:    dcmpg\n2:    bipush\t\t-87\n4:    lstore_1\n5:    nop\n", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "(class_index = ";
      stringArray0[1] = "(class_index = ";
      stringArray0[2] = "(class_index = ";
      stringArray0[3] = "(class_index = ";
      stringArray0[4] = "(class_index = ";
      stringArray0[5] = "0:    astore_2\n1:    dcmpg\n2:    bipush\t\t-87\n4:    lstore_1\n5:    nop\n";
      stringArray0[6] = "(class_index = ";
      String string1 = Utility.methodTypeToSignature("(class_index = ", stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, stringArray0.length);
      assertEquals("(L(class_index;L(class_index;L(class_index;L(class_index;L(class_index;L0:;L(class_index;)L(class_index;", string1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "e$cG,NUE";
      stringArray0[1] = "nop";
      stringArray0[2] = "?gpcze2\"]";
      stringArray0[3] = "wide";
      stringArray0[4] = "e$cG,NUE";
      String string0 = Utility.methodTypeToSignature("e$cG,NUE", stringArray0);
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      assertEquals("(Le$cG,NUE;Lnop;L?gpcze2\"];Lwide;Le$cG,NUE;)Le$cG,NUE;", string0);
      
      String string1 = Utility.compactClassName("nop");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("nop", string1);
      
      String string2 = Utility.getSignature("e$cG,NUE");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Le$cG,NUE;", string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)48, (byte)31, (byte) (-114), (byte)75, (byte)63}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)48, (byte)31, (byte) (-114), (byte)75, (byte)63}, byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      assertEquals("faload", string3);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("HEs[gp8=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HEs[gp8='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "?$_g`HIN6$*a";
      byte[] byteArray0 = Utility.decode("?$_g`HIN6$*a", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte)47, (byte)103, (byte)96, (byte)72, (byte)73, (byte)78, (byte)54, (byte)0, (byte)97}, byteArray0);
      assertEquals(10, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("monitorenter", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `monitorenter'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)109;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)111;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2177, 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-28);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 61, 2492, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Null'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Utility.compactClassName("jP:r-_7*89!SH6(S", "o{im`h~amw", false);
      assertNotNull(string0);
      assertEquals("jP:r-_7*89!SH6(S", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)62;
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)13;
      byteArray1[2] = (byte)62;
      byteArray1[3] = (byte)62;
      byteArray1[4] = (byte)79;
      byteArray1[5] = (byte)62;
      byteArray1[6] = (byte)62;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-15), (byte) (-125), (byte)0, (byte)79, (byte)13, (byte)0, (byte)62}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)13, (byte)62, (byte)62, (byte)79, (byte)62, (byte)62}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit((-470), (-3366));
      assertEquals((-67109334), int0);
      
      String string1 = Utility.compactClassName("jP:r-_7*89!SH6(S", false);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("jP:r-_7*89!SH6(S", string1);
      
      String string2 = Utility.accessToString(214, false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("private protected final volatile transient", string2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "p; ";
      String string1 = Utility.compactClassName("p; ");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("p; ", string1);
      
      int int0 = (-461);
      String string2 = Utility.accessToString((-461), false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("public private final synchronized interface abstract strictfp synthetic annotation enum", string2);
      
      String string3 = "newarray";
      String string4 = Utility.compactClassName("newarray");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("newarray", string4);
      
      String string5 = "BD>\"K4";
      String string6 = Utility.compactClassName("BD>\"K4");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("BD>\"K4", string6);
      
      try { 
        Utility.methodSignatureReturnType("G[u,KMcrFC3d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G[u,KMcrFC3d'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      short short0 = Utility.searchOpcode("$#");
      assertEquals((short) (-1), short0);
      
      int int0 = Utility.clearBit((short) (-1), 48);
      assertEquals((-65537), int0);
      
      byte byte0 = Utility.typeOfSignature("Z^mxmGzeZ-\"TC");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      objectArray0[4] = object4;
      boolean boolean4 = false;
      boolean boolean5 = true;
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
      assertEquals(5, objectArray0.length);
      
      try { 
        Utility.typeOfSignature("\"java.lang.Object@3d7ef839\", \"java.lang.Object@1dcc01f3\", \"java.lang.Object@1078df69\", \"java.lang.Object@3daf6249\", \"java.lang.Object@77daeaf5\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@3d7ef839\", \"java.lang.Object@1dcc01f3\", \"java.lang.Object@1078df69\", \"java.lang.Object@3daf6249\", \"java.lang.Object@77daeaf5\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("F~gS[McCmG[Va");
      assertNotNull(string0);
      assertEquals("float", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Fm%e";
      stringArray0[1] = "*<";
      stringArray0[2] = "*<";
      stringArray0[3] = "*<";
      stringArray0[4] = "F~gS[McCmG[Va";
      stringArray0[5] = "float";
      stringArray0[6] = "F~gS[McCmG[Va";
      stringArray0[7] = "F~gS[McCmG[Va";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("*<", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[McCmG[Va
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("_Aa0Wu[x9.YH//8EQ");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte)68;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-31), (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      String string0 = "/Xj$]W@hq{y/&";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/Xj$]W@hq{y/&");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.classOrInterface((-1343));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("interface", string1);
      
      try { 
        Utility.typeOfSignature("/Xj$]W@hq{y/&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /Xj$]W@hq{y/&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)92, (byte)91, (byte)97, (byte)4, (byte)102, (byte) (-69), (byte)91}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("@ ThpQ_");
      assertNotNull(constantUtf8_0);
      assertEquals("@ ThpQ_", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_0.getTag());
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertNotNull(constantMethodType0);
      assertArrayEquals(new byte[] {(byte)92, (byte)91, (byte)97, (byte)4, (byte)102, (byte) (-69), (byte)91}, byteArray0);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(23643, constantMethodType0.getDescriptorIndex());
      assertEquals(7, byteArray0.length);
      
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(2, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)92, (byte)91, (byte)97, (byte)4, (byte)102, (byte) (-69), (byte)91}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertEquals(7, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)99, 773, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = ".c";
      try { 
        Utility.typeOfSignature(".c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "KM9\"[";
      try { 
        Utility.typeOfSignature("KM9\"[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KM9\"[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.bcel.classfile.InnerClass";
      stringArray0[1] = "org.apache.bcel.classfile.InnerClass";
      stringArray0[2] = "org.apache.bcel.classfile.InnerClass";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      stringArray0[3] = "org.apache.bcel.classfile.InnerClass";
      String string0 = Utility.methodTypeToSignature("org.apache.bcel.classfile.InnerClass", stringArray0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      assertEquals("(Lorg/apache/bcel/classfile/InnerClass;Lorg/apache/bcel/classfile/InnerClass;Lorg/apache/bcel/classfile/InnerClass;Lorg/apache/bcel/classfile/InnerClass;)Lorg/apache/bcel/classfile/InnerClass;", string0);
      
      String string1 = Utility.printArray((Object[]) stringArray0, false, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("org.apache.bcel.classfile.InnerClass, org.apache.bcel.classfile.InnerClass, org.apache.bcel.classfile.InnerClass, org.apache.bcel.classfile.InnerClass", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-106), (byte) (-45), (byte)0, (byte)86, (byte)85, (byte) (-115)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-106), (byte) (-45), (byte)0, (byte)86, (byte)85, (byte) (-115)}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertEquals("fcmpg", string2);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.Utility", "org.apache.bcel.classfile.InnerClass", "dup2_x2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = Utility.accessToString(11, false);
      assertNotNull(string0);
      assertEquals("public private static", string0);
      
      String string1 = Utility.format(73, 832, true, 'L');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEqualsstring1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-104);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf
      Constant constant0 = constantUtf8_0.copy();
      constantArray0[0] = constant0;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getCachedInstance("public private static");
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 135, 766);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-98);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 47, (int) (byte)93, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("V");
      assertNotNull(string0);
      assertEquals("void", string0);
      
      short short0 = Utility.searchOpcode("jsr_w");
      assertEquals((short)201, short0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "V";
      stringArray0[1] = "V";
      stringArray0[2] = "V";
      stringArray0[3] = "V";
      stringArray0[4] = "void";
      stringArray0[5] = "jsr_w";
      stringArray0[6] = "jsr_w";
      stringArray0[7] = "void";
      try { 
        Utility.methodTypeToSignature("jsr_w", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-117);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), 1812);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-117)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("0:    f2i\n", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, objectArray0.length);
      assertEquals("{}", string1);
      
      MockFile mockFile0 = new MockFile("{}");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.printf("class", objectArray0);
      assertNotNull(printStream0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertEquals(5L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("{}", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("{}", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0, objectArray0.length);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      Utility.printArray(printStream0, objectArray0);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals("{}", mockFile0.getName());
      assertEquals(8L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("{}", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0, objectArray0.length);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "class");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)24, (byte)76, (byte)96, (byte)88, (byte) (-99)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(5, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)24, (byte)76, (byte)96, (byte)88, (byte) (-99)}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(5, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("dload\t\t%76", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = Utility.accessToString(81, false);
      assertNotNull(string0);
      assertEquals("public final volatile", string0);
      
      String string1 = Utility.classOrInterface(62);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      
      String string2 = Utility.getSignature("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("L;", string2);
      
      String string3 = Utility.replace("L;", "/", "class");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("L;", string3);
      
      String string4 = Utility.convertString("4Ce\"(,2");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("4Ce\\\"(,2", string4);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)116;
      byteArray0[7] = (byte)67;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-127), (int) (byte)67, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)96, (byte) (-58), (byte)83, (byte)0, (byte)16, (byte)116, (byte)67}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("0:    lor\n1:    iadd\n2:    ifnull\t\t#21250\n5:    bipush\t\t116\n7:    fstore_0\n", string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    lor\n1:    iadd\n2:    ifnull\t\t#21250\n5:    bipush\t\t116\n7:    fstore_0\n", "0:    lor\n1:    iadd\n2:    ifnull\t\t#21250\n5:    bipush\t\t116\n7:    fstore_0\n", "0:    lor\n1:    iadd\n2:    ifnull\t\t#21250\n5:    bipush\t\t116\n7:    fstore_0\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    lor
         // 1:    iadd
         // 2:    ifnull\t\t#21250
         // 5:    bipush\t\t116
         // 7:    fstore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = Utility.fillup("VROL9Pi", 114, false, '-');
      assertNotNull(string0);
      assertEquals("-----------------------------------------------------------------------------------------------------------VROL9Pi", string0);
      
      String string1 = Utility.methodSignatureReturnType("VROL9Pi", false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("void", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y<EMB~$rB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y<EMB~$rB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-114);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte) (-40);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)71, (byte)98, (byte) (-114), (byte) (-60), (byte)104, (byte) (-40)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)71, (byte)98, (byte) (-114), (byte) (-60), (byte)104, (byte) (-40)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = Utility.clearBit(57, 57);
      assertEquals(57, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('y');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)10;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), (int) (byte) (-62));
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)78, (byte)28, (byte) (-102), (byte) (-97), (byte) (-62), (byte)52, (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("0:    astore_3\n1:    iload_2\n2:    ifne\t\t#-24636\n5:    caload\n6:    lconst_1\n", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("9.L4Sd");
      assertNotNull(mockPrintWriter0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      mockPrintWriter0.write(charArray0);
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertEquals(1, charArray0.length);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "9.L4Sd");
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      Object[] objectArray0 = new Object[0];
      Utility.printArray(printWriter0, objectArray0);
      assertEquals(0, objectArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 782, 189, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char char0 = '.';
      boolean boolean0 = Utility.isJavaIdentifierPart('.');
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface((-763));
      assertNotNull(string0);
      assertEquals("class", string0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('.');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('M');
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string1 = "> }+1rR[p4({okgdO";
      try { 
        Utility.typeOfSignature("> }+1rR[p4({okgdO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: > }+1rR[p4({okgdO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("StackMap");
      assertEquals((byte)9, byte0);
      
      String string0 = Utility.classOrInterface(65);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      String string1 = Utility.getSignature("\tdefault = ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ldefault;", string1);
      
      String string2 = Utility.compactClassName("H t#k;E", "StackMap", true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("H t#k;E", string2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = Utility.clearBit((-1019), (-1019));
      assertEquals((-1019), int0);
      
      String string0 = Utility.compactClassName("L()LWC2K@>fE$>t&<ur6;;V", "L()LWC2K@>fE$>t&<ur6;;V", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte byte0 = Utility.typeOfSignature("C&n");
      assertEquals((byte)5, byte0);
      
      try { 
        Utility.typeOfSignature("multianewarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: multianewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!HD{!5qG)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HD{!5qG)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)83;
      byte byte0 = (byte)58;
      byteArray0[6] = (byte)58;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte)47;
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)123, (byte)58, (byte)57, (byte) (-110), (byte)83, (byte)58, (byte) (-66), (byte)47}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals("aa 7b 3a 39 92 53 3a be 2f", string0);
      
      String string1 = Utility.compactClassName("aa 7b 3a 39 92 53 3a be 2f", false);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("aa 7b 3a 39 92 53 3a be 2f", string1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-110), (int) (byte) (-66), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = " ";
      String string1 = Utility.getSignature(" ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L;", string1);
      
      byte byte0 = Utility.typeOfSignature("L;");
      assertEquals((byte)14, byte0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HK'5LT]u%vB=gmUC");
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "Kb`^B<E>XRMk]U@`";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Kb`^B<E>XRMk]U@`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kb`^B<E>XRMk]U@`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)82;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)82}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)82}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = Utility.isJavaIdentifierPart('!');
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = Utility.convertString("WC2K@>fE$>t&<ur6");
      assertNotNull(string0);
      assertEquals("WC2K@>fE$>t&<ur6", string0);
      
      String[] stringArray0 = null;
      String string1 = Utility.methodTypeToSignature("WC2K@>fE$>t&<ur6", (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("()LWC2K@>fE$>t&<ur6;", string1);
      
      String[] stringArray1 = new String[4];
      stringArray1[0] = "()LWC2K@>fE$>t&<ur6;";
      stringArray1[1] = "WC2K@>fE$>t&<ur6";
      stringArray1[2] = "()LWC2K@>fE$>t&<ur6;";
      stringArray1[3] = "WC2K@>fE$>t&<ur6";
      String string2 = Utility.methodTypeToSignature("WC2K@>fE$>t&<ur6", stringArray1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4, stringArray1.length);
      assertEquals("(L()LWC2K@>fE$>t&<ur6;;LWC2K@>fE$>t&<ur6;L()LWC2K@>fE$>t&<ur6;;LWC2K@>fE$>t&<ur6;)LWC2K@>fE$>t&<ur6;", string2);
      
      try { 
        Utility.methodSignatureReturnType("()LWC2K@>fE$>t&<ur6;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LWC2K@>fE$>t&<ur6;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F.hBR+");
      assertEquals((byte)6, byte0);
      
      String string0 = Utility.getSignature("F.hBR+");
      assertNotNull(string0);
      assertEquals("LF/hBR+;", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('y');
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = Utility.fillup("F.hBR+", 8, false, 'y');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("yyF.hBR+", string1);
      
      byte byte1 = Utility.typeOfSignature("F.hBR+");
      assertTrue(byte1 == byte0);
      assertEquals((byte)6, byte1);
      
      String string2 = Utility.format(2450, (byte)6, false, 'y');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("yy2450", string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "F.hBR+";
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "c8y/s<CF_c$1O+3");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string3 = Utility.methodTypeToSignature("F.hBR+", stringArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("(LF/hBR+;)LF/hBR+;", string3);
      
      String string4 = Utility.printArray((Object[]) stringArray0, false);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("F.hBR+", string4);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string5 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string5);
      assertArrayEquals(new byte[] {(byte)6, (byte)6}, byteArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      assertEquals(2, byteArray0.length);
      assertEquals("iconst_3", string5);
      
      String string6 = Utility.classOrInterface(68);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("class", string6);
      
      String string7 = Utility.methodSignatureReturnType("F.hBR+", false);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("float", string7);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("p`);lMi)0zO", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `p`);lMi)0zO'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("CLASSPATH component ", false);
      assertNotNull(string0);
      assertEquals("char", string0);
      
      int int0 = Utility.clearBit(286, 286);
      assertEquals(286, int0);
      
      short short0 = Utility.searchOpcode("char");
      assertEquals((short) (-1), short0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "char";
      objectArray0[1] = (Object) "CLASSPATH component ";
      objectArray0[2] = (Object) "char";
      objectArray0[3] = (Object) "CLASSPATH component ";
      String string1 = Utility.printArray(objectArray0, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      assertEquals("char, CLASSPATH component , char, CLASSPATH component ", string1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)90;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, (-2774), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("R806x2JHyby");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R806x2JHyby'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = Utility.clearBit((-2916), 61);
      assertEquals((-536873828), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte) (-126);
      byteArray0[8] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)126, (byte)73, (byte) (-25), (byte)34, (byte) (-79), (byte) (-126), (byte) (-126)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[3];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      assertNotNull(constantFieldref0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)126, (byte)73, (byte) (-25), (byte)34, (byte) (-79), (byte) (-126), (byte) (-126)}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals(32329, constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      assertEquals(17255, constantFieldref0.getClassIndex());
      assertEquals(9, byteArray0.length);
      
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(byteSequence0);
      assertNotNull(constantFieldref1);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)126, (byte)73, (byte) (-25), (byte)34, (byte) (-79), (byte) (-126), (byte) (-126)}, byteArray0);
      assertFalse(constantFieldref1.equals((Object)constantFieldref0));
      assertEquals(8, byteSequence0.getIndex());
      assertEquals(59170, constantFieldref1.getClassIndex());
      assertEquals((byte)9, constantFieldref1.getTag());
      assertEquals(45442, constantFieldref1.getNameAndTypeIndex());
      assertEquals(9, byteArray0.length);
      
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1549, (-2916));
      assertNotNull(constantMethodHandle0);
      assertEquals(1549, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-2916), constantMethodHandle0.getReferenceIndex());
      
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      assertNotNull(constantMethodHandle1);
      assertTrue(constantMethodHandle1.equals((Object)constantMethodHandle0));
      assertEquals(1549, constantMethodHandle0.getReferenceKind());
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals((-2916), constantMethodHandle0.getReferenceIndex());
      assertEquals(1549, constantMethodHandle1.getReferenceKind());
      assertEquals((-2916), constantMethodHandle1.getReferenceIndex());
      assertEquals((byte)15, constantMethodHandle1.getTag());
      
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertEquals(3, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)67, (byte)103, (byte)126, (byte)73, (byte) (-25), (byte)34, (byte) (-79), (byte) (-126), (byte) (-126)}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertEquals(9, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      assertEquals(3, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('D');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), (int) (byte) (-27));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    return
         // 1:    dload_1
         // 2:    <illegal opcode>
         // 3:    nop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "Tmu,i>p2O?";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Tmu,i>p2O?", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Tmu,i>p2O?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("MvQ*-tH%Q%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MvQ*-tH%Q%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "2@y[.";
      try { 
        Utility.typeOfSignature("2@y[.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2@y[.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q};YU?PbW=");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = Utility.setBit(25, 25);
      assertEquals(33554457, int0);
      
      String string0 = Utility.classOrInterface(25);
      assertNotNull(string0);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)27, (byte)7, (byte) (-69), (byte)21, (byte)49, (byte)34}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)27, (byte)7, (byte) (-69), (byte)21, (byte)49, (byte)34}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      assertEquals("iload_1", string1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)55, (byte) (-87), (byte) (-76), (byte)99, (byte)126}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-102), (byte)55, (byte) (-87), (byte) (-76), (byte)99, (byte)126}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(3, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(6, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("ifne\t\t#14249", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("q5 .5#HN$0d^96V", false);
      assertNotNull(byteArray0);
      assertEquals(13, byteArray0.length);
      
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertEquals(13, byteArray0.length);
      assertEquals("q5$m$$5$pHN$N$5e96V", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "q5$m$$5$pHN$N$5e96V";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, objectArray0.length);
      assertEquals("q5$m$$5$pHN$N$5e96V", string1);
      
      int int0 = 20;
      String string2 = Utility.classOrInterface(20);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("class", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(13, byteArray0.length);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(13, byteArray0.length);
      assertEquals("lrem", string3);
      
      char char0 = 'O';
      String string4 = Utility.fillup("q5$m$$5$pHN$N$5e96V", 160, false, 'O');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOq5$m$$5$pHN$N$5e96V", string4);
      
      boolean boolean1 = false;
      try { 
        Utility.methodSignatureReturnType("OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOq5$m$$5$pHN$N$5e96V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOq5$m$$5$pHN$N$5e96V'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 233;
      int int1 = Utility.setBit(233, 63);
      assertFalse(int1 == int0);
      assertEquals((-2147483415), int1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.bcel.classfile.Annotations";
      stringArray0[1] = "org.apache.bcel.classfile.Annotations";
      stringArray0[2] = "org.apache.bcel.classfile.Annotations";
      String string0 = Utility.methodTypeToSignature("org.apache.bcel.classfile.Annotations", stringArray0);
      assertNotNull(string0);
      assertEquals(3, stringArray0.length);
      assertEquals("(Lorg/apache/bcel/classfile/Annotations;Lorg/apache/bcel/classfile/Annotations;Lorg/apache/bcel/classfile/Annotations;)Lorg/apache/bcel/classfile/Annotations;", string0);
      
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "? extends ");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-127)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("$81", string0);
      
      String string1 = Utility.compactClassName("Sz?@-$,!bJR", false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Sz?@-$,!bJR", string1);
      
      String string2 = Utility.methodSignatureReturnType("Sz?@-$,!bJR", false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("short", string2);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-127);
      byteArray1[1] = (byte) (-127);
      byteArray1[2] = (byte) (-127);
      byteArray1[3] = (byte) (-127);
      byteArray1[4] = (byte) (-127);
      byteArray1[5] = (byte) (-127);
      byteArray1[6] = (byte) (-127);
      byteArray1[7] = (byte) (-127);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("PLd|gOwOp~(", "java.lang.newarray");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"java.lang.newarray\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = Utility.isSet(70, 722);
      assertFalse(boolean0);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('L');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte byte0 = Utility.typeOfSignature("Invalid method signature: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}(+O5t`,");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      assertEquals(3, objectArray0.length);
      assertEquals("{null, null, null}", string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.encode(byteArray0, true);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, byteArray0.length);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(3, objectArray0.length);
      assertEquals("{null, null, null}", string2);
      
      String string3 = Utility.printArray(objectArray0, true);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(3, objectArray0.length);
      assertEquals("{null, null, null}", string3);
      
      String string4 = Utility.getSignature("}[|)>@+;m]");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("[L};", string4);
      
      String string5 = Utility.compactClassName("BootstrapMethods", "CM4v4/", false);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("BootstrapMethods", string5);
      
      String string6 = Utility.compactClassName("", "}(+O5t`,", false);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = Utility.setBit(680, 3325);
      assertEquals(536871592, int0);
      
      String string0 = "8X|Oj\\dO-9MS:TD0$";
      try { 
        Utility.typeOfSignature("8X|OjdO-9MS:TD0$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8X|OjdO-9MS:TD0$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)8;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), 2361);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)16, (byte)92, (byte) (-28), (byte)8}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("0:    ior\n1:    bipush\t\t92\n3:    <illegal opcode>\n4:    iconst_5\n", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte)92);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)16, (byte)92, (byte) (-28), (byte)8}, byteArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, byteArray0.length);
      assertEquals("0:    ior\n1:    bipush\t\t92\n3:    <illegal opcode>\n4:    iconst_5\n", string1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = Utility.compactClassName("zebzR>m%eWh`s7", "zebzR>m%eWh`s7", true);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = ", high = ";
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-1);
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)22, (byte)83, (byte) (-1)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = Utility.toHexString(byteArray0);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)22, (byte)83, (byte) (-1)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, byteArray0.length);
      assertEquals("16 53 ff", string1);
      
      String string2 = Utility.compactClassName("16 53 ff");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("16 53 ff", string2);
      
      boolean boolean3 = Utility.isSet(2019, (byte)83);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(10, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      String string3 = Utility.accessToString((int) (byte) (-1), false);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string3);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(", ", "public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", "16 53 ff");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-111);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1284), 57);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)7, (byte) (-112), (byte) (-120), (byte) (-13), (byte)3, (byte) (-111)}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(7, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("0:    <illegal opcode>\n1:    iconst_4\n2:    d2f\n3:    l2i\n4:    <illegal opcode>\n5:    iconst_0\n6:    i2b\n", string0);
      
      String string1 = Utility.getSignature("0:    <illegal opcode>\n1:    iconst_4\n2:    d2f\n3:    l2i\n4:    <illegal opcode>\n5:    iconst_0\n6:    i2b\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L0:;", string1);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("fkKr:uZC=4DU%m", "L0:;", "istore_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fkKr:uZC=4DU%m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "newarray";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "newarray");
      assertFalse(boolean0);
      
      char char0 = 'i';
      boolean boolean1 = Utility.isJavaIdentifierPart('i');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-122);
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte) (-27), (byte)2, (byte) (-122)}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(4, byteArray0.length);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("QT>V!]nmP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QT>V!]nmP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "GKwY*'uG&$fQMro-*Cc";
      try { 
        Utility.typeOfSignature("GKwY*'uG&$fQMro-*Cc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GKwY*'uG&$fQMro-*Cc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = "UvGu`C58i";
      try { 
        Utility.methodSignatureReturnType("UvGu`C58i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UvGu`C58i'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = Utility.methodSignatureReturnType("Z%K]XDIm Hm+!{", false);
      assertNotNull(string0);
      assertEquals("boolean", string0);
      
      String string1 = Utility.accessToString(3004);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("protected static final synchronized transient native interface strictfp", string1);
      
      try { 
        Utility.typeOfSignature("' at index ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ' at index 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = Utility.getSignature("7Y^Sfz5");
      assertNotNull(string0);
      assertEquals("L7Y^Sfz5;", string0);
      
      String string1 = Utility.classOrInterface(8);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("class", string1);
      
      int int0 = (-224);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      int int1 = Utility.setBit((-224), 180);
      assertTrue(int1 == int0);
      assertEquals((-224), int1);
      
      try { 
        Utility.typeOfSignature("?uqBK#~4:!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?uqBK#~4:!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)43;
      String string0 = Utility.encode(byteArray0, true);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)64, (byte)42, (byte)43}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Constant[] constantArray0 = new Constant[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)42, (byte)42);
      assertNotNull(constantMethodref0);
      assertEquals(42, constantMethodref0.getClassIndex());
      assertEquals(42, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      assertNotNull(constantMethodref1);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertEquals(42, constantMethodref0.getClassIndex());
      assertEquals(42, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(42, constantMethodref1.getClassIndex());
      assertEquals(42, constantMethodref1.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      assertNotNull(constantFloat0);
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertNotNull(constantFloat1);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(0.0F, constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)64, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = Utility.setBit((-454), 2);
      assertEquals((-450), int0);
      
      String string0 = Utility.accessToString(92);
      assertNotNull(string0);
      assertEquals("protected static final volatile", string0);
      
      String string1 = Utility.replace("protected static final volatile", "Type of ConstValue invalid: ", "Type of ConstValue invalid: ");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("protected static final volatile", string1);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "protected static final volatile";
      objectArray0[1] = (Object) "Type of ConstValue invalid: ";
      objectArray0[2] = (Object) "Type of ConstValue invalid: ";
      objectArray0[3] = (Object) "protected static final volatile";
      objectArray0[4] = (Object) "protected static final volatile";
      objectArray0[5] = (Object) "Type of ConstValue invalid: ";
      objectArray0[6] = (Object) "protected static final volatile";
      String string2 = Utility.printArray(objectArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(7, objectArray0.length);
      assertEquals("{protected static final volatile, Type of ConstValue invalid: , Type of ConstValue invalid: , protected static final volatile, protected static final volatile, Type of ConstValue invalid: , protected static final volatile}", string2);
      
      String string3 = Utility.compactClassName("protected static final volatile");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("protected static final volatile", string3);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)84, (byte)85}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(2, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertNotNull(constantPool1);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      
      String string4 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte)84, (byte)85}, byteArray0);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertEquals(0, constantArray0.length);
      assertEquals(2, byteArray0.length);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("bastore", string4);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "LR";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      try { 
        Utility.methodSignatureReturnType("LR", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      short short0 = Utility.searchOpcode(", low = ");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)65;
      boolean boolean0 = false;
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)18, (byte)65}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("$SA", string0);
      
      String string1 = Utility.fillup("$SA", (byte)65, false, '+');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++$SA", string1);
      
      try { 
        Utility.typeOfSignature("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++$SA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $SA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-113);
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass((byte)7);
      assertNotNull(constantClass0);
      assertEquals((byte)7, constantClass0.getTag());
      assertEquals(7, constantClass0.getNameIndex());
      
      constantArray0[0] = (Constant) constantClass0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(123, (byte) (-43));
      assertNotNull(constantFieldref0);
      assertEquals(123, constantFieldref0.getClassIndex());
      assertEquals((-43), constantFieldref0.getNameAndTypeIndex());
      assertEquals((byte)9, constantFieldref0.getTag());
      
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-26));
      assertNotNull(constantInteger0);
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-26), constantInteger0.getBytes());
      
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      assertNotNull(constantInteger1);
      assertTrue(constantInteger1.equals((Object)constantInteger0));
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals((-26), constantInteger0.getBytes());
      assertEquals((-26), constantInteger1.getBytes());
      assertEquals((byte)3, constantInteger1.getTag());
      
      constantArray0[2] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-970), 1720);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-43), (byte)5, (byte) (-26), (byte) (-13), (byte)0, (byte)7, (byte)92, (byte) (-113)}, byteArray0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(8, byteArray0.length);
      assertEquals(3, constantArray0.length);
      assertEquals("0:    <illegal opcode>\n1:    iconst_2\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    nop\n5:    iconst_4\n6:    dup2\n7:    d2l\n", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "J{6@EZUGbcA.;\"O^C";
      String string1 = Utility.signatureToString("J{6@EZUGbcA.;\"O^C");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("long", string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)97;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte)97}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = "+h}=UdC/E{0rG]9.qGq";
      try { 
        Utility.methodSignatureReturnType("+h}=UdC/E{0rG]9.qGq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+h}=UdC/E{0rG]9.qGq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)43;
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)64, (byte)38, (byte)43}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("$40$s$x", string0);
      
      Constant[] constantArray0 = new Constant[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ConstantLong constantLong0 = new ConstantLong((-102L));
      assertNotNull(constantLong0);
      assertEquals((-102L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      
      constantArray0[0] = (Constant) constantLong0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)38, (byte)38);
      assertNotNull(constantMethodref0);
      assertEquals(38, constantMethodref0.getClassIndex());
      assertEquals(38, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      assertNotNull(constantMethodref1);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
      assertEquals(38, constantMethodref0.getClassIndex());
      assertEquals(38, constantMethodref0.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref0.getTag());
      assertEquals(38, constantMethodref1.getClassIndex());
      assertEquals(38, constantMethodref1.getNameAndTypeIndex());
      assertEquals((byte)10, constantMethodref1.getTag());
      
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      assertNotNull(constantFloat0);
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      assertNotNull(constantFloat1);
      assertTrue(constantFloat1.equals((Object)constantFloat0));
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals(0.0F, constantFloat1.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat1.getTag());
      
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)64, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)40;
      boolean boolean0 = false;
      String string0 = Utility.encode(byteArray0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-19), (byte)11, (byte)116, (byte)40}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("Z$ed$Lt$u", string0);
      
      String string1 = Utility.encode(byteArray0, false);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-19), (byte)11, (byte)116, (byte)40}, byteArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(5, byteArray0.length);
      assertEquals("Z$ed$Lt$u", string1);
      
      String string2 = Utility.methodSignatureReturnType("Z$ed$Lt$u", false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("boolean", string2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 892, 170, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(XG?!jBu5evwA[9-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XG?!jBu5evwA[9-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = Utility.compactClassName("anewarray", "? extends ", false);
      assertNotNull(string0);
      assertEquals("anewarray", string0);
      
      MockFile mockFile0 = new MockFile("anewarray", "PMGClass(");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "anewarray";
      objectArray0[1] = (Object) "PMGClass(";
      objectArray0[2] = (Object) "anewarray";
      objectArray0[3] = (Object) "anewarray";
      objectArray0[4] = (Object) mockFile0;
      objectArray0[5] = (Object) "anewarray";
      objectArray0[6] = (Object) "? extends ";
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "?]kQflfMc:#E+-", objectArray0);
      assertNotNull(printWriter0);
      assertEquals("/home/ubuntu/test/projects/1_bcel/anewarray", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("PMGClass(", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/ubuntu/test/projects/1_bcel/anewarray/PMGClass(", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(7, objectArray0.length);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      PrintWriter printWriter1 = mockPrintWriter0.format("t[3", objectArray0);
      assertNotNull(printWriter1);
      assertEquals("/home/ubuntu/test/projects/1_bcel/anewarray", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("PMGClass(", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/ubuntu/test/projects/1_bcel/anewarray/PMGClass(", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(7, objectArray0.length);
      assertSame(mockPrintWriter0, printWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter1, mockPrintWriter0);
      assertSame(printWriter1, printWriter0);
      
      Utility.printArray(printWriter1, objectArray0);
      assertEquals("/home/ubuntu/test/projects/1_bcel/anewarray", mockFile0.getParent());
      assertFalse(mockFile0.isDirectory());
      assertEquals("PMGClass(", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/home/ubuntu/test/projects/1_bcel/anewarray/PMGClass(", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(7, objectArray0.length);
      assertSame(mockPrintWriter0, printWriter1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter1, mockPrintWriter0);
      assertSame(printWriter1, printWriter0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "t[3";
      stringArray0[1] = "anewarray";
      stringArray0[2] = "anewarray";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("2i^P)@Q4{2", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = Utility.signatureToString("BY,~tm%$]nR93Z!^Yv2", false);
      assertNotNull(string0);
      assertEquals("byte", string0);
      
      String string1 = Utility.compactClassName("BY,~tm%$]nR93Z!^Yv2", "f2d", true);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("BY,~tm%$]nR93Z!^Yv2", string1);
      
      byte[] byteArray0 = Utility.decode("7%wO%eu^ tJ%q", false);
      assertNotNull(byteArray0);
      assertEquals(13, byteArray0.length);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("byte", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `byte'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-95), (byte) (-57), (byte)16, (byte)16, (byte)87}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(6, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      assertNotNull(constantInteger0);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-95), (byte) (-57), (byte)16, (byte)16, (byte)87}, byteArray0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals((byte)3, constantInteger0.getTag());
      assertEquals(329369360, constantInteger0.getBytes());
      assertEquals(6, byteArray0.length);
      
      constantArray0[0] = (Constant) constantInteger0;
      ConstantLong constantLong0 = new ConstantLong((byte) (-95));
      assertNotNull(constantLong0);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-95L), constantLong0.getBytes());
      
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      assertNotNull(constantLong1);
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-95L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals((-95L), constantLong1.getBytes());
      
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)19, (byte) (-95), (byte) (-57), (byte)16, (byte)16, (byte)87}, byteArray0);
      assertEquals(6, byteSequence0.getIndex());
      assertEquals(2, constantPool0.getLength());
      assertEquals(6, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertEquals("bipush\t\t87", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "@),Vi ";
      try { 
        Utility.typeOfSignature("@),Vi ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @),Vi 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Py6t.mUcZf7", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Py6t.mUcZf7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "Ei;Y3ix?<lF";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ei;Y3ix?<lF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ei;Y3ix?<lF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)55;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)55}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("PMGClass(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PMGClass(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature(", ", (String[]) null);
      assertNotNull(string0);
      assertEquals("()L,;", string0);
      
      String string1 = Utility.methodSignatureReturnType("Invalid signature: ", false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("int", string1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)66;
      byteArray0[0] = (byte)66;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)66}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("@t1TBW00-% !s>u6j6");
      assertNotNull(string0);
      assertEquals("@t1TBW00-% !s>u6j6", string0);
      
      String string1 = Utility.compactClassName("@t1TBW00-% !s>u6j6");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("@t1TBW00-% !s>u6j6", string1);
      
      String string2 = "7qvv3l2rho>q:P?Oee";
      try { 
        Utility.methodSignatureArgumentTypes("7qvv3l2rho>q:P?Oee");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7qvv3l2rho>q:P?Oee
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = Utility.compactClassName("return");
      assertNotNull(string0);
      assertEquals("return", string0);
      
      String string1 = Utility.fillup("return", 153, false, '_');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("___________________________________________________________________________________________________________________________________________________return", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte) (-113);
      byteArray0[8] = (byte) (-24);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((-1123.4712F));
      assertNotNull(constantFloat0);
      assertEquals((byte)4, constantFloat0.getTag());
      assertEquals((-1123.4712F), constantFloat0.getBytes(), 0.01F);
      
      constantArray0[0] = (Constant) constantFloat0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)84, (byte) (-36), (byte)0, (byte)110, (byte)118, (byte) (-101), (byte) (-113), (byte) (-24)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      assertNotNull(constantMethodType0);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)84, (byte) (-36), (byte)0, (byte)110, (byte)118, (byte) (-101), (byte) (-113), (byte) (-24)}, byteArray0);
      assertEquals((byte)16, constantMethodType0.getTag());
      assertEquals(40532, constantMethodType0.getDescriptorIndex());
      assertEquals(2, byteSequence0.getIndex());
      assertEquals(9, byteArray0.length);
      
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantArray0.length);
      
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-98), (-1233), false);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)84, (byte) (-36), (byte)0, (byte)110, (byte)118, (byte) (-101), (byte) (-113), (byte) (-24)}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(9, byteArray0.length);
      assertEquals(2, constantArray0.length);
      assertEquals("0:    ifle\t\t#21724\n3:    nop\n4:    fdiv\n5:    fneg\n6:    iflt\t\t#-28690\n", string2);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)89;
      byteArray0[0] = (byte)89;
      ConstantPool constantPool0 = null;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)89}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, 2037, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals(3, objectArray0.length);
      
      byte byte0 = Utility.typeOfSignature("D0sN_x`t%yg");
      assertEquals((byte)7, byte0);
      
      String string1 = Utility.fillup("java.lang.Object@71f78932, java.lang.Object@7d3437fd, java.lang.Object@5621e951", (-674), false, '(');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = Utility.compactClassName("java.lang.Object@71f78932, java.lang.Object@7d3437fd, java.lang.Object@5621e951", "invokevirtual", false);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = Utility.compactClassName("java.lang.Object@71f78932, java.lang.Object@7d3437fd, java.lang.Object@5621e951", true);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Object@71f78932, java.lang.Object@7d3437fd, java.lang.Object@5621e951");
      assertFalse(boolean0);
      
      String string4 = Utility.compactClassName("float", true);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("float", string4);
      
      String string5 = Utility.format(108, 139, false, '(');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((108", string5);
      
      String string6 = Utility.methodTypeToSignature("((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((108", (String[]) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("()L((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((108;", string6);
      
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-75);
      byte byte0 = (byte) (-2);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte) (-15), (byte) (-75), (byte) (-2), (byte) (-67), (byte) (-69), (byte)41, (byte) (-122)}, byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertEquals(7, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertNotNull(constantPool0);
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantArray0.length);
      
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-15), (byte) (-75), (byte) (-2), (byte) (-67), (byte) (-69), (byte)41, (byte) (-122)}, byteArray0);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals(0, constantPool0.getLength());
      assertEquals(7, byteArray0.length);
      assertEquals(0, constantArray0.length);
      assertEquals("<illegal opcode>", string0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      assertNotNull(dataOutputStream0);
      
      // Undeclared exception!
      try { 
        constantPool0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2048, 2048);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = true;
      String string0 = Utility.methodSignatureReturnType("D3iBi*H", true);
      assertNotNull(string0);
      assertEquals("double", string0);
      
      short short0 = Utility.searchOpcode("double");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)121;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = ".8";
      int int0 = 125;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "enum");
      assertFalse(boolean0);
      
      char char0 = '@';
      String string1 = Utility.fillup(".8", 125, true, '@');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(".8@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@", string1);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "interface");
      assertFalse(boolean0);
      
      try { 
        Utility.decode("3_}K}ip.$Y8X", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-1499), (-113));
      assertTrue(boolean0);
      
      int int0 = 31;
      int int1 = Utility.clearBit(149, 31);
      assertFalse(int1 == int0);
      assertEquals(149, int1);
      
      String string0 = null;
      String string1 = ")\t";
      // Undeclared exception!
      try { 
        MockFile.createTempFile(")\t", "09TgGt4+zhv&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-43);
      byteArray0[0] = (byte) (-43);
      byte byte1 = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byte byte2 = (byte)60;
      byteArray0[2] = (byte)60;
      byte byte3 = (byte) (-53);
      byteArray0[3] = (byte) (-53);
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-43), (byte) (-105), (byte)60, (byte) (-53)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean0);
      
      String string0 = "7";
      try { 
        Utility.methodSignatureArgumentTypes("7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      short short0 = Utility.searchOpcode("goto_w");
      assertEquals((short)200, short0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        Utility.methodSignatureArgumentTypes("4pfR]_7V^", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4pfR]_7V^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean boolean0 = Utility.isSet(97, 97);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("(");
      assertNotNull(string0);
      assertEquals("(", string0);
      
      char char0 = '/';
      String string1 = Utility.format(97, 97, false, '/');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("///////////////////////////////////////////////////////////////////////////////////////////////97", string1);
      
      int int0 = 240;
      int int1 = Utility.clearBit(97, 240);
      assertFalse(int1 == int0);
      assertEquals(97, int1);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", (String) null, "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "05");
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("\t\t");
      assertNotNull(string0);
      assertEquals("L;", string0);
      
      String string1 = Utility.fillup("\t\t", 57, true, 'c');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\t\tccccccccccccccccccccccccccccccccccccccccccccccccccccccc", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-110);
      String string2 = Utility.toHexString(byteArray0);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte) (-71), (byte)70, (byte)89, (byte) (-110)}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(4, byteArray0.length);
      assertEquals("b9 46 59 92", string2);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)102;
      String string0 = Utility.toHexString(byteArray0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)5, (byte) (-98), (byte)112, (byte) (-81), (byte)102}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("05 9e 70 af 66", string0);
      
      boolean boolean0 = Utility.isSet((byte)5, (byte)5);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = Utility.accessToString(2742, false);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("private protected final synchronized transient interface strictfp", string1);
      
      short short0 = Utility.searchOpcode("LD)mKA0]F$4ju*a|");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.getSignature("05 9e 70 af 66");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("L05;", string2);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)5;
      objectArray0[1] = (Object) "private protected final synchronized transient interface strictfp";
      objectArray0[2] = (Object) "private protected final synchronized transient interface strictfp";
      objectArray0[3] = (Object) "LD)mKA0]F$4ju*a|";
      objectArray0[4] = (Object) "L05;";
      objectArray0[5] = (Object) "05 9e 70 af 66";
      String string3 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(6, objectArray0.length);
      assertEquals("5, private protected final synchronized transient interface strictfp, private protected final synchronized transient interface strictfp, LD)mKA0]F$4ju*a|, L05;, 05 9e 70 af 66", string3);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Utility.printArray(objectArray0);
      Utility.compactClassName("{java.lang.Object@62525154, java.lang.Object@152def5, java.lang.Object@2598727c, java.lang.Object@2598727c, java.lang.Object@65a9711f}", "", true);
      int int0 = 725;
      char char0 = 'd';
      Utility.fillup("", 725, true, 'd');
      Utility.accessToString(66, true);
      try { 
        Utility.methodSignatureArgumentTypes("o<^g.t{,1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: o<^g.t{,1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.convertString("ifnonnull");
      assertEquals("ifnonnull", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)70;
      objectArray0[1] = (Object) (byte)70;
      objectArray0[2] = (Object) null;
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"70\", \"70\", null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("r");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "r");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      mockPrintStream0.println(0.0);
      objectArray0[1] = object0;
      Utility.printArray(printStream0, objectArray0);
      try { 
        Utility.methodSignatureArgumentTypes("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.printArray((Object[]) null);
      Utility.replace(">kL7|H4F+:,waCC)Y^", ">kL7|H4F+:,waCC)Y^", "XDf");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "XDf";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "XDf";
      objectArray0[3] = (Object) "XDf";
      objectArray0[4] = (Object) "XDf";
      objectArray0[5] = (Object) "XDf";
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.methodSignatureReturnType(">kL7|H4F+:,waCC)Y^", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "`(A: C\\^q+0(($b=";
      // Undeclared exception!
      try { 
        Utility.decode("`(A: C^q+0(($b=", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"b=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "p{bnJb`Wgpr";
      String string1 = "wide";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string2 = "char";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("p{bnJb`Wgpr", "wide", "char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: p{bnJb`Wgpr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.convertString(":");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":");
      Utility.isJavaIdentifierPart('0');
      try { 
        Utility.methodSignatureReturnType("#)*KL@^ev");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `*KL@^ev'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.format((-212), 781, false, '9');
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "J04";
      Utility.searchOpcode("J04");
      String string1 = "ca{7!5fk)}";
      String string2 = null;
      URI uRI0 = MockURI.create("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)65;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "UTS=z|/[";
      try { 
        Utility.typeOfSignature("UTS=z|/[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UTS=z|/[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true);
      String string0 = "[\\iDS";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[iDS", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iDS'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.clearBit(41, (-1983180328));
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)15;
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-16);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.classOrInterface(6);
      boolean boolean0 = true;
      Utility.compactClassName("M]/)T;J.", true);
      Object[] objectArray0 = null;
      boolean boolean1 = false;
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.classOrInterface((-2495));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 2
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0jy**P&>5");
      Utility.decode("int", false);
      String string0 = "byte";
      Utility.compactClassName("int", "byte", false);
      String string1 = "ACC_SUPER flag\t\t";
      try { 
        Utility.methodSignatureArgumentTypes("ACC_SUPER flag\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ACC_SUPER flag\t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = 1749;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.fillup("ICWCNAWi-2DL=DCF", 1749, true, '#');
      Utility.getSignature("O{iM`H~AmWg!oj%.");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-80);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("O{iM`H~AmWg!oj%.");
      ByteSequence byteSequence0 = null;
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantDouble", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.convertString("cH['CF8^mK?w7S=kGu~");
      String string0 = Utility.classOrInterface(203);
      Utility.getSignature("h'+sa+i:`%oQ8K<5C+");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Lh'+sa+i:`%oQ8K<5C+;";
      objectArray0[1] = (Object) "h'+sa+i:`%oQ8K<5C+";
      objectArray0[2] = (Object) "cH['CF8^mK?w7S=kGu~";
      objectArray0[3] = (Object) "cH['CF8^mK?w7S=kGu~";
      Object object0 = new Object();
      objectArray0[4] = object0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "cH['CF8^mK?w7S=kGu~";
      objectArray0[7] = (Object) "h'+sa+i:`%oQ8K<5C+";
      objectArray0[8] = (Object) "h'+sa+i:`%oQ8K<5C+";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "short";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("short", stringArray0);
      Utility.compactClassName("()S");
      // Undeclared exception!
      try { 
        Utility.signatureToString("short", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      Utility.methodTypeToSignature("short", stringArray0);
      Utility.printArray((Object[]) stringArray0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 75
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("-2833");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Utility.signatureToString("L-2833;");
      Utility.typeOfSignature("L-2833;");
      Utility.classOrInterface((byte)14);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      PrintWriter printWriter0 = mockPrintWriter0.printf("class", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.format(2781, 2781, false, 'O');
      try { 
        Utility.methodSignatureArgumentTypes("Z$}I$uM", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z$}I$uM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "\"!";
      String string1 = ":}7e{,Y3A";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureToString("\"!", ":}7e{,Y3A", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = (-2074);
      Utility.accessToString((-2074), false);
      try { 
        Utility.typeOfSignature("private protected synchronized volatile transient native interface abstract synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private protected synchronized volatile transient native interface abstract synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      Utility.compactClassName("h'+sa+i:`%oQ8K<5C+", "", true);
      int int0 = 725;
      char char0 = 'd';
      Utility.fillup("", 725, true, 'd');
      Utility.accessToString(2047, true);
      try { 
        Utility.typeOfMethodSignature("qXg_Rg7>/vLpHhu{C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: qXg_Rg7>/vLpHhu{C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "WB}lN}+";
      Utility.getSignature("WB}lN}+");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-113);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1*V_#D");
      byteArray0[6] = (byte) (-30);
      Utility.encode(byteArray0, false);
      Utility.isJavaIdentifierPart('2');
      Utility.setBit((-370), 11);
      Utility.replace("$5c$ffC$ce$j$8f$e2", "LWB}lN}+;", "LWB}lN}+;");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 55, (int) (byte) (-30), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = 1489;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.accessToString(1489);
      Utility.fillup("breakpoint", 181, true, '\\');
      Utility.compactClassName("public final volatile transient native abstract", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("breakpoint\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `breakpoint\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "impdep1";
      stringArray0[1] = "impdep1";
      Utility.methodTypeToSignature("impdep1", stringArray0);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "h");
      Utility.typeOfSignature("V");
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", "V", true);
      Utility.convertString("org.apache.bcel.util.ClassPath");
      // Undeclared exception!
      try { 
        Utility.signatureToString("bmYs[,pM}0", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `bmYs[,pM}0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "Mb*}";
      boolean boolean0 = true;
      try { 
        Utility.decode("Mb*}", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      int int0 = 1895;
      boolean boolean0 = false;
      char char0 = '<';
      Utility.format(1895, 1895, false, '<');
      Utility.clearBit((-1822), 1895);
      int int1 = (-930);
      Utility.format(592, (-930), false, '5');
      try { 
        Utility.typeOfSignature("592");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 592
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.methodTypeToSignature("", (String[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte) (-1);
      byte byte0 = (byte) (-92);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-48);
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("()L;", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("gq^2lt1(de", "gq^2lt1(de", "invokestatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: gq^2lt1(de
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = Utility.format(111, 111, false, 'c');
      assertEquals("cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc111", string0);
      
      boolean boolean0 = Utility.isSet(812, 111);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.replace("'eFlY#9QdtV", "'eFlY#9QdtV", "'eFlY#9QdtV");
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
}
