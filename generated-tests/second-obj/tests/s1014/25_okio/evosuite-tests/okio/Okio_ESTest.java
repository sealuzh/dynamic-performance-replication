/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:03:16 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.Okio;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Okio_ESTest extends Okio_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.source((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      BufferedSink bufferedSink0 = Okio.buffer(sink0);
      BufferedSource bufferedSource0 = Okio.buffer((Source) ((RealBufferedSink) bufferedSink0).buffer);
      assertNotNull(bufferedSource0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError(true);
      AssertionError assertionError1 = new AssertionError("!LK~/wNsSzr?. s", assertionError0);
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("/");
      Path path0 = mockFile0.toPath();
      // Undeclared exception!
      try { 
        Okio.sink(path0, (OpenOption[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.source((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.sink((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getTcpNoDelay();
      try { 
        Okio.sink((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Okio.blackhole();
      // Undeclared exception!
      try { 
        Okio.sink((Socket) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // socket == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      try { 
        Okio.source((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Okio.blackhole();
      // Undeclared exception!
      try { 
        Okio.sink((Path) null, (OpenOption[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        Okio.appendingSink((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError();
      MockException mockException0 = new MockException();
      assertionError0.fillInStackTrace();
      assertionError0.initCause(mockException0);
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.sink((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SO!!\"c;u=FSncp6)dnI", "SO!!\"c;u=FSncp6)dnI");
      Sink sink0 = Okio.sink((File) mockFile0);
      BufferedSink bufferedSink0 = Okio.buffer(sink0);
      Source source0 = Okio.source((File) mockFile0);
      MockFile mockFile1 = new MockFile("SO!!\"c;u=FSncp6)dnI", "SO!!\"c;u=FSncp6)dnI");
      Okio.blackhole();
      try { 
        bufferedSink0.write(source0, 1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("7uv");
      Sink sink0 = Okio.sink((File) mockFile0);
      RealBufferedSink realBufferedSink0 = (RealBufferedSink)Okio.buffer(sink0);
      realBufferedSink0.toString();
      MockFile mockFile1 = new MockFile(" < ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Okio.blackhole();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.emitCompleteSegments();
      assertSame(realBufferedSink1, realBufferedSink0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      RealBufferedSink realBufferedSink0 = (RealBufferedSink)Okio.buffer(sink0);
      Buffer buffer0 = new Buffer();
      MockFile mockFile0 = new MockFile("g{", "g{");
      realBufferedSink0.buffer.emit();
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeHexadecimalUnsignedLong(0L);
      realBufferedSink0.writeAll(buffer0);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.READ;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.DSYNC;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.TRUNCATE_EXISTING;
      realBufferedSink0.writeShort(2146876156);
      MockInetAddress.getLocalHost();
      realBufferedSink0.toString();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      realBufferedSink1.timeout();
      Okio.appendingSink(mockFile0);
      AssertionError assertionError0 = new AssertionError('o');
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SO!!\"c;u=FSncp6)dnI");
      Sink sink0 = Okio.sink((File) mockFile0);
      BufferedSink bufferedSink0 = Okio.buffer(sink0);
      bufferedSink0.writeUtf8("SO!!\"c;u=FSncp6)dnI");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-64);
      bufferedSink0.flush();
      mockFile0.toURL();
      Source source0 = Okio.source((File) mockFile0);
      MockFile mockFile1 = new MockFile("SO!!\"c;u=FSncp6)dnI");
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      realBufferedSink0.writeInt((byte)55);
      BufferedSink bufferedSink1 = realBufferedSink0.write(source0, 1L);
      assertSame(realBufferedSink0, bufferedSink1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SO!!\"c;u=FSncp6)dnI", "SO!!\"c;u=FSncp6)dnI");
      Sink sink0 = Okio.blackhole();
      BufferedSink bufferedSink0 = Okio.buffer(sink0);
      BufferedSink bufferedSink1 = bufferedSink0.writeUtf8("SO!!\"c;u=FSncp6)dnI");
      bufferedSink1.flush();
      MockException mockException0 = new MockException();
      mockFile0.mkdir();
      Sink sink1 = Okio.sink((File) mockFile0);
      assertFalse(sink1.equals((Object)sink0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SO!!\"c;u=FSncp6)dnI");
      Okio.sink((File) mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      Sink sink0 = Okio.blackhole();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      BufferedSink bufferedSink0 = realBufferedSink1.writeHexadecimalUnsignedLong(695L);
      realBufferedSink1.outputStream();
      realBufferedSink0.writeAll(source0);
      ((RealBufferedSink) bufferedSink0).close();
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8("SO!!\"c;u=FSncp6)dnI");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      BufferedSink bufferedSink0 = Okio.buffer(sink0);
      bufferedSink0.flush();
      // Undeclared exception!
      try { 
        Okio.source((Socket) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // socket == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SO!!\"c;u=FSHcp6)dnI");
      Sink sink0 = Okio.sink((File) mockFile0);
      BufferedSink bufferedSink0 = Okio.buffer(sink0);
      BufferedSink bufferedSink1 = bufferedSink0.writeUtf8("\"Vp=9fG/=v]?");
      ((RealBufferedSink) bufferedSink1).timeout();
      bufferedSink0.flush();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      mockFile0.toURL();
      Okio.source((File) mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(bufferedSink0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(sink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(bufferedSink1);
      realBufferedSink2.outputStream();
      realBufferedSink0.writeAll(realBufferedSink0.buffer);
      realBufferedSink2.close();
      BufferedSource bufferedSource0 = Okio.buffer((Source) realBufferedSink0.buffer);
      assertNotNull(bufferedSource0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SO!!\"c;u=FSncp6)dnI");
      Sink sink0 = Okio.sink((File) mockFile0);
      BufferedSink bufferedSink0 = Okio.buffer(sink0);
      bufferedSink0.flush();
      mockFile0.toURL();
      Okio.source((File) mockFile0);
      MockFile mockFile1 = new MockFile("SO!!\"c;u=FSncp6)dnI");
      Okio.blackhole();
      BufferedSink bufferedSink1 = bufferedSink0.writeLong(1L);
      assertSame(bufferedSink1, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "SO!!\"c;u=FSncp6)dnI";
      MockFile mockFile0 = new MockFile("SO!!\"c;u=FSncp6)dnI");
      Sink sink0 = Okio.sink((File) mockFile0);
      Okio.buffer(sink0);
      Source source0 = Okio.source((File) mockFile0);
      mockFile0.toURL();
      AssertionError assertionError0 = new AssertionError("", (Throwable) null);
      MockException mockException0 = new MockException((Throwable) null);
      mockException0.getCause();
      AssertionError assertionError1 = new AssertionError(source0);
      Okio.isAndroidGetsocknameError(assertionError0);
      Path path0 = null;
      Okio.blackhole();
      OpenOption[] openOptionArray0 = new OpenOption[0];
      // Undeclared exception!
      try { 
        Okio.source((Path) null, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("SO!!\"c;u=FSncp6)dnI");
      Sink sink0 = Okio.sink((File) mockFile0);
      BufferedSink bufferedSink0 = Okio.buffer(sink0);
      BufferedSink bufferedSink1 = bufferedSink0.writeUtf8("SO!!\"c;u=FSncp6)dnI");
      bufferedSink1.flush();
      MockException mockException0 = new MockException();
      MockThrowable mockThrowable0 = new MockThrowable(mockException0);
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[1];
      // Undeclared exception!
      try { 
        Okio.source(path0, openOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
