/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 17:25:10 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      DoubleKeyMap<Map<Object, Integer>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Integer, Integer>();
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put((Map<Object, Integer>) hashMap0, integer0, integer0);
      Integer integer1 = doubleKeyMap0.remove((Map<Object, Integer>) hashMap0, integer0);
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Integer, Integer>();
      Integer integer0 = new Integer(1442);
      doubleKeyMap0.put((Map<Object, Integer>) null, (Integer) null, integer0);
      Integer integer1 = doubleKeyMap0.remove((Map<Object, Integer>) null, (Integer) null);
      assertEquals(1442, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Integer>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = doubleKeyMap0.get(hashMap0, (Object) hashMap0);
      DoubleKeyMap<Map<Object, Integer>, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Integer>, Integer, Integer>();
      doubleKeyMap1.put((Map<Object, Integer>) null, (Integer) null, integer0);
      Integer integer1 = new Integer((-1239));
      Integer integer2 = doubleKeyMap1.remove((Map<Object, Integer>) null, integer1);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Integer>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      doubleKeyMap0.put(hashMap0, (Object) null, (Integer) null);
      Integer integer0 = doubleKeyMap0.get(hashMap0, (Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(class0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, HashMap<Integer, Object>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, HashMap<Integer, Object>, String>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      doubleKeyMap0.put(hashMap0, hashMap0, (String) null);
      Map<HashMap<Integer, Object>, String> map0 = doubleKeyMap0.remove(hashMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Map<String, Object>, Map<Integer, Map<Object, Integer>>> hashMap0 = new HashMap<Map<String, Object>, Map<Integer, Map<Object, Integer>>>();
      Class<Map> class0 = Map.class;
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>((Map<String, Map<Object, Object>>) null);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0);
      Map<String, Object> map1 = doubleKeyMap1.newMap();
      HashMap<Integer, Map<Object, Integer>> hashMap2 = new HashMap<Integer, Map<Object, Integer>>();
      hashMap0.put(map1, hashMap2);
      HashMap<String, Object> hashMap3 = new HashMap<String, Object>(hashMap1);
      DoubleKeyMap<Map<String, Object>, Integer, Map<Object, Integer>> doubleKeyMap2 = new DoubleKeyMap<Map<String, Object>, Integer, Map<Object, Integer>>(hashMap0, class0);
      Map<Integer, Map<Object, Integer>> map2 = doubleKeyMap2.get((Map<String, Object>) hashMap3);
      assertEquals(0, map2.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Integer, String>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-1423));
      doubleKeyMap0.put(hashMap0, integer0, "0&U9r4?$i~!$^z.q.");
      Map<Integer, String> map0 = doubleKeyMap0.get(hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Integer>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      DoubleKeyMap<Map<Object, Integer>, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Integer>, Integer, Integer>();
      Integer integer0 = doubleKeyMap0.remove(hashMap0, (Object) doubleKeyMap1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Map<String, Map<Object, Integer>>> hashMap0 = new HashMap<String, Map<String, Map<Object, Integer>>>();
      DoubleKeyMap<String, String, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<Object, Integer>>(hashMap0);
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>();
      Map<Object, Integer> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Collection<Object> collection0 = hashMap0.values();
      HashMap<Object, Map<Integer, Integer>> hashMap1 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>(hashMap1);
      Map<Object, Integer> map0 = doubleKeyMap0.newMap();
      HashMap<Integer, Map<Integer, String>> hashMap2 = new HashMap<Integer, Map<Integer, String>>();
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, String>(hashMap2);
      Map<Map<Object, Integer>, Map<Map<Object, Integer>, Object>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<Map<Object, Integer>, Map<Object, Integer>, Object> doubleKeyMap2 = new DoubleKeyMap<Map<Object, Integer>, Map<Object, Integer>, Object>(map1);
      Object object0 = doubleKeyMap2.put(map0, map0, (Object) collection0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Map<String, Map<Object, Integer>>> hashMap0 = new HashMap<String, Map<String, Map<Object, Integer>>>();
      DoubleKeyMap<String, String, Map<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<Object, Integer>>(hashMap0);
      DoubleKeyMap<HashMap<Object, String>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, String>, Object, Integer>();
      Map<Map<Object, Integer>, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Map<Object, Integer>, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Map<Object, Integer>, Object, Object>(map0);
      Object object0 = doubleKeyMap2.put((Map<Object, Integer>) null, (Object) doubleKeyMap0, (Object) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Integer>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, Integer>();
      DoubleKeyMap<Object, HashMap<String, String>, String> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, String>, String>();
      String string0 = doubleKeyMap1.put((Object) doubleKeyMap0, (HashMap<String, String>) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Integer>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap0.get(hashMap0, object0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, String, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Integer, Object>>((Map<Object, Map<String, HashMap<Integer, Object>>>) null);
      HashMap<Integer, Object> hashMap0 = doubleKeyMap0.get((Object) null, (String) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Integer, Integer>();
      DoubleKeyMap<Object, String, HashMap<Integer, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<Integer, Object>>((Map<Object, Map<String, HashMap<Integer, Object>>>) null);
      HashMap<Integer, Object> hashMap0 = doubleKeyMap1.get((Object) doubleKeyMap0, (String) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Integer>, String>();
      Map<Map<Object, Integer>, Map<Object, HashMap<String, String>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Map<Object, Integer>, Object, HashMap<String, String>> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Integer>, Object, HashMap<String, String>>(map0);
      Map<Object, HashMap<String, String>> map1 = doubleKeyMap1.get((Map<Object, Integer>) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0);
      Object object0 = new Object();
      Map<Integer, Object> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Map<Integer, Integer>> hashMap0 = new HashMap<String, Map<Integer, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(hashMap0, class0);
      Integer integer0 = new Integer((-4383));
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((String) null, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Integer, Integer>, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, Integer>((Map<HashMap<Integer, Integer>, Map<Object, Integer>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, HashMap<Object, Map<Object, Integer>>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, HashMap<Object, Map<Object, Integer>>, HashMap<Object, Object>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, Map<Object, Integer>> hashMap1 = new HashMap<Object, Map<Object, Integer>>();
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      doubleKeyMap0.put(hashMap0, hashMap1, hashMap2);
      HashMap<Object, Object> hashMap3 = doubleKeyMap0.put(hashMap0, hashMap1, hashMap2);
      assertSame(hashMap3, hashMap2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, String>, Integer, Map<String, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Integer, Map<String, String>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>();
      Map<Object, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(map0);
      Map<Object, Integer> map1 = doubleKeyMap1.remove((Object) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>((Map<String, Map<Object, Object>>) null);
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0);
      HashMap<Integer, Map<Object, Integer>> hashMap0 = new HashMap<Integer, Map<Object, Integer>>();
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap1, (Object) hashMap0);
      assertNull(object0);
  }
}
