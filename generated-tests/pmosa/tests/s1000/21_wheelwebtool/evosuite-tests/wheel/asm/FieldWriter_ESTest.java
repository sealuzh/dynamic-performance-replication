/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 14:47:09 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Label;
import wheel.asm.MethodWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2961);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      FieldWriter fieldWriter1 = classWriter0.firstField;
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2951);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("yV3h};0.Ot[IMT", true);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      byteVector0.put12(1647, 2);
      ByteVector byteVector1 = byteVector0.putInt(2);
      fieldWriter0.put(byteVector1);
      AnnotationVisitor annotationVisitor1 = fieldWriter0.visitAnnotation("4\"O~/`lK<", false);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2951);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      fieldWriter0.visitAnnotation("yV3h};0.Ot[IMT", false);
      ByteVector byteVector0 = classWriter0.pool;
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2652));
      String string0 = "'.Y`)";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "'.Y`)", "'.Y`)", "The wildcard list must not be null", "The wildcard list must not be null");
      fieldWriter0.visitEnd();
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      ClassWriter classWriter1 = new ClassWriter(0);
      MethodWriter methodWriter0 = classWriter1.lastMethod;
      classWriter0.firstMethod = null;
      classWriter1.visitOuterClass("4)S>m0`", "+q8q|2zP;o", "+q8q|2zP;o");
      classWriter1.visitInnerClass("-+Dt1", "4)S>m0`", "", (-1574));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, 1, "W@;", "RuntimeInvisibleAnnotations", "", (Object) null);
      fieldWriter0.getSize();
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2951);
      String string0 = "";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      String string1 = "yV3h};0.Ot[IMT";
      fieldWriter0.visitAnnotation("yV3h};0.Ot[IMT", true);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      byteVector0.put12(1647, 2);
      byteVector0.length = 1647;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-24);
      byte byte0 = (byte) (-62);
      byteArray0[3] = (byte) (-62);
      Object object0 = new Object();
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 1647, "", "", (String) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@779dcc26
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1624));
      MethodWriter methodWriter0 = classWriter0.lastMethod;
      classWriter0.visitOuterClass("", "", "Signature");
      classWriter0.visitOuterClass("", "'c*}B>'8<%kC[S:", "");
      classWriter0.threshold = (-800);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-800), "f]%~z", "", "aC#*", "'c*}B>'8<%kC[S:");
      ByteVector byteVector0 = new ByteVector(3087);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2961);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "2l", "2l", "2l", "2l");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2951);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 2951, "RuntimeInvisibleAnnotations", "", "", (Object) null);
      FieldWriter fieldWriter2 = classWriter0.firstField;
      AnnotationVisitor annotationVisitor0 = fieldWriter2.visitAnnotation("yV3h};0.Ot[IMT", true);
      ClassWriter classWriter1 = new ClassWriter((-3235));
      ByteVector byteVector0 = classWriter1.pool;
      fieldWriter1.put(byteVector0);
      ByteVector byteVector1 = byteVector0.put12(2951, 4602);
      byteVector1.putInt(1);
      FieldWriter fieldWriter3 = new FieldWriter(classWriter0, 1, "RuntimeInvisibleAnnotations", "", "", "yV3h};0.Ot[IMT");
      fieldWriter3.put(byteVector1);
      AnnotationVisitor annotationVisitor1 = fieldWriter1.visitAnnotation("", true);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2961);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "2l", "2l", "2l", "2l");
      ByteVector byteVector0 = new ByteVector();
      FieldWriter fieldWriter1 = classWriter0.firstField;
      int int0 = fieldWriter1.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2951);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      fieldWriter0.visitAnnotation("yV3h};0.Ot[IMT", true);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      ByteVector byteVector1 = byteVector0.put12((-1514), (-3056));
      byteVector1.putInt(1500);
      fieldWriter0.put(byteVector1);
      int int0 = Frame.INTEGER;
      Attribute attribute0 = new Attribute((String) null);
      fieldWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2961);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "RuntimeVisibleAnnotations", "", (String) null, (Object) null);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      FieldWriter fieldWriter1 = classWriter0.firstField;
      int int0 = fieldWriter1.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2961);
      classWriter0.version = 607;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "2l", "2l", "2l", "2l");
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = fieldWriter0.next;
      assertNull(fieldWriter1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2961);
      classWriter0.visit(1374, 1374, "<init>", "<init>", "<init>", (String[]) null);
      classWriter0.newDouble(2961);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "2l", "2l", "2l", "2l");
      classWriter0.invalidFrames = false;
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.putLong((-840L));
      fieldWriter0.put(byteVector0);
      int int0 = Frame.BASE_KIND;
      System.setCurrentTimeMillis(0L);
  }
}
