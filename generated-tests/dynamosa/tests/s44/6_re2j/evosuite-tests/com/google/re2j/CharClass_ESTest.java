/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 11:23:21 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1475;
      intArray0[1] = 1775;
      int[][] intArray1 = new int[3][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 1475;
      intArray2[3] = 1475;
      intArray2[4] = 0;
      intArray1[2] = intArray2;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 120771;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 65}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1, 120770, 66, 1114111, 0, 65}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {1, 120770, 0, 1114111, 0, 65}, intArray0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 0, 0, 1114111, 0, 65}, intArray0);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 630);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-3512);
      intArray0[1] = (-3006);
      intArray0[2] = 1137;
      intArray0[3] = 4;
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-3512), (-3006), 1137, 4, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][2];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendLiteral((-6294), 0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 32;
      CharClass charClass1 = charClass0.appendLiteral(3774, 107);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2459;
      intArray0[1] = (-66);
      intArray0[2] = 0;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(0, 65);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-66), (-3716));
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 2459);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {2459, (-66), 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {2459, (-66), 0, 0, 0, 0, 0, 0}, intArray0);
      
      int[][] intArray1 = new int[3][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass5 = charClass4.appendTable(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {2459, (-66), 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass6 = charClass5.cleanClass();
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertArrayEquals(new int[] {2459, (-66), 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass7 = charClass3.appendNegatedTable(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertArrayEquals(new int[] {2459, (-66), 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass8 = charClass0.appendRange(0, 333);
      assertNotNull(charClass8);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      
      CharClass charClass9 = charClass5.cleanClass();
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(charClass9);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass8);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass8);
      assertArrayEquals(new int[] {2459, (-66), 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass10 = charClass9.cleanClass();
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(charClass10);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass3);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass8);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass8);
      assertArrayEquals(new int[] {2459, (-66), 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass11 = charClass10.appendLiteral((-3716), 0);
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(charClass11);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass11);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass3);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass11);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass3);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass2);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass8);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass11);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass8);
      assertArrayEquals(new int[] {2459, (-66), 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass12 = charClass5.appendClass(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(charClass12);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass12);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass12);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass11);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass12);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass11);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass12);
      assertArrayEquals(new int[] {2459, (-66), 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass13 = charClass8.appendNegatedClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass13);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass11);
      assertSame(charClass8, charClass12);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass13);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass12);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass7);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass5);
      assertArrayEquals(new int[] {2459, (-66), 0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass14 = charClass7.negateClass();
      assertEquals(8, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(charClass14);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass12);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass14);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass4);
      assertSame(charClass14, charClass0);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass4);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass2);
      assertSame(charClass2, charClass11);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass13);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass14);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass12);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass3, charClass11);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass13);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass14);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass12);
      assertSame(charClass7, charClass10);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass12);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass13);
      assertSame(charClass7, charClass9);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass11);
      assertSame(charClass7, charClass14);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertArrayEquals(new int[] {2459, (-66), 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 66640;
      int int0 = 0;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[20];
      intArray0[0] = 2821;
      intArray0[1] = 91;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(20, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(91, 91);
      assertEquals(20, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertEquals(20, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass2.appendRange(2849, 4333);
      assertEquals(20, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      
      CharClass charClass4 = charClass0.appendClassWithSign(intArray0, 91);
      assertEquals(20, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      int int0 = 32;
      intArray0[1] = 32;
      int int1 = 0;
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[1][1];
      int[] intArray1 = new int[3];
      intArray1[0] = 32;
      intArray1[1] = 32;
      intArray1[2] = 32;
      intArray0[0] = intArray1;
      CharClass charClass2 = charClass0.appendNegatedTable(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.appendClassWithSign(intArray1, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[0][7];
      int int0 = 11516;
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, 11516);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray2 = new int[3][9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[2] = 1;
      int int0 = 890;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 1, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = new CharClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(1774, 1774);
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass1));
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.negateClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass1.appendClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass1.appendLiteral(898, 33);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = charClass2.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      
      CharClass charClass5 = charClass2.appendNegatedClass(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass5);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      
      CharClass charClass6 = charClass5.negateClass();
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass6);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      
      int[] intArray2 = charClass4.toArray();
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      CharClass charClass1 = charClass0.appendLiteral((-963), 1631);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      String string0 = CharClass.charClassToString(intArray0, (-963));
      assertEquals(2, intArray0.length);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 3038);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      int[] intArray1 = charClass2.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {(-963), (-963), 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      CharClass charClass1 = charClass0.appendLiteral((-963), 1631);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendRange(3038, (-2469));
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.appendClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass4 = charClass3.cleanClass();
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass5 = charClass1.appendLiteral((-2469), 32);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      
      CharClass charClass6 = new CharClass();
      assertFalse(charClass6.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass5));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass3));
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass0.negateClass();
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass6));
      assertNotNull(charClass7);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertNotSame(charClass7, charClass6);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][8];
      int[] intArray1 = new int[8];
      intArray1[1] = 32;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 32;
      intArray1[6] = 0;
      intArray1[7] = 32;
      CharClass charClass1 = new CharClass(intArray1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertEquals(8, intArray1.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 32, 0, 0, 0, 32, 0, 32}, intArray1);
      
      CharClass charClass2 = charClass1.appendTable(intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertEquals(0, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 32, 0, 0, 0, 32, 0, 32}, intArray1);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertEquals(0, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass0);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 32, 0, 32, 0, 32, 0, 0}, intArray1);
      
      CharClass charClass4 = charClass1.appendRange(0, 0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertEquals(8, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {0, 32, 0, 32, 0, 32, 0, 0}, intArray1);
      
      CharClass charClass5 = charClass3.appendFoldedClass(intArray1);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
      assertEquals(0, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass0);
      assertArrayEquals(new int[] {0, 32, 0, 32, 0, 32, 0, 0}, intArray1);
      
      CharClass charClass6 = charClass1.negateClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass0));
      assertEquals(8, intArray1.length);
      assertNotNull(charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertArrayEquals(new int[] {33, 1114111, 0, 32, 0, 32, 0, 0}, intArray1);
      
      CharClass charClass7 = charClass2.appendTableWithSign(intArray0, 1007);
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertEquals(0, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass7);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {33, 1114111, 0, 32, 0, 32, 0, 0}, intArray1);
      
      CharClass charClass8 = charClass3.appendFoldedClass(intArray1);
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertEquals(0, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(charClass8);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass1);
      assertNotSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass6);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass7);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass7);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass4);
      assertArrayEquals(new int[] {0, 1114111, 0, 32, 0, 32, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-3337);
      intArray0[1] = 32;
      intArray0[2] = 0;
      intArray0[3] = 899;
      intArray0[4] = 1317;
      intArray0[5] = 0;
      intArray0[6] = 3025;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1317);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 360;
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {360, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      CharClass charClass1 = new CharClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertEquals(9, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][8];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[] intArray1 = charClass1.toArray();
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      
      CharClass charClass3 = charClass1.appendNegatedClass(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      
      CharClass charClass4 = new CharClass();
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass3));
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass2.appendFoldedClass(intArray1);
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass1.equals((Object)charClass4));
      assertFalse(charClass2.equals((Object)charClass4));
      assertFalse(charClass5.equals((Object)charClass4));
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertNotSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 3798;
      int int0 = 2678;
      intArray0[1] = 2678;
      intArray0[2] = (-1400);
      String string0 = CharClass.charClassToString(intArray0, (-2404));
      assertEquals(3, intArray0.length);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {3798, 2678, (-1400)}, intArray0);
      
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {3798, 2678, (-1400)}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArrayArray0 = null;
      int int0 = 119947;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 119947);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 120771;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 65}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      int[][] intArray1 = new int[7][8];
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass4 = charClass2.negateClass();
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      intArray1[3] = intArray0;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[6][6];
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass1 = charClass0.appendRange(6440, (-120771));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1475;
      intArray0[1] = 1775;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[2] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][8];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.appendNegatedTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass0.appendTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      CharClass charClass4 = new CharClass();
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass2));
      assertNotNull(charClass4);
      
      int[] intArray1 = new int[1];
      intArray1[0] = (-2778);
      // Undeclared exception!
      try { 
        charClass2.appendClassWithSign(intArray1, (-2778));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][8];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      int[] intArray1 = new int[9];
      int int0 = 1378;
      intArray1[0] = 1378;
      intArray1[1] = 120674;
      intArray1[2] = 16;
      intArray1[3] = 1114112;
      intArray1[4] = (-2676);
      intArray1[5] = 151;
      intArray1[6] = 1836;
      intArray1[7] = (-650);
      intArray1[8] = 3;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][8];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass0.appendLiteral((-627), (-627));
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      int[] intArray1 = charClass0.toArray();
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertArrayEquals(new int[] {0, 1114111, (-627), (-627)}, intArray1);
      
      CharClass charClass4 = charClass0.appendNegatedClass(intArray1);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, 1114111, (-627), 1114111}, intArray1);
      
      CharClass charClass5 = charClass3.negateClass();
      assertNotNull(charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 13;
      intArray0[2] = 120771;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 13, 120771, 0, 0, 65}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      CharClass charClass3 = charClass0.appendRange(65, 120771);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      CharClass charClass4 = charClass1.appendClassWithSign(intArray0, 3206);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      CharClass charClass5 = charClass2.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      CharClass charClass6 = charClass2.negateClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      CharClass charClass7 = charClass6.appendClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass3);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      CharClass charClass8 = new CharClass();
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass5));
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass8.equals((Object)charClass7));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass3));
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass8.appendFoldedRange(120771, 2550);
      assertFalse(charClass9.equals((Object)charClass1));
      assertFalse(charClass9.equals((Object)charClass6));
      assertFalse(charClass9.equals((Object)charClass5));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass7));
      assertFalse(charClass9.equals((Object)charClass0));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass2));
      assertFalse(charClass8.equals((Object)charClass6));
      assertFalse(charClass8.equals((Object)charClass5));
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass8.equals((Object)charClass7));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass4));
      assertFalse(charClass8.equals((Object)charClass3));
      assertNotNull(charClass9);
      assertSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass1);
      assertNotSame(charClass9, charClass6);
      assertNotSame(charClass9, charClass5);
      assertNotSame(charClass9, charClass2);
      assertNotSame(charClass9, charClass7);
      assertNotSame(charClass9, charClass0);
      assertNotSame(charClass9, charClass3);
      assertNotSame(charClass9, charClass4);
      assertNotSame(charClass8, charClass2);
      assertNotSame(charClass8, charClass6);
      assertNotSame(charClass8, charClass5);
      assertNotSame(charClass8, charClass1);
      assertSame(charClass8, charClass9);
      assertNotSame(charClass8, charClass7);
      assertNotSame(charClass8, charClass0);
      assertNotSame(charClass8, charClass4);
      assertNotSame(charClass8, charClass3);
      
      int[] intArray1 = charClass5.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass9));
      assertFalse(charClass1.equals((Object)charClass8));
      assertFalse(charClass1.equals((Object)charClass9));
      assertFalse(charClass2.equals((Object)charClass9));
      assertFalse(charClass2.equals((Object)charClass8));
      assertFalse(charClass5.equals((Object)charClass8));
      assertFalse(charClass5.equals((Object)charClass9));
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass8);
      assertSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass9);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertNotSame(charClass2, charClass9);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass2, charClass8);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass8);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass9);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      assertArrayEquals(new int[] {120772, 1114111, 0, 65, 120771, 0, 97, 97}, intArray1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int0 = 0;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1317);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[6][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass2 = new CharClass(intArray0);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[4][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray1, 614);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 41;
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {41, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 120771;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 0}, intArray0);
      
      int[][] intArray1 = new int[0][5];
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 2);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 2);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 0}, intArray0);
      
      CharClass charClass3 = charClass1.appendClass(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 0}, intArray0);
      
      CharClass charClass4 = charClass2.appendTable(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 0}, intArray0);
      
      CharClass charClass5 = charClass1.cleanClass();
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 0}, intArray0);
      
      CharClass charClass6 = charClass4.appendNegatedTable(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 0}, intArray0);
      
      CharClass charClass7 = charClass3.appendRange(3, 118);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 0}, intArray0);
      
      CharClass charClass8 = charClass7.cleanClass();
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass8);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass2);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass2);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 0}, intArray0);
      
      CharClass charClass9 = charClass5.cleanClass();
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass9);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass0);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 0}, intArray0);
      
      CharClass charClass10 = charClass9.appendLiteral(66639, 1114111);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass10);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass0);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass0);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass9);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 0}, intArray0);
      
      CharClass charClass11 = charClass4.appendClass(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass11);
      assertSame(charClass11, charClass1);
      assertSame(charClass11, charClass7);
      assertSame(charClass11, charClass10);
      assertSame(charClass11, charClass8);
      assertSame(charClass11, charClass4);
      assertSame(charClass11, charClass3);
      assertSame(charClass11, charClass6);
      assertSame(charClass11, charClass9);
      assertSame(charClass11, charClass0);
      assertSame(charClass11, charClass5);
      assertSame(charClass11, charClass2);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass11);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass11);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 0}, intArray0);
      
      CharClass charClass12 = charClass1.appendNegatedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass12);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass6);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass9);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass12);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 0}, intArray0);
      
      CharClass charClass13 = charClass12.appendNegatedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass13);
      assertSame(charClass12, charClass11);
      assertSame(charClass12, charClass2);
      assertSame(charClass12, charClass8);
      assertSame(charClass12, charClass13);
      assertSame(charClass12, charClass3);
      assertSame(charClass12, charClass0);
      assertSame(charClass12, charClass1);
      assertSame(charClass12, charClass9);
      assertSame(charClass12, charClass5);
      assertSame(charClass12, charClass10);
      assertSame(charClass12, charClass7);
      assertSame(charClass12, charClass4);
      assertSame(charClass12, charClass6);
      assertSame(charClass13, charClass12);
      assertSame(charClass13, charClass9);
      assertSame(charClass13, charClass10);
      assertSame(charClass13, charClass4);
      assertSame(charClass13, charClass1);
      assertSame(charClass13, charClass3);
      assertSame(charClass13, charClass11);
      assertSame(charClass13, charClass0);
      assertSame(charClass13, charClass8);
      assertSame(charClass13, charClass5);
      assertSame(charClass13, charClass2);
      assertSame(charClass13, charClass6);
      assertSame(charClass13, charClass7);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass10);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 0}, intArray0);
      
      CharClass charClass14 = charClass1.negateClass();
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass14);
      assertSame(charClass14, charClass3);
      assertSame(charClass14, charClass1);
      assertSame(charClass14, charClass11);
      assertSame(charClass14, charClass2);
      assertSame(charClass14, charClass6);
      assertSame(charClass14, charClass8);
      assertSame(charClass14, charClass4);
      assertSame(charClass14, charClass10);
      assertSame(charClass14, charClass5);
      assertSame(charClass14, charClass7);
      assertSame(charClass14, charClass13);
      assertSame(charClass14, charClass9);
      assertSame(charClass14, charClass12);
      assertSame(charClass14, charClass0);
      assertSame(charClass0, charClass11);
      assertSame(charClass0, charClass14);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass13);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass12);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass9);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass12);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass11);
      assertSame(charClass1, charClass13);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass14);
      assertSame(charClass1, charClass10);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = (-1874);
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, (-1874));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2582;
      intArray0[2] = (-5027);
      intArray0[3] = (-2544);
      intArray0[4] = 1942;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 66640;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 2582, (-5027), (-2544), 1942, 0, 0, 66640}, intArray0);
      
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertEquals(8, intArray0.length);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {0, 2582, (-5027), (-2544), 1942, 0, 0, 66640}, intArray0);
      
      String string1 = CharClass.charClassToString(intArray0, 0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(8, intArray0.length);
      assertNotNull(string1);
      assertEquals("[]", string1);
      assertArrayEquals(new int[] {0, 2582, (-5027), (-2544), 1942, 0, 0, 66640}, intArray0);
      
      int[] intArray1 = charClass1.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 2582, (-5027), (-2544), 1942, 0, 0, 66640}, intArray0);
      assertArrayEquals(new int[] {0, 66640, (-5027), (-2544)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2459;
      intArray0[1] = (-66);
      intArray0[2] = 0;
      intArray0[3] = 25;
      intArray0[4] = 0;
      intArray0[5] = (-2148);
      intArray0[6] = 1250;
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2459, (-66), 0, 25, 0, (-2148), 1250, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {2459, (-66), 0, 25, 0, (-2148), 1250, 0}, intArray0);
      
      CharClass charClass2 = new CharClass(intArray0);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {2459, (-66), 0, 25, 0, (-2148), 1250, 0}, intArray0);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertEquals(8, intArray0.length);
      assertNotNull(charClass3);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 25, 1250, 0, 2459, (-66), 2459, (-66)}, intArray0);
      
      CharClass charClass4 = charClass2.negateClass();
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass4.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass1));
      assertEquals(8, intArray0.length);
      assertNotNull(charClass4);
      assertNotSame(charClass2, charClass0);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {26, 1249, 1, 2458, (-65), 1114111, 2459, (-66)}, intArray0);
      
      CharClass charClass5 = charClass3.appendClassWithSign(intArray0, (-65));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass0));
      assertEquals(8, intArray0.length);
      assertNotNull(charClass5);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertArrayEquals(new int[] {26, 1249, 1, 2458, (-65), 1114111, 2459, (-66)}, intArray0);
      
      int[][] intArray1 = new int[7][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass6 = charClass5.appendTableWithSign(intArray1, 1249);
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass0));
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass6);
      assertNotSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass4);
      assertNotSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass6);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertNotSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertArrayEquals(new int[] {26, 1249, 1, 2458, (-65), 1114111, 2459, (-66)}, intArray0);
      
      CharClass charClass7 = charClass3.negateClass();
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertEquals(8, intArray0.length);
      assertNotNull(charClass7);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertNotSame(charClass7, charClass1);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass6);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertArrayEquals(new int[] {0, 25, 1, 2458, (-65), 1114111, 2459, (-66)}, intArray0);
      
      CharClass charClass8 = charClass7.appendFoldedRange((-2148), (-879));
      assertFalse(charClass7.equals((Object)charClass1));
      assertFalse(charClass7.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass0));
      assertFalse(charClass8.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass1));
      assertFalse(charClass3.equals((Object)charClass0));
      assertEquals(8, intArray0.length);
      assertNotNull(charClass8);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertNotSame(charClass7, charClass1);
      assertNotSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass8);
      assertSame(charClass7, charClass2);
      assertSame(charClass8, charClass2);
      assertNotSame(charClass8, charClass0);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertNotSame(charClass8, charClass1);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass4);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertNotSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass3, charClass6);
      assertNotSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertArrayEquals(new int[] {0, 25, (-2148), (-879), (-65), 1114111, 2459, (-66)}, intArray0);
      
      CharClass charClass9 = charClass0.appendNegatedClass(intArray0);
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass7));
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass7));
      assertFalse(charClass9.equals((Object)charClass8));
      assertFalse(charClass9.equals((Object)charClass6));
      assertFalse(charClass9.equals((Object)charClass5));
      assertEquals(8, intArray0.length);
      assertNotNull(charClass9);
      assertSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass8);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass9, charClass1);
      assertNotSame(charClass9, charClass2);
      assertNotSame(charClass9, charClass3);
      assertNotSame(charClass9, charClass4);
      assertNotSame(charClass9, charClass7);
      assertSame(charClass9, charClass0);
      assertNotSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass6);
      assertNotSame(charClass9, charClass5);
      assertArrayEquals(new int[] {0, 25, (-2148), (-879), (-65), 1114111, 2459, (-66)}, intArray0);
      
      CharClass charClass10 = charClass9.appendFoldedRange((-65), (-66));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass7));
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass7));
      assertFalse(charClass9.equals((Object)charClass8));
      assertFalse(charClass9.equals((Object)charClass6));
      assertFalse(charClass9.equals((Object)charClass5));
      assertFalse(charClass10.equals((Object)charClass2));
      assertFalse(charClass10.equals((Object)charClass5));
      assertFalse(charClass10.equals((Object)charClass8));
      assertFalse(charClass10.equals((Object)charClass4));
      assertFalse(charClass10.equals((Object)charClass6));
      assertFalse(charClass10.equals((Object)charClass7));
      assertFalse(charClass10.equals((Object)charClass3));
      assertEquals(8, intArray0.length);
      assertNotNull(charClass10);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass10);
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass8);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass1);
      assertNotSame(charClass9, charClass2);
      assertNotSame(charClass9, charClass3);
      assertNotSame(charClass9, charClass4);
      assertNotSame(charClass9, charClass7);
      assertSame(charClass9, charClass0);
      assertNotSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass6);
      assertNotSame(charClass9, charClass5);
      assertNotSame(charClass10, charClass2);
      assertNotSame(charClass10, charClass5);
      assertNotSame(charClass10, charClass8);
      assertNotSame(charClass10, charClass4);
      assertSame(charClass10, charClass9);
      assertNotSame(charClass10, charClass6);
      assertNotSame(charClass10, charClass7);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass1);
      assertNotSame(charClass10, charClass3);
      assertArrayEquals(new int[] {0, 25, (-2148), (-879), (-65), 1114111, 2459, (-66)}, intArray0);
      
      int[] intArray2 = charClass10.toArray();
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass8));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass7));
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass9.equals((Object)charClass2));
      assertFalse(charClass9.equals((Object)charClass3));
      assertFalse(charClass9.equals((Object)charClass4));
      assertFalse(charClass9.equals((Object)charClass7));
      assertFalse(charClass9.equals((Object)charClass8));
      assertFalse(charClass9.equals((Object)charClass6));
      assertFalse(charClass9.equals((Object)charClass5));
      assertFalse(charClass10.equals((Object)charClass2));
      assertFalse(charClass10.equals((Object)charClass5));
      assertFalse(charClass10.equals((Object)charClass8));
      assertFalse(charClass10.equals((Object)charClass4));
      assertFalse(charClass10.equals((Object)charClass6));
      assertFalse(charClass10.equals((Object)charClass7));
      assertFalse(charClass10.equals((Object)charClass3));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(18, intArray2.length);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass10);
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass0, charClass8);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass1);
      assertNotSame(charClass9, charClass2);
      assertNotSame(charClass9, charClass3);
      assertNotSame(charClass9, charClass4);
      assertNotSame(charClass9, charClass7);
      assertSame(charClass9, charClass0);
      assertNotSame(charClass9, charClass8);
      assertNotSame(charClass9, charClass6);
      assertNotSame(charClass9, charClass5);
      assertNotSame(charClass10, charClass2);
      assertNotSame(charClass10, charClass5);
      assertNotSame(charClass10, charClass8);
      assertNotSame(charClass10, charClass4);
      assertSame(charClass10, charClass9);
      assertNotSame(charClass10, charClass6);
      assertNotSame(charClass10, charClass7);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass1);
      assertNotSame(charClass10, charClass3);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 25, (-2148), (-879), (-65), 1114111, 2459, (-66)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      CharClass charClass1 = charClass0.appendFoldedRange(201, 201);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int0 = (-1434);
      intArray0[0] = (-1434);
      intArray0[1] = (-605);
      intArray0[2] = 64;
      intArray0[3] = 0;
      int[][] intArray1 = new int[4][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass2 = charClass0.appendTable(intArray1);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = null;
      try {
        charClass3 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[9][8];
      int[] intArray1 = new int[4];
      int int0 = (-912);
      intArray1[0] = (-912);
      intArray1[1] = 0;
      intArray1[2] = (-20);
      intArray1[3] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-912);
      intArray3[1] = 0;
      intArray3[2] = (-20);
      intArray3[3] = (-20);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      int int1 = (-1);
      intArray4[0] = (-1);
      intArray4[1] = 0;
      intArray4[2] = 0;
      intArray4[3] = (-912);
      intArray4[4] = 0;
      intArray4[5] = 0;
      intArray4[6] = 0;
      intArray4[7] = 0;
      intArray4[8] = (-20);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = (-20);
      intArray5[1] = (-20);
      intArray5[2] = 0;
      intArray5[3] = (-20);
      intArray5[4] = (-912);
      intArray5[5] = 0;
      intArray5[6] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      
      intArray6[0] = 0;
      intArray6[1] = (-20);
      intArray6[2] = 0;
      intArray6[3] = (-20);
      intArray6[4] = 0;
      intArray6[5] = (-912);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[7];
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray2));
      
      intArray7[0] = (-20);
      intArray7[1] = (-912);
      intArray7[2] = 0;
      intArray7[3] = 0;
      intArray7[4] = (-20);
      intArray7[5] = (-1);
      intArray7[6] = (-1);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[2];
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray7));
      
      intArray8[0] = (-20);
      intArray8[1] = 0;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[3];
      assertFalse(intArray9.equals((Object)intArray8));
      assertFalse(intArray9.equals((Object)intArray6));
      assertFalse(intArray9.equals((Object)intArray2));
      assertFalse(intArray9.equals((Object)intArray3));
      assertFalse(intArray9.equals((Object)intArray5));
      assertFalse(intArray9.equals((Object)intArray1));
      assertFalse(intArray9.equals((Object)intArray4));
      assertFalse(intArray9.equals((Object)intArray7));
      
      intArray9[0] = (-1);
      intArray9[1] = (-912);
      intArray9[2] = 0;
      intArray0[8] = intArray9;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][6];
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[0x0-0x10ffff]", string0);
      assertSame(charClass0, charClass1);
      
      CharClass charClass2 = new CharClass();
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.cleanClass();
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      
      // Undeclared exception!
      charClass3.appendTableWithSign(intArray0, (-1));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[2] = (-1);
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0, (-1), 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 120771;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int int0 = 32;
      intArray0[5] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 32}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 32, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 32, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 32, 120771, 0, 120771, 0}, intArray0);
      
      int int1 = 363;
      int[][] intArray1 = new int[7][8];
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 120771);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 890;
      CharClass charClass0 = new CharClass(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray1.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 890}, intArray1);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray1.length);
      assertNotNull(charClass1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 890}, intArray1);
      
      CharClass charClass2 = charClass0.appendClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotNull(charClass2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 890}, intArray1);
      
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign((int[][]) null, 890);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral((-627), (-627));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass0.negateClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass0.cleanClass();
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      
      int[] intArray0 = new int[0];
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 120771;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 65}, intArray0);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 65}, intArray0);
      
      int[][] intArray1 = new int[1][3];
      intArray1[0] = intArray0;
      CharClass charClass2 = charClass0.appendTableWithSign(intArray1, 0);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 65}, intArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-1200), 0);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[4][8];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-1200);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-1200);
      intArray3[1] = (-1200);
      intArray3[2] = (-1200);
      intArray3[3] = 0;
      intArray3[4] = (-1200);
      intArray3[5] = (-1200);
      intArray3[6] = (-1200);
      intArray3[7] = 0;
      intArray3[8] = 2036;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 0;
      intArray4[1] = (-1200);
      intArray4[2] = 0;
      intArray4[3] = (-1200);
      intArray4[4] = (-1200);
      intArray4[5] = 0;
      intArray4[6] = 0;
      intArray4[7] = 2036;
      intArray4[8] = 0;
      intArray0[3] = intArray4;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass1.appendClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass1.appendLiteral(898, 33);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass1.appendClassWithSign(intArray0, 898);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = charClass2.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass5);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      
      CharClass charClass6 = charClass2.appendNegatedClass(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass6);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      
      CharClass charClass7 = charClass6.negateClass();
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass7);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      
      CharClass charClass8 = charClass5.appendFoldedClass(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass8);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass8);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass8);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray1 = new int[5];
      intArray1[0] = (-1786);
      intArray1[1] = 1114111;
      intArray1[2] = 2868;
      intArray1[3] = 1114112;
      intArray1[4] = 482;
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2459;
      int int0 = (-66);
      intArray0[1] = (-66);
      intArray0[2] = 0;
      intArray0[3] = 25;
      int int1 = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2148);
      int int2 = 1250;
      intArray0[6] = 1250;
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2459, (-66), 0, 25, 0, (-2148), 1250, 0}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 25, 1250, 0, 2459, (-66), 2459, (-66)}, intArray0);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-2214);
      intArray0[2] = (-1622);
      intArray0[3] = 3128;
      intArray0[4] = (-117);
      CharClass charClass1 = new CharClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertEquals(9, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, (-2214), (-1622), 3128, (-117), 0, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendLiteral((-1670), (-2111));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertEquals(9, intArray0.length);
      assertNotNull(charClass2);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, (-2214), (-1622), 3128, (-117), 0, 0, 0, 0}, intArray0);
      
      CharClass charClass3 = charClass2.appendRange(1449, 741);
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertEquals(9, intArray0.length);
      assertNotNull(charClass3);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, (-2214), (-1622), 3128, (-117), 0, 0, 0, 0}, intArray0);
      
      CharClass charClass4 = charClass2.appendRange((-2214), (-3393));
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass4.equals((Object)charClass0));
      assertEquals(9, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass3);
      assertNotSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {0, (-2214), (-1622), 3128, (-117), 0, 0, 0, 0}, intArray0);
      
      CharClass charClass5 = charClass2.negateClass();
      assertFalse(charClass1.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass0));
      assertEquals(9, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass1, charClass4);
      assertNotSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {0, (-2214), (-1622), 3128, (-117), 0, 0, 0, 0}, intArray0);
      
      CharClass charClass6 = charClass0.appendFoldedRange(3086, (-5513));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass5));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass3));
      assertNotNull(charClass6);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass4);
      assertNotSame(charClass6, charClass4);
      assertNotSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      
      int[][] intArray1 = new int[2][6];
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 8609;
      intArray2[1] = 0;
      intArray2[2] = 596;
      intArray2[3] = (-2214);
      intArray2[4] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      CharClass charClass7 = charClass0.appendTableWithSign(intArray1, (-5513));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass0.equals((Object)charClass1));
      assertFalse(charClass0.equals((Object)charClass4));
      assertFalse(charClass7.equals((Object)charClass5));
      assertFalse(charClass7.equals((Object)charClass3));
      assertFalse(charClass7.equals((Object)charClass2));
      assertFalse(charClass7.equals((Object)charClass4));
      assertFalse(charClass7.equals((Object)charClass1));
      assertEquals(2, intArray1.length);
      assertNotNull(charClass7);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass5);
      assertNotSame(charClass0, charClass1);
      assertNotSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertNotSame(charClass7, charClass5);
      assertNotSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertNotSame(charClass7, charClass2);
      assertNotSame(charClass7, charClass4);
      assertNotSame(charClass7, charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 120771;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 65}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      int[][] intArray1 = new int[8][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass3 = charClass1.appendLiteral(0, 120771);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      CharClass charClass4 = charClass2.appendNegatedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      CharClass charClass5 = charClass0.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][8];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray1 = charClass0.toArray();
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertSame(charClass0, charClass1);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      
      CharClass charClass2 = charClass0.appendRange((-120771), 3070);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      
      CharClass charClass3 = charClass1.appendNegatedTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[0][8];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass1.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(1930, 1930);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[][] intArray0 = new int[8][4];
      int[] intArray1 = new int[6];
      intArray1[0] = 1930;
      intArray1[1] = 1930;
      intArray1[2] = 1930;
      intArray1[3] = 1930;
      intArray1[4] = 1930;
      intArray1[5] = 1930;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1930;
      intArray2[1] = 1930;
      intArray2[2] = 1930;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 1930;
      intArray3[1] = 1930;
      intArray3[2] = 1930;
      intArray3[3] = 1930;
      intArray3[4] = 1930;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 1930;
      intArray4[1] = 1930;
      intArray4[2] = 1930;
      intArray4[3] = 1930;
      intArray4[4] = 1930;
      intArray4[5] = 1930;
      intArray4[6] = 1930;
      intArray4[7] = 1930;
      intArray4[8] = 1930;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 1930;
      intArray5[1] = 1930;
      intArray5[2] = 1930;
      intArray5[3] = 1930;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      
      intArray6[0] = 1930;
      intArray6[1] = 1930;
      intArray6[2] = 1930;
      intArray6[3] = 1930;
      intArray6[4] = 1930;
      intArray6[5] = 1930;
      intArray6[6] = 1930;
      intArray6[7] = 1930;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[0];
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray3));
      
      intArray0[6] = intArray7;
      int[] intArray8 = new int[5];
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray4));
      
      intArray8[0] = 1930;
      intArray8[1] = 1930;
      intArray8[2] = 1930;
      intArray8[3] = 1930;
      intArray8[4] = 1930;
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray0, 163);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange((-2183), 66639);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      int[][] intArray0 = new int[1][6];
      int[] intArray1 = new int[9];
      intArray1[0] = 66639;
      intArray1[1] = 66639;
      intArray1[2] = 1617;
      intArray1[3] = 66639;
      intArray1[4] = 66639;
      intArray1[5] = 4505;
      intArray1[6] = (-2183);
      intArray1[7] = 0;
      intArray1[8] = (-2183);
      intArray0[0] = intArray1;
      CharClass charClass3 = charClass2.appendTable(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      
      // Undeclared exception!
      try { 
        charClass3.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[0][7];
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, 11516);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass1.appendClassWithSign(intArray0, 11516);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass0.cleanClass();
      assertEquals(0, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass6 = charClass0.negateClass();
      assertEquals(0, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass7 = charClass3.appendFoldedRange(154, 2799);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray2 = charClass6.toArray();
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(454, intArray2.length);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int int0 = 899;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass1.appendClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass1.appendLiteral(898, 33);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass2.appendRange(898, (-192883));
      assertEquals(0, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = charClass2.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111, 898, (-192883)}, intArray1);
      
      CharClass charClass6 = charClass2.appendNegatedClass(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass6);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111, (-192882), 1114111}, intArray1);
      
      CharClass charClass7 = charClass6.negateClass();
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass7);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass6);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111, (-192882), 1114111}, intArray1);
      
      CharClass charClass8 = charClass3.appendFoldedClass(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotNull(charClass8);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass8);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-192882), 1114111, (-192882), 1114111}, intArray1);
      
      // Undeclared exception!
      charClass7.appendFoldedRange(449, 1264);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 120771;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 32}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 32, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass2 = charClass0.appendRange(0, 66639);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 66639, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass3 = charClass1.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 66639, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass4 = charClass3.negateClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, 66639, 120771, 0, 120771, 0}, intArray0);
      
      int[][] intArray1 = new int[7][8];
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendTableWithSign(intArray1, 120771);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = (-1977);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 2, 0, (-1977), 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 41;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 120771;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 32}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 32, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {0, 32, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 32, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass4 = charClass3.appendRange(32, 0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {0, 32, 120771, 0, 120771, 0}, intArray0);
      
      int[][] intArray1 = new int[7][8];
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 120771);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2821;
      intArray0[1] = 91;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2821, 91}, intArray0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(991, 991);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {2821, 91}, intArray0);
      
      CharClass charClass2 = charClass1.appendRange(2821, 91);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {2821, 91}, intArray0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 91;
      intArray1[1] = 2002;
      CharClass charClass3 = charClass2.appendClass(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(charClass3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {2821, 91}, intArray0);
      assertArrayEquals(new int[] {91, 2002}, intArray1);
      
      CharClass charClass4 = charClass1.cleanClass();
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass4);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {2821, 91}, intArray0);
      
      CharClass charClass5 = new CharClass();
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass4));
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.negateClass();
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass2));
      assertFalse(charClass6.equals((Object)charClass1));
      assertNotNull(charClass6);
      assertSame(charClass5, charClass6);
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass3);
      assertNotSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass4);
      assertNotSame(charClass5, charClass0);
      assertNotSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass4);
      assertNotSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass2);
      assertNotSame(charClass6, charClass1);
      
      CharClass charClass7 = charClass1.negateClass();
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(charClass0.equals((Object)charClass6));
      assertFalse(charClass0.equals((Object)charClass5));
      assertFalse(charClass1.equals((Object)charClass5));
      assertFalse(charClass1.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass6));
      assertFalse(charClass7.equals((Object)charClass5));
      assertEquals(2, intArray0.length);
      assertNotNull(charClass7);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertNotSame(charClass0, charClass6);
      assertNotSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertNotSame(charClass1, charClass5);
      assertNotSame(charClass1, charClass6);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass7);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertNotSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertNotSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertArrayEquals(new int[] {2821, 91}, intArray0);
      
      // Undeclared exception!
      charClass2.appendFoldedClass(intArray1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[6];
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertEquals(6, intArray0.length);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 612);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 616);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[24];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = 120771;
      intArray0[2] = 120771;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(24, intArray0.length);
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(24, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(24, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      
      CharClass charClass3 = charClass2.negateClass();
      assertEquals(24, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      
      int[][] intArray1 = new int[7][8];
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 120771;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 120771);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-33), (-33));
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-33);
      intArray0[1] = (-33);
      intArray0[2] = (-33);
      intArray0[3] = (-33);
      intArray0[4] = (-33);
      intArray0[5] = (-33);
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, 120661);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {(-33), (-33), (-33), (-33), (-33), (-33)}, intArray0);
      
      CharClass charClass3 = charClass2.appendLiteral((-33), (-33));
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {(-33), (-33), (-33), (-33), (-33), (-33)}, intArray0);
      
      CharClass charClass4 = charClass3.appendClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {(-33), (-33), (-33), (-33), (-33), (-33)}, intArray0);
      
      int[][] intArray1 = new int[7][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      charClass4.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      CharClass charClass1 = charClass0.appendFoldedRange(201, 201);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray0[0] = (-1434);
      intArray0[1] = (-605);
      intArray0[2] = 64;
      intArray0[3] = 0;
      intArray0[4] = 65792;
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 41;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, 41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string0 = charClass0.toString();
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 1260);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass0.negateClass();
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass3.appendClassWithSign(intArray0, (-498));
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass0.cleanClass();
      assertEquals(0, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass6 = charClass0.negateClass();
      assertEquals(0, intArray0.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass7 = charClass6.appendFoldedRange((-498), (-1235));
      assertEquals(0, intArray0.length);
      assertNotNull(charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass7);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = charClass5.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass5);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-498), (-1235)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string0 = charClass0.toString();
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertEquals(0, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 1260);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass0.negateClass();
      assertEquals(0, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass2.cleanClass();
      assertEquals(0, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass3.appendClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[0][4];
      CharClass charClass6 = charClass4.appendTableWithSign(intArray1, 1260);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 9700;
      String string0 = charClass0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      intArray0[1] = 9700;
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {9700, 9700}, intArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[2] = 120771;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0, 120771, 0, 0, 65}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(6, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 120771, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      CharClass charClass3 = charClass1.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertArrayEquals(new int[] {0, 65, 120771, 0, 97, 97}, intArray0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 66639;
      intArray0[1] = 633;
      intArray0[2] = 359;
      intArray0[3] = (-372);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {66639, 633, 359, (-372)}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(633, 65115);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {66639, 633, 359, (-372)}, intArray0);
      
      int[][] intArray1 = new int[7][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {66639, 633, 359, (-372)}, intArray0);
      
      CharClass charClass3 = charClass2.appendRange((-3405), 700);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertArrayEquals(new int[] {66639, 633, 359, (-372)}, intArray0);
      
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, 920);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertArrayEquals(new int[] {66639, 633, 359, (-372)}, intArray0);
      
      CharClass charClass5 = charClass4.appendTableWithSign(intArray1, 0);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotNull(charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertArrayEquals(new int[] {66639, 633, 359, (-372)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[3];
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2459;
      intArray0[1] = (-66);
      intArray0[2] = 0;
      intArray0[3] = 25;
      intArray0[4] = 0;
      intArray0[5] = (-2148);
      intArray0[6] = 1250;
      intArray0[7] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2459, (-66), 0, 25, 0, (-2148), 1250, 0}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(8, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 25, 1250, 0, 2459, (-66), 2459, (-66)}, intArray0);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-66);
      intArray1[1] = 0;
      intArray1[2] = 1250;
      // Undeclared exception!
      try { 
        charClass1.appendClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = (-2478);
      intArray0[3] = (-1977);
      intArray0[4] = 8609;
      intArray0[5] = 0;
      int int0 = 0;
      intArray0[6] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 2, (-2478), (-1977), 8609, 0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(2, (-5513));
      assertEquals(7, intArray0.length);
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 2, (-2478), (-1977), 8609, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass1.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertNotNull(charClass1);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 1632);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 629;
      CharClass charClass1 = new CharClass(intArray0);
      assertFalse(charClass1.equals((Object)charClass0));
      assertEquals(1, intArray0.length);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {629}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2821;
      intArray0[1] = 91;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedRange(91, 2002);
      CharClass charClass2 = charClass0.appendRange(2002, 91);
      CharClass charClass3 = charClass2.appendClass(intArray0);
      CharClass charClass4 = charClass3.cleanClass();
      charClass4.appendClass(intArray0);
      charClass4.appendFoldedClass(intArray0);
      charClass1.appendLiteral(91, 2002);
      CharClass charClass5 = new CharClass();
      CharClass charClass6 = charClass5.negateClass();
      assertSame(charClass5, charClass6);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][8];
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[7];
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][8];
      CharClass charClass1 = charClass0.appendTable(intArray0);
      charClass0.appendNegatedTable(intArray0);
      CharClass charClass2 = charClass0.appendTable(intArray0);
      charClass0.appendLiteral(3774, 3774);
      charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendTableWithSign(intArray0, 0);
      assertSame(charClass3, charClass1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[3][0];
      int[] intArray2 = new int[2];
      intArray2[0] = 0;
      intArray2[1] = 66640;
      intArray1[0] = intArray2;
      int[] intArray3 = new int[0];
      intArray1[1] = intArray3;
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][6];
      CharClass charClass1 = charClass0.negateClass();
      charClass0.toString();
      CharClass charClass2 = charClass1.appendRange(6440, (-120771));
      // Undeclared exception!
      charClass2.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][8];
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendNegatedTable(intArray0);
      CharClass charClass4 = charClass0.appendRange((-1628), (-1628));
      CharClass charClass5 = charClass3.cleanClass();
      CharClass charClass6 = charClass5.appendLiteral(3774, 3774);
      int[] intArray1 = new int[4];
      intArray1[0] = 3774;
      intArray1[1] = 328;
      charClass1.appendClass(intArray1);
      intArray1[2] = 3774;
      intArray1[3] = 3774;
      CharClass charClass7 = charClass6.appendNegatedClass(intArray1);
      assertSame(charClass7, charClass4);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 35;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 595;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1593;
      intArray0[6] = 1674;
      CharClass.charClassToString(intArray0, (-1417));
      CharClass charClass0 = new CharClass();
      int[][] intArray1 = new int[2][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = charClass0.appendTableWithSign(intArray1, 0);
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      CharClass charClass3 = charClass2.cleanClass();
      CharClass charClass4 = charClass3.appendRange(0, 0);
      CharClass charClass5 = charClass4.appendRange(0, 0);
      assertSame(charClass5, charClass3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toString();
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      intArray0[1] = 32;
      charClass0.appendFoldedClass(intArray0);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1195);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int int1 = (-110);
      CharClass charClass1 = charClass0.appendFoldedRange(0, (-110));
      CharClass charClass2 = charClass1.cleanClass();
      // Undeclared exception!
      try { 
        charClass2.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][8];
      charClass0.appendTable(intArray0);
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      CharClass charClass2 = charClass0.appendTable(intArray0);
      charClass1.cleanClass();
      CharClass charClass3 = charClass1.appendLiteral(120737, 120737);
      CharClass charClass4 = charClass2.appendRange(40960, 1);
      charClass3.cleanClass();
      CharClass charClass5 = charClass4.appendLiteral(3774, 3774);
      int[] intArray1 = new int[0];
      CharClass charClass6 = charClass5.appendClassWithSign(intArray1, 120737);
      CharClass charClass7 = new CharClass();
      charClass6.appendNegatedTable(intArray0);
      int[] intArray2 = charClass7.toArray();
      assertFalse(intArray2.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[1] = 120771;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 32;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      charClass0.appendRange(0, 66639);
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      charClass2.negateClass();
      int[][] intArray1 = new int[7][8];
      int[] intArray2 = new int[1];
      intArray2[0] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray3 = new int[0];
      intArray1[4] = intArray3;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      int[] intArray1 = new int[1];
      intArray1[0] = 2894;
      CharClass charClass0 = new CharClass(intArray1);
      // Undeclared exception!
      try { 
        charClass0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = null;
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[][] intArray0 = new int[1][1];
      int[] intArray1 = new int[3];
      intArray1[0] = 32;
      intArray1[2] = 32;
      intArray0[0] = intArray1;
      charClass0.appendNegatedTable(intArray0);
      // Undeclared exception!
      try { 
        charClass1.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
