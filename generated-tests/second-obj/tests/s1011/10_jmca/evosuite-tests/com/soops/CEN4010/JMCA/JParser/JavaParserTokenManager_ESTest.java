/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:58:25 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 34, (-160), '/');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("/", token0.toString());
      assertEquals(104, token0.kind);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 34, (-160), '/');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(104, token0.kind);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 40, 40, 31);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(40, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1, 37, 22);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token0.kind);
      assertEquals("c", token0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'E';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1946, 31, 1946);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', '\u0000', '<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 19, 3410, 3410);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', '\u0000', '<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', '\u0000', '<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3410, token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals(19, token0.beginLine);
      assertEquals(3410, token0.beginColumn);
      assertEquals(19, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', '\u0000', '<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3410, javaCharStream0.getBeginColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals(3410, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(3410, javaCharStream0.getEndColumn());
      assertEquals("<", token0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 2102, 2102, 3012);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(2102, token0.endLine);
      assertEquals(2102, token0.beginColumn);
      assertEquals(2102, token0.endColumn);
      assertEquals(2102, token0.beginLine);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(2102, javaCharStream0.getLine());
      assertEquals(2102, javaCharStream0.getEndColumn());
      assertEquals(2102, javaCharStream0.getBeginColumn());
      assertEquals(2102, javaCharStream0.getColumn());
      assertEquals(2102, javaCharStream0.getBeginLine());
      assertEquals(2102, javaCharStream0.getEndLine());
      assertEquals("2", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'2', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(2102, javaCharStream0.getLine());
      assertEquals(2102, javaCharStream0.getEndColumn());
      assertEquals(2102, javaCharStream0.getBeginColumn());
      assertEquals(2102, javaCharStream0.getColumn());
      assertEquals(2102, javaCharStream0.getBeginLine());
      assertEquals(2102, javaCharStream0.getEndLine());
      assertNotSame(charArrayReader1, charArrayReader0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(2102);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2102. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      charArray0[4] = 'U';
      charArray0[5] = 'X';
      charArray0[7] = 'R';
      charArray0[8] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'7', '7', 'W', 'W', 'U', 'X', '\u0000', 'R', '*'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 'R', 'R', 'R');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'7', '7', 'W', 'W', 'U', 'X', '\u0000', 'R', '*'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'7', '7', 'W', 'W', 'U', 'X', '\u0000', 'R', '*'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(82, token0.endLine);
      assertEquals(83, token0.endColumn);
      assertEquals(82, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(82, token0.beginLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'7', '7', 'W', 'W', 'U', 'X', '\u0000', 'R', '*'}, charArray0);
      assertEquals(82, javaCharStream0.getLine());
      assertEquals(82, javaCharStream0.getEndLine());
      assertEquals(83, javaCharStream0.getEndColumn());
      assertEquals(83, javaCharStream0.getColumn());
      assertEquals(82, javaCharStream0.getBeginColumn());
      assertEquals(82, javaCharStream0.getBeginLine());
      assertEquals("77", token0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'W'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2206, 1781, 4175);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'W'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'W'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2206, token0.beginLine);
      assertEquals(1781, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1781, token0.endColumn);
      assertEquals(2206, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'W'}, charArray0);
      assertEquals(1781, javaCharStream0.getBeginColumn());
      assertEquals(1781, javaCharStream0.getColumn());
      assertEquals(2206, javaCharStream0.getLine());
      assertEquals(2206, javaCharStream0.getBeginLine());
      assertEquals(2206, javaCharStream0.getEndLine());
      assertEquals(1781, javaCharStream0.getEndColumn());
      assertEquals("W", token0.toString());
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("W", "W");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // W
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'c', 'A', '\u0000'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-4262), 33);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'c', 'A', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'c', 'A', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-4262), token0.beginLine);
      assertEquals(34, token0.endColumn);
      assertEquals((-4262), token0.endLine);
      assertEquals(33, token0.beginColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'c', 'A', '\u0000'}, charArray0);
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getColumn());
      assertEquals((-4262), javaCharStream0.getBeginLine());
      assertEquals((-4262), javaCharStream0.getLine());
      assertEquals((-4262), javaCharStream0.getEndLine());
      assertEquals("cA", token0.toString());
      
      CharArrayReader charArrayReader1 = null;
      try {
        charArrayReader1 = new CharArrayReader(charArray0, 31, (-4262));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[10];
      charArray0[0] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1485), 52, 1271);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 48, (-995));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", (Object[]) javaParserTokenManager0.jjstrLiteralImages);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(printStream0);
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertNotNull(mockPrintStream1);
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-995), token0.endColumn);
      assertEquals(48, token0.endLine);
      assertEquals(48, token0.beginLine);
      assertEquals((-995), token0.beginColumn);
      assertEquals(92, token0.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(48, javaCharStream1.getEndLine());
      assertEquals((-995), javaCharStream1.getBeginColumn());
      assertEquals((-995), javaCharStream1.getColumn());
      assertEquals((-995), javaCharStream1.getEndColumn());
      assertEquals(48, javaCharStream1.getBeginLine());
      assertEquals(48, javaCharStream1.getLine());
      assertEquals(":", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1, 'U', 1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(85, token0.endColumn);
      assertEquals(85, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("U", token0.toString());
      
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '~';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = 579;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 579, '~', 579);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(126, token0.beginColumn);
      assertEquals(579, token0.endLine);
      assertEquals(126, token0.endColumn);
      assertEquals(579, token0.beginLine);
      assertEquals(90, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'~', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(579, javaCharStream0.getLine());
      assertEquals(579, javaCharStream0.getBeginLine());
      assertEquals(126, javaCharStream0.getColumn());
      assertEquals(126, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getEndColumn());
      assertEquals(579, javaCharStream0.getEndLine());
      assertEquals("~", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 579, column 127.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[2] = '*';
      charArray0[4] = 'n';
      charArray0[5] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'*', 'R', '*', '\u0000', 'n', 'R'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, Integer.MAX_VALUE, 105, 105);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'*', 'R', '*', '\u0000', 'n', 'R'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'*', 'R', '*', '\u0000', 'n', 'R'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'*', 'R', '*', '\u0000', 'n', 'R'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(103, token0.kind);
      assertEquals(105, token0.endColumn);
      assertEquals(Integer.MAX_VALUE, token0.endLine);
      assertEquals(Integer.MAX_VALUE, token0.beginLine);
      assertEquals(105, token0.beginColumn);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'*', 'R', '*', '\u0000', 'n', 'R'}, charArray0);
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals("*", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'*', 'R', '*', '\u0000', 'n', 'R'}, charArray0);
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertNotSame(charArrayReader0, charArrayReader1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(106, token1.beginColumn);
      assertEquals(106, token1.endColumn);
      assertEquals(Integer.MAX_VALUE, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(Integer.MAX_VALUE, token1.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'*', 'R', '*', '\u0000', 'n', 'R'}, charArray0);
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals("R", token1.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', 'W'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'/', 'W'}, charArray0);
      assertEquals(47, int0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'/', 'W'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'/', 'W'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'/', 'W'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.endLine);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'/', 'W'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("/", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(104, token1.kind);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'/', 'W'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("/", token1.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0, 1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'/', 'W'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotSame(charArrayReader1, charArrayReader0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = '/';
      charArray0[2] = 'X';
      charArray0[3] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'n', '/', 'X', 'U'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 18);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'n', '/', 'X', 'U'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 18, (-1342), 3);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'n', '/', 'X', 'U'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'n', '/', 'X', 'U'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(18, token0.beginLine);
      assertEquals((-1342), token0.beginColumn);
      assertEquals(18, token0.endLine);
      assertEquals((-1342), token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'n', '/', 'X', 'U'}, charArray0);
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals((-1342), javaCharStream0.getEndColumn());
      assertEquals((-1342), javaCharStream0.getColumn());
      assertEquals((-1342), javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals("n", token0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1, (-54), 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column -53.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', '/', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1005, 2540, 28);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'/', '/', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'/', '/', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1005, column 2545.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = 'n';
      charArray0[2] = '/';
      charArray0[3] = '\'';
      charArray0[4] = 'U';
      charArray0[5] = 'X';
      charArray0[1] = '5';
      charArray0[7] = 'R';
      charArray0[8] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', '5', '/', '\'', 'U', 'X', '\u0000', 'R', '*'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " sjN%&Nd[7rX!");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 3502, 1984, 1984);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'/', '5', '/', '\'', 'U', 'X', '\u0000', 'R', '*'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'/', '5', '/', '\'', 'U', 'X', '\u0000', 'R', '*'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(104, token0.kind);
      assertEquals(1984, token0.endColumn);
      assertEquals(3502, token0.endLine);
      assertEquals(3502, token0.beginLine);
      assertEquals(1984, token0.beginColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'/', '5', '/', '\'', 'U', 'X', '\u0000', 'R', '*'}, charArray0);
      assertEquals(3502, javaCharStream0.getBeginLine());
      assertEquals(3502, javaCharStream0.getLine());
      assertEquals(1984, javaCharStream0.getBeginColumn());
      assertEquals(1984, javaCharStream0.getColumn());
      assertEquals(1984, javaCharStream0.getEndColumn());
      assertEquals(3502, javaCharStream0.getEndLine());
      assertEquals("/", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(40);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 40. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'H', 'H', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'H', 'H', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(72, int0);
      
      boolean boolean1 = charArrayReader0.ready();
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'H', 'H', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean1);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'H', 'H', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 461, 40, 1597);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'H', 'H', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'H', 'H', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(461, token0.endLine);
      assertEquals(461, token0.beginLine);
      assertEquals(42, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(40, token0.beginColumn);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'H', 'H', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(461, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(461, javaCharStream0.getBeginLine());
      assertEquals(461, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals("HHc", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'H', 'H', 'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(461, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(461, javaCharStream0.getBeginLine());
      assertEquals(461, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertNotSame(charArrayReader1, charArrayReader0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = "void";
      StringReader stringReader0 = new StringReader("void");
      assertNotNull(stringReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 69, 69, 47);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(69, token0.beginColumn);
      assertEquals(69, token0.beginLine);
      assertEquals(72, token0.endColumn);
      assertEquals(69, token0.endLine);
      assertEquals(63, token0.kind);
      assertNotNull(token0);
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(72, javaCharStream0.getColumn());
      assertEquals(72, javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals("void", token0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertNotNull(mockPrintStream0);
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(72, javaCharStream0.getColumn());
      assertEquals(72, javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals(69, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "void", 63, 69);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":=!");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = 'U';
      charArray0[3] = '/';
      charArray0[2] = 'O';
      charArray0[5] = '/';
      charArray0[6] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'|', 'U', 'O', '/', '\u0000', '/', '/'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1928, 999, 999);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'|', 'U', 'O', '/', '\u0000', '/', '/'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'|', 'U', 'O', '/', '\u0000', '/', '/'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.adjustBeginLineColumn(80, 1928);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'|', 'U', 'O', '/', '\u0000', '/', '/'}, charArray0);
      assertEquals(1928, javaCharStream0.getBeginColumn());
      assertEquals(81, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(106, token0.kind);
      assertEquals(81, token0.endLine);
      assertEquals(1929, token0.beginColumn);
      assertEquals(1929, token0.endColumn);
      assertEquals(81, token0.beginLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'|', 'U', 'O', '/', '\u0000', '/', '/'}, charArray0);
      assertEquals(81, javaCharStream0.getEndLine());
      assertEquals(1929, javaCharStream0.getEndColumn());
      assertEquals(1929, javaCharStream0.getColumn());
      assertEquals(1929, javaCharStream0.getBeginColumn());
      assertEquals(81, javaCharStream0.getLine());
      assertEquals(81, javaCharStream0.getBeginLine());
      assertEquals("|", token0.toString());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'|', 'U', 'O', '/', '\u0000', '/', '/'}, charArray0);
      assertEquals(81, javaCharStream0.getEndLine());
      assertEquals(1929, javaCharStream0.getEndColumn());
      assertEquals(1929, javaCharStream0.getColumn());
      assertEquals(1929, javaCharStream0.getBeginColumn());
      assertEquals(81, javaCharStream0.getLine());
      assertEquals(81, javaCharStream0.getBeginLine());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, true);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'|', 'U', 'O', '/', '\u0000', '/', '/'}, charArray0);
      assertEquals(81, javaCharStream0.getEndLine());
      assertEquals(1929, javaCharStream0.getEndColumn());
      assertEquals(1929, javaCharStream0.getColumn());
      assertEquals(1929, javaCharStream0.getBeginColumn());
      assertEquals(81, javaCharStream0.getLine());
      assertEquals(81, javaCharStream0.getBeginLine());
      
      PrintStream printStream0 = mockPrintStream0.printf("s_aGc^L", (Object[]) javaParserTokenManager0.jjstrLiteralImages);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(printStream0);
      assertArrayEquals(new char[] {'|', 'U', 'O', '/', '\u0000', '/', '/'}, charArray0);
      assertEquals(81, javaCharStream0.getEndLine());
      assertEquals(1929, javaCharStream0.getEndColumn());
      assertEquals(1929, javaCharStream0.getColumn());
      assertEquals(1929, javaCharStream0.getBeginColumn());
      assertEquals(81, javaCharStream0.getLine());
      assertEquals(81, javaCharStream0.getBeginLine());
      assertSame(printStream0, mockPrintStream0);
      assertSame(mockPrintStream0, printStream0);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'|', 'U', 'O', '/', '\u0000', '/', '/'}, charArray0);
      assertEquals(81, javaCharStream0.getEndLine());
      assertEquals(1929, javaCharStream0.getEndColumn());
      assertEquals(1929, javaCharStream0.getColumn());
      assertEquals(1929, javaCharStream0.getBeginColumn());
      assertEquals(81, javaCharStream0.getLine());
      assertEquals(81, javaCharStream0.getBeginLine());
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&pV.}@?qHm;V");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'|', ':'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 4, 4, 999);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'|', ':'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'|', ':'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(4, token0.endColumn);
      assertEquals(106, token0.kind);
      assertEquals(4, token0.endLine);
      assertEquals(4, token0.beginLine);
      assertEquals(4, token0.beginColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'|', ':'}, charArray0);
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals("|", token0.toString());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'|', ':'}, charArray0);
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '_';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 71, 50, 82);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'/', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'/', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"goto\"");
      assertNotNull(mockPrintStream0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(50, token0.beginColumn);
      assertEquals(71, token0.endLine);
      assertEquals(104, token0.kind);
      assertEquals(71, token0.beginLine);
      assertEquals(50, token0.endColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'/', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals("/", token0.toString());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'/', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertArrayEquals(new char[] {'/', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertNull(token_GTToken0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = '/';
      charArray0[1] = '<';
      char[] charArray1 = new char[10];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ')';
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      charArray1[1] = '<';
      charArray1[2] = ')';
      charArray1[3] = '/';
      charArray1[3] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {')', '<', ')', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 69, 69, 110);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {')', '<', ')', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {')', '<', ')', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(69, token0.beginColumn);
      assertEquals(69, token0.beginLine);
      assertEquals(69, token0.endLine);
      assertEquals(69, token0.endColumn);
      assertEquals(78, token0.kind);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {')', '<', ')', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals(69, javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getColumn());
      assertEquals(")", token0.toString());
      assertNotSame(charArray1, charArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {')', '<', ')', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals(69, javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(69, token1.beginLine);
      assertEquals(88, token1.kind);
      assertEquals(70, token1.endColumn);
      assertEquals(70, token1.beginColumn);
      assertEquals(69, token1.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {')', '<', ')', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals("<", token1.toString());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals(70, javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals(70, javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getColumn());
      assertNotSame(token1, token0);
      assertNotSame(charArray1, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 69);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 69. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '_';
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 69, 69, 69);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'/', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'/', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(69, token0.beginLine);
      assertEquals(69, token0.endLine);
      assertEquals(69, token0.endColumn);
      assertEquals(69, token0.beginColumn);
      assertEquals(104, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'/', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getColumn());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals("/", token0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'/', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getColumn());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals(69, javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(69, token1.beginLine);
      assertEquals(70, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(70, token1.endColumn);
      assertEquals(69, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'/', '_', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals(70, javaCharStream0.getEndColumn());
      assertEquals("_", token1.toString());
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 69, column 71.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[2] = '*';
      charArray0[4] = 'n';
      charArray0[5] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'*', 'R', '*', '\u0000', 'n', 'R'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'*', 'R', '*', '\u0000', 'n', 'R'}, charArray0);
      assertEquals(42, int0);
      
      int int1 = 32;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 32, 42);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'*', 'R', '*', '\u0000', 'n', 'R'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'*', 'R', '*', '\u0000', 'n', 'R'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.curLexState = 42;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
      assertEquals(42, token0.endColumn);
      assertEquals(32, token0.endLine);
      assertEquals(32, token0.beginLine);
      assertEquals(42, token0.beginColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'*', 'R', '*', '\u0000', 'n', 'R'}, charArray0);
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      
      int int2 = 49;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 42);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 42. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1, (-54), 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-54), token0.endColumn);
      assertEquals((-54), token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertEquals((-54), javaCharStream0.getBeginColumn());
      assertEquals((-54), javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals((-54), javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("Z", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals((-54), token1.endColumn);
      assertEquals((-54), token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'Z'}, charArray0);
      assertEquals((-54), javaCharStream0.getBeginColumn());
      assertEquals((-54), javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals((-54), javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)123;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)123, (byte)123, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = JavaCharStream.staticFlag;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[7] = '/';
      charArray0[4] = 'U';
      charArray0[5] = '/';
      charArray0[1] = '!';
      charArray0[7] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', '!', '\u0000', '\u0000', 'U', '/', '\u0000', 'R', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 71, 71, 71);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'/', '!', '\u0000', '\u0000', 'U', '/', '\u0000', 'R', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'/', '!', '\u0000', '\u0000', 'U', '/', '\u0000', 'R', '\u0000'}, charArray0);
      assertEquals(47, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'/', '!', '\u0000', '\u0000', 'U', '/', '\u0000', 'R', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.buffer = charArray0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("interface");
      assertNotNull(mockPrintStream0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(71, token0.beginLine);
      assertEquals(89, token0.kind);
      assertEquals(71, token0.endLine);
      assertEquals(71, token0.endColumn);
      assertEquals(71, token0.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'!', '\u0000', '\u0000', '\u0000', 'U', '/', '\u0000', 'R', '\u0000'}, charArray0);
      assertEquals("!", token0.toString());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getColumn());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals(71, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'!', '\u0000', '\u0000', '\u0000', 'U', '/', '\u0000', 'R', '\u0000'}, charArray0);
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getColumn());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals(71, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'!', '\u0000', '\u0000', '\u0000', 'U', '/', '\u0000', 'R', '\u0000'}, charArray0);
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getColumn());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals(71, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 52, 31, 21);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(52, token0.endLine);
      assertEquals(31, token0.endColumn);
      assertEquals(52, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(31, token0.beginColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals("X", token0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getColumn());
      
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "", (Object[]) javaParserTokenManager0.jjstrLiteralImages);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(printStream0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertSame(mockPrintStream0, printStream0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(52, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(31, token1.beginColumn);
      assertEquals(31, token1.endColumn);
      assertEquals(52, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = '8';
      charArray0[2] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'c', '8', ']'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 48, 64, 48);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'c', '8', ']'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 48, (-995));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'c', '8', ']'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'c', '8', ']'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-995), token0.beginColumn);
      assertEquals(48, token0.endLine);
      assertEquals((-994), token0.endColumn);
      assertEquals(48, token0.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'c', '8', ']'}, charArray0);
      assertEquals(48, javaCharStream1.getEndLine());
      assertEquals((-995), javaCharStream1.getBeginColumn());
      assertEquals((-994), javaCharStream1.getEndColumn());
      assertEquals(48, javaCharStream1.getBeginLine());
      assertEquals((-994), javaCharStream1.getColumn());
      assertEquals(48, javaCharStream1.getLine());
      assertEquals("c8", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'c', '8', ']'}, charArray0);
      assertEquals(48, javaCharStream1.getEndLine());
      assertEquals((-995), javaCharStream1.getBeginColumn());
      assertEquals((-994), javaCharStream1.getEndColumn());
      assertEquals(48, javaCharStream1.getBeginLine());
      assertEquals((-994), javaCharStream1.getColumn());
      assertEquals(48, javaCharStream1.getLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(124);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 124. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {']'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 78, 2579, 78);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {']'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {']'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5qwWLT=z");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2579, token0.beginColumn);
      assertEquals(82, token0.kind);
      assertEquals(78, token0.beginLine);
      assertEquals(78, token0.endLine);
      assertEquals(2579, token0.endColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {']'}, charArray0);
      assertEquals(78, javaCharStream0.getLine());
      assertEquals(78, javaCharStream0.getEndLine());
      assertEquals(2579, javaCharStream0.getEndColumn());
      assertEquals(2579, javaCharStream0.getColumn());
      assertEquals(78, javaCharStream0.getBeginLine());
      assertEquals(2579, javaCharStream0.getBeginColumn());
      assertEquals("]", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 19);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 19. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = 'A';
      charArray0[2] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'c', 'A', ']'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 48, 64, 48);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'c', 'A', ']'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 48, (-995));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'c', 'A', ']'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'c', 'A', ']'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(48, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-994), token0.endColumn);
      assertEquals((-995), token0.beginColumn);
      assertEquals(48, token0.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'c', 'A', ']'}, charArray0);
      assertEquals(48, javaCharStream1.getEndLine());
      assertEquals((-994), javaCharStream1.getColumn());
      assertEquals((-995), javaCharStream1.getBeginColumn());
      assertEquals((-994), javaCharStream1.getEndColumn());
      assertEquals(48, javaCharStream1.getLine());
      assertEquals(48, javaCharStream1.getBeginLine());
      assertEquals("cA", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("cA", "cA");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // cA
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = '=';
      charArray0[2] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'b', '=', 'b'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 48, 34, 48);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'b', '=', 'b'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 48, (-995));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'b', '=', 'b'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'b', '=', 'b'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'b', '=', 'b'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      
      PrintStream printStream0 = mockPrintStream0.format(locale0, "", (Object[]) javaParserTokenManager0.jjstrLiteralImages);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(printStream0);
      assertArrayEquals(new char[] {'b', '=', 'b'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertNotNull(mockPrintStream1);
      assertArrayEquals(new char[] {'b', '=', 'b'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(48, token0.endLine);
      assertEquals(48, token0.beginLine);
      assertEquals((-995), token0.endColumn);
      assertEquals((-995), token0.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'b', '=', 'b'}, charArray0);
      assertEquals(48, javaCharStream1.getLine());
      assertEquals(48, javaCharStream1.getEndLine());
      assertEquals((-995), javaCharStream1.getEndColumn());
      assertEquals(48, javaCharStream1.getBeginLine());
      assertEquals((-995), javaCharStream1.getBeginColumn());
      assertEquals((-995), javaCharStream1.getColumn());
      assertEquals("b", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      charArray0[6] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', ']', ']', '<', '<', '<', '<'}, charArray0);
      
      int int0 = 2473;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 6, 31, 2473);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', ']', ']', '<', '<', '<', '<'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', ']', ']', '<', '<', '<', '<'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(31, token0.endColumn);
      assertEquals(6, token0.endLine);
      assertEquals(31, token0.beginColumn);
      assertEquals(88, token0.kind);
      assertEquals(6, token0.beginLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', ']', ']', '<', '<', '<', '<'}, charArray0);
      assertEquals(6, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals("<", token0.toString());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(6, token1.endLine);
      assertEquals(6, token1.beginLine);
      assertEquals(88, token1.kind);
      assertEquals(31, token1.beginColumn);
      assertEquals(31, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'<', ']', ']', '<', '<', '<', '<'}, charArray0);
      assertEquals(6, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals("<", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = Token.newToken('<');
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endLine);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertNull(token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'<', ']', ']', '<', '<', '<', '<'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(6, token1.endLine);
      assertEquals(6, token1.beginLine);
      assertEquals(88, token1.kind);
      assertEquals(31, token1.beginColumn);
      assertEquals(31, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertArrayEquals(new char[] {'<', ']', ']', '<', '<', '<', '<'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("<", token1.toString());
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-3080));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3080. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', 'm', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'/', 'm', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, (byte)105, (-1114), 20);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'/', 'm', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'/', 'm', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1114), token0.beginColumn);
      assertEquals(105, token0.beginLine);
      assertEquals((-1114), token0.endColumn);
      assertEquals(104, token0.kind);
      assertEquals(105, token0.endLine);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'/', 'm', '\u0000'}, charArray0);
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals((-1114), javaCharStream0.getBeginColumn());
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getLine());
      assertEquals((-1114), javaCharStream0.getColumn());
      assertEquals((-1114), javaCharStream0.getEndColumn());
      assertEquals("/", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'/', 'm', '\u0000'}, charArray0);
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals((-1114), javaCharStream0.getBeginColumn());
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getLine());
      assertEquals((-1114), javaCharStream0.getColumn());
      assertEquals((-1114), javaCharStream0.getEndColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1113), token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(105, token1.beginLine);
      assertEquals((-1113), token1.endColumn);
      assertEquals(105, token1.endLine);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'/', 'm', '\u0000'}, charArray0);
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getLine());
      assertEquals((-1113), javaCharStream0.getColumn());
      assertEquals((-1113), javaCharStream0.getBeginColumn());
      assertEquals((-1113), javaCharStream0.getEndColumn());
      assertEquals("m", token1.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1114), token0.beginColumn);
      assertEquals(105, token0.beginLine);
      assertEquals((-1114), token0.endColumn);
      assertEquals(104, token0.kind);
      assertEquals(105, token0.endLine);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token0.equals((Object)token1));
      assertArrayEquals(new char[] {'/', 'm', '\u0000'}, charArray0);
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getLine());
      assertEquals((-1113), javaCharStream0.getColumn());
      assertEquals((-1113), javaCharStream0.getBeginColumn());
      assertEquals((-1113), javaCharStream0.getEndColumn());
      assertEquals("/", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token0, token1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[1] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'5', '/', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'5', '/', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 114, 2102, 3012);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'5', '/', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'5', '/', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2102, token0.beginColumn);
      assertEquals(2102, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(114, token0.endLine);
      assertEquals(114, token0.beginLine);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'5', '/', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals(2102, javaCharStream0.getBeginColumn());
      assertEquals(114, javaCharStream0.getLine());
      assertEquals(2102, javaCharStream0.getEndColumn());
      assertEquals(2102, javaCharStream0.getColumn());
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals("5", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'5', '/', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals(2102, javaCharStream0.getBeginColumn());
      assertEquals(114, javaCharStream0.getLine());
      assertEquals(2102, javaCharStream0.getEndColumn());
      assertEquals(2102, javaCharStream0.getColumn());
      assertEquals(114, javaCharStream0.getBeginLine());
      assertNotSame(charArrayReader1, charArrayReader0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(2540);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2540. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = '*';
      charArray0[5] = '*';
      charArray0[6] = '*';
      charArray0[7] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'*', '*', '*', '*', '*', '*', '*', '*'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'*', '*', '*', '*', '*', '*', '*', '*'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 100, (-2150), 31);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'*', '*', '*', '*', '*', '*', '*', '*'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'*', '*', '*', '*', '*', '*', '*', '*'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, token0.kind);
      assertEquals(100, token0.beginLine);
      assertEquals((-2150), token0.endColumn);
      assertEquals(100, token0.endLine);
      assertEquals((-2150), token0.beginColumn);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'*', '*', '*', '*', '*', '*', '*', '*'}, charArray0);
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals((-2150), javaCharStream0.getColumn());
      assertEquals((-2150), javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals((-2150), javaCharStream0.getBeginColumn());
      assertEquals("*", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'*', '*', '*', '*', '*', '*', '*', '*'}, charArray0);
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals((-2150), javaCharStream0.getColumn());
      assertEquals((-2150), javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals((-2150), javaCharStream0.getBeginColumn());
      assertNotSame(charArrayReader1, charArrayReader0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[2] = 'b';
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'b', '\u0000', 'b'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'b', '\u0000', 'b'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'b', '\u0000', 'b'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'b', '\u0000', 'b'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'b', '\u0000', 'b'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("b", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'b', '\u0000', 'b'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertNotSame(charArrayReader0, charArrayReader1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("b");
      assertNotNull(mockPrintStream0);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'b', '\u0000', 'b'}, charArray0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertNotSame(charArrayReader0, charArrayReader1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '<';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte)15;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-19);
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte)15, (byte)0, (byte)73, (byte) (-19)}, byteArray0);
      assertFalse(boolean2);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte) (-19), 27, (byte)73);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-19), token0.beginLine);
      assertEquals(109, token0.kind);
      assertEquals((-19), token0.endLine);
      assertEquals(27, token0.beginColumn);
      assertEquals(28, token0.endColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-19), javaCharStream0.getEndLine());
      assertEquals((-19), javaCharStream0.getLine());
      assertEquals(28, javaCharStream0.getColumn());
      assertEquals(27, javaCharStream0.getBeginColumn());
      assertEquals((-19), javaCharStream0.getBeginLine());
      assertEquals(28, javaCharStream0.getEndColumn());
      assertEquals("<<", token0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'<', '<', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-19), javaCharStream0.getEndLine());
      assertEquals((-19), javaCharStream0.getLine());
      assertEquals(28, javaCharStream0.getColumn());
      assertEquals(27, javaCharStream0.getBeginColumn());
      assertEquals((-19), javaCharStream0.getBeginLine());
      assertEquals(28, javaCharStream0.getEndColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -19, column 29.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '<';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-19);
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)15, (byte)73, (byte) (-19)}, byteArray0);
      assertFalse(boolean2);
      
      charArray0[2] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', '<', '<', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'<', '<', '<', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '<';
      charArray1[1] = '<';
      charArray1[2] = '<';
      charArray1[3] = '<';
      charArray1[4] = '<';
      charArray1[5] = 'u';
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'<', '<', '<', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 47, (byte)15, (byte)0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', '<', '<', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', '<', '<', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, token0.beginColumn);
      assertEquals(16, token0.endColumn);
      assertEquals(47, token0.endLine);
      assertEquals(109, token0.kind);
      assertEquals(47, token0.beginLine);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', '<', '<', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals("<<", token0.toString());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertArrayEquals(new char[] {'<', '<', '<', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getColumn());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[0] = 'i';
      charArray0[1] = 'n';
      charArray0[2] = '/';
      charArray0[20] = 'i';
      charArray0[4] = '/';
      charArray0[5] = 'i';
      charArray0[5] = 'd';
      charArray0[3] = '/';
      charArray0[8] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1), 0, 40);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1), token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals((-1), token0.endLine);
      assertNotNull(token0);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("in", token0.toString());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("in");
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1), token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals((-1), token0.endLine);
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("in", token0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'G';
      charArray0[1] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'G', '/', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 38, (-1679), 3543);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'G', '/', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1), 40);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'G', '/', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'G', '/', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.beginLine);
      assertEquals(40, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(40, token0.beginColumn);
      assertEquals((-1), token0.endLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'G', '/', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(40, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals(40, javaCharStream1.getEndColumn());
      assertEquals(40, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals("G", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "Y(}X");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)12;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-52);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)110, (byte)37, (byte) (-52)}, byteArray0);
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)110, 11, (byte)37);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      PrintStream printStream0 = mockPrintStream0.format("", (Object[]) javaParserTokenManager0.jjstrLiteralImages);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(printStream0);
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(mockPrintStream1.equals((Object)printStream0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(77, token0.kind);
      assertEquals(11, token0.beginColumn);
      assertEquals(110, token0.endLine);
      assertEquals(110, token0.beginLine);
      assertEquals(11, token0.endColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000'}, charArray0);
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals(110, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals("(", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'(', '\u0000', '\u0000'}, charArray0);
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals(110, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', 'm', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-14);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)105, (byte) (-14), (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)8, (byte) (-14), (byte)105);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)105, (byte) (-14), (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)105, (byte) (-14), (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-14), token0.beginColumn);
      assertEquals((-14), token0.endColumn);
      assertEquals(8, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)105, (byte) (-14), (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getBeginLine());
      assertEquals((-14), javaCharStream0.getColumn());
      assertEquals((-14), javaCharStream0.getEndColumn());
      assertEquals((-14), javaCharStream0.getBeginColumn());
      assertEquals("i", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 8, column -13.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      charArray0[6] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', '<', '<', '\u0000', '<', '<', '<'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'<', '<', '<', '\u0000', '<', '<', '<'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'<', '<', '<', '\u0000', '<', '<', '<'}, charArray0);
      assertEquals(60, int0);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      boolean boolean1 = charArrayReader1.ready();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'<', '<', '<', '\u0000', '<', '<', '<'}, charArray0);
      assertTrue(boolean1);
      assertNotSame(charArrayReader1, charArrayReader0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'x';
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'x'}, charArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, '<', 3716, 836);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', '<', '<', '\u0000', '<', '<', '<'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader2);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'x'}, charArray1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'x'}, charArray1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'x'}, charArray1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'x'}, charArray1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'x'}, charArray1);
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("x", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = '<';
      charArray0[5] = '<';
      charArray0[6] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'b', 'b', 'b', 'b', '<', '<', 'b'}, charArray0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'b', 'b', 'b', 'b', '<', '<', 'b'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 51, 'b', 8257536);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'b', 'b', 'b', 'b', '<', '<', 'b'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'b', 'b', 'b', 'b', '<', '<', 'b'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token0.kind);
      assertEquals(101, token0.endColumn);
      assertEquals(51, token0.endLine);
      assertEquals(98, token0.beginColumn);
      assertEquals(51, token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'b', 'b', 'b', 'b', '<', '<', 'b'}, charArray0);
      assertEquals("bbbb", token0.toString());
      assertEquals(51, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getBeginLine());
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals(101, javaCharStream0.getColumn());
      assertEquals(51, javaCharStream0.getEndLine());
      assertNotSame(charArrayReader1, charArrayReader0);
      
      int int1 = 100;
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream(charArrayReader0, (-2150), 1694, (-1201));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)78, (byte)121, (byte)61, (byte)18}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)121, (byte)121, (byte)61);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)78, (byte)121, (byte)61, (byte)18}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)78, (byte)121, (byte)61, (byte)18}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(121, token0.beginLine);
      assertEquals(121, token0.beginColumn);
      assertEquals(121, token0.endLine);
      assertEquals(122, token0.endColumn);
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)78, (byte)121, (byte)61, (byte)18}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(121, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals(121, javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals(121, javaCharStream0.getLine());
      assertEquals(121, javaCharStream0.getBeginLine());
      assertEquals("Ny", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (int) (byte)18);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 18. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '[';
      charArray0[2] = '5';
      charArray0[3] = 'W';
      charArray0[4] = '?';
      charArray0[5] = 'W';
      charArray0[6] = '&';
      charArray0[7] = '/';
      charArray0[8] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '?', 'W', '&', '/', 'x'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '?', 'W', '&', '/', 'x'}, charArray0);
      
      int int0 = charArrayReader1.read();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '?', 'W', '&', '/', 'x'}, charArray0);
      assertEquals(47, int0);
      assertNotSame(charArrayReader1, charArrayReader0);
      
      boolean boolean1 = charArrayReader1.ready();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '?', 'W', '&', '/', 'x'}, charArray0);
      assertTrue(boolean1);
      assertNotSame(charArrayReader1, charArrayReader0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '?', 'W', '&', '/', 'x'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 39, 15, 15);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '?', 'W', '&', '/', 'x'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '?', 'W', '&', '/', 'x'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '?', 'W', '&', '/', 'x'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, token0.beginColumn);
      assertEquals(15, token0.endColumn);
      assertEquals(39, token0.endLine);
      assertEquals(104, token0.kind);
      assertEquals(39, token0.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '?', 'W', '&', '/', 'x'}, charArray0);
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals("/", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '?', 'W', '&', '/', 'x'}, charArray0);
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '?', 'W', '&', '/', 'x'}, charArray0);
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, token0.beginColumn);
      assertEquals(15, token0.endColumn);
      assertEquals(39, token0.endLine);
      assertEquals(104, token0.kind);
      assertEquals(39, token0.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '?', 'W', '&', '/', 'x'}, charArray0);
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals("/", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(15);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 15. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = 'Z';
      charArray0[3] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', '<', 'Z', '[', '\u0000', '\u0000'}, charArray0);
      
      int int0 = (-960);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 71, (-960), 71);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', '<', 'Z', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1030), (-1030), 37);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'<', '<', 'Z', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', '<', 'Z', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1030), token0.endLine);
      assertEquals((-1029), token0.endColumn);
      assertEquals((-1030), token0.beginColumn);
      assertEquals(109, token0.kind);
      assertEquals((-1030), token0.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', '<', 'Z', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1030), javaCharStream1.getEndLine());
      assertEquals((-1029), javaCharStream1.getEndColumn());
      assertEquals((-1029), javaCharStream1.getColumn());
      assertEquals((-1030), javaCharStream1.getBeginColumn());
      assertEquals((-1030), javaCharStream1.getBeginLine());
      assertEquals((-1030), javaCharStream1.getLine());
      assertEquals("<<", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      long long0 = charArrayReader0.skip((-1087L));
      assertArrayEquals(new char[] {'<', '<', 'Z', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0L, long0);
      
      javaCharStream0.maxNextCharInd = (-1030);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'<', '<', 'Z', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1030), javaCharStream1.getEndLine());
      assertEquals((-1029), javaCharStream1.getEndColumn());
      assertEquals((-1029), javaCharStream1.getColumn());
      assertEquals((-1030), javaCharStream1.getBeginColumn());
      assertEquals((-1030), javaCharStream1.getBeginLine());
      assertEquals((-1030), javaCharStream1.getLine());
      
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = '/';
      charArray0[2] = 'P';
      charArray0[3] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'A', '/', 'P', '2'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 34, 34, 31);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'A', '/', 'P', '2'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'A', '/', 'P', '2'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(34, token0.beginLine);
      assertEquals(34, token0.endColumn);
      assertEquals(34, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(34, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'A', '/', 'P', '2'}, charArray0);
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals("A", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'A', '/', 'P', '2'}, charArray0);
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getColumn());
      assertEquals(34, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'd';
      charArray0[2] = 'b';
      charArray0[4] = 'b';
      charArray0[5] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', '\u0000', 'b', '\u0000', 'b', 'b', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 'd', 880, 27);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'d', '\u0000', 'b', '\u0000', 'b', 'b', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'d', '\u0000', 'b', '\u0000', 'b', 'b', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(880, token0.beginColumn);
      assertEquals(100, token0.endLine);
      assertEquals(100, token0.beginLine);
      assertEquals(880, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'d', '\u0000', 'b', '\u0000', 'b', 'b', '\u0000'}, charArray0);
      assertEquals(880, javaCharStream0.getEndColumn());
      assertEquals(880, javaCharStream0.getColumn());
      assertEquals(880, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getBeginLine());
      assertEquals("d", token0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("d");
      assertNotNull(mockPrintStream0);
      
      charArrayReader0.close();
      assertArrayEquals(new char[] {'d', '\u0000', 'b', '\u0000', 'b', 'b', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 100, column 881.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'=', '=', '=', 'n'}, charArray0);
      
      int int0 = 23;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 23, 22, 23);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'=', '=', '=', 'n'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'=', '=', '=', 'n'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(23, token0.endLine);
      assertEquals(23, token0.beginLine);
      assertEquals(22, token0.beginColumn);
      assertEquals(23, token0.endColumn);
      assertEquals(93, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'=', '=', '=', 'n'}, charArray0);
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals("==", token0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("==");
      assertNotNull(mockPrintStream0);
      
      token0.image = "";
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals("", token0.toString());
      
      mockPrintStream0.println(94);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(24, token1.endColumn);
      assertEquals(23, token1.endLine);
      assertEquals(87, token1.kind);
      assertEquals(24, token1.beginColumn);
      assertEquals(23, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'=', '=', '=', 'n'}, charArray0);
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(24, javaCharStream0.getColumn());
      assertEquals(24, javaCharStream0.getEndColumn());
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals("=", token1.toString());
      assertNotSame(token1, token0);
      
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream(charArrayReader0, (-271), 107, (-271));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', 'l'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'/', 'l'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'/', 'l'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 71, 50, 1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'/', 'l'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'/', 'l'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"\n\"");
      assertNotNull(mockPrintStream0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(71, token0.endLine);
      assertEquals(50, token0.endColumn);
      assertEquals(104, token0.kind);
      assertEquals(71, token0.beginLine);
      assertEquals(50, token0.beginColumn);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'/', 'l'}, charArray0);
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals("/", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertArrayEquals(new char[] {'/', 'l'}, charArray0);
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getEndLine());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'l';
      charArray1[1] = '/';
      charArray1[2] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'l', '/', '/'}, charArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-722), (-1), 2540);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'l', '/', '/'}, charArray1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'l', '/', '/'}, charArray1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-722), token0.endLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals((-722), token0.beginLine);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'l', '/', '/'}, charArray1);
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals((-722), javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals((-722), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals((-722), javaCharStream0.getBeginLine());
      assertEquals("l", token0.toString());
      assertNotSame(charArray1, charArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\"~\"");
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        mockPrintStream0.format(locale0, (String) null, (Object[]) javaParserTokenManager0.lexStateNames);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = '<';
      charArray0[2] = 'K';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'2', '<', 'K', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 3230, 31, 1728);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'2', '<', 'K', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'2', '<', 'K', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(31, token0.endColumn);
      assertEquals(3230, token0.endLine);
      assertEquals(31, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(3230, token0.beginLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'2', '<', 'K', '\u0000', '\u0000'}, charArray0);
      assertEquals(3230, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(3230, javaCharStream0.getLine());
      assertEquals(3230, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals("2", token0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'2', '<', 'K', '\u0000', '\u0000'}, charArray0);
      assertEquals(3230, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(3230, javaCharStream0.getLine());
      assertEquals(3230, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(32, token1.endColumn);
      assertEquals(88, token1.kind);
      assertEquals(3230, token1.beginLine);
      assertEquals(32, token1.beginColumn);
      assertEquals(3230, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'2', '<', 'K', '\u0000', '\u0000'}, charArray0);
      assertEquals(3230, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(3230, javaCharStream0.getLine());
      assertEquals(3230, javaCharStream0.getEndLine());
      assertEquals("<", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = 'K';
      charArray0[3] = 'K';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'2', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'2', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(50, int0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'2', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 50, 85, 14);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'2', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'2', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(50, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(85, token0.endColumn);
      assertEquals(85, token0.beginColumn);
      assertEquals(50, token0.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'2', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals("K", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("return");
      assertNotNull(mockPrintStream0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(85, token1.endColumn);
      assertEquals(50, token1.beginLine);
      assertEquals(85, token1.beginColumn);
      assertEquals(50, token1.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'2', 'K', '\u0000', 'K', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals("K", token1.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token1, token0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 50, column 86.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\"', 'l', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\"', 'l', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 31, 280, 31);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\"', 'l', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1, (-1), 52);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'\"', 'l', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\"', 'l', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1, column 55.  Encountered: <EOF> after : \"\\\"l\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = 'H';
      charArray0[6] = 'c';
      charArray0[1] = 'c';
      charArray0[8] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'H', 'c', 'H', 'H', 'H', 'H', 'c', '\u0000', 'c'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'H', 'c', 'H', 'H', 'H', 'H', 'c', '\u0000', 'c'}, charArray0);
      assertEquals(72, int0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'H', 'c', 'H', 'H', 'H', 'H', 'c', '\u0000', 'c'}, charArray0);
      assertTrue(boolean0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'H', 'c', 'H', 'H', 'H', 'H', 'c', '\u0000', 'c'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 72, 72, 45);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'H', 'c', 'H', 'H', 'H', 'H', 'c', '\u0000', 'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-90);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)94, (byte)40, (byte) (-90)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (byte) (-90), 55, 1190);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)94, (byte)40, (byte) (-90)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)94, (byte)40, (byte) (-90)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0, (-1), (byte)94);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream2);
      assertArrayEquals(new char[] {'H', 'c', 'H', 'H', 'H', 'H', 'c', '\u0000', 'c'}, charArray0);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'H', 'c', 'H', 'H', 'H', 'H', 'c', '\u0000', 'c'}, charArray0);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(55, token0.endColumn);
      assertEquals((-90), token0.endLine);
      assertEquals((-90), token0.beginLine);
      assertEquals(55, token0.beginColumn);
      assertEquals(107, token0.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)94, (byte)40, (byte) (-90)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(55, javaCharStream1.getEndColumn());
      assertEquals(55, javaCharStream1.getColumn());
      assertEquals(55, javaCharStream1.getBeginColumn());
      assertEquals((-90), javaCharStream1.getEndLine());
      assertEquals((-90), javaCharStream1.getBeginLine());
      assertEquals((-90), javaCharStream1.getLine());
      assertEquals("^", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(77, token1.kind);
      assertEquals((-90), token1.beginLine);
      assertEquals(56, token1.beginColumn);
      assertEquals(56, token1.endColumn);
      assertEquals((-90), token1.endLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)94, (byte)40, (byte) (-90)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(56, javaCharStream1.getBeginColumn());
      assertEquals(56, javaCharStream1.getColumn());
      assertEquals((-90), javaCharStream1.getEndLine());
      assertEquals((-90), javaCharStream1.getBeginLine());
      assertEquals((-90), javaCharStream1.getLine());
      assertEquals(56, javaCharStream1.getEndColumn());
      assertEquals("(", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '<';
      charArray0[2] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'&', '<', '1', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-41), 48);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'&', '<', '1', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'&', '<', '1', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(105, token0.kind);
      assertEquals((-41), token0.beginLine);
      assertEquals(48, token0.endColumn);
      assertEquals(48, token0.beginColumn);
      assertEquals((-41), token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'&', '<', '1', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-41), javaCharStream0.getEndLine());
      assertEquals((-41), javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals((-41), javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals("&", token0.toString());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'&', '<', '1', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-41), token1.endLine);
      assertEquals(49, token1.beginColumn);
      assertEquals(88, token1.kind);
      assertEquals((-41), token1.beginLine);
      assertEquals(49, token1.endColumn);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'&', '<', '1', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-41), javaCharStream0.getEndLine());
      assertEquals((-41), javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals((-41), javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals("<", token1.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'&', '<', '1', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-41), javaCharStream0.getEndLine());
      assertEquals((-41), javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals((-41), javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertNotSame(charArrayReader0, charArrayReader1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-41));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -41. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', 'Z', 'Z', '[', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 71, (-960), 71);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', 'Z', 'Z', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', 'Z', 'Z', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(88, token0.kind);
      assertEquals(71, token0.beginLine);
      assertEquals((-960), token0.endColumn);
      assertEquals((-960), token0.beginColumn);
      assertEquals(71, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', 'Z', 'Z', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals((-960), javaCharStream0.getColumn());
      assertEquals((-960), javaCharStream0.getEndColumn());
      assertEquals((-960), javaCharStream0.getBeginColumn());
      assertEquals("<", token0.toString());
      
      long long0 = charArrayReader0.skip((-1087L));
      assertArrayEquals(new char[] {'<', 'Z', 'Z', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(0L, long0);
      
      javaCharStream0.maxNextCharInd = (-960);
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals((-960), javaCharStream0.getColumn());
      assertEquals((-960), javaCharStream0.getEndColumn());
      assertEquals((-960), javaCharStream0.getBeginColumn());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'<', 'Z', 'Z', '[', '\u0000', '\u0000'}, charArray0);
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals((-960), javaCharStream0.getColumn());
      assertEquals((-960), javaCharStream0.getEndColumn());
      assertEquals((-960), javaCharStream0.getBeginColumn());
      
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[3] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = 'H';
      charArray0[1] = 'c';
      charArray0[8] = 'c';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'c', 'H', 'H', 'H', 'H', '\u0000', '\u0000', 'c'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'\u0000', 'c', 'H', 'H', 'H', 'H', '\u0000', '\u0000', 'c'}, charArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'\u0000', 'c', 'H', 'H', 'H', 'H', '\u0000', '\u0000', 'c'}, charArray0);
      assertTrue(boolean0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\u0000', 'c', 'H', 'H', 'H', 'H', '\u0000', '\u0000', 'c'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 43, (-172));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\u0000', 'c', 'H', 'H', 'H', 'H', '\u0000', '\u0000', 'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', 'c', 'H', 'H', 'H', 'H', '\u0000', '\u0000', 'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(43, token0.beginLine);
      assertEquals((-168), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-172), token0.beginColumn);
      assertEquals(43, token0.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\u0000', 'c', 'H', 'H', 'H', 'H', '\u0000', '\u0000', 'c'}, charArray0);
      assertEquals((-168), javaCharStream0.getColumn());
      assertEquals((-172), javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals((-168), javaCharStream0.getEndColumn());
      assertEquals("cHHHH", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(69);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 69. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "return";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte byte0 = (byte)78;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)18;
      byteArray0[0] = (byte)121;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)61;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)121, (byte)18, (byte)121, (byte)121, (byte)18, (byte)0, (byte)78, (byte)61}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1388), (byte)18, 1146);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)121, (byte)18, (byte)121, (byte)121, (byte)18, (byte)0, (byte)78, (byte)61}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)121, (byte)18, (byte)121, (byte)121, (byte)18, (byte)0, (byte)78, (byte)61}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(18, token0.endColumn);
      assertEquals((-1388), token0.beginLine);
      assertEquals(18, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1388), token0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)121, (byte)18, (byte)121, (byte)121, (byte)18, (byte)0, (byte)78, (byte)61}, byteArray0);
      assertEquals("y", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals((-1388), javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals((-1388), javaCharStream0.getLine());
      assertEquals((-1388), javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)121, (byte)18, (byte)121, (byte)121, (byte)18, (byte)0, (byte)78, (byte)61}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals((-1388), javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals((-1388), javaCharStream0.getLine());
      assertEquals((-1388), javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1388));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1388. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'u'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'u'}, charArray0);
      assertEquals(60, int0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {}, charArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 16, 60, 16);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'u'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'u'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(60, token0.beginColumn);
      assertEquals(16, token0.endLine);
      assertEquals(61, token0.endColumn);
      assertEquals(16, token0.beginLine);
      assertEquals(109, token0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'u'}, charArray0);
      assertEquals("<<", token0.toString());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(61, javaCharStream0.getColumn());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'u'}, charArray0);
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(61, javaCharStream0.getColumn());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(61, token1.endColumn);
      assertEquals(60, token1.beginColumn);
      assertEquals(16, token1.endLine);
      assertEquals(16, token1.beginLine);
      assertEquals(109, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'u'}, charArray0);
      assertEquals("<<", token1.toString());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(61, javaCharStream0.getColumn());
      assertNotSame(token1, token0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(16, token2.endLine);
      assertEquals(109, token2.kind);
      assertEquals(62, token2.beginColumn);
      assertEquals(63, token2.endColumn);
      assertEquals(16, token2.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'u'}, charArray0);
      assertEquals("<<", token2.toString());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(60, token0.beginColumn);
      assertEquals(16, token0.endLine);
      assertEquals(61, token0.endColumn);
      assertEquals(16, token0.beginLine);
      assertEquals(109, token0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'u'}, charArray0);
      assertEquals("<<", token0.toString());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1490));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1490. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = 'u';
      charArray0[2] = '<';
      charArray0[3] = 'u';
      charArray0[4] = '}';
      charArray0[5] = '<';
      charArray0[6] = '<';
      charArray0[7] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', 'u', '<', 'u', '}', '<', '<', '<'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'<', 'u', '<', 'u', '}', '<', '<', '<'}, charArray0);
      assertEquals(60, int0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'<', 'u', '<', 'u', '}', '<', '<', '<'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 16, 16, 60);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', 'u', '<', 'u', '}', '<', '<', '<'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', 'u', '<', 'u', '}', '<', '<', '<'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(16, token0.beginLine);
      assertEquals(16, token0.beginColumn);
      assertEquals(16, token0.endLine);
      assertEquals(88, token0.kind);
      assertEquals(16, token0.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', 'u', '<', 'u', '}', '<', '<', '<'}, charArray0);
      assertEquals("<", token0.toString());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getColumn());
      assertNotSame(charArrayReader1, charArrayReader0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'<', 'u', '<', 'u', '}', '<', '<', '<'}, charArray0);
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getColumn());
      
      PrintStream printStream0 = javaParserTokenManager0.debugStream;
      assertNotNull(printStream0);
      assertArrayEquals(new char[] {'<', 'u', '<', 'u', '}', '<', '<', '<'}, charArray0);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'<', 'u', '<', 'u', '}', '<', '<', '<'}, charArray0);
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getColumn());
      assertNotSame(charArrayReader1, charArrayReader0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'u', 'u', 'u', 'u', 'u'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'u', 'u', 'u', 'u', 'u'}, charArray0);
      assertEquals(117, int0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'u', 'u', 'u', 'u', 'u'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, (byte)18, (-1), 16);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'u', 'u', 'u', 'u', 'u'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'u', 'u', 'u', 'u', 'u'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token0.kind);
      assertEquals(18, token0.endLine);
      assertEquals(3, token0.endColumn);
      assertEquals(18, token0.beginLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'u', 'u', 'u', 'u', 'u'}, charArray0);
      assertEquals("uuuuu", token0.toString());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertNotSame(charArrayReader1, charArrayReader0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'u', 'u', 'u', 'u', 'u'}, charArray0);
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(3, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(18, token1.endLine);
      assertEquals(18, token1.beginLine);
      assertEquals((-1), token1.beginColumn);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'u', 'u', 'u', 'u', 'u'}, charArray0);
      assertEquals("uuuuu", token1.toString());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(3, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(18, token1.endLine);
      assertEquals(18, token1.beginLine);
      assertEquals((-1), token1.beginColumn);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'u', 'u', 'u', 'u', 'u'}, charArray0);
      assertEquals("uuuuu", token1.toString());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '8';
      charArray0[1] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'8', ')'}, charArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)39;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte) (-93), (byte)39}, byteArray0);
      assertFalse(boolean2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)39, 49, 38);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'8', ')'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'8', ')'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(39, token0.beginLine);
      assertEquals(49, token0.endColumn);
      assertEquals(49, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(39, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'8', ')'}, charArray0);
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals("8", token0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, true);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'8', ')'}, charArray0);
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(78, token1.kind);
      assertEquals(50, token1.beginColumn);
      assertEquals(39, token1.endLine);
      assertEquals(50, token1.endColumn);
      assertEquals(39, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'8', ')'}, charArray0);
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(")", token1.toString());
      assertNotSame(token1, token0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(50);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(39, token0.beginLine);
      assertEquals(49, token0.endColumn);
      assertEquals(49, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(39, token0.endLine);
      assertFalse(token0.equals((Object)token1));
      assertArrayEquals(new char[] {'8', ')'}, charArray0);
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals("8", token0.toString());
      assertNotSame(token0, token1);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(50, token2.endColumn);
      assertEquals(39, token2.endLine);
      assertEquals(39, token2.beginLine);
      assertEquals(78, token2.kind);
      assertEquals(50, token2.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'8', ')'}, charArray0);
      assertEquals(")", token2.toString());
      assertEquals(39, javaCharStream0.getEndLine());
      assertEquals(39, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)81, (byte)0, (byte)2, (byte)32, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      byteArrayInputStream0.reset();
      assertArrayEquals(new byte[] {(byte)81, (byte)0, (byte)2, (byte)32, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 48, 71, 52);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)81, (byte)0, (byte)2, (byte)32, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)81, (byte)0, (byte)2, (byte)32, (byte)0}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(48, token0.beginLine);
      assertEquals(71, token0.beginColumn);
      assertEquals(71, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(48, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)81, (byte)0, (byte)2, (byte)32, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(48, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getColumn());
      assertEquals("Q", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 48, column 72.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '[';
      charArray0[2] = '5';
      charArray0[3] = 'W';
      charArray0[4] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '1', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '1', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(47, int0);
      
      boolean boolean1 = charArrayReader0.ready();
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '1', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean1);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '1', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 47, 43);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '1', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '1', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(43, token0.beginColumn);
      assertEquals(47, token0.beginLine);
      assertEquals(43, token0.endColumn);
      assertEquals(81, token0.kind);
      assertEquals(47, token0.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '1', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals("[", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(43, token0.beginColumn);
      assertEquals(47, token0.beginLine);
      assertEquals(43, token0.endColumn);
      assertEquals(81, token0.kind);
      assertEquals(47, token0.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'/', '[', '5', 'W', '1', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals("[", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((byte)113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 113. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '1';
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'1', '['}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'1', '['}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2612, 31, 2612);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'1', '['}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1, 31, 14);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'1', '['}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca");
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'1', '['}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(31, token0.endLine);
      assertEquals(31, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(14, token0.beginColumn);
      assertEquals(14, token0.endColumn);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'1', '['}, charArray0);
      assertEquals(31, javaCharStream1.getLine());
      assertEquals(31, javaCharStream1.getEndLine());
      assertEquals(14, javaCharStream1.getBeginColumn());
      assertEquals(31, javaCharStream1.getBeginLine());
      assertEquals(14, javaCharStream1.getEndColumn());
      assertEquals(14, javaCharStream1.getColumn());
      assertEquals("1", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'1', '['}, charArray0);
      assertEquals(31, javaCharStream1.getLine());
      assertEquals(31, javaCharStream1.getEndLine());
      assertEquals(14, javaCharStream1.getBeginColumn());
      assertEquals(31, javaCharStream1.getBeginLine());
      assertEquals(14, javaCharStream1.getEndColumn());
      assertEquals(14, javaCharStream1.getColumn());
      
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1701));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'd';
      charArray0[1] = 'C';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', 'C'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'d', 'C'}, charArray0);
      assertEquals(100, int0);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'d', 'C'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'d', 'C'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'d', 'C'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'d', 'C'}, charArray0);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("C", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'d', 'C'}, charArray0);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("C", token1.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "int";
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 17, 116, 87);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(117, token0.endColumn);
      assertEquals(17, token0.beginLine);
      assertEquals(116, token0.beginColumn);
      assertEquals(17, token0.endLine);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(116, javaCharStream0.getBeginColumn());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals("ff", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      
      try { 
        MockURI.URI("ff", "ff", "ff", ":vU[(Hce", ":");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ff://ffff?:vU[(Hce#:
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = 'f';
      charArray0[2] = 'e';
      charArray0[3] = '1';
      charArray0[4] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'P', 'f', 'e', '1', ';'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'P', 'f', 'e', '1', ';'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'P', 'f', 'e', '1', ';'}, charArray0);
      
      int int0 = charArrayReader1.read();
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'P', 'f', 'e', '1', ';'}, charArray0);
      assertEquals(80, int0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertNotNull(charArrayReader3);
      assertArrayEquals(new char[] {'P', 'f', 'e', '1', ';'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 2665, (-1822), 2665);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader3));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'P', 'f', 'e', '1', ';'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader3));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'P', 'f', 'e', '1', ';'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-1820), token0.endColumn);
      assertEquals(2665, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1822), token0.beginColumn);
      assertEquals(2665, token0.beginLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader3));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'P', 'f', 'e', '1', ';'}, charArray0);
      assertEquals("fe1", token0.toString());
      assertEquals(2665, javaCharStream0.getLine());
      assertEquals(2665, javaCharStream0.getEndLine());
      assertEquals((-1820), javaCharStream0.getEndColumn());
      assertEquals((-1820), javaCharStream0.getColumn());
      assertEquals(2665, javaCharStream0.getBeginLine());
      assertEquals((-1822), javaCharStream0.getBeginColumn());
      assertNotSame(charArrayReader1, charArrayReader3);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader3));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'P', 'f', 'e', '1', ';'}, charArray0);
      assertEquals(2665, javaCharStream0.getLine());
      assertEquals(2665, javaCharStream0.getEndLine());
      assertEquals((-1820), javaCharStream0.getEndColumn());
      assertEquals((-1820), javaCharStream0.getColumn());
      assertEquals(2665, javaCharStream0.getBeginLine());
      assertEquals((-1822), javaCharStream0.getBeginColumn());
      assertNotSame(charArrayReader1, charArrayReader3);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = 'V';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'n', 'V', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'n', 'V', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'n', 'V', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = charArrayReader2.read();
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'n', 'V', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(110, int0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      
      boolean boolean1 = charArrayReader2.ready();
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'n', 'V', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean1);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader3);
      assertArrayEquals(new char[] {'n', 'V', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 16, (-3404));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'n', 'V', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'n', 'V', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(16, token0.endLine);
      assertEquals((-3403), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-3404), token0.beginColumn);
      assertEquals(16, token0.beginLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'n', 'V', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals((-3403), javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals((-3403), javaCharStream0.getEndColumn());
      assertEquals((-3404), javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals("nV", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader3);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(dataOutputStream0);
      assertArrayEquals(new char[] {'n', 'V', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals((-3403), javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals((-3403), javaCharStream0.getEndColumn());
      assertEquals((-3404), javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getLine());
      
      dataOutputStream0.writeUTF("nV");
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertArrayEquals(new char[] {'n', 'V', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals((-3403), javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals((-3403), javaCharStream0.getEndColumn());
      assertEquals((-3404), javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertNotSame(charArrayReader0, charArrayReader3);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'n', 'V', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals((-3403), javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals((-3403), javaCharStream0.getEndColumn());
      assertEquals((-3404), javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 16, column -3402.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '2';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)22, (byte)22}, byteArray0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '\u0000'}, charArray0);
      
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new byte[] {(byte)22, (byte)22}, byteArray0);
      assertFalse(boolean3);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, (byte)22, 36, 1928);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '\u0000'}, charArray0);
      
      boolean boolean4 = charArrayReader2.ready();
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '\u0000'}, charArray0);
      assertTrue(boolean4);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(22, token0.beginLine);
      assertEquals(36, token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals(36, token0.beginColumn);
      assertEquals(22, token0.endLine);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '\u0000'}, charArray0);
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(36, javaCharStream0.getEndColumn());
      assertEquals(36, javaCharStream0.getColumn());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals("<", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '\u0000'}, charArray0);
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(36, javaCharStream0.getEndColumn());
      assertEquals(36, javaCharStream0.getColumn());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(37, token1.beginColumn);
      assertEquals(22, token1.endLine);
      assertEquals(22, token1.beginLine);
      assertEquals(66, token1.kind);
      assertEquals(37, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '\u0000'}, charArray0);
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals("2", token1.toString());
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '\u0000'}, charArray0);
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getColumn());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertNotNull(mockPrintStream1);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '\u0000'}, charArray0);
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '\u0000'}, charArray0);
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getColumn());
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '2';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      charArray0[6] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '2'}, charArray0);
      
      boolean boolean1 = charArrayReader0.ready();
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '2'}, charArray0);
      assertTrue(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 80, 7, 80);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '2'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '2'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '2'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(88, token0.kind);
      assertEquals(7, token0.beginColumn);
      assertEquals(7, token0.endColumn);
      assertEquals(80, token0.endLine);
      assertEquals(80, token0.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '2'}, charArray0);
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(80, javaCharStream0.getEndLine());
      assertEquals("<", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, true);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '2'}, charArray0);
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(80, javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(66, token1.kind);
      assertEquals(8, token1.beginColumn);
      assertEquals(80, token1.beginLine);
      assertEquals(8, token1.endColumn);
      assertEquals(80, token1.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '2'}, charArray0);
      assertEquals("2", token1.toString());
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(80, javaCharStream0.getEndLine());
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(10, token2.endColumn);
      assertEquals(80, token2.endLine);
      assertEquals(80, token2.beginLine);
      assertEquals(9, token2.beginColumn);
      assertEquals(109, token2.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '2'}, charArray0);
      assertEquals("<<", token2.toString());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getEndLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(109, token3.kind);
      assertEquals(11, token3.beginColumn);
      assertEquals(80, token3.endLine);
      assertEquals(80, token3.beginLine);
      assertEquals(12, token3.endColumn);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token3);
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '2'}, charArray0);
      assertEquals("<<", token3.toString());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getEndLine());
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token4 = token_GTToken0.specialToken;
      assertNull(token4);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new char[] {'<', '2', '<', '<', '<', '<', '2'}, charArray0);
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(80, javaCharStream0.getBeginLine());
      assertEquals(80, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getEndLine());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 36. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = '/';
      charArray0[2] = 'P';
      charArray0[3] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'P', '/', 'P', '2'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 34, 34, 31);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'P', '/', 'P', '2'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'P', '/', 'P', '2'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(34, token0.endLine);
      assertEquals(34, token0.beginLine);
      assertEquals(34, token0.beginColumn);
      assertEquals(34, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'P', '/', 'P', '2'}, charArray0);
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(34, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals("P", token0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'P', '/', 'P', '2'}, charArray0);
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(34, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(34, token1.endLine);
      assertEquals(35, token1.beginColumn);
      assertEquals(104, token1.kind);
      assertEquals(35, token1.endColumn);
      assertEquals(34, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'P', '/', 'P', '2'}, charArray0);
      assertEquals(35, javaCharStream0.getColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(35, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(35, javaCharStream0.getEndColumn());
      assertEquals("/", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'P', '/', 'P', '2'}, charArray0);
      assertEquals(35, javaCharStream0.getColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(35, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(35, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'J', '2'}, charArray0);
      
      boolean boolean3 = charArrayReader0.markSupported();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new char[] {'J', '2'}, charArray0);
      assertTrue(boolean3);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0, 31);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'J', '2'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(pushbackReader0, 1);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'J', '2'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 31, (byte)21, 31);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'J', '2'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'J', '2'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(21, token0.beginColumn);
      assertEquals(22, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(31, token0.beginLine);
      assertEquals(31, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'J', '2'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(31, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getLine());
      assertEquals("J2", token0.toString());
      
      javaCharStream0.ExpandBuff(true);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(32, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'J', '2'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(32, javaCharStream0.bufpos);
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'J', '2'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(22, token1.beginColumn);
      assertEquals(22, token1.endColumn);
      assertEquals(31, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(31, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'J', '2'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(31, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'J', '2'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(31, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new char[] {'J', '2'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(31, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(31);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 31. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = 'C';
      charArray0[2] = '&';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'&', 'C', '&'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 3558, 1197, 3230);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'&', 'C', '&'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'&', 'C', '&'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1197, token0.beginColumn);
      assertEquals(1197, token0.endColumn);
      assertEquals(3558, token0.beginLine);
      assertEquals(105, token0.kind);
      assertEquals(3558, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'&', 'C', '&'}, charArray0);
      assertEquals(1197, javaCharStream0.getBeginColumn());
      assertEquals(1197, javaCharStream0.getColumn());
      assertEquals(3558, javaCharStream0.getBeginLine());
      assertEquals(3558, javaCharStream0.getLine());
      assertEquals(1197, javaCharStream0.getEndColumn());
      assertEquals(3558, javaCharStream0.getEndLine());
      assertEquals("&", token0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'&', 'C', '&'}, charArray0);
      assertEquals(1197, javaCharStream0.getBeginColumn());
      assertEquals(1197, javaCharStream0.getColumn());
      assertEquals(3558, javaCharStream0.getBeginLine());
      assertEquals(3558, javaCharStream0.getLine());
      assertEquals(1197, javaCharStream0.getEndColumn());
      assertEquals(3558, javaCharStream0.getEndLine());
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(javaParserTokenManager0.debugStream, true);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      assertArrayEquals(new char[] {'&', 'C', '&'}, charArray0);
      assertEquals(1197, javaCharStream0.getBeginColumn());
      assertEquals(1197, javaCharStream0.getColumn());
      assertEquals(3558, javaCharStream0.getBeginLine());
      assertEquals(3558, javaCharStream0.getLine());
      assertEquals(1197, javaCharStream0.getEndColumn());
      assertEquals(3558, javaCharStream0.getEndLine());
      
      PrintStream printStream0 = mockPrintStream1.append((CharSequence) "&");
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(printStream0.equals((Object)mockPrintStream0));
      assertNotNull(printStream0);
      assertArrayEquals(new char[] {'&', 'C', '&'}, charArray0);
      assertEquals(1197, javaCharStream0.getBeginColumn());
      assertEquals(1197, javaCharStream0.getColumn());
      assertEquals(3558, javaCharStream0.getBeginLine());
      assertEquals(3558, javaCharStream0.getLine());
      assertEquals(1197, javaCharStream0.getEndColumn());
      assertEquals(3558, javaCharStream0.getEndLine());
      assertSame(mockPrintStream1, printStream0);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertNotSame(printStream0, mockPrintStream0);
      assertSame(printStream0, mockPrintStream1);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1197, token1.endColumn);
      assertEquals(1197, token1.beginColumn);
      assertEquals(105, token1.kind);
      assertEquals(3558, token1.beginLine);
      assertEquals(3558, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'&', 'C', '&'}, charArray0);
      assertEquals(1197, javaCharStream0.getBeginColumn());
      assertEquals(1197, javaCharStream0.getColumn());
      assertEquals(3558, javaCharStream0.getBeginLine());
      assertEquals(3558, javaCharStream0.getLine());
      assertEquals(1197, javaCharStream0.getEndColumn());
      assertEquals(3558, javaCharStream0.getEndLine());
      assertEquals("&", token1.toString());
      assertNotSame(token1, token0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(70);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      long long0 = charArrayReader0.skip(70);
      assertArrayEquals(new char[] {'&', 'C', '&'}, charArray0);
      assertEquals(0L, long0);
      
      MockPrintStream mockPrintStream2 = new MockPrintStream(printStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(mockPrintStream2.equals((Object)printStream0));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(printStream0.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream2);
      assertArrayEquals(new char[] {'&', 'C', '&'}, charArray0);
      assertEquals(1197, javaCharStream0.getBeginColumn());
      assertEquals(1197, javaCharStream0.getColumn());
      assertEquals(3558, javaCharStream0.getBeginLine());
      assertEquals(3558, javaCharStream0.getLine());
      assertEquals(1197, javaCharStream0.getEndColumn());
      assertEquals(3558, javaCharStream0.getEndLine());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("&");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream3 = new MockPrintStream(mockFileOutputStream0);
      assertFalse(mockPrintStream3.equals((Object)mockPrintStream2));
      assertFalse(mockPrintStream3.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream3.equals((Object)printStream0));
      assertFalse(mockPrintStream3.equals((Object)mockPrintStream1));
      assertNotNull(mockPrintStream3);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1198, token2.endColumn);
      assertEquals(1198, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(3558, token2.beginLine);
      assertEquals(3558, token2.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'&', 'C', '&'}, charArray0);
      assertEquals("C", token2.toString());
      assertEquals(1198, javaCharStream0.getBeginColumn());
      assertEquals(1198, javaCharStream0.getColumn());
      assertEquals(3558, javaCharStream0.getBeginLine());
      assertEquals(3558, javaCharStream0.getLine());
      assertEquals(1198, javaCharStream0.getEndColumn());
      assertEquals(3558, javaCharStream0.getEndLine());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token3 = token_GTToken0.specialToken;
      assertNull(token3);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'&', 'C', '&'}, charArray0);
      assertEquals(1198, javaCharStream0.getBeginColumn());
      assertEquals(1198, javaCharStream0.getColumn());
      assertEquals(3558, javaCharStream0.getBeginLine());
      assertEquals(3558, javaCharStream0.getLine());
      assertEquals(1198, javaCharStream0.getEndColumn());
      assertEquals(3558, javaCharStream0.getEndLine());
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1197, token1.endColumn);
      assertEquals(1197, token1.beginColumn);
      assertEquals(105, token1.kind);
      assertEquals(3558, token1.beginLine);
      assertEquals(3558, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertArrayEquals(new char[] {'&', 'C', '&'}, charArray0);
      assertEquals(1198, javaCharStream0.getBeginColumn());
      assertEquals(1198, javaCharStream0.getColumn());
      assertEquals(3558, javaCharStream0.getBeginLine());
      assertEquals(3558, javaCharStream0.getLine());
      assertEquals(1198, javaCharStream0.getEndColumn());
      assertEquals(3558, javaCharStream0.getEndLine());
      assertEquals("&", token1.toString());
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      
      MockPrintStream mockPrintStream4 = null;
      try {
        mockPrintStream4 = new MockPrintStream("C", "&");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // &
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = '/';
      charArray0[2] = 'P';
      charArray0[3] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'A', '/', 'P', '2'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 34, 34, 31);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'A', '/', 'P', '2'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'A', '/', 'P', '2'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(34, token0.beginLine);
      assertEquals(34, token0.beginColumn);
      assertEquals(34, token0.endLine);
      assertEquals(34, token0.endColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'A', '/', 'P', '2'}, charArray0);
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(34, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals("A", token0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'A', '/', 'P', '2'}, charArray0);
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(34, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(34, token1.endLine);
      assertEquals(104, token1.kind);
      assertEquals(35, token1.beginColumn);
      assertEquals(35, token1.endColumn);
      assertEquals(34, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'A', '/', 'P', '2'}, charArray0);
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(35, javaCharStream0.getBeginColumn());
      assertEquals(35, javaCharStream0.getColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(35, javaCharStream0.getEndColumn());
      assertEquals("/", token1.toString());
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = 'H';
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[8] = 'c';
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'c', 'c', 'H', 'H', 'H', 'H', '\u0000', '\u0000', 'c'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'c', 'c', 'H', 'H', 'H', 'H', '\u0000', '\u0000', 'c'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader1, 36);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'c', 'c', 'H', 'H', 'H', 'H', '\u0000', '\u0000', 'c'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (byte)22, 36, 1928);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'c', 'c', 'H', 'H', 'H', 'H', '\u0000', '\u0000', 'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'c', 'c', 'H', 'H', 'H', 'H', '\u0000', '\u0000', 'c'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token0.kind);
      assertEquals(22, token0.endLine);
      assertEquals(41, token0.endColumn);
      assertEquals(36, token0.beginColumn);
      assertEquals(22, token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'c', 'c', 'H', 'H', 'H', 'H', '\u0000', '\u0000', 'c'}, charArray0);
      assertEquals("ccHHHH", token0.toString());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getLine());
      assertNotSame(charArrayReader1, charArrayReader0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'c', 'c', 'H', 'H', 'H', 'H', '\u0000', '\u0000', 'c'}, charArray0);
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 22, column 42.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'o', 'S'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 921, 74, 43);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'o', 'S'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'o', 'S'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1, 40, 1194, 74);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'o', 'S'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'o', 'S'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(921, token0.beginLine);
      assertEquals(75, token0.endColumn);
      assertEquals(921, token0.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'o', 'S'}, charArray0);
      assertEquals(921, javaCharStream0.getLine());
      assertEquals(75, javaCharStream0.getColumn());
      assertEquals(74, javaCharStream0.getBeginColumn());
      assertEquals(921, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getEndColumn());
      assertEquals(921, javaCharStream0.getEndLine());
      assertEquals("oS", token0.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'o', 'S'}, charArray0);
      assertEquals(921, javaCharStream0.getLine());
      assertEquals(75, javaCharStream0.getColumn());
      assertEquals(74, javaCharStream0.getBeginColumn());
      assertEquals(921, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getEndColumn());
      assertEquals(921, javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(921, token1.beginLine);
      assertEquals(75, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(75, token1.endColumn);
      assertEquals(921, token1.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'o', 'S'}, charArray0);
      assertEquals(921, javaCharStream0.getLine());
      assertEquals(75, javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getColumn());
      assertEquals(921, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getEndColumn());
      assertEquals(921, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new char[] {'o', 'S'}, charArray0);
      assertEquals(921, javaCharStream0.getLine());
      assertEquals(75, javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getColumn());
      assertEquals(921, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getEndColumn());
      assertEquals(921, javaCharStream0.getEndLine());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)113;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)113, (byte)19, (byte)113, (byte)113, (byte)113}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 3, (byte)113, (-1846));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)113, (byte)19, (byte)113, (byte)113, (byte)113}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)113, (byte)19, (byte)113, (byte)113, (byte)113}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(113, token0.endColumn);
      assertEquals(3, token0.beginLine);
      assertEquals(113, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)113, (byte)19, (byte)113, (byte)113, (byte)113}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(113, javaCharStream0.getBeginColumn());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals("q", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)113, (byte)19, (byte)113, (byte)113, (byte)113}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(113, javaCharStream0.getBeginColumn());
      assertEquals(113, javaCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3, column 114.  Encountered: \"\\u0013\" (19), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'b'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'b'}, charArray0);
      assertEquals(60, int0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {}, charArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 16, 60, 16);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'b'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'b'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(109, token0.kind);
      assertEquals(16, token0.endLine);
      assertEquals(60, token0.beginColumn);
      assertEquals(16, token0.beginLine);
      assertEquals(61, token0.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'b'}, charArray0);
      assertEquals("<<", token0.toString());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'b'}, charArray0);
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(60, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(60, token1.beginColumn);
      assertEquals(61, token1.endColumn);
      assertEquals(16, token1.beginLine);
      assertEquals(16, token1.endLine);
      assertEquals(109, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'b'}, charArray0);
      assertEquals("<<", token1.toString());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertNotSame(token1, token0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(63, token2.endColumn);
      assertEquals(16, token2.endLine);
      assertEquals(109, token2.kind);
      assertEquals(62, token2.beginColumn);
      assertEquals(16, token2.beginLine);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'b'}, charArray0);
      assertEquals("<<", token2.toString());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(109, token0.kind);
      assertEquals(16, token0.endLine);
      assertEquals(60, token0.beginColumn);
      assertEquals(16, token0.beginLine);
      assertEquals(61, token0.endColumn);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'b'}, charArray0);
      assertEquals("<<", token0.toString());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1490));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1490. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      
      boolean boolean1 = JavaCharStream.staticFlag;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)33, (byte)33, (byte)39);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(33, token0.beginLine);
      assertEquals(33, token0.beginColumn);
      assertEquals(33, token0.endColumn);
      assertEquals(33, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals("k", token0.toString());
      
      MockFile mockFile0 = new MockFile("k", "");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/k", mockFile0.toString());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("k", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/k", mockFile0.toString());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("k", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/k", mockFile0.toString());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca", mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("k", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(33, token1.endLine);
      assertEquals(33, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(33, token1.beginColumn);
      assertEquals(33, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(7);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(33, token1.endLine);
      assertEquals(33, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(33, token1.beginColumn);
      assertEquals(33, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(33, token2.beginColumn);
      assertEquals(33, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(33, token2.endLine);
      assertEquals(33, token2.endColumn);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte) (-56);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-56), (byte)123, (byte)35, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      byteArrayInputStream0.mark(0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-56), (byte)123, (byte)35, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1050), 37, (byte) (-56));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-56), (byte)123, (byte)35, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-56), (byte)123, (byte)35, (byte) (-56)}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1050), token0.beginLine);
      assertEquals(37, token0.beginColumn);
      assertEquals((-1050), token0.endLine);
      assertEquals(37, token0.endColumn);
      assertEquals(79, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)123, (byte) (-56), (byte)123, (byte)35, (byte) (-56)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals((-1050), javaCharStream0.getEndLine());
      assertEquals((-1050), javaCharStream0.getBeginLine());
      assertEquals((-1050), javaCharStream0.getLine());
      assertEquals("{", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-1050));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1050. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[1] = 'f';
      charArray0[2] = 'e';
      charArray0[3] = '1';
      charArray0[4] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'f', 'e', '1', ';'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\u0000', 'f', 'e', '1', ';'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'\u0000', 'f', 'e', '1', ';'}, charArray0);
      
      int int0 = charArrayReader1.read();
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'\u0000', 'f', 'e', '1', ';'}, charArray0);
      assertEquals(0, int0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      
      int int1 = charArrayReader0.read(charArray0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', 'f', 'e', '1', ';'}, charArray0);
      assertEquals(5, int1);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      int int2 = charArrayReader0.read();
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new char[] {'\u0000', 'f', 'e', '1', ';'}, charArray0);
      assertEquals((-1), int2);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 16, (byte)100);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'\u0000', 'f', 'e', '1', ';'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', 'f', 'e', '1', ';'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, token0.beginColumn);
      assertEquals(16, token0.beginLine);
      assertEquals(16, token0.endLine);
      assertEquals(102, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\u0000', 'f', 'e', '1', ';'}, charArray0);
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals("fe1", token0.toString());
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'\u0000', 'f', 'e', '1', ';'}, charArray0);
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(103, token1.endColumn);
      assertEquals(16, token1.endLine);
      assertEquals(83, token1.kind);
      assertEquals(16, token1.beginLine);
      assertEquals(103, token1.beginColumn);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'\u0000', 'f', 'e', '1', ';'}, charArray0);
      assertEquals(";", token1.toString());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getEndLine());
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(16, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(16, token2.beginLine);
      assertEquals(103, token2.beginColumn);
      assertEquals(103, token2.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'\u0000', 'f', 'e', '1', ';'}, charArray0);
      assertEquals("", token2.toString());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getEndLine());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(0, token3.kind);
      assertEquals(16, token3.endLine);
      assertEquals(16, token3.beginLine);
      assertEquals(103, token3.beginColumn);
      assertEquals(103, token3.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(token3);
      assertArrayEquals(new char[] {'\u0000', 'f', 'e', '1', ';'}, charArray0);
      assertEquals("", token3.toString());
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getEndLine());
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '<';
      charArray0[2] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'7', '<', 'B', '\u0000', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-67);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-93);
      boolean boolean1 = JavaCharStream.staticFlag;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 3230, 31, '<');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'7', '<', 'B', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'7', '<', 'B', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(31, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(31, token0.beginColumn);
      assertEquals(3230, token0.endLine);
      assertEquals(3230, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'7', '<', 'B', '\u0000', '\u0000'}, charArray0);
      assertEquals("7", token0.toString());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals(3230, javaCharStream0.getEndLine());
      assertEquals(3230, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(3230, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getEndColumn());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(88, token1.kind);
      assertEquals(32, token1.endColumn);
      assertEquals(32, token1.beginColumn);
      assertEquals(3230, token1.endLine);
      assertEquals(3230, token1.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'7', '<', 'B', '\u0000', '\u0000'}, charArray0);
      assertEquals("<", token1.toString());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(3230, javaCharStream0.getEndLine());
      assertEquals(3230, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(3230, javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertNotSame(token1, token0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(101);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(88, token1.kind);
      assertEquals(32, token1.endColumn);
      assertEquals(32, token1.beginColumn);
      assertEquals(3230, token1.endLine);
      assertEquals(3230, token1.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new char[] {'7', '<', 'B', '\u0000', '\u0000'}, charArray0);
      assertEquals("<", token1.toString());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(3230, javaCharStream0.getEndLine());
      assertEquals(3230, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(3230, javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(88, token2.kind);
      assertEquals(32, token2.endColumn);
      assertEquals(32, token2.beginColumn);
      assertEquals(3230, token2.endLine);
      assertEquals(3230, token2.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertArrayEquals(new char[] {'7', '<', 'B', '\u0000', '\u0000'}, charArray0);
      assertEquals("<", token2.toString());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(3230, javaCharStream0.getEndLine());
      assertEquals(3230, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(3230, javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = Token.newToken(66);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertNull(token3.toString());
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      
      javaParserTokenManager0.SkipLexicalActions(token3);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertArrayEquals(new char[] {'7', '<', 'B', '\u0000', '\u0000'}, charArray0);
      assertNull(token3.toString());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(3230, javaCharStream0.getEndLine());
      assertEquals(3230, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(3230, javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new char[] {'7', '<', 'B', '\u0000', '\u0000'}, charArray0);
      assertNull(token_GTToken0.toString());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(3230, javaCharStream0.getEndLine());
      assertEquals(3230, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(3230, javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)109;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)12, (byte)52, (byte)109}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      
      boolean boolean3 = byteArrayInputStream0.markSupported();
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new byte[] {(byte)12, (byte)52, (byte)109}, byteArray0);
      assertTrue(boolean3);
      assertEquals(3, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)12, 85, (byte)52);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)12, (byte)52, (byte)109}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)12, (byte)52, (byte)109}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(12, token0.beginLine);
      assertEquals(86, token0.endColumn);
      assertEquals(86, token0.beginColumn);
      assertEquals(12, token0.endLine);
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)12, (byte)52, (byte)109}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(86, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(86, javaCharStream0.getEndColumn());
      assertEquals("4", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)12, (byte)52, (byte)109}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(86, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(86, javaCharStream0.getEndColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(87, token1.endColumn);
      assertEquals(12, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(87, token1.beginColumn);
      assertEquals(12, token1.beginLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)12, (byte)52, (byte)109}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(87, javaCharStream0.getEndColumn());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(87, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals("m", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new byte[] {(byte)12, (byte)52, (byte)109}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(87, javaCharStream0.getEndColumn());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(87, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getEndLine());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(12, token2.endLine);
      assertEquals(87, token2.endColumn);
      assertEquals(12, token2.beginLine);
      assertEquals(87, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertArrayEquals(new byte[] {(byte)12, (byte)52, (byte)109}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(87, javaCharStream0.getEndColumn());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(87, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 86);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 86. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = '<';
      charArray0[2] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {' ', '<', '6', '\u0000', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-67);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-93);
      boolean boolean1 = JavaCharStream.staticFlag;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 3230, 31, '<');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {' ', '<', '6', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {' ', '<', '6', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(88, token0.kind);
      assertEquals(3230, token0.beginLine);
      assertEquals(32, token0.endColumn);
      assertEquals(32, token0.beginColumn);
      assertEquals(3230, token0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertArrayEquals(new char[] {' ', '<', '6', '\u0000', '\u0000'}, charArray0);
      assertEquals("<", token0.toString());
      assertEquals(3230, javaCharStream0.getEndLine());
      assertEquals(3230, javaCharStream0.getLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(3230, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getBeginColumn());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(33, token1.beginColumn);
      assertEquals(66, token1.kind);
      assertEquals(3230, token1.beginLine);
      assertEquals(3230, token1.endLine);
      assertEquals(33, token1.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {' ', '<', '6', '\u0000', '\u0000'}, charArray0);
      assertEquals("6", token1.toString());
      assertEquals(3230, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(3230, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals(3230, javaCharStream0.getBeginLine());
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {' ', '<', '6', '\u0000', '\u0000'}, charArray0);
      assertEquals(3230, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(3230, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals(3230, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3230, column 34.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)112, (byte)19, (byte)112, (byte)112, (byte)112}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 3, (byte)112, (-1846));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)112, (byte)19, (byte)112, (byte)112, (byte)112}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)112, (byte)19, (byte)112, (byte)112, (byte)112}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(112, token0.endColumn);
      assertEquals(3, token0.beginLine);
      assertEquals(112, token0.beginColumn);
      assertEquals(3, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)112, (byte)19, (byte)112, (byte)112, (byte)112}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals("p", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)112, (byte)19, (byte)112, (byte)112, (byte)112}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      
      token0.specialToken = null;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals("p", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3, column 113.  Encountered: \"\\u0013\" (19), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '2';
      charArray0[1] = '<';
      charArray0[2] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'2', '<', 'T', '\u0000', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-67);
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-93);
      boolean boolean1 = JavaCharStream.staticFlag;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 3230, 31, '<');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'2', '<', 'T', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'2', '<', 'T', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)33, (byte)39, (byte)39, (byte) (-67), (byte)0, (byte)78, (byte) (-69), (byte) (-93)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      byteArrayInputStream0.mark(1484);
      assertArrayEquals(new byte[] {(byte)33, (byte)39, (byte)39, (byte) (-67), (byte)0, (byte)78, (byte) (-69), (byte) (-93)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'2', '<', 'T', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(31, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(31, token0.endColumn);
      assertEquals(3230, token0.endLine);
      assertEquals(3230, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'2', '<', 'T', '\u0000', '\u0000'}, charArray0);
      assertEquals("2", token0.toString());
      assertEquals(3230, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(3230, javaCharStream0.getLine());
      assertEquals(3230, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'2', '<', 'T', '\u0000', '\u0000'}, charArray0);
      assertEquals(3230, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(3230, javaCharStream0.getLine());
      assertEquals(3230, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(32, token1.beginColumn);
      assertEquals(3230, token1.endLine);
      assertEquals(32, token1.endColumn);
      assertEquals(88, token1.kind);
      assertEquals(3230, token1.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'2', '<', 'T', '\u0000', '\u0000'}, charArray0);
      assertEquals("<", token1.toString());
      assertEquals(3230, javaCharStream0.getEndLine());
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(3230, javaCharStream0.getLine());
      assertEquals(3230, javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = '*';
      charArray0[5] = '*';
      charArray0[6] = '*';
      charArray0[7] = '*';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'*', '*', '*', '*', '*', '*', '*', '*'}, charArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-90);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)40, (byte) (-90)}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 115, 115, (byte)40);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)40, (byte) (-90)}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)40, (byte) (-90)}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-4081), (-391));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'*', '*', '*', '*', '*', '*', '*', '*'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream1.nextCharInd = 2425;
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, 1500, (-1), 51);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)40, (byte) (-90)}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4, byteArrayInputStream0.available());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)40, (byte) (-90)}, byteArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4, byteArrayInputStream0.available());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(107, token0.kind);
      assertEquals(1500, token0.endLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals((-1), token0.endColumn);
      assertEquals(1500, token0.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)40, (byte) (-90)}, byteArray0);
      assertEquals(1500, javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(1500, javaCharStream0.getLine());
      assertEquals(1500, javaCharStream0.getBeginLine());
      assertEquals("^", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1500, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(107, token1.kind);
      assertEquals(1500, token1.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)40, (byte) (-90)}, byteArray0);
      assertEquals(1500, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1500, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1500, javaCharStream0.getBeginLine());
      assertEquals("^", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals(1500, token2.beginLine);
      assertEquals(1500, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertArrayEquals(new byte[] {(byte)94, (byte)94, (byte)40, (byte) (-90)}, byteArray0);
      assertEquals(1500, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1500, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1500, javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '6';
      charArray0[3] = '<';
      charArray0[4] = '6';
      charArray0[5] = ':';
      charArray0[7] = '6';
      charArray0[8] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'<', '<', '6', '<', '6', ':', '\u0000', '6', '<'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 7, (-50), 1356);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'<', '<', '6', '<', '6', ':', '\u0000', '6', '<'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'<', '<', '6', '<', '6', ':', '\u0000', '6', '<'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertArrayEquals(new char[] {'<', '<', '6', '<', '6', ':', '\u0000', '6', '<'}, charArray0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new char[] {'<', '<', '6', '<', '6', ':', '\u0000', '6', '<'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager1.jjmatchedPos = 430;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-50), token0.beginColumn);
      assertEquals((-49), token0.endColumn);
      assertEquals(7, token0.endLine);
      assertEquals(7, token0.beginLine);
      assertEquals(109, token0.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertArrayEquals(new char[] {'<', '<', '6', '<', '6', ':', '\u0000', '6', '<'}, charArray0);
      assertEquals("<<", token0.toString());
      assertEquals(7, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getEndLine());
      assertEquals((-50), javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getBeginLine());
      assertEquals((-49), javaCharStream0.getColumn());
      assertEquals((-49), javaCharStream0.getEndColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals((-48), token1.endColumn);
      assertEquals(7, token1.endLine);
      assertEquals((-48), token1.beginColumn);
      assertEquals(7, token1.beginLine);
      assertEquals(66, token1.kind);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token1);
      assertArrayEquals(new char[] {'<', '<', '6', '<', '6', ':', '\u0000', '6', '<'}, charArray0);
      assertEquals("6", token1.toString());
      assertEquals(7, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getEndLine());
      assertEquals((-48), javaCharStream0.getEndColumn());
      assertEquals((-48), javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getBeginLine());
      assertEquals((-48), javaCharStream0.getColumn());
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertArrayEquals(new char[] {'<', '<', '6', '<', '6', ':', '\u0000', '6', '<'}, charArray0);
      assertEquals(7, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getEndLine());
      assertEquals((-48), javaCharStream0.getEndColumn());
      assertEquals((-48), javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getBeginLine());
      assertEquals((-48), javaCharStream0.getColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaCharStream1.UpdateLineColumn('<');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      char[] charArray0 = new char[23];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)105;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)105, (byte)105, (byte) (-14), (byte)105, (byte) (-14), (byte)105, (byte)105}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)105, 16, 1055);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)105, (byte)105, (byte) (-14), (byte)105, (byte) (-14), (byte)105, (byte)105}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      long long0 = byteArrayInputStream0.skip((-1517L));
      assertArrayEquals(new byte[] {(byte)105, (byte)105, (byte) (-14), (byte)105, (byte) (-14), (byte)105, (byte)105}, byteArray0);
      assertEquals(0L, long0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)105, (byte)105, (byte) (-14), (byte)105, (byte) (-14), (byte)105, (byte)105}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte)105, (byte)105, (byte) (-14), (byte)105, (byte) (-14), (byte)105, (byte)105}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 105, column 23.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'t', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 31, 2644, 2644);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new char[] {'t', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new char[] {'t', '\u0000'}, charArray0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(2644, token0.endColumn);
      assertEquals(31, token0.endLine);
      assertEquals(31, token0.beginLine);
      assertEquals(2644, token0.beginColumn);
      assertNotNull(token0);
      assertArrayEquals(new char[] {'t', '\u0000'}, charArray0);
      assertEquals(2644, javaCharStream0.getBeginColumn());
      assertEquals(2644, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getLine());
      assertEquals(2644, javaCharStream0.getEndColumn());
      assertEquals("t", token0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'t', '\u0000'}, charArray0);
      assertEquals(2644, javaCharStream0.getBeginColumn());
      assertEquals(2644, javaCharStream0.getColumn());
      assertEquals(31, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getLine());
      assertEquals(2644, javaCharStream0.getEndColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 31, column 2646.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }
}
