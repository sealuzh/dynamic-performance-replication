/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 16:19:33 GMT 2018
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&-%cOtp!Sv");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KD=T+30");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qrvN");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<a|m+5x7]pz#=B");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_DOCUMENT");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader1.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("l+flWf&NWN|\"HwL{VN");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<\"M),>txZTsv{");
      stringReader0.close();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      int int0 = jsonReader0.peeked;
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n9o'Vt=)/zZs");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=A ])B)");
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BOOLEAN");
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StringReader stringReader0 = new StringReader("BOOLEAN");
      stringReader0.markSupported();
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader1.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextString();
      stringReader0.ready();
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was END_DOCUMENT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("<\"M)y>txZTkv{");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.peeked = 15;
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      String string0 = jsonReader0.nextString();
      assertEquals("0", string0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte)0);
      byteArrayInputStream0.skip((byte) (-1));
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      double double0 = jsonReader0.nextDouble();
      assertEquals(2.0, double0, 0.01);
      
      byteArrayInputStream0.markSupported();
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$");
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = ' ';
      charArray0[2] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[1] = '4';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = '4';
      charArray0[6] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$");
      char[] charArray0 = new char[5];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '4';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[2] = 'b';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      charArrayReader0.markSupported();
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.peeked = 126;
      jsonReader0.isLenient();
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Nd'3(Y *<");
      StringReader stringReader1 = new StringReader("Nd'3(Y *<");
      char[] charArray0 = new char[2];
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader1 = new StringReader("com.google.gson.internal.JsonReaderInternalAccess");
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = '[';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      stringReader1.read(charArray0);
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      jsonReader1.hasNext();
      // Undeclared exception!
      try { 
        jsonReader1.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)7;
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.nextInt();
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)7;
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'd';
      charArray0[0] = 'f';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = 'e';
      charArray0[2] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      try { 
        jsonReader1.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("j'[");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[7];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!|x4");
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.peeked = (-2151);
      jsonReader0.skipValue();
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.getPath();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader2.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.getPath();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '!';
      charArray0[3] = '6';
      jsonReader0.setLenient(true);
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("r*7b9kV'CB@pC'v");
      StringReader stringReader1 = new StringReader("r*7b9kV'CB@pC'v");
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.setLenient(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      jsonReader0.getPath();
      jsonReader0.peek();
      jsonReader0.toString();
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.getPath();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      jsonReader0.nextLong();
      try { 
        jsonReader2.endArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<\"M)y>txZTkv{");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '8';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = '2';
      char[] charArray1 = new char[5];
      charArray1[0] = ' ';
      charArray1[1] = '2';
      charArray1[2] = '/';
      charArray1[3] = ' ';
      charArray1[4] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      JsonReader jsonReader2 = new JsonReader(charArrayReader0);
      try { 
        jsonReader1.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("#7O;");
      StringReader stringReader1 = new StringReader(" (h-zg3)ld[W/9m;vJD");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      StringReader stringReader2 = new StringReader("#7O;");
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      StringReader stringReader1 = new StringReader("Q,:,{BHC");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.toString();
      jsonReader0.hasNext();
      jsonReader0.getPath();
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("_");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.nextString();
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was END_DOCUMENT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%v4'j&=$*v+$~=Pm");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%v4'j&=$*v+$~=Pm");
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<\"M)y>txZTkv{");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.toString();
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      charArrayReader1.mark(0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      
      long long0 = charArrayReader2.skip(0);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = 'e';
      charArray0[2] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'4', 'e', ' ', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'4', 'e', ' ', '\u0000'}, charArray0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      int int0 = charArrayReader0.read();
      assertEquals(52, int0);
      assertArrayEquals(new char[] {'4', 'e', ' ', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'4', 'e', ' ', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = 'e';
      charArray0[2] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'4', 'e', ' ', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'4', 'e', ' ', '\u0000'}, charArray0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'4', 'e', ' ', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(C_8l48w5Lr");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<\"M)y>txZTkv{");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      StringReader stringReader1 = new StringReader("<\"M)y>txZTkv{");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(string0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(boolean1);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(boolean1 == boolean0);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.setLenient(false);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jsonReader0.peeked = (-3268);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean2 = jsonReader0.isLenient();
      assertFalse(boolean2);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean3 = jsonReader0.hasNext();
      assertTrue(boolean3);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 17, 38);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-11), byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read();
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-11), byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(6, byteArrayInputStream1.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(6, byteArrayInputStream1.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)10, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jsonReader0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(6, byteArrayInputStream1.available());
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 2 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<\"M)y>txZTkv{");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BEGIN_OBJECT at line 1 column 14 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.mark(0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader1);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotNull(pushbackReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader0.isLenient());
      
      int int0 = charArrayReader0.read();
      assertEquals(123, int0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      jsonReader0.beginObject();
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JpR'");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      charArrayReader0.mark(2676);
      assertArrayEquals(new char[] {'{', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'{', '^', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6a:OOr");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, (byte)17);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      // Undeclared exception!
      try { 
        lineNumberReader0.skip((-33L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // skip() value is negative
         //
         verifyException("java.io.LineNumberReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JpR'");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', 'M', 'M', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', 'M', 'M', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      long long0 = charArrayReader1.skip((-681L));
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'{', 'M', 'M', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JpR'");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = "w@ZR8";
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w@ZR8");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'{', 'M', 'M', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader1);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertNotNull(jsonReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.mark((-3819));
      assertArrayEquals(new char[] {'{', '\u0000'}, charArray0);
      
      charArrayReader0.mark(0);
      assertArrayEquals(new char[] {'{', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '\u0000'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader1);
      assertArrayEquals(new char[] {'{', '\u0000'}, charArray0);
      assertNotNull(pushbackReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertArrayEquals(new char[] {'{', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader0.isLenient());
      
      int int0 = charArrayReader0.read();
      assertEquals(123, int0);
      assertArrayEquals(new char[] {'{', '\u0000'}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D_1[");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'z'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'z'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'z'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertArrayEquals(new char[] {'z'}, charArray0);
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<\"M)y>txZTkv{");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      StringReader stringReader1 = new StringReader("<\"M)y>txZTkv{");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(string0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(boolean1);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(boolean1 == boolean0);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.setLenient(false);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jsonReader0.peeked = (-3268);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean2 = jsonReader0.isLenient();
      assertFalse(boolean2);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JpR'");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      charArrayReader0.mark('{');
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      long long0 = charArrayReader1.skip('{');
      assertEquals(7L, long0);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.BEGIN_OBJECT, jsonToken0);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6a:OOr");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("(C_8l|8w5Kr");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertNotNull(jsonReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader0.isLenient());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      jsonReader0.setLenient(true);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(string0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.STRING, jsonToken0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6a:OOr");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("(C_8l|8w5Kr");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertNotNull(jsonReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader0.isLenient());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      jsonReader0.setLenient(true);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(jsonReader0.isLenient());
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader1, (byte)17);
      assertNotNull(lineNumberReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      // Undeclared exception!
      try { 
        lineNumberReader0.skip((-33L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // skip() value is negative
         //
         verifyException("java.io.LineNumberReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'0', '0'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'0', '0'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'0', '0'}, charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertArrayEquals(new char[] {'0', '0'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      charArrayReader1.mark(0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader2);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotNull(pushbackReader0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(jsonReader0.isLenient());
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.BEGIN_OBJECT, jsonToken0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(jsonReader0.isLenient());
      
      int int0 = charArrayReader1.read();
      assertEquals(123, int0);
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      
      jsonReader0.beginObject();
      assertArrayEquals(new char[] {'{', '{'}, charArray0);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<\"M)y>txZTkv{");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 13 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[24];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HCHhJ_6g");
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      long long0 = charArrayReader0.skip(2080L);
      assertEquals(24L, long0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 's';
      charArray1[1] = 'p';
      charArray1[2] = 'T';
      charArray1[3] = 'T';
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray1);
      assertArrayEquals(new char[] {'s', 'p', 'T', 'T'}, charArray1);
      assertNotNull(charArrayReader2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      
      StringReader stringReader0 = new StringReader("BOOLEAN");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader2);
      assertArrayEquals(new char[] {'s', 'p', 'T', 'T'}, charArray1);
      assertNotNull(jsonReader0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.close();
      assertArrayEquals(new char[] {'s', 'p', 'T', 'T'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertArrayEquals(new char[] {'s', 'p', 'T', 'T'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotNull(string0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = 'e';
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[2] = '4';
      charArray0[3] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'4', 'e', '4', '4'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'4', 'e', '4', '4'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      int int0 = 4;
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was NUMBER at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6a:OOr");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[0];
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertEquals("6a", string0);
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(string0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JpR'");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JpR'");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'-', '-'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "false");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'-', '-'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D_1[");
      assertFalse(boolean0);
      
      charArray0[0] = '-';
      charArray0[2] = '1';
      StringReader stringReader0 = new StringReader("D_1[");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(";In.BiWo6MQq");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertNotNull(jsonReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'S';
      charArray0[2] = 'a';
      charArray0[3] = 'l';
      charArray0[4] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'F', 'S', 'a', 'l', 't'}, charArray0);
      assertNotNull(charArrayReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertArrayEquals(new char[] {'F', 'S', 'a', 'l', 't'}, charArray0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertArrayEquals(new char[] {'F', 'S', 'a', 'l', 't'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = ' ';
      charArray0[2] = '1';
      charArray0[3] = '_';
      charArray0[4] = 'z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', ' ', '1', '_', 'z'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', ' ', '1', '_', 'z'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\u0000', ' ', '1', '_', 'z'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', ' ', '1', '_', 'z'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertArrayEquals(new char[] {'\u0000', ' ', '1', '_', 'z'}, charArray0);
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', ' ', '1', '_', 'z'}, charArray0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<\"M)y>txZTkv{");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 13 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<\"M)y>txZTkv{");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      try { 
        jsonReader1.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 13 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "NULL";
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      String string0 = "NULL";
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<\"M)y>xZTkv{");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      String string0 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      
      String string1 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(jsonReader0.isLenient());
      
      byte byte0 = (byte)27;
      boolean boolean0 = true;
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 12 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ny>e&Fp#$S+2>lZA\"");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JsonReader at line 1 column 1 path $");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = ']';
      int int0 = 0;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 0, 0);
      assertArrayEquals(new char[] {'-', ']'}, charArray0);
      assertNotNull(charArrayReader0);
      
      String string1 = jsonReader0.nextString();
      assertEquals("Ny>e&Fp", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(jsonReader0.isLenient());
      
      long long0 = charArrayReader0.skip(0);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'-', ']'}, charArray0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader0.reset();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      stringReader0.mark(4773);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      // Undeclared exception!
      try { 
        stringReader0.mark((-126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotNull(string0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(jsonReader0.isLenient());
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertTrue(jsonReader0.isLenient());
      
      String string1 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string1);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotNull(string1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6XJA");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("J`+");
      assertNotNull(stringReader0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J`+");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      charArray0[0] = '#';
      charArray0[1] = '#';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'#', '#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'#', '#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'#', '#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'#', '#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      int int0 = stringReader0.read();
      assertEquals(74, int0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 9 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'C';
      StringReader stringReader0 = new StringReader("com.google.gson.stream.MalformedJsonException");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(10);
      assertEquals(10L, long0);
      
      stringReader0.mark(10);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<\"M)y>txZTkv{");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      String string0 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string1 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'e', 'e'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 13 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      char[] charArray0 = new char[3];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)90;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)78, (byte)44, (byte)78, (byte)78, (byte)9, (byte)90}, byteArray0);
      
      charArray0[0] = ']';
      StringReader stringReader0 = new StringReader("Lp)lGk .Mt");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      
      String string1 = jsonReader0.nextString();
      assertEquals("Lp)lGk", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9!|x4");
      assertFalse(boolean0);
      
      charArray0[4] = '4';
      charArray0[5] = '4';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 14, 34);
      assertArrayEquals(new byte[] {(byte)92, (byte)78, (byte)92, (byte)92}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-10), byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read();
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)92, (byte)78, (byte)92, (byte)92}, byteArray0);
      assertEquals((-10), byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)92, (byte)78, (byte)92, (byte)92}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(4, byteArrayInputStream1.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)92, (byte)78, (byte)92, (byte)92}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(4, byteArrayInputStream1.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)92, (byte)78, (byte)92, (byte)92}, byteArray0);
      assertNotNull(jsonReader0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(jsonReader0.isLenient());
      assertEquals(4, byteArrayInputStream1.available());
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)92, (byte)78, (byte)92, (byte)92}, byteArray0);
      assertNotNull(byteArrayInputStream2);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertEquals(4, byteArrayInputStream2.available());
      
      boolean boolean1 = byteArrayInputStream0.markSupported();
      assertTrue(boolean1);
      assertArrayEquals(new byte[] {(byte)92, (byte)78, (byte)92, (byte)92}, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertFalse(boolean1 == boolean0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-10), byteArrayInputStream0.available());
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JpR'");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D_1[");
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean1 = charArrayReader0.markSupported();
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1 == boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertArrayEquals(new char[] {'{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 8 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<\"My>txZk{");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D_1[");
      assertFalse(boolean0);
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(jsonReader0.isLenient());
      
      stringReader0.reset();
      String string1 = jsonReader0.nextString();
      assertEquals("My>txZk{<", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 13 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      jsonReader0.nextNull();
      assertNotSame(jsonReader0, jsonReader1);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader2 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.isLenient());
      
      JsonReader jsonReader3 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertNotNull(jsonReader3);
      assertFalse(jsonReader3.equals((Object)jsonReader2));
      assertFalse(jsonReader3.equals((Object)jsonReader1));
      assertFalse(jsonReader3.equals((Object)jsonReader0));
      assertFalse(jsonReader3.isLenient());
      
      try { 
        jsonReader3.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.mark(2676);
      assertArrayEquals(new char[] {'{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertArrayEquals(new char[] {'{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected name at line 1 column 2 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '0'}, charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '0'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertArrayEquals(new char[] {'\u0000', '0'}, charArray0);
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '0'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\u0000', '0'}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertTrue(jsonReader0.isLenient());
      
      String string1 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string1);
      assertArrayEquals(new char[] {'\u0000', '0'}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotNull(string1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6XJA");
      assertFalse(boolean0);
      
      charArrayReader0.mark((-172));
      assertArrayEquals(new char[] {'\u0000', '0'}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      
      boolean boolean1 = charArrayReader0.ready();
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'\u0000', '0'}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(boolean1 == boolean0);
      
      long long0 = jsonReader0.nextLong();
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'\u0000', '0'}, charArray0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertTrue(jsonReader0.isLenient());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was END_DOCUMENT at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      char[] charArray0 = new char[26];
      charArray0[8] = '4';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '2';
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray1[1] = 'e';
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      charArray1[2] = '4';
      charArray1[3] = '2';
      charArray0[1] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertArrayEquals(new char[] {'2', 'e', '4', '2'}, charArray1);
      assertNotNull(charArrayReader0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArrayReader0.mark(487);
      assertArrayEquals(new char[] {'2', 'e', '4', '2'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'2', 'e', '4', '2'}, charArray1);
      assertNotNull(jsonReader0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected a long but was 2e42 at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      char[] charArray0 = new char[26];
      charArray0[8] = '4';
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '4';
      charArray1[1] = 'e';
      charArray1[2] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertFalse(charArray0.equals((Object)charArray1));
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertArrayEquals(new char[] {'4', 'e', ' ', '\u0000'}, charArray1);
      assertNotNull(charArrayReader1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      boolean boolean0 = charArrayReader1.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'4', 'e', ' ', '\u0000'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotNull(string0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertTrue(jsonReader0.isLenient());
      
      double double0 = jsonReader0.nextDouble();
      assertEquals(4.0, double0, 0.01);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean1 = charArrayReader1.ready();
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'4', 'e', ' ', '\u0000'}, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertTrue(boolean1 == boolean0);
      
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("$", "RYwS9:<ywR(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"RYwS9:<ywR(\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      StringReader stringReader0 = new StringReader("com.google.gson.stream.MalformMdJsonException");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(17);
      assertEquals(17L, long0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      String string0 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotSame(jsonReader0, jsonReader1);
      assertNotNull(string0);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Expected value");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockFile mockFile0 = new MockFile("", "JsonReader at line 1 column 1 path $");
      assertNotNull(mockFile0);
      assertEquals("JsonReader at line 1 column 1 path $", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canExecute());
      assertEquals("/JsonReader at line 1 column 1 path $", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("FXtN,5x?tNs$X:p");
      assertNotNull(stringReader0);
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StringReader stringReader1 = new StringReader("FXtN,5x?tNs$X:p");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean2 = jsonReader0.hasNext();
      assertTrue(boolean2);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean3 = jsonReader0.hasNext();
      assertTrue(boolean3);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean4 = jsonReader0.hasNext();
      assertTrue(boolean4);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(jsonReader0.isLenient());
      
      stringReader0.reset();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      String string0 = jsonReader0.nextString();
      assertEquals("FXtN", string0);
      assertNotSame(stringReader0, stringReader1);
      assertNotNull(string0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = '^';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("V[p&2");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-22422L));
      assertEquals(0L, long0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.STRING, jsonToken0);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      jsonReader0.setLenient(false);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jsonReader0, jsonReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader1.nextString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)78;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[3] = (byte)78;
      byteArray0[3] = (byte)9;
      StringReader stringReader0 = new StringReader("[m32U$&O`O-ve`HHt");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.BEGIN_ARRAY, jsonToken0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.isLenient());
      
      try { 
        jsonReader1.nextLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("Expected null but was ");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = stringReader0.skip((-55L));
      assertEquals(0L, long0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.STRING, jsonToken0);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean2 = true;
      jsonReader0.close();
      assertTrue(jsonReader0.isLenient());
      
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      char[] charArray0 = new char[8];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      charArray0[1] = '#';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'\u0000', '#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertArrayEquals(new char[] {'\u0000', '#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertArrayEquals(new char[] {'\u0000', '#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was END_DOCUMENT at line 1 column 9 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }
}
