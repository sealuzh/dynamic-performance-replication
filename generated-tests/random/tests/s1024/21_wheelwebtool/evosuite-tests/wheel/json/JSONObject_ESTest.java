/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 13:48:15 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "}";
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      jSONObject0.toString((-1229), (-1229));
      jSONObject0.optLong("~B>lfSb%b[|h");
      Boolean boolean0 = Boolean.FALSE;
      double double0 = (-483.9196338);
      Double double1 = new Double((-483.9196338));
      hashMap0.put(boolean0, double1);
      JSONObject jSONObject1 = jSONObject0.put("}", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("}");
      jSONObject2.optString("~B>lfSb%b[|h", "}");
      Double.isFinite((-2772.3968));
      Double.isFinite(0.0);
      Boolean boolean1 = Boolean.valueOf(true);
      hashMap0.put(boolean1, double1);
      jSONObject0.put("Expected a ',' or '}'", (Object) "Expected a ',' or '}'");
      Double double2 = new Double(0L);
      hashMap0.getOrDefault(double1, double2);
      jSONObject1.toString(10);
      jSONObject2.optString("Substring bounds error", "Substring bounds error");
      try { 
        jSONObject0.getJSONObject("k[Lh>/x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"k[Lh>/x\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".+{eSlbhC*4L>[(";
      stringArray0[1] = "getlongValue";
      stringArray0[2] = "[$q`/_k[La4C ";
      stringArray0[3] = ",";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getJSONObject("Ir;HhJ8eQ^]asNzf</O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ir;HhJ8eQ^]asNzf<\\/O\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((-1158.1));
      Double.min(0.0, (-1158.1));
      hashMap0.put(double0, (Double) null);
      jSONObject0.optLong("isvalueOf");
      Double double1 = new Double((-1.0));
      Double double2 = new Double(4477.243653672);
      hashMap0.put(double1, double2);
      jSONObject0.optBoolean("u~H '\"P4%ALGM");
      jSONObject0.put("u~H '\"P4%ALGM", (Object) ",:]}/\"[{;=#");
      Double.max(0.0, 0.0);
      hashMap0.clear();
      jSONObject0.put(",:]}/\"[{;=#", (-1625));
      JSONObject.valueToString(hashMap0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.valueToString(hashMap0, 3160, 1414);
      try { 
        jSONObject1.getInt("Xs\tQc@J^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Xs\\tQc@J^\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Ft3h:?");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 7 of {Ft3h:?
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rJ;\r";
      stringArray0[1] = "";
      stringArray0[2] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject.quote("d");
      JSONObject jSONObject1 = jSONObject0.putOpt("rJ;\r", "");
      jSONObject1.put("isequals", true);
      Integer integer0 = new Integer((-2398));
      JSONObject.valueToString(integer0);
      jSONObject1.remove("");
      jSONObject0.optBoolean("rJ;\r");
      jSONObject0.put("isnotifyAll", false);
      try { 
        jSONObject1.getJSONArray("&;IT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&;IT\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("xH<NUivnu'a/4VV@w", (Object) "xH<NUivnu'a/4VV@w");
      String string0 = "gettoString";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "xH<NUivnu'a/4VV@w";
      stringArray0[1] = "xH<NUivnu'a/4VV@w";
      String string1 = "U*d\"oO";
      stringArray0[2] = "U*d\"oO";
      JSONObject jSONObject2 = new JSONObject(hashMap0, stringArray0);
      byte byte0 = (byte)76;
      Byte byte1 = new Byte((byte)76);
      JSONObject jSONObject3 = jSONObject2.append("xH<NUivnu'a/4VV@w", byte1);
      jSONObject3.append("xH<NUivnu'a/4VV@w", "gettoString");
      JSONObject.getNames(jSONObject2);
      jSONObject1.append("gettoString", jSONObject0);
      JSONObject.getNames(jSONObject0);
      // Undeclared exception!
      jSONObject1.toString(8, (-396));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "{K'x ha=";
      JSONTokener jSONTokener0 = new JSONTokener("{K'x ha=");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 7 of {K'x ha=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long long0 = new Long(1L);
      JSONObject.numberToString(long0);
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000001", (double) 1L);
      jSONObject0.getDouble("java.lang.Long@0000000001");
      Long.compareUnsigned(0L, 0L);
      Long.divideUnsigned(1L, 1L);
      JSONObject jSONObject2 = jSONObject0.put("getlogicalXor", 1.0);
      String string0 = "' and instead saw '";
      JSONObject jSONObject3 = jSONObject2.put("' and instead saw '", 0L);
      jSONObject3.optString("java.lang.Long@0000000001");
      JSONObject.testValidity(jSONObject0);
      try { 
        jSONObject1.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double((-2446.71345938574));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.names();
      jSONObject0.optLong("false");
      Double.min(1567.84, 1567.84);
      JSONObject jSONObject1 = jSONObject0.put("false", 0L);
      Double.sum((-2446.71345938574), (-2446.71345938574));
      try { 
        jSONObject0.append("false", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[false] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("PB (", 92);
      jSONObject0.put("g.", true);
      JSONObject.quote("PB (");
      jSONObject0.optBoolean("g.");
      try { 
        jSONObject0.getDouble("(9|~,Ah");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(9|~,Ah\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("X", "X");
      jSONObject0.optInt("X", 114);
      jSONObject0.get("X");
      jSONObject0.toString(114, 114);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Set<Integer> set0 = hashMap0.keySet();
      JSONArray jSONArray0 = new JSONArray((Collection) set0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject.valueToString("X", (-891), 34);
      jSONObject0.optInt(",#)u?");
      jSONObject0.getJSONArray("X");
      jSONObject1.optInt(";D|liP");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Y');
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) ";D|liP", (-641), 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      jSONObject0.put("in", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("in");
      jSONObject1.keys();
      int int0 = (-1175);
      jSONObject0.toString((-1175));
      jSONObject1.toString();
      jSONObject0.optBoolean("{\"java.lang.String@0000000003\": {}}");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1175));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Expected '");
      JSONObject jSONObject1 = jSONObject0.put("Expected '", 1L);
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean.compare(true, true);
      Boolean.logicalXor(true, true);
      Boolean.getBoolean("Expected '");
      JSONObject.getNames((Object) boolean0);
      Double double0 = new Double(1L);
      Double.sum((-125.4387), 1804.381885114227);
      jSONObject0.optDouble("Expected a ':' after a key", (double) (-3017));
      jSONObject1.toString(32, (-3017));
      Double.sum((-1.0), 0.0);
      JSONObject.valueToString(double0, 850, 8448);
      jSONObject1.names();
      jSONObject1.names();
      jSONObject1.optDouble("6");
      jSONObject0.toString();
      jSONObject0.names();
      jSONObject0.optJSONArray("6");
      jSONObject1.names();
      jSONObject0.names();
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("PB (", 92);
      jSONObject0.put("g.", false);
      jSONObject0.optBoolean("g.");
      try { 
        jSONObject0.getDouble("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      float float1 = 3074.0F;
      Float.sum(3074.0F, 31.347067F);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)21);
      Short.toUnsignedLong((short)21);
      JSONObject jSONObject1 = jSONObject0.append("JSONObject[", short0);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      jSONObject2.remove("");
      jSONObject0.accumulate("JSONObject[", jSONObject1);
      String string0 = "?VQ0cbhi_ml~qw^=vE";
      try { 
        jSONObject0.getString("?VQ0cbhi_ml~qw^=vE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?VQ0cbhi_ml~qw^=vE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "_/&Pd:W";
      String string0 = "Z>w^/8?;k{K6;/b";
      stringArray0[1] = "Z>w^/8?;k{K6;/b";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("_/&Pd:W", 32);
      jSONObject0.get("_/&Pd:W");
      jSONObject0.append("`XC", "_/&Pd:W");
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put("g9enbgSxvZB%Qk;u<P", double0);
      JSONObject jSONObject2 = jSONObject1.put("g9enbgSxvZB%Qk;u<P", (Map) hashMap0);
      jSONObject2.optInt("`E\"<.m@zx&");
      jSONObject1.toJSONArray((JSONArray) null);
      HashMap<JSONObject, Byte> hashMap1 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject3 = jSONObject1.put("getparseByte", (Map) hashMap1);
      jSONObject0.toString(32);
      jSONObject3.optLong("A<UZI\n~e");
      jSONObject2.put("g9enbgSxvZB%Qk;u<P", 0.0);
      try { 
        jSONObject3.getInt("istoUnsignedInt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoUnsignedInt\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "isnotifyAll";
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject1 = jSONObject0.put("isnotifyAll", (Collection) linkedList0);
      jSONObject1.optDouble("");
      jSONObject0.putOpt("isnotifyAll", linkedList0);
      Byte byte0 = new Byte((byte)12);
      jSONObject1.accumulate("isnotifyAll", byte0);
      jSONObject0.remove("isnotifyAll");
      int int0 = (-1573);
      Integer integer0 = new Integer((-1573));
      try { 
        Integer.decode("isnotifyAll");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"isnotifyAll\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "e,o DiG}0?");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.parallelStream();
      jSONObject0.toString();
      jSONObject0.toString(47);
      Double double0 = new Double(0.0);
      double double1 = 1812.912;
      Double.sum(47, 1812.912);
      linkedList0.add(double0);
      linkedList0.add(double0);
      JSONObject jSONObject1 = jSONObject0.put("e,o DiG}0?", (Collection) linkedList0);
      jSONObject1.keys();
      try { 
        jSONObject0.get("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Map<JSONObject, Boolean> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "ny=-qDw!I\"Doew";
      int int0 = (-680);
      jSONObject0.toString((-18627781), (-680));
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.optBoolean("ny=-qDw!I\"Doew", false);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("HQ2>w<\"LyE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of HQ2>w<\"LyE
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("bmAT`,jk`SQJ", (Object) null);
      jSONObject0.append("JSONObject[", "JSONObject[");
      try { 
        jSONObject0.getLong("istoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2807;
      jSONArray0.optDouble(2807, (double) 2807);
      Float float0 = new Float((-400.0F));
      Float.min(2903, 1.0F);
      float float1 = 1.0F;
      Float.min((-1719.406F), 1.0F);
      jSONArray0.put(2903, (Object) float0);
      jSONArray0.getDouble(2903);
      // Undeclared exception!
      jSONArray0.toString(949, 949);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "toU");
      String string0 = "eZhFs)=Ab7|ita|(E]r";
      jSONObject0.optBoolean("eZhFs)=Ab7|ita|(E]r");
      jSONObject0.put("eZhFs)=Ab7|ita|(E]r", (Object) "toU");
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      // Undeclared exception!
      jSONObject0.toString(1540, 1115);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 3629;
      JSONObject.valueToString((Object) null, 3629, 3629);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("EsU''!$SS4NRB2/,Ld", 16);
      jSONObject0.optInt("EsU''!$SS4NRB2/,Ld");
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalAnd(true, false);
      Boolean.compare(false, false);
      jSONObject1.putOpt("wheel.json.JSONObject", jSONObject0);
      JSONObject.getNames((Object) boolean0);
      // Undeclared exception!
      jSONObject0.toString(47, 1402);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 92;
      String string0 = "#/M3;~/";
      JSONObject jSONObject1 = jSONObject0.accumulate("#/M3;~/", hashMap0);
      try { 
        jSONObject1.getJSONArray("#/M3;~/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#/M3;~/\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte byte0 = (byte)32;
      Byte byte1 = new Byte((byte)32);
      JSONObject jSONObject0 = new JSONObject(byte1);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((int) (byte)32, (Object) byte1);
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = "true";
      jSONObject0.remove("true");
      jSONObject0.optJSONArray("true");
      String string1 = "FXCGi_Xv-T^rx";
      try { 
        jSONObject0.getString("FXCGi_Xv-T^rx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"FXCGi_Xv-T^rx\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(8);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{";
      stringArray0[1] = "$)`@08VC";
      stringArray0[2] = "#";
      stringArray0[3] = "istoHexString";
      stringArray0[4] = "false";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      Integer.compare(52, 59);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      jSONObject0.put("$)`@08VC", (Map) hashMap0);
      JSONObject.testValidity(integer0);
      Integer.min(8, 412);
      JSONObject jSONObject1 = jSONObject0.put("#", (double) 8);
      jSONObject1.optDouble("wheel.json.JSONObject$Null", (-1.0));
      StringWriter stringWriter0 = new StringWriter(48);
      jSONObject0.write(stringWriter0);
      jSONObject0.put("] is not a JSONObject.", 52);
      String string0 = "wbHI$]kAr8llVpSQ1k~";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of JSONArray[
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("Expected '", (Object) null);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      try { 
        jSONObject0.getJSONObject("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("getdecode", (Collection) linkedList0);
      jSONObject0.optInt("getdecode", 14);
      JSONObject jSONObject1 = jSONObject0.putOpt("getdecode", "getdecode");
      jSONObject0.isNull("getdecode");
      jSONObject0.optJSONArray("getdecode");
      String string0 = "4v4S|}$RbRJ;Un,v";
      jSONObject0.optDouble("4v4S|}$RbRJ;Un,v");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "[";
      jSONObject0.remove("[");
      jSONObject0.put("%TGZCN28yx];", 745.0055);
      try { 
        jSONObject0.getJSONObject("%TGZCN28yx];");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%TGZCN28yx];\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Boolean boolean0 = new Boolean("$P");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$P";
      stringArray0[1] = "$P";
      stringArray0[2] = "$P";
      stringArray0[3] = "$P";
      stringArray0[4] = "$P";
      stringArray0[5] = "$P";
      stringArray0[6] = "$P";
      stringArray0[7] = "o yUWi#Ad(~";
      Boolean.logicalXor(false, true);
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.keys();
      jSONObject0.toString((-254));
      jSONObject0.optLong("|Y");
      JSONObject jSONObject1 = jSONObject0.put("ishashCode", (Object) "o yUWi#Ad(~");
      jSONObject1.put("|Y", true);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      JSONObject jSONObject2 = jSONObject0.put("{}", 92);
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      Double double0 = new Double(453.205);
      Double.isFinite(3741.6115555594);
      Double.max(1.0, 0.0);
      Double.min(0.0, 0.0);
      Double.isFinite((-1.0));
      hashMap0.put(double0, "getwait");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("(8^TfFs4F1");
      JSONObject.doubleToString(Double.NaN);
      jSONObject0.has("wheel.json.JSONObject$1");
      jSONObject0.append("APO", "wheel.json.JSONObject$1");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "GD!{}PC]SEwb\"pL";
      stringArray0[1] = "GD!{}PC]SEwb\"pL";
      stringArray0[2] = "GD!{}PC]SEwb\"pL";
      stringArray0[3] = "GD!{}PC]SEwb\"pL";
      stringArray0[4] = "GD!{}PC]SEwb\"pL";
      stringArray0[5] = "GD!{}PC]SEwb\"pL";
      stringArray0[6] = "GD!{}PC]SEwb\"pL";
      JSONObject jSONObject0 = new JSONObject("GD!{}PC]SEwb\"pL", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("GD!{}PC]SEwb\"pL", (-153.898736));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject2 = jSONObject1.put("getrotateLeft", (Collection) linkedList0);
      String string0 = "getgetClass";
      JSONObject jSONObject3 = jSONObject2.put("getgetClass", (Object) "GD!{}PC]SEwb\"pL");
      jSONObject3.put("GD!{}PC]SEwb\"pL", (Collection) linkedList0);
      jSONObject3.keys();
      jSONObject3.optBoolean("GD!{}PC]SEwb\"pL");
      jSONObject0.toString();
      JSONObject jSONObject4 = new JSONObject(jSONObject0, stringArray0);
      jSONObject4.toString();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      jSONObject4.put(",\n", (Map) hashMap0);
      jSONObject1.optJSONArray("GD!{}PC]SEwb\"pL");
      try { 
        jSONObject1.getLong("GD!{}PC]SEwb\"pL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"GD!{}PC]SEwb\\\"pL\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONObject.getNames((Object) null);
      String string0 = "sum";
      JSONObject jSONObject0 = new JSONObject((Object) "sum");
      String string1 = "Expected a ',' or '}'";
      try { 
        jSONObject0.getJSONArray("sum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sum\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optJSONObject("java.lang.Long@00000000070");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1);
      try { 
        jSONArray0.put((-1), Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "H1 <v8";
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      JSONObject jSONObject1 = new JSONObject(byte1);
      JSONObject.valueToString(jSONObject1, (byte)0, (byte)0);
      try { 
        jSONObject1.getString("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000003\\\": \\\"java.lang.Class@0000000004\\\"}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "pLr&2:S|2i6;w #\\o";
      jSONObject0.opt("pLr&2:S|2i6;w #o");
      try { 
        jSONObject0.get("pLr&2:S|2i6;w #o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pLr&2:S|2i6;w #o\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = " at character ";
      stringArray0[1] = " at character ";
      stringArray0[2] = " at character ";
      stringArray0[3] = " at character ";
      JSONObject jSONObject0 = new JSONObject(" at character ", stringArray0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.length();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      jSONObject0.put(".fA!`>G}f", (Map) hashMap0);
      boolean boolean0 = jSONObject0.has("7hM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject.valueToString(double0);
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("isdoubleToRawLongBits");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isdoubleToRawLongBits\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      Byte byte0 = new Byte((byte)30);
      Byte.toUnsignedLong((byte)30);
      hashMap0.putIfAbsent(byte0, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("istoString", false);
      jSONObject0.put("u7,v3|\"\"x", false);
      JSONObject jSONObject1 = jSONObject0.put("istoString", (-721L));
      String[] stringArray0 = new String[9];
      stringArray0[1] = "istoString";
      stringArray0[2] = "par";
      stringArray0[3] = "istoString";
      stringArray0[4] = "istoString";
      stringArray0[5] = "par";
      stringArray0[6] = "istoString";
      jSONObject1.optDouble("istoString", (double) (-721L));
      stringArray0[7] = "wHu_(lVmew";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      hashMap0.put((Byte) null, jSONObject2);
      JSONObject jSONObject3 = jSONObject1.put("par", 3693);
      jSONObject3.optLong("'", (long) 3693);
      Object object0 = jSONObject3.remove("istoString");
      assertEquals(3, jSONObject1.length());
      assertEquals((-721L), object0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "{U-5++#$O37%AlH";
      JSONTokener jSONTokener0 = new JSONTokener("{U-5++#$O37%AlH");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 15 of {U-5++#$O37%AlH
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      Byte byte0 = new Byte((byte)30);
      Byte.toUnsignedLong((byte)30);
      hashMap0.putIfAbsent(byte0, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("istoString", false);
      jSONObject0.put("u7,v3|\"\"x", false);
      JSONObject jSONObject1 = jSONObject0.put("istoString", (-721L));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "istoString";
      stringArray0[1] = "istoString";
      stringArray0[2] = "par";
      stringArray0[3] = "istoString";
      stringArray0[4] = "istoString";
      stringArray0[5] = "par";
      stringArray0[6] = "istoString";
      jSONObject1.optDouble("istoString", (double) (-721L));
      stringArray0[7] = "wHu_(lVmew";
      stringArray0[8] = "istoString";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      hashMap0.put((Byte) null, jSONObject2);
      JSONObject jSONObject3 = jSONObject1.put("par", 3693);
      jSONObject3.optLong("'", (long) 3693);
      Object object0 = jSONObject3.remove("istoString");
      assertEquals(3, jSONObject1.length());
      assertEquals((-721L), object0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Long long0 = new Long(0L);
      Long.compareUnsigned((-2897L), (-88L));
      Long.sum(0L, (-1L));
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.keys();
      JSONObject.valueToString(jSONObject0, (-1), (-1));
      Float float0 = new Float(0.0);
      jSONObject0.append("get", float0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Double double0 = new Double(3140.528537);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.max((-2062.6), (-214.718));
      Double.max(0.0, 2075.64208797);
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("isdecode", (Map) hashMap0);
      hashMap0.put(jSONObject0, jSONObject0);
      boolean boolean0 = true;
      jSONObject1.put("isdecode", true);
      String string0 = ">";
      boolean boolean1 = true;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      String string0 = "] is not a number.";
      stringArray0[0] = "] is not a number.";
      String string1 = "Yn;.t*?T";
      stringArray0[1] = "Yn;.t*?T";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("] is not a number.");
      String string2 = "bf0";
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(true);
      jSONObject1.putOpt("bf0", boolean1);
      String string3 = "int";
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject2 = jSONObject0.put("int", (Map) hashMap0);
      try { 
        jSONObject2.getBoolean("co");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"co\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("8o[");
      JSONObject.testValidity("8o[");
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = ">S[";
      JSONObject jSONObject0 = new JSONObject((Object) ">S[");
      String string1 = null;
      jSONObject0.optLong((String) null);
      int int0 = (-771);
      try { 
        Long.valueOf((String) null, (-771));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[6];
      Object object1 = JSONObject.NULL;
      String[] stringArray1 = JSONObject.getNames(object1);
      assertNull(stringArray1);
      
      stringArray0[0] = "L2,hAm%LCsI7Jv7K";
      stringArray0[1] = "QlR('~t";
      stringArray0[2] = ",\n";
      stringArray0[3] = "ismax";
      stringArray0[4] = "ismax";
      stringArray0[5] = "Substring bounds error";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = jSONObject1.toString(1092, (-5));
      assertEquals("{}", string0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.sum(140.3196F, 140.3196F);
      JSONObject.numberToString(float0);
      JSONObject.numberToString(float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = 2;
      String string0 = "KLdf]/x\\'^}";
      try { 
        Integer.valueOf("KLdf]/x'^}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"KLdf]/x'^}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      String string0 = "`lOB&KFkeH92QTX/}F";
      jSONObject0.optInt("`lOB&KFkeH92QTX/}F");
      JSONObject jSONObject1 = jSONObject0.putOpt("`lOB&KFkeH92QTX/}F", "min");
      String string1 = "-`M";
      jSONObject1.optDouble("-`M", (double) 0);
      String string2 = "E>_pXy";
      try { 
        jSONObject0.getDouble("`lOB&KFkeH92QTX/}F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`lOB&KFkeH92QTX/}F\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("false");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("[]", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.has(",!`?CUsY[d)1zHk\"");
      JSONObject.quote("{");
      jSONObject0.optInt("5v$2N:H:8`)");
      jSONObject0.opt("{");
      jSONObject0.optBoolean("{", false);
      jSONObject0.optLong("{", (long) 0);
      StringWriter stringWriter0 = new StringWriter(0);
      jSONObject0.write(stringWriter0);
      jSONObject1.optString("false");
      JSONObject.doubleToString(0L);
      jSONObject0.put(",!`?CUsY[d)1zHk\"", (double) 0);
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalOr(true, false);
      Boolean.logicalXor(false, false);
      linkedList0.add(boolean0);
      jSONObject1.optBoolean("", false);
      jSONObject1.optString("0", "");
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.put("\"{\"", object0);
      try { 
        jSONObject2.getString(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Missing value";
      stringArray0[1] = "Missing value";
      stringArray0[2] = "Missing value";
      stringArray0[3] = "Missing value";
      stringArray0[4] = "Missing value";
      stringArray0[5] = "Missing value";
      stringArray0[6] = "Missing value";
      stringArray0[7] = "Missing value";
      stringArray0[8] = "Missing value";
      JSONObject jSONObject0 = new JSONObject("Missing value", stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Double double0 = new Double(3038.82290791766);
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\u0002NqJrog";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("cQ!,/s?o_{RP_/G.k", 42);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject.doubleToString((-2189.12283931869));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("TtWio");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of TtWio
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      HashMap<Boolean, Double> hashMap1 = new HashMap<Boolean, Double>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.optInt("{", (-933));
      jSONObject0.has("{");
      HashMap<Object, JSONObject> hashMap2 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("{", (Map) hashMap2);
      jSONObject1.names();
      jSONObject1.append("", jSONObject0);
      try { 
        jSONObject0.getDouble("GWlQo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"GWlQo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.valueToString(jSONObject1);
      jSONObject0.optJSONArray("istoUnsignedLong");
      jSONObject0.has("dec");
      try { 
        jSONObject0.getJSONArray("@E,?u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@E,?u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      short short0 = (short)457;
      Short short1 = new Short((short)457);
      String string0 = "";
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      jSONObject0.toString(10);
      Float float0 = new Float((double) 10);
      JSONObject jSONObject1 = jSONObject0.append("co", float0);
      jSONObject0.toString();
      String string0 = "%6by/`WkUe{/R";
      jSONObject0.optBoolean("%6by/`WkUe{/R", true);
      jSONObject1.optInt("{}");
      Float.sum(10, 10);
      JSONObject jSONObject2 = jSONObject1.put("Pb/V#g2nV", (double) 10);
      jSONObject2.optLong("Pb/V#g2nV", 648L);
      jSONObject1.put("{\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}", (long) 0);
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject1.accumulate((String) null, "%6by/`WkUe{/R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("wheel.json.JSONObject", 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "3";
      stringArray0[1] = "3";
      stringArray0[2] = "3";
      stringArray0[3] = "3";
      stringArray0[4] = "3";
      JSONObject jSONObject0 = new JSONObject("3", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("3", 0L);
      jSONObject0.get("3");
      jSONObject1.optLong("", 0L);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.clone();
      linkedList0.offerFirst((Boolean) null);
      JSONObject jSONObject2 = jSONObject0.put("3", (Collection) linkedList0);
      jSONObject0.optBoolean("3", false);
      String string0 = jSONObject1.optString("'1ZITf/m~v/g8uV\"m", "'1ZITf/m~v/g8uV\"m");
      jSONObject0.optLong("3");
      jSONObject2.put("3", (-71));
      JSONObject.quote("3");
      jSONObject0.toString(8448, 8448);
      jSONObject1.toString((-71), (-71));
      jSONObject1.opt("3");
      String string1 = jSONObject2.optString("3");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "in";
      JSONObject.getNames((Object) "in");
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 4357;
      Integer integer0 = new Integer(4357);
      String string1 = "{oT";
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.put(integer0, " at character ");
      hashMap0.replaceAll(biFunction0);
      hashMap0.put(integer0, "{oT");
      Object object0 = new Object();
      jSONObject0.put("in", object0);
      JSONObject.testValidity("in");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) null);
      try { 
        Long.valueOf(" at character ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" at character \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer(1566);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.optDouble("Expected a ':' after a key", (double) 1566);
      Boolean boolean0 = new Boolean("getparseBoolean");
      JSONObject.getNames((Object) boolean0);
      JSONObject jSONObject1 = jSONObject0.put("eq", false);
      jSONObject0.toString(115, 51);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      jSONObject1.toString();
      JSONObject.numberToString(integer0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Set<Integer> set0 = hashMap0.keySet();
      jSONObject1.put("] is not a number.", (Collection) set0);
      JSONObject jSONObject2 = jSONObject0.put("{\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}", (Map) hashMap0);
      jSONObject0.has("JSONArray initial value should be a string or collection or array.");
      JSONObject.valueToString((Object) null);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      jSONObject2.optBoolean(" Rnhtw_Rx", true);
      jSONObject1.isNull("9");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      short short0 = (short)19;
      Short short1 = new Short((short)19);
      Short.compare((short)19, (short) (-1));
      Short.toUnsignedInt((short) (-1801));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(short1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }
}
