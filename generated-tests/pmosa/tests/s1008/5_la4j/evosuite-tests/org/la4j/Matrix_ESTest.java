/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 11:30:13 GMT 2018
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.inversion.MatrixInverter;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.MatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 2102;
      int int1 = 3108;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2102, 3108, 2102);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeRow(2102);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2101
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.rank();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket(". Should be: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3230, 3230, 3230);
      int int0 = 367;
      // Undeclared exception!
      try { 
        sparseMatrix0.swapColumns(3230, 367);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3230' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(1, matrix0.rows());
      
      Matrix matrix1 = matrix0.removeFirstRow();
      assertEquals(0, matrix1.rows());
      assertEquals(0, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 20;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(20, 20, 20);
      CCSMatrix cCSMatrix0 = new CCSMatrix(20, 1005, 1005);
      cCSMatrix0.spliterator();
      Vector vector0 = cCSMatrix0.getRow(1005);
      Vector vector1 = vector0.divide(0.0);
      Vector vector2 = vector0.subtract(vector1);
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(20, vector2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 1005. Should be: 20.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2);
      Vector vector0 = null;
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow(2, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 0.0;
      doubleArray0[1] = doubleArray2;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      sparseMatrix0.toColumnVector();
      // Undeclared exception!
      try { 
        sparseMatrix0.copyOfShape(474, (-1703));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 474x-1703
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double double0 = new Integer(5);
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) null, 5, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 212.59382199;
      doubleArray1[2] = 577.15;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 212.59382199;
      doubleArray2[1] = 577.15;
      doubleArray2[2] = 212.59382199;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 2174.906247;
      doubleArray3[1] = 212.59382199;
      doubleArray3[2] = 212.59382199;
      doubleArray3[3] = (-1.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (-1.0);
      doubleArray4[1] = (-1.0);
      doubleArray4[2] = 212.59382199;
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = (-1730.7346784371337);
      doubleArray0[3] = doubleArray4;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(0, 0);
      Matrix matrix0 = rowMajorSparseMatrix0.rotate();
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert(matrix0, 5, 0, 1, (-714), 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: 1, -714
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[][] doubleArray0 = new double[0][9];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      denseMatrix0.update((MatrixFunction) null);
      denseMatrix0.min();
      denseMatrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      try { 
        DenseMatrix.zero(0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      basic2DMatrix0.update(matrixFunction0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      basic2DMatrix0.manhattanNorm();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3230, 3230, 3230);
      Integer integer0 = new Integer(3230);
      // Undeclared exception!
      try { 
        sparseMatrix0.slice(3230, 3230, 2381, 3230);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [3230..2381][3230..3230].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(797, 1238);
      int int0 = 1673;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int1 = (-827);
      // Undeclared exception!
      try { 
        denseMatrix0.sliceTopLeft((-827), 2695);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-827][0..2695].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.diagonalProduct();
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 478;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(478, 478, 478);
      Matrix matrix0 = rowMajorSparseMatrix0.removeLastRow();
      int int1 = (-725);
      MatrixOperation<Double> matrixOperation0 = null;
      matrix0.apply(matrixOperation0);
      matrix0.multiply((Matrix) rowMajorSparseMatrix0);
      Vector vector0 = rowMajorSparseMatrix0.getColumn(int1);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      Matrix matrix1 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      DenseMatrix denseMatrix0 = DenseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, matrix1, matrix0);
      Matrix matrix2 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, denseMatrix0);
      matrix2.iterator();
      matrix2.subtract((double) int0);
      numberFormat0.formatToCharacterIterator(denseMatrix0);
      int int2 = 0;
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(int2, int2, mockRandom0);
      matrix0.toCSV(numberFormat0);
      int int3 = 2081;
      Matrix matrix3 = matrix0.insert((Matrix) denseMatrix0, int3, int0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix3.update(matrixFunction0);
      matrix3.iteratorOfRow(int1);
      Matrix matrix4 = denseMatrix0.multiply((double) int3);
      int int4 = 0;
      rowMajorSparseMatrix0.insert(matrix4, int1, int4);
      int int5 = (-2696);
      Matrix matrix5 = Matrix.random(int3, int5, mockRandom0);
      int int6 = 505;
      denseMatrix0.setRow(int6, vector0);
      VectorAccumulator vectorAccumulator0 = null;
      matrix4.foldRow(int0, vectorAccumulator0);
      rowMajorSparseMatrix0.manhattanNorm();
      SparseMatrix sparseMatrix0 = SparseMatrix.random(int0, int1, (double) int5, (Random) mockRandom0);
      denseMatrix0.add((Matrix) sparseMatrix0);
      matrix5.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        Matrix.zero((-47), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, (-189.911589424415));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 392;
      doubleArray0[2] = (-189.911589424415);
      doubleArray0[3] = (double) 392;
      doubleArray0[4] = (double) 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(392, 0, doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.copyOfColumns(0);
      assertTrue(matrix0.equals((Object)columnMajorSparseMatrix0));
      
      Vector vector0 = denseMatrix0.getColumn(0);
      vector0.euclideanNorm();
      columnMajorSparseMatrix0.setRow(392, vector0);
      Matrix matrix1 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      matrix1.toRowVector();
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertTrue(columnMajorSparseMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CRSMatrix cRSMatrix0 = new CRSMatrix(1713, 1713, 10, doubleArray0, (int[]) null, (int[]) null);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstColumn();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2734.73591136;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 375;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-2065.3672);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 375;
      doubleArray0[7] = (double) 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 375, doubleArray0);
      int int0 = 0;
      sparseMatrix0.iteratorOfRow(0);
      sparseMatrix0.blankOfShape(0, 0);
      sparseMatrix0.toString();
      Matrix matrix0 = sparseMatrix0.removeFirstColumn();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      matrix0.transformColumn(5, vectorFunction0);
      matrix0.trace();
      matrix0.toMatrixMarket();
      // Undeclared exception!
      try { 
        sparseMatrix0.sliceBottomRight(375, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [375..0][0..375].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = cRSMatrix0.rank();
      assertEquals(0, int0);
      
      double double0 = cRSMatrix0.trace();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformColumn((-2029), vectorFunction0);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2938);
      // Undeclared exception!
      try { 
        sparseMatrix0.minInColumn(2938);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2938' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 4991;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.unit(4991, 4991);
      NumberFormat numberFormat0 = null;
      // Undeclared exception!
      try { 
        basic2DMatrix0.toCSV(numberFormat0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      Matrix matrix0 = sparseMatrix0.multiply((double) 0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.EIGEN;
      sparseMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      sparseMatrix0.toString();
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      DenseVector denseVector0 = DenseVector.zero(0);
      SparseVector sparseVector0 = SparseVector.fromCSV("");
      ooPlaceVectorHadamardProduct0.applySymmetric(denseVector0, sparseVector0);
      sparseMatrix0.setColumn(0, (Vector) sparseVector0);
      SparseMatrix sparseMatrix1 = sparseMatrix0.toSparseMatrix();
      String string0 = matrix0.toCSV();
      assertEquals("", string0);
      assertTrue(matrix0.equals((Object)sparseMatrix0));
      
      sparseMatrix1.transpose();
      assertTrue(sparseMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 8.65997447028344;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      assertEquals(3, matrix0.columns());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      String string0 = matrix0.toCSV((NumberFormat) decimalFormat0);
      assertEquals("8.66, 0, 0\n   0, 1, 0\n   0, 0, 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      doubleArray0[2] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      CRSMatrix cRSMatrix0 = (CRSMatrix)matrix0.removeRow(0);
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)matrix0.insertColumn(0, sparseVector0);
      assertEquals(4, cRSMatrix1.cardinality());
      
      String string0 = matrix0.mkString("HB(", "");
      assertEquals("1.000   0.0000.000HB(0.000-195.7420.000HB(0.000   0.0000.000HB(", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      doubleArray0[2] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      matrix0.removeRow(0);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, (-1.0));
      // Undeclared exception!
      try { 
        cRSMatrix0.insertColumn((-1745), sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.insertColumn(17, (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      rowMajorSparseMatrix0.spliterator();
      boolean boolean0 = rowMajorSparseMatrix0.equals((Matrix) cRSMatrix0, 3124.250974);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, (-189.911589424415));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 392;
      doubleArray0[2] = (-189.911589424415);
      doubleArray0[3] = (double) 392;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(392, 0, doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.copyOfColumns(0);
      Vector vector0 = denseMatrix0.getColumn(0);
      vector0.euclideanNorm();
      columnMajorSparseMatrix0.setRow(392, vector0);
      matrix0.toCSV();
      columnMajorSparseMatrix0.transpose();
      denseMatrix0.equals(matrix0, 0.0);
      // Undeclared exception!
      try { 
        denseMatrix0.sliceBottomRight(5, 392);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [5..0][392..0].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 1238;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(797, 1238);
      assertEquals(1238, denseMatrix0.columns());
      assertEquals(797, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      int int1 = 6;
      Matrix matrix0 = Matrix.zero(6, 797);
      double double0 = (-2333.39630861);
      Matrix matrix1 = denseMatrix0.multiply(double0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.QR;
      matrix1.withDecompositor(linearAlgebra_DecompositorFactory0);
      String string0 = null;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromMatrixMarket(string0);
      Matrix matrix2 = rowMajorSparseMatrix0.rotate();
      matrix2.toString();
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      DenseVector denseVector0 = DenseVector.zero(int0);
      String string1 = "GAUSS_JORDAN";
      SparseVector sparseVector0 = SparseVector.fromCSV(string1);
      ooPlaceVectorHadamardProduct0.applySymmetric(denseVector0, sparseVector0);
      int int2 = 30;
      Vector vector0 = denseMatrix0.getRow(int1);
      denseMatrix0.setColumn(int2, vector0);
      matrix1.toSparseMatrix();
      matrix0.toCSV();
      matrix1.transpose();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      Matrix matrix0 = basic2DMatrix0.multiply((-668.526));
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.getRow((-3568));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3568
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) columnMajorSparseMatrix0, (SparseMatrix) columnMajorSparseMatrix0);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix0);
      
      double[][] doubleArray0 = new double[2][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.zero(0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      doubleArray0[0] = doubleArray1;
      int int1 = (-1540);
      // Undeclared exception!
      try { 
        Matrix.random(0, (-1540), (Random) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 2819;
      DenseMatrix denseMatrix0 = DenseMatrix.zero(2819, 2819);
      assertEquals(2819, denseMatrix0.columns());
      assertEquals(2819, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      int int1 = (-2147481495);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric(int1, mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      int int0 = 3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(3);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)ooPlaceMatricesAddition0.applySymmetric((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(3, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.3333333333333333, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.3333333333333333, cRSMatrix0.density(), 0.01);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertNotNull(cRSMatrix0);
      
      int int1 = (-513);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.copyOfRows((-513));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -513x3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-177);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-177);
      doubleArray0[6] = 0.0;
      doubleArray0[2] = (double) (-177);
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertEquals(0.375, sparseVector0.density(), 0.01);
      assertEquals(3, sparseVector0.cardinality());
      assertEquals(8, sparseVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, (-177.0), (-177.0), 0.0, (-177.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(sparseVector0);
      
      // Undeclared exception!
      try { 
        Matrix.identity((-177));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.random(10, 10, 1.0, (Random) mockRandom0);
      assertEquals(10, sparseMatrix0.rows());
      assertEquals(0.9, sparseMatrix0.max(), 0.01);
      assertEquals(1.0, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(100, sparseMatrix0.cardinality());
      assertEquals(10, sparseMatrix0.columns());
      assertNotNull(sparseMatrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(0, (-195.741633));
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.maxInColumn(10);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
      
      // Undeclared exception!
      try { 
        sparseMatrix0.copyOfShape(0, (-4269));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-4269
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(28, 0.0);
      assertEquals(28, denseMatrix0.columns());
      assertEquals(28, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      String string0 = denseMatrix0.toMatrixMarket();
      assertEquals(28, denseMatrix0.columns());
      assertEquals(28, denseMatrix0.rows());
      assertNotNull(string0);
      
      Matrix matrix0 = denseMatrix0.multiply(0.0);
      assertEquals(28, denseMatrix0.columns());
      assertEquals(28, denseMatrix0.rows());
      assertEquals(28, matrix0.columns());
      assertEquals(28, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
      
      double[][] doubleArray1 = denseMatrix0.toArray();
      assertEquals(28, denseMatrix0.columns());
      assertEquals(28, denseMatrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertTrue(denseMatrix0.equals((Object)matrix0));
      assertNotNull(doubleArray1);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      MockRandom mockRandom1 = new MockRandom(338);
      assertFalse(mockRandom1.equals((Object)mockRandom0));
      assertNotNull(mockRandom1);
      
      // Undeclared exception!
      try { 
        SparseMatrix.random(338, 2289, (double) 356, (Random) mockRandom1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(19, 1382, 1382);
      assertEquals(19, basic2DMatrix0.rows());
      assertEquals(1382, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) basic2DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 19 rows and 1382 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2734.73591136;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 375;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-2065.3672);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 375;
      doubleArray0[7] = (double) 0;
      SparseMatrix sparseMatrix0 = SparseMatrix.from1DArray(0, 375, doubleArray0);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(375, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertArrayEquals(new double[] {2734.73591136, 0.0, 375.0, 0.0, (-2065.3672), 0.0, 375.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(sparseMatrix0);
      
      VectorIterator vectorIterator0 = sparseMatrix0.iteratorOfRow(0);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(375, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertArrayEquals(new double[] {2734.73591136, 0.0, 375.0, 0.0, (-2065.3672), 0.0, 375.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseMatrix0.blankOfShape(0, 0);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(375, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertArrayEquals(new double[] {2734.73591136, 0.0, 375.0, 0.0, (-2065.3672), 0.0, 375.0, 0.0}, doubleArray0, 0.01);
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
      assertNotNull(cRSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateRow(0, vectorFunction0);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(375, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertArrayEquals(new double[] {2734.73591136, 0.0, 375.0, 0.0, (-2065.3672), 0.0, 375.0, 0.0}, doubleArray0, 0.01);
      assertFalse(sparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)sparseMatrix0.insert((Matrix) cRSMatrix0);
      assertEquals(0, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(Double.NaN, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(375, sparseMatrix0.columns());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(375, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertNotSame(sparseMatrix0, cRSMatrix1);
      assertNotSame(sparseMatrix0, cRSMatrix0);
      assertNotSame(cRSMatrix0, sparseMatrix0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, sparseMatrix0);
      assertArrayEquals(new double[] {2734.73591136, 0.0, 375.0, 0.0, (-2065.3672), 0.0, 375.0, 0.0}, doubleArray0, 0.01);
      assertFalse(sparseMatrix0.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix0.equals((Object)sparseMatrix0));
      assertTrue(cRSMatrix1.equals((Object)sparseMatrix0));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(5, (-109.8));
      assertEquals(5, cRSMatrix0.cardinality());
      assertEquals(0.2, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals((-109.8), cRSMatrix0.min(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(5, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(5, 2262, 5);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(2262, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(5, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 5 rows and 2262 cols at 0, 0 in a 5x5 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      int int0 = (-611);
      // Undeclared exception!
      try { 
        cRSMatrix0.sliceBottomRight((-611), (-611));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-611' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 212.59382199;
      doubleArray1[2] = 577.15;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[17];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 212.59382199;
      doubleArray2[1] = 577.15;
      doubleArray2[2] = 212.59382199;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        denseMatrix0.sliceTopLeft(6, 2300);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = 2234;
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.constant(2234, 2234, 2197.218077);
      assertEquals(2234, basic2DMatrix0.columns());
      assertEquals(2234, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      int int1 = 499;
      int int2 = 2;
      // Undeclared exception!
      try { 
        basic2DMatrix0.slice(int0, int1, int0, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [2234..2234][499..2].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      assertEquals(2, denseVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      assertEquals(2, denseVector0.length());
      assertEquals(2, matrix0.columns());
      assertEquals(2, matrix0.rows());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(matrix0);
      
      int int0 = 9;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateRow(9, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4991);
      assertEquals(4991, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(4991, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(4991, cCSMatrix0.columns());
      assertEquals(2.003606491685033E-4, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInRow((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(797, 1238);
      assertEquals(797, denseMatrix0.rows());
      assertEquals(1238, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.fromCSV("");
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotSame(matrix0, denseMatrix0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1673, 17);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(17, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1673, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.removeColumn(4431);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..16
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      assertEquals(2, denseVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseVector0);
      
      int int0 = 3;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(3, 1673);
      assertEquals(1673, denseMatrix0.columns());
      assertEquals(3, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        denseMatrix0.foldRow(824, (VectorAccumulator) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      assertEquals(4, denseVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      assertEquals(4, denseVector0.length());
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(matrix0);
      
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      OoPlaceVectorsAddition ooPlaceVectorsAddition1 = new OoPlaceVectorsAddition();
      assertFalse(ooPlaceVectorsAddition1.equals((Object)ooPlaceVectorsAddition0));
      assertNotNull(ooPlaceVectorsAddition1);
      
      Vector vector0 = ooPlaceVectorsAddition1.apply(denseVector0, denseVector0);
      assertEquals(4, denseVector0.length());
      assertEquals(4, vector0.length());
      assertNotSame(denseVector0, vector0);
      assertNotSame(ooPlaceVectorsAddition1, ooPlaceVectorsAddition0);
      assertNotSame(vector0, denseVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(ooPlaceVectorsAddition1.equals((Object)ooPlaceVectorsAddition0));
      assertTrue(vector0.equals((Object)denseVector0));
      assertNotNull(vector0);
      
      Matrix matrix1 = matrix0.insertRow(0, vector0);
      assertEquals(4, denseVector0.length());
      assertEquals(4, matrix0.columns());
      assertEquals(4, matrix0.rows());
      assertEquals(4, vector0.length());
      assertEquals(5, matrix1.rows());
      assertEquals(4, matrix1.columns());
      assertNotSame(denseVector0, vector0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(ooPlaceVectorsAddition1, ooPlaceVectorsAddition0);
      assertNotSame(vector0, denseVector0);
      assertNotSame(matrix1, matrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(denseVector0.equals((Object)vector0));
      assertFalse(ooPlaceVectorsAddition1.equals((Object)ooPlaceVectorsAddition0));
      assertTrue(vector0.equals((Object)denseVector0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      doubleArray0[2] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertEquals(0.6666666666666666, sparseVector0.density(), 0.01);
      assertEquals(3, sparseVector0.length());
      assertEquals(2, sparseVector0.cardinality());
      assertArrayEquals(new double[] {1.0, (-195.741633), 0.0}, doubleArray0, 0.01);
      assertNotNull(sparseVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toDiagonalMatrix();
      assertEquals(0.6666666666666666, sparseVector0.density(), 0.01);
      assertEquals(3, sparseVector0.length());
      assertEquals(2, sparseVector0.cardinality());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals((-195.741633), cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertArrayEquals(new double[] {1.0, (-195.741633), 0.0}, doubleArray0, 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeRow(0);
      assertEquals(0.6666666666666666, sparseVector0.density(), 0.01);
      assertEquals(3, sparseVector0.length());
      assertEquals(2, sparseVector0.cardinality());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals((-195.741633), cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix1.cardinality());
      assertEquals(0.16666666666666666, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals((-195.741633), cRSMatrix1.min(), 0.01);
      assertEquals(3, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(2, cRSMatrix1.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertArrayEquals(new double[] {1.0, (-195.741633), 0.0}, doubleArray0, 0.01);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.insertColumn(0, sparseVector0);
      assertEquals(0.6666666666666666, sparseVector0.density(), 0.01);
      assertEquals(3, sparseVector0.length());
      assertEquals(2, sparseVector0.cardinality());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals((-195.741633), cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(3, cRSMatrix2.rows());
      assertEquals((-195.741633), cRSMatrix2.min(), 0.01);
      assertEquals(4, cRSMatrix2.columns());
      assertEquals(4, cRSMatrix2.cardinality());
      assertEquals(0.3333333333333333, cRSMatrix2.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(1.0, cRSMatrix2.max(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertArrayEquals(new double[] {1.0, (-195.741633), 0.0}, doubleArray0, 0.01);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      
      CRSMatrix cRSMatrix3 = (CRSMatrix)cRSMatrix0.copyOfColumns(0);
      assertEquals(0.6666666666666666, sparseVector0.density(), 0.01);
      assertEquals(3, sparseVector0.length());
      assertEquals(2, sparseVector0.cardinality());
      assertEquals(3, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals((-195.741633), cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix3.density(), 0.01);
      assertEquals(0, cRSMatrix3.columns());
      assertEquals(0, cRSMatrix3.cardinality());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(3, cRSMatrix3.rows());
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertArrayEquals(new double[] {1.0, (-195.741633), 0.0}, doubleArray0, 0.01);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix2));
      assertNotNull(cRSMatrix3);
      
      double[][] doubleArray1 = new double[6][4];
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-195.741633);
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1.0;
      doubleArray1[4] = doubleArray3;
      doubleArray1[5] = doubleArray0;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(doubleArray1);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(6, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.hadamardProduct(cRSMatrix3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 6x0 does not equal to 3x0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "";
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.updateRow((-1690), vectorFunction0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      int int0 = (-2147481460);
      int int1 = (-2366);
      CCSMatrix cCSMatrix1 = null;
      try {
        cCSMatrix1 = new CCSMatrix((-2147481466), (-2147481460), (-2366));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2147481466x-2147481460
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      int int0 = 0;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      double double0 = columnMajorSparseMatrix0.sum();
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeRow(37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cCSMatrix0.non(matrixPredicate0);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = (-2147480214);
      org.evosuite.runtime.Random.setNextRandom((-2147480214));
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      int int1 = 37;
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(37, 0.0, (Random) null);
      assertEquals(37, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(37, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatricesMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      assertEquals(37, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(37, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(37, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(37, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotNull(cRSMatrix1);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix1.non(matrixPredicate0);
      ooPlaceMatricesMultiplication0.ensureApplicableTo(cRSMatrix0, cRSMatrix1);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeColumn((-2147480221));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..36
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, (-189.911589424415));
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      int int0 = 392;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 392;
      doubleArray0[2] = (-189.911589424415);
      doubleArray0[3] = (double) 392;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(392, 0, doubleArray0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(392, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertArrayEquals(new double[] {0.0, 392.0, (-189.911589424415), 392.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.copyOfColumns(0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(392, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(392, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertArrayEquals(new double[] {0.0, 392.0, (-189.911589424415), 392.0, 0.0}, doubleArray0, 0.01);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix0);
      
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      double double0 = cCSMatrix0.foldNonZero(matrixAccumulator0);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(392, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(392, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 392.0, (-189.911589424415), 392.0, 0.0}, doubleArray0, 0.01);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      
      BasicVector basicVector0 = (BasicVector)denseMatrix0.getColumn(0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, basicVector0.length());
      assertNotNull(basicVector0);
      
      double double1 = basicVector0.euclideanNorm();
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, basicVector0.length());
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      columnMajorSparseMatrix0.setRow(392, (Vector) basicVector0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(392, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, basicVector0.length());
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertArrayEquals(new double[] {0.0, 392.0, (-189.911589424415), 392.0, 0.0}, doubleArray0, 0.01);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      
      String string0 = cCSMatrix0.toCSV();
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(392, columnMajorSparseMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(392, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      assertArrayEquals(new double[] {0.0, 392.0, (-189.911589424415), 392.0, 0.0}, doubleArray0, 0.01);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Matrix.block(denseMatrix0, denseMatrix0, columnMajorSparseMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.constant(0, 0, (-189.911589424415));
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 709.2433604282719;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      assertEquals(1, denseVector0.length());
      assertArrayEquals(new double[] {709.2433604282719}, doubleArray0, 0.01);
      assertNotNull(denseVector0);
      
      int int0 = 3;
      DenseMatrix denseMatrix1 = DenseMatrix.unit(1673, 0);
      assertEquals(1673, denseMatrix1.rows());
      assertEquals(0, denseMatrix1.columns());
      assertNotSame(denseMatrix1, denseMatrix0);
      assertFalse(denseMatrix1.equals((Object)denseMatrix0));
      assertNotNull(denseMatrix1);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.block(denseMatrix1, denseMatrix1, denseMatrix0, denseMatrix0);
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(1673, denseMatrix1.rows());
      assertEquals(0, denseMatrix1.columns());
      assertEquals(1673, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertNotSame(denseMatrix0, denseMatrix1);
      assertNotSame(denseMatrix1, denseMatrix0);
      assertNotSame(denseMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotSame(basic2DMatrix0, denseMatrix1);
      assertFalse(denseMatrix0.equals((Object)denseMatrix1));
      assertFalse(denseMatrix1.equals((Object)denseMatrix0));
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertTrue(basic2DMatrix0.equals((Object)denseMatrix1));
      assertNotNull(basic2DMatrix0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.foldRow(383, (VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(0, (double) 0, (Random) null);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertNotNull(columnMajorSparseMatrix0);
      
      double double0 = columnMajorSparseMatrix0.diagonalProduct();
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, double0, 0.01);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertNotNull(decimalFormat0);
      
      Locale locale1 = Locale.KOREAN;
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("kor", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      DecimalFormat decimalFormat1 = (DecimalFormat)NumberFormat.getNumberInstance(locale1);
      assertEquals("", locale1.getISO3Country());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals(1, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat1.toPattern());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertTrue(decimalFormat1.isGroupingUsed());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat1.getGroupingSize());
      assertEquals(3, decimalFormat1.getMaximumFractionDigits());
      assertEquals("", decimalFormat1.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat1.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals("-", decimalFormat1.getNegativePrefix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertNotSame(locale1, locale0);
      assertNotSame(decimalFormat1, decimalFormat0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertNotNull(decimalFormat1);
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertNotNull(parsePosition0);
      
      Double double1 = new Double(0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      String string0 = columnMajorSparseMatrix0.mkString((NumberFormat) decimalFormat0, "", "");
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertNotSame(locale0, locale1);
      assertNotSame(decimalFormat0, decimalFormat1);
      assertEquals("", string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertNotNull(string0);
      
      double double2 = columnMajorSparseMatrix0.trace();
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.multiply((-1222.0));
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertTrue(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)columnMajorSparseMatrix0.power(0);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotSame(cCSMatrix1, columnMajorSparseMatrix0);
      assertTrue(columnMajorSparseMatrix0.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix1.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 507;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(507);
      assertEquals(507, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(507, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0019723865877712033, cCSMatrix0.density(), 0.01);
      assertEquals(507, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      int int1 = 2156;
      // Undeclared exception!
      cCSMatrix0.power(2156);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Object) "[2Q");
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.power((-3222));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -3222.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3230, 3230, 3230);
      assertEquals(3230, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(3230, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertNotNull(sparseMatrix0);
      
      Matrix matrix0 = sparseMatrix0.copy();
      matrix0.slice(23, 5, 3230, 23);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.hadamardProduct(denseMatrix0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.multiply((Matrix) cRSMatrix1);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      
      cRSMatrix0.hashCode();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3230, 230);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(230, rowMajorSparseMatrix0.columns());
      assertEquals(0.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, rowMajorSparseMatrix0.cardinality());
      assertEquals(3230, rowMajorSparseMatrix0.rows());
      assertNotNull(rowMajorSparseMatrix0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 230;
      doubleArray0[1] = (double) 230;
      doubleArray0[2] = (double) 230;
      doubleArray0[3] = (double) 230;
      doubleArray0[4] = (double) 230;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertEquals(5, sparseVector0.length());
      assertEquals(5, sparseVector0.cardinality());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertArrayEquals(new double[] {230.0, 230.0, 230.0, 230.0, 230.0}, doubleArray0, 0.01);
      assertNotNull(sparseVector0);
      
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.multiply((Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vector should have the same length as number of columns in the given matrix: 5 does not equal to 230.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      assertNotNull(ooPlaceMatricesAddition0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 392;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = (double) 392;
      doubleArray0[3] = (-2970.628);
      doubleArray0[4] = (double) 392;
      doubleArray0[5] = (double) 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 9;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 9;
      intArray1[1] = 392;
      intArray1[2] = 392;
      intArray1[3] = 9;
      intArray1[4] = 0;
      intArray1[5] = 9;
      intArray1[6] = 9;
      CCSMatrix cCSMatrix0 = new CCSMatrix(392, 0, 0, doubleArray0, intArray0, intArray1);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(392, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertArrayEquals(new double[] {392.0, 0.5, 392.0, (-2970.628), 392.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {9}, intArray0);
      assertArrayEquals(new int[] {9, 392, 392, 9, 0, 9, 9}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(cCSMatrix0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)cCSMatrix0.rotate();
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(392, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(392, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new double[] {392.0, 0.5, 392.0, (-2970.628), 392.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {9}, intArray0);
      assertArrayEquals(new int[] {9, 392, 392, 9, 0, 9, 9}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(9, 9);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(392, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(392, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(9, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new double[] {392.0, 0.5, 392.0, (-2970.628), 392.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {9}, intArray0);
      assertArrayEquals(new int[] {9, 392, 392, 9, 0, 9, 9}, intArray1);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(cRSMatrix1);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray1 = cRSMatrix1.foldRows(vectorAccumulator0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(392, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(392, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(9, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(9, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new double[] {392.0, 0.5, 392.0, (-2970.628), 392.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new int[] {9}, intArray0);
      assertArrayEquals(new int[] {9, 392, 392, 9, 0, 9, 9}, intArray1);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(659, 2392, 2392);
      assertEquals(2392, cRSMatrix0.columns());
      assertEquals(659, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.swapColumns((-373), 214);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-373' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copy();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      // Undeclared exception!
      try { 
        cRSMatrix1.blankOfColumns(Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.multiplyByItsTranspose();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 3610;
      intArray0[1] = 1978;
      intArray0[2] = (-758);
      intArray0[3] = 77;
      intArray0[4] = 17;
      intArray0[5] = 4;
      // Undeclared exception!
      try { 
        cRSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3610' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 214;
      doubleArray0[1] = (double) 214;
      doubleArray0[2] = (double) 390;
      doubleArray0[3] = (double) 2043;
      doubleArray0[4] = (double) 390;
      doubleArray0[5] = (double) 390;
      doubleArray0[6] = (double) (-373);
      Matrix matrix0 = Matrix.from1DArray(1000, 390, doubleArray0);
      assertEquals(1000, matrix0.rows());
      assertEquals(390, matrix0.columns());
      assertArrayEquals(new double[] {214.0, 214.0, 390.0, 2043.0, 390.0, 390.0, (-373.0)}, doubleArray0, 0.01);
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        matrix0.removeRow(358);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      cRSMatrix0.swapColumns(7, 7);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      
      double double0 = cRSMatrix0.minInColumn(17);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 17);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(17, denseVector0.length());
      assertNotNull(denseVector0);
      
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(17, denseVector0.length());
      assertEquals(1, matrix0.rows());
      assertEquals(17, matrix0.columns());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.multiply(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 0 does not equal to 17.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 212.59382199;
      doubleArray1[2] = 577.15;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[17];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 212.59382199;
      doubleArray2[1] = 577.15;
      doubleArray2[2] = 212.59382199;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      assertEquals(3, denseMatrix0.columns());
      assertEquals(4, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      int int0 = 1996;
      Matrix matrix0 = Matrix.from1DArray(2300, 1996, doubleArray1);
      assertEquals(2300, matrix0.rows());
      assertEquals(1996, matrix0.columns());
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 212.59382199, 577.15}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(matrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.foldColumn(2323, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      String string0 = cRSMatrix0.toCSV();
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals("", string0);
      assertNotNull(string0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copy();
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      int int0 = 2123;
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix1, 2123, 2123, (-58), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -58x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3230, 3230, 3230);
      assertEquals(3230, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(3230, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertNotNull(sparseMatrix0);
      
      sparseMatrix0.toColumnMajorSparseMatrix();
      MockRandom mockRandom0 = new MockRandom(753L);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric((-1), (double) 753L, (Random) mockRandom0);
      sparseMatrix0.copy();
      int int0 = (-2682);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInColumn(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4991, 4991);
      assertEquals(4991, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(4991, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(4991, (double) 92);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4991' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(5, 5, 5);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(5, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 281;
      doubleArray0[1] = (double) (-3410);
      doubleArray0[2] = (double) 281;
      doubleArray0[3] = (double) 5;
      int int0 = cRSMatrix0.rank();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(5, cRSMatrix0.rows());
      assertEquals(0, int0);
      
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 281;
      doubleArray0[6] = (double) (-3410);
      doubleArray0[7] = (double) 5;
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(281, (-3410), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 281x-3410
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      int int0 = Double.SIZE;
      assertEquals(64, int0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(64, 64);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(64, columnMajorSparseMatrix0.columns());
      assertEquals(64, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      columnMajorSparseMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-416.8223788234);
      doubleArray1[2] = 540.116073539065;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 540.116073539065;
      doubleArray2[1] = 540.116073539065;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2.0;
      doubleArray3[1] = 540.116073539065;
      doubleArray3[2] = (-416.8223788234);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1635.774516762;
      doubleArray4[2] = 2.0;
      doubleArray4[3] = (-416.8223788234);
      doubleArray4[4] = (-416.8223788234);
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (-416.8223788234);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 2.0;
      doubleArray5[1] = 2.0;
      doubleArray5[2] = 1635.774516762;
      doubleArray5[3] = (-416.8223788234);
      doubleArray5[4] = 2.0;
      doubleArray5[5] = 2.0;
      doubleArray5[6] = (-416.8223788234);
      doubleArray5[7] = (-416.8223788234);
      doubleArray5[8] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 540.116073539065;
      doubleArray6[2] = (-416.8223788234);
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (-416.8223788234);
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 1635.774516762;
      doubleArray6[7] = 2.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      
      doubleArray7[0] = 1635.774516762;
      doubleArray7[1] = 2.0;
      doubleArray7[2] = 540.116073539065;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (-416.8223788234);
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 0.0;
      doubleArray8[4] = (-416.8223788234);
      doubleArray8[5] = 960.9445694;
      doubleArray0[7] = doubleArray8;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(8, matrix0.rows());
      assertEquals(3, matrix0.columns());
      assertNotNull(matrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.kroneckerProduct(matrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(8, matrix0.rows());
      assertEquals(3, matrix0.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertNotNull(decimalFormatSymbols0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("real", decimalFormatSymbols0);
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-real", decimalFormat0.getNegativePrefix());
      assertEquals("real", decimalFormat0.getPositivePrefix());
      assertEquals("real#", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("real#", decimalFormat0.toLocalizedPattern());
      assertNotNull(decimalFormat0);
      
      String string0 = decimalFormatSymbols0.getNaN();
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals("\uFFFD", string0);
      assertNotNull(string0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfColumns(636);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(636, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      cRSMatrix1.ensureDimensionsAreCorrect(380, 636);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(636, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      
      double double0 = cRSMatrix1.infinityNorm();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(636, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      
      cRSMatrix1.setColumn((-1738), (double) 380);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(636, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      
      boolean boolean0 = cRSMatrix1.equals((Matrix) cRSMatrix0, 0.0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(636, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(boolean0);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.multiplyByItsTranspose();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      
      // Undeclared exception!
      try { 
        cRSMatrix1.apply((MatrixOperation<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = denseMatrix0.copy();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      VectorIterator vectorIterator0 = cRSMatrix0.iteratorOfColumn(2266);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(vectorIterator0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.power(1398);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.power(8);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(4991, 2);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(4991, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(2, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = cCSMatrix0.non(advancedMatrixPredicate0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(4991, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(2, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(2392, 2392, 1530);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(2392, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(2392, sparseMatrix0.rows());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertNotNull(sparseMatrix0);
      
      int int0 = NumberFormat.FRACTION_FIELD;
      assertEquals(1, int0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = cCSMatrix0.foldColumns(vectorAccumulator0);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = cCSMatrix0.non(advancedMatrixPredicate0);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = cRSMatrix0.foldColumns(vectorAccumulator0);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.swapRows(759, (-3500));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 760
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      cRSMatrix0.swapRows(817, 817);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      
      Matrix matrix0 = cRSMatrix0.add((double) 817);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(189, 1983, 189);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(189, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1983, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      MatrixInverter matrixInverter0 = cRSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(189, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1983, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(matrixInverter0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.mkString((NumberFormat) null, (String) null, "Shoul");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      int int0 = NumberFormat.FRACTION_FIELD;
      assertEquals(1, int0);
      
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 403, 384);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(403, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      Object object0 = cCSMatrix0.apply(matrixOperation0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(403, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertNull(object0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = cCSMatrix0.non(advancedMatrixPredicate0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(403, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cCSMatrix0, 403, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 403 rows and 1 cols at 0, 0 in a 0x0 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      Matrix matrix0 = Matrix.constant(693, 1412, (-2144.823412072738));
      assertEquals(693, matrix0.rows());
      assertEquals(1412, matrix0.columns());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 667;
      Matrix matrix0 = Matrix.constant(667, 667, 1203.69375306374);
      assertEquals(667, matrix0.columns());
      assertEquals(667, matrix0.rows());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      matrix0.manhattanNorm();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        Matrix.unit((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.shuffle();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      // Undeclared exception!
      try { 
        Matrix.diagonal((-2535), (-2535));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.fromCSV("");
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = basic2DMatrix0.non(advancedMatrixPredicate0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertTrue(boolean0);
      
      Basic2DMatrix basic2DMatrix1 = (Basic2DMatrix)basic2DMatrix0.rotate();
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertNotNull(basic2DMatrix1);
      
      Basic2DMatrix basic2DMatrix2 = (Basic2DMatrix)basic2DMatrix1.subtract((Matrix) basic2DMatrix0);
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix1.columns());
      assertEquals(0, basic2DMatrix1.rows());
      assertEquals(0, basic2DMatrix2.columns());
      assertEquals(0, basic2DMatrix2.rows());
      assertNotSame(basic2DMatrix0, basic2DMatrix1);
      assertNotSame(basic2DMatrix0, basic2DMatrix2);
      assertNotSame(basic2DMatrix1, basic2DMatrix0);
      assertNotSame(basic2DMatrix1, basic2DMatrix2);
      assertNotSame(basic2DMatrix2, basic2DMatrix0);
      assertNotSame(basic2DMatrix2, basic2DMatrix1);
      assertTrue(basic2DMatrix0.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix1.equals((Object)basic2DMatrix0));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix1));
      assertTrue(basic2DMatrix2.equals((Object)basic2DMatrix0));
      assertNotNull(basic2DMatrix2);
      
      // Undeclared exception!
      try { 
        basic2DMatrix1.fail((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4991);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(2.003606491685033E-4, cRSMatrix0.density(), 0.01);
      assertEquals(4991, cRSMatrix0.columns());
      assertEquals(4991, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4991, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.maxInColumn(30);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(2.003606491685033E-4, cRSMatrix0.density(), 0.01);
      assertEquals(4991, cRSMatrix0.columns());
      assertEquals(4991, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4991, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, double0, 0.01);
      
      cRSMatrix0.toSparseMatrix();
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(9, 32, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cRSMatrix0.is(matrixPredicate0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertFalse(boolean0);
      
      double double0 = cRSMatrix0.determinant();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.removeFirstColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV("0.000");
      assertEquals(1, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertNotNull(matrix0);
      
      Matrix matrix1 = matrix0.copy();
      assertEquals(1, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertEquals(1, matrix1.rows());
      assertEquals(1, matrix1.columns());
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertTrue(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 4991;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4991);
      assertEquals(4991, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(4991, cRSMatrix0.columns());
      assertEquals(4991, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2.003606491685033E-4, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      Matrix matrix0 = Matrix.fromCSV("   ");
      assertEquals(1, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotNull(matrix0);
      
      cRSMatrix0.toSparseMatrix();
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      cRSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int0;
      doubleArray1[3] = (double) int0;
      doubleArray1[4] = (double) int0;
      doubleArray1[5] = (double) int0;
      doubleArray0[0] = doubleArray1;
      Matrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 16;
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix(16, 16);
      assertEquals(16, basic2DMatrix0.columns());
      assertEquals(16, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      int int1 = 34;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(16);
      assertEquals(16, denseMatrix0.columns());
      assertEquals(16, denseMatrix0.rows());
      assertNotSame(denseMatrix0, basic2DMatrix0);
      assertFalse(denseMatrix0.equals((Object)basic2DMatrix0));
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = basic2DMatrix0.blankOfShape(34, 34);
      assertEquals(16, basic2DMatrix0.columns());
      assertEquals(16, basic2DMatrix0.rows());
      assertEquals(34, matrix0.rows());
      assertEquals(34, matrix0.columns());
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertNotNull(matrix0);
      
      double double0 = matrix0.infinityNorm();
      assertEquals(16, basic2DMatrix0.columns());
      assertEquals(16, basic2DMatrix0.rows());
      assertEquals(34, matrix0.rows());
      assertEquals(34, matrix0.columns());
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      
      Matrix matrix1 = matrix0.blank();
      assertEquals(16, basic2DMatrix0.columns());
      assertEquals(16, basic2DMatrix0.rows());
      assertEquals(34, matrix0.rows());
      assertEquals(34, matrix0.columns());
      assertEquals(34, matrix1.rows());
      assertEquals(34, matrix1.columns());
      assertNotSame(basic2DMatrix0, matrix1);
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(basic2DMatrix0, denseMatrix0);
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix0, denseMatrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertNotSame(matrix1, basic2DMatrix0);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, denseMatrix0);
      assertFalse(basic2DMatrix0.equals((Object)matrix0));
      assertFalse(basic2DMatrix0.equals((Object)denseMatrix0));
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertFalse(matrix0.equals((Object)basic2DMatrix0));
      assertTrue(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)basic2DMatrix0));
      assertFalse(matrix1.equals((Object)denseMatrix0));
      assertNotNull(matrix1);
      
      Matrix matrix2 = matrix0.add(0.0);
      matrix2.insert((Matrix) basic2DMatrix0);
      matrix2.diagonalProduct();
      int int2 = 285;
      int int3 = (-1721);
      // Undeclared exception!
      try { 
        Matrix.zero(285, (-1721));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2065, 2065);
      assertEquals(4.8426150121065375E-4, cRSMatrix0.density(), 0.01);
      assertEquals(2065, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2065, cRSMatrix0.rows());
      assertEquals(2065, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2065.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double[] doubleArray0 = new double[0];
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(2065, 2065, doubleArray0);
      assertEquals(2065, denseMatrix0.columns());
      assertEquals(2065, denseMatrix0.rows());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(denseMatrix0);
      
      cRSMatrix0.insert((Matrix) denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Basic2DMatrix basic2DMatrix0 = new Basic2DMatrix();
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertNotNull(basic2DMatrix0);
      
      Matrix matrix0 = basic2DMatrix0.subtract(182.80563580719);
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotSame(basic2DMatrix0, matrix0);
      assertNotSame(matrix0, basic2DMatrix0);
      assertTrue(matrix0.equals((Object)basic2DMatrix0));
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.insert((Matrix) cRSMatrix1);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.rows());
      assertEquals(0, cRSMatrix2.columns());
      assertEquals(0, cRSMatrix2.cardinality());
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      
      // Undeclared exception!
      try { 
        cRSMatrix2.insert((Matrix) cRSMatrix0, 6, 6, 6, 48, 602, 602);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 6, 48
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 17, 17);
      assertEquals(17, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.shuffle();
      assertEquals(17, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(17, cRSMatrix1.columns());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix1.copyOfColumns(17);
      assertEquals(17, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(17, cRSMatrix1.columns());
      assertEquals(1, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertEquals(17, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
      
      CRSMatrix cRSMatrix3 = (CRSMatrix)cRSMatrix1.blankOfColumns(17);
      assertEquals(17, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(17, cRSMatrix1.columns());
      assertEquals(1, cRSMatrix3.rows());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0.0, cRSMatrix3.min(), 0.01);
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(0, cRSMatrix3.cardinality());
      assertEquals(17, cRSMatrix3.columns());
      assertEquals(0.0, cRSMatrix3.density(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix3);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix3);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-195.741633);
      doubleArray0[2] = 0.0;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertEquals(3, sparseVector0.length());
      assertEquals(0.6666666666666666, sparseVector0.density(), 0.01);
      assertEquals(2, sparseVector0.cardinality());
      assertArrayEquals(new double[] {1.0, (-195.741633), 0.0}, doubleArray0, 0.01);
      assertNotNull(sparseVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toDiagonalMatrix();
      assertEquals(3, sparseVector0.length());
      assertEquals(0.6666666666666666, sparseVector0.density(), 0.01);
      assertEquals(2, sparseVector0.cardinality());
      assertEquals((-195.741633), cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertArrayEquals(new double[] {1.0, (-195.741633), 0.0}, doubleArray0, 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeRow(0);
      assertEquals(3, sparseVector0.length());
      assertEquals(0.6666666666666666, sparseVector0.density(), 0.01);
      assertEquals(2, sparseVector0.cardinality());
      assertEquals((-195.741633), cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(0.16666666666666666, cRSMatrix1.density(), 0.01);
      assertEquals(2, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals((-195.741633), cRSMatrix1.min(), 0.01);
      assertEquals(3, cRSMatrix1.columns());
      assertEquals(1, cRSMatrix1.cardinality());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertArrayEquals(new double[] {1.0, (-195.741633), 0.0}, doubleArray0, 0.01);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.insertColumn(0, sparseVector0);
      assertEquals(3, sparseVector0.length());
      assertEquals(0.6666666666666666, sparseVector0.density(), 0.01);
      assertEquals(2, sparseVector0.cardinality());
      assertEquals((-195.741633), cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(1.0, cRSMatrix2.max(), 0.01);
      assertEquals(4, cRSMatrix2.cardinality());
      assertEquals((-195.741633), cRSMatrix2.min(), 0.01);
      assertEquals(4, cRSMatrix2.columns());
      assertEquals(0.3333333333333333, cRSMatrix2.density(), 0.01);
      assertEquals(3, cRSMatrix2.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertArrayEquals(new double[] {1.0, (-195.741633), 0.0}, doubleArray0, 0.01);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
      
      CRSMatrix cRSMatrix3 = (CRSMatrix)cRSMatrix1.shuffle();
      assertEquals(3, sparseVector0.length());
      assertEquals(0.6666666666666666, sparseVector0.density(), 0.01);
      assertEquals(2, sparseVector0.cardinality());
      assertEquals((-195.741633), cRSMatrix0.min(), 0.01);
      assertEquals(3, cRSMatrix0.columns());
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(3, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.2222222222222222, cRSMatrix0.density(), 0.01);
      assertEquals(0.16666666666666666, cRSMatrix1.density(), 0.01);
      assertEquals(2, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals((-195.741633), cRSMatrix1.min(), 0.01);
      assertEquals(3, cRSMatrix1.columns());
      assertEquals(1, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix3.max(), 0.01);
      assertEquals(3, cRSMatrix3.columns());
      assertEquals((-195.741633), cRSMatrix3.min(), 0.01);
      assertEquals(2, cRSMatrix3.rows());
      assertTrue(cRSMatrix3.isRowMajor());
      assertEquals(0.16666666666666666, cRSMatrix3.density(), 0.01);
      assertEquals(1, cRSMatrix3.cardinality());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix3);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix3);
      assertNotSame(cRSMatrix3, cRSMatrix2);
      assertNotSame(cRSMatrix3, cRSMatrix1);
      assertNotSame(cRSMatrix3, cRSMatrix0);
      assertArrayEquals(new double[] {1.0, (-195.741633), 0.0}, doubleArray0, 0.01);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix2));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix2));
      assertTrue(cRSMatrix3.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix3.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix3);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4991);
      assertEquals(4991, cRSMatrix0.columns());
      assertEquals(4991, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4991, cRSMatrix0.rows());
      assertEquals(2.003606491685033E-4, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      Matrix matrix0 = cRSMatrix0.slice((-5263), 2852, (-1339), 2852);
      cRSMatrix0.multiply(matrix0);
      cRSMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(3230, 3230, 3230);
      assertEquals(3230, sparseMatrix0.columns());
      assertEquals(3230, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertNotNull(sparseMatrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      sparseMatrix0.transformRow(3, vectorFunction0);
      sparseMatrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copy();
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      boolean boolean0 = cRSMatrix1.equals((Object) cRSMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(boolean0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)Matrix.zero(296, 27);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(27, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(296, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.transformRow(398, vectorFunction0);
      cRSMatrix1.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Object) " from a ");
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Matrix.zero(27, (-3608));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cRSMatrix0.non(matrixPredicate0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertFalse(boolean0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copy();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 346;
      doubleArray0[2] = (double) 346;
      doubleArray0[3] = (double) 346;
      doubleArray0[4] = (double) 346;
      doubleArray0[5] = (double) 346;
      doubleArray0[6] = (double) 346;
      doubleArray0[7] = (double) 346;
      doubleArray0[8] = (double) 346;
      int[] intArray0 = new int[8];
      intArray0[0] = 346;
      intArray0[1] = 346;
      intArray0[2] = 346;
      intArray0[3] = 346;
      intArray0[4] = 346;
      intArray0[5] = 346;
      intArray0[6] = 346;
      CRSMatrix cRSMatrix0 = new CRSMatrix(346, 346, 346, doubleArray0, intArray0, intArray0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(346, cRSMatrix0.columns());
      assertEquals(346, cRSMatrix0.rows());
      assertEquals(346, cRSMatrix0.cardinality());
      assertEquals(0.002890173410404624, cRSMatrix0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 346.0, 346.0, 346.0, 346.0, 346.0, 346.0, 346.0, 346.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {346, 346, 346, 346, 346, 346, 346, 0}, intArray0);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.determinant();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 2490;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2490, 2490);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2490, cRSMatrix0.rows());
      assertEquals(2490, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      cRSMatrix0.determinant();
      int int1 = 30;
      cRSMatrix0.setRow(int0, (double) int1);
      cRSMatrix0.setColumn(int1, (double) int1);
      int int2 = 0;
      int int3 = 2472;
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(int2, int3, mockRandom0);
      int int4 = 9;
      cRSMatrix0.copyOfShape(int4, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1, 1);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.determinant();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2, 2, 2);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.determinant();
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CCSMatrix cCSMatrix0 = new CCSMatrix(37, 37);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(37, cCSMatrix0.columns());
      assertEquals(37, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)Matrix.zero(37, 37);
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(37, cCSMatrix1.rows());
      assertEquals(37, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix1.add((Matrix) cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 37x37.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(sparseVector0);
      
      CCSMatrix cCSMatrix0 = new CCSMatrix(2455, 2455);
      assertEquals(2455, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(2455, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      int int0 = 399;
      // Undeclared exception!
      try { 
        cRSMatrix0.insertColumn(399, sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(4, 4);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(4, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(4, cRSMatrix1.rows());
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      double double0 = cRSMatrix1.determinant();
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(4, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(4, cRSMatrix1.rows());
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 13);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.determinant();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(13, 622.9333009269);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(4991, 4991);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(4991, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4991, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Object) "org.la4j.Vector");
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(4991, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4991, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertFalse(boolean0);
      
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4991;
      doubleArray1[1] = (double) 4991;
      doubleArray1[2] = (double) 4991;
      doubleArray1[3] = (double) 4991;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 4991;
      doubleArray3[1] = (double) 4991;
      doubleArray3[2] = (double) 4991;
      doubleArray3[3] = (double) 4991;
      doubleArray3[4] = (double) 4991;
      doubleArray3[5] = (double) 4991;
      doubleArray3[6] = 1.4432899320127035E-13;
      doubleArray3[7] = (double) 4991;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 1.4432899320127035E-13;
      doubleArray4[1] = (double) 4991;
      doubleArray4[2] = (double) 4991;
      doubleArray4[3] = (double) 4991;
      doubleArray4[4] = (double) 4991;
      doubleArray4[5] = (double) 4991;
      doubleArray4[6] = (double) 4991;
      doubleArray4[7] = (double) 4991;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 1.4432899320127035E-13;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      
      doubleArray6[0] = 1.4432899320127035E-13;
      doubleArray6[1] = 1.4432899320127035E-13;
      doubleArray6[2] = 4904.0904235;
      doubleArray6[3] = 1.4432899320127035E-13;
      doubleArray6[4] = 1.4432899320127035E-13;
      doubleArray6[5] = 1.4432899320127035E-13;
      doubleArray6[6] = (-1379.81);
      doubleArray6[7] = 1.4432899320127035E-13;
      doubleArray6[8] = (double) 4991;
      doubleArray0[5] = doubleArray6;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(6, matrix0.rows());
      assertEquals(4, matrix0.columns());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insert(matrix0, 4991, 4991);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 4991 rows and 4991 cols at 0, 0 from a 6x4 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      assertEquals(13, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.07692307692307693, cRSMatrix0.density(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      CCSMatrix cCSMatrix0 = new CCSMatrix(37, 37);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(37, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(37, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      boolean boolean0 = cCSMatrix0.non(advancedMatrixPredicate0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(37, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(37, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        cCSMatrix0.minInRow(37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '37' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4991);
      assertEquals(4991, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2.003606491685033E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(4991, cRSMatrix0.columns());
      assertEquals(4991, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      DenseVector denseVector0 = DenseVector.constant(4991, 1.4432899320127035E-13);
      assertEquals(4991, denseVector0.length());
      assertNotNull(denseVector0);
      
      // Undeclared exception!
      cRSMatrix0.setColumn(92, (double) 92);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transform(matrixFunction0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      cRSMatrix1.setAll(1258.6536453373);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(13);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.07692307692307693, cRSMatrix0.density(), 0.01);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(13, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transform(matrixFunction0);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.07692307692307693, cRSMatrix0.density(), 0.01);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(13, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(13, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(13, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      cRSMatrix0.rank();
      cRSMatrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copy();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      boolean boolean0 = cRSMatrix1.equals((Object) cRSMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(boolean0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix1.transpose();
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix0, cRSMatrix1);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      
      AdvancedMatrixPredicate advancedMatrixPredicate0 = mock(AdvancedMatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(advancedMatrixPredicate0).test(any(org.la4j.Matrix.class));
      int int0 = Double.MIN_EXPONENT;
      assertEquals((-1022), int0);
      
      boolean boolean1 = cCSMatrix1.non(advancedMatrixPredicate0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertFalse(boolean1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copy();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      double double0 = cRSMatrix0.product();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(1.0, double0, 0.01);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      
      String string0 = cRSMatrix1.toMatrixMarket();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n0 0 0\n", string0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(string0);
      
      boolean boolean0 = cRSMatrix1.equals((Object) cRSMatrix0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(boolean0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(28, 28);
      assertEquals(28, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(28, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      int int0 = Double.MIN_EXPONENT;
      assertEquals((-1022), int0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.multiply(0.0);
      assertEquals(28, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(28, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(28, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(28, cRSMatrix1.columns());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      cRSMatrix1.iterator();
      cRSMatrix0.rank();
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.ENGLISH;
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale1);
      decimalFormat0.setGroupingUsed(false);
      cRSMatrix1.toMatrixMarket((NumberFormat) decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copy();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      boolean boolean0 = cRSMatrix0.equals((Object) cRSMatrix1);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(boolean0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      
      double double0 = cRSMatrix0.norm();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertEquals(0.0, double0, 0.01);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix1.copyOfShape(32, 105);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(105, cRSMatrix2.columns());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(32, cRSMatrix2.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix2);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertNotNull(cRSMatrix2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 13);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.blankOfRows(13);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(13, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(13, cRSMatrix1.rows());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.removeFirstColumn();
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(12, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(13, cRSMatrix2.rows());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(4978, 4978, 4978);
      assertEquals(4978, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4978, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4978);
      assertEquals(4978, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(4978, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(4978, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(2.008838891120932E-4, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Object) cCSMatrix0);
      assertEquals(4978, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4978, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4978, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(4978, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(4978, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(2.008838891120932E-4, cCSMatrix0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(4991, 4991, 4991);
      assertEquals(4991, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4991, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4991);
      assertEquals(2.003606491685033E-4, cCSMatrix0.density(), 0.01);
      assertEquals(4991, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(4991, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(4991, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Object) cCSMatrix0);
      assertEquals(4991, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4991, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(2.003606491685033E-4, cCSMatrix0.density(), 0.01);
      assertEquals(4991, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(4991, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(4991, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(boolean0);
      
      cRSMatrix0.removeFirstColumn();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2);
      assertEquals(2, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.5, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertEquals(2, rowMajorSparseMatrix0.rows());
      assertEquals(2, rowMajorSparseMatrix0.cardinality());
      assertNotNull(rowMajorSparseMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.updateColumn(2, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 13, 13);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldRows(vectorAccumulator0);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(doubleArray0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.divide(13);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(13, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(13, cRSMatrix1.rows());
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1174, 4978);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(4978, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1174, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateColumn(799, vectorFunction0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(4978, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1174, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      MatrixOperation<Integer> matrixOperation0 = (MatrixOperation<Integer>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.RowMajorSparseMatrix.class));
      Integer integer0 = cRSMatrix0.apply(matrixOperation0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(4978, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1174, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 4978;
      CRSMatrix cRSMatrix0 = new CRSMatrix(4978, 4978, 4978);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(4978, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4978, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      Locale locale0 = new Locale("^ZvhC5S)lEjR");
      assertEquals("^zvhc5s)lejr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("^zvhc5s)lejr", locale0.getLanguage());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance(locale0);
      assertEquals("^zvhc5s)lejr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("^zvhc5s)lejr", locale0.getLanguage());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertNotNull(decimalFormat0);
      
      String string0 = cRSMatrix0.mkString((NumberFormat) decimalFormat0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(int0);
      cCSMatrix0.equals((Object) string0);
      cRSMatrix0.equals((Object) cCSMatrix0);
      cRSMatrix0.blankOfColumns(int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.zero(Integer.MAX_VALUE, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4978);
      assertEquals(4978, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4978, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2.008838891120932E-4, cRSMatrix0.density(), 0.01);
      assertEquals(4978, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4978);
      assertEquals(2.008838891120932E-4, cCSMatrix0.density(), 0.01);
      assertEquals(4978, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(4978, cCSMatrix0.rows());
      assertEquals(4978, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      cRSMatrix0.equals((Object) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("%%MatrixMarket vector array real\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected object: vector.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(4978, 4978, 4978);
      assertEquals(4978, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4978, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(4978);
      assertEquals(4978, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(4978, cCSMatrix0.rows());
      assertEquals(2.008838891120932E-4, cCSMatrix0.density(), 0.01);
      assertEquals(4978, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      cRSMatrix0.toSparseMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldRows(vectorAccumulator0);
      cRSMatrix0.equals((Object) cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cRSMatrix0.columnMajorIterator();
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(columnMajorMatrixIterator0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.insert((Matrix) cRSMatrix0);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 13, 13);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(13);
      assertEquals(13, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.07692307692307693, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(13, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(13, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Object) columnMajorSparseMatrix0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(13, cRSMatrix0.rows());
      assertEquals(13, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.07692307692307693, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(13, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(13, columnMajorSparseMatrix0.rows());
      assertFalse(boolean0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      CCSMatrix cCSMatrix0 = (CCSMatrix)columnMajorSparseMatrix0.transformRow(1, vectorFunction0);
      assertEquals(13, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.07692307692307693, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(13, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(13, columnMajorSparseMatrix0.rows());
      assertEquals(13, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(13, cCSMatrix0.rows());
      assertEquals(0.07100591715976332, cCSMatrix0.density(), 0.01);
      assertEquals(12, cCSMatrix0.cardinality());
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertFalse(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertNotNull(cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(5, 5, 5);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(5, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.determinant();
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(5, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, double0, 0.01);
      
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(5, (-4387.41));
      assertEquals(5, denseMatrix0.columns());
      assertEquals(5, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) denseMatrix0, (-1488), (-1488), 5, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1488, -1488
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 5;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(5, 5, 5);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(5, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket matrix array real general\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("");
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      Matrix matrix0 = Matrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      assertEquals(0, denseMatrix0.columns());
      assertEquals(0, denseMatrix0.rows());
      assertEquals(0, matrix0.rows());
      assertEquals(0, matrix0.columns());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertTrue(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        matrix0.updateAt(1427, 1427, matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(43, 43, 43);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(43, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(43, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(43);
      assertEquals(43, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.023255813953488372, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(43, columnMajorSparseMatrix0.columns());
      assertEquals(43, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        Matrix.fromMatrixMarket("%%MatrixMarket matrix coordinate real general ");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      double[][] doubleArray0 = new double[7][2];
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(2, matrix0.columns());
      assertEquals(7, matrix0.rows());
      assertNotNull(matrix0);
      
      Matrix matrix1 = matrix0.transpose();
      assertEquals(2, matrix0.columns());
      assertEquals(7, matrix0.rows());
      assertEquals(7, matrix1.columns());
      assertEquals(2, matrix1.rows());
      assertNotSame(matrix0, matrix1);
      assertNotSame(matrix1, matrix0);
      assertFalse(matrix1.equals((Object)matrix0));
      assertNotNull(matrix1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Matrix matrix0 = Matrix.unit(78, 1318);
      assertEquals(1318, matrix0.columns());
      assertEquals(78, matrix0.rows());
      assertNotNull(matrix0);
      
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      MatrixInverter matrixInverter0 = matrix0.withInverter(linearAlgebra_InverterFactory0);
      assertEquals(1318, matrix0.columns());
      assertEquals(78, matrix0.rows());
      assertNotNull(matrixInverter0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 78;
      intArray0[1] = 1318;
      intArray0[2] = 1318;
      intArray0[3] = 78;
      intArray0[4] = 1318;
      intArray0[5] = 78;
      intArray0[6] = 6;
      intArray0[7] = 1318;
      intArray0[8] = 78;
      // Undeclared exception!
      try { 
        matrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(43, 43, 43);
      assertEquals(43, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(43, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertNotNull(sparseVector0);
      
      DenseVector denseVector0 = DenseVector.unit(43);
      assertEquals(43, denseVector0.length());
      assertNotNull(denseVector0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.identity(8);
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      MatrixIterator matrixIterator0 = denseMatrix0.iterator();
      assertEquals(8, denseMatrix0.rows());
      assertEquals(8, denseMatrix0.columns());
      assertNotNull(matrixIterator0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      assertNotNull(ooPlaceVectorsSubtraction0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertNotNull(sparseVector0);
      
      DenseVector denseVector0 = DenseVector.unit(6);
      assertEquals(6, denseVector0.length());
      assertNotNull(denseVector0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.identity(8);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      MatrixIterator matrixIterator0 = denseMatrix0.iterator();
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      assertNotNull(matrixIterator0);
      
      int[] intArray0 = new int[1];
      Matrix matrix0 = denseMatrix0.select(intArray0, intArray0);
      assertEquals(8, denseMatrix0.columns());
      assertEquals(8, denseMatrix0.rows());
      assertEquals(1, matrix0.columns());
      assertEquals(1, matrix0.rows());
      assertNotSame(denseMatrix0, matrix0);
      assertNotSame(matrix0, denseMatrix0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(matrix0.equals((Object)denseMatrix0));
      assertNotNull(matrix0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(20, 20, 20);
      assertEquals(20, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(20, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      MockRandom mockRandom0 = new MockRandom(20);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      Basic2DMatrix basic2DMatrix0 = Basic2DMatrix.randomSymmetric(20, mockRandom0);
      assertEquals(20, basic2DMatrix0.rows());
      assertEquals(20, basic2DMatrix0.columns());
      assertNotNull(basic2DMatrix0);
      
      boolean boolean0 = cRSMatrix0.equals((Object) basic2DMatrix0);
      assertEquals(20, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(20, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(20, basic2DMatrix0.rows());
      assertEquals(20, basic2DMatrix0.columns());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        basic2DMatrix0.insert((Matrix) cRSMatrix0, 32, 20, 2, 20, 32, 1006);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 32, 20
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
