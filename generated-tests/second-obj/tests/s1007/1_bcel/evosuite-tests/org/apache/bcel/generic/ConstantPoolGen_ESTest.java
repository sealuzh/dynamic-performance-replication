/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:31:25 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.ObjectStreamConstants;
import java.lang.reflect.Member;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEW;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(37, (-2950));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantInteger constantInteger0 = new ConstantInteger(37);
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(16, 1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/m_^uq(~N>bM*]>/m_^uq(~N>bM*]>");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      constantMethodHandle0.setReferenceIndex(1);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2, 392);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantLong constantLong0 = new ConstantLong((-338L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantDouble constantDouble0 = new ConstantDouble((-338L));
      constantArray0[2] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      constantPoolGen0.adjustSize();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.THROWABLE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = constantPoolGen0.addClass(objectType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addUtf8("XU&YLA*e4s)J:dBc");
      int int0 = constantPoolGen0.addInteger(168);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.toString();
      constantPoolGen0.lookupNameAndType("%rC-0o", (String) null);
      String string0 = "N)n%]J}J_ti9f";
      constantPoolGen0.addFloat((-658.3817F));
      String string1 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((String) null, "Visiting non-standard PMGClass object", "{a>krT^Kqss`x>@<4U%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.lookupMethodref("7}0'h~V9o}HP$#B", ":", ":");
      assertEquals((-1), int0);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("#");
      constantPoolGen0.size = 2;
      constantPoolGen0.toString();
      constantPoolGen0.lookupFloat(1949.688F);
      constantPoolGen0.lookupClass("#");
      int int0 = Character.MIN_CODE_POINT;
      int int1 = constantPoolGen0.addString("#");
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1277);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong((-803L));
      constantMethodType0.toString();
      constantPoolGen0.addFloat(4188.1143F);
      constantMethodType1.clone();
      constantPoolGen0.addFloat(1979.633F);
      constantPoolGen0.addInterfaceMethodref("CONSTANT_MethodType[16](descriptor_index = 1277)", "=Z@,X$Qpq7M+;!o0[\"I", "CONSTANT_MethodType[16](descriptor_index = 1277)");
      constantPoolGen0.addLong((-803L));
      constantPoolGen0.addClass("CONSTANT_MethodType[16](descriptor_index = 1277)");
      int int0 = constantPoolGen0.addInteger(196);
      assertEquals(11, constantPoolGen0.getSize());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = 3;
      int int0 = constantPoolGen0.addFloat(0.0F);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addString((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(20);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantLong constantLong0 = new ConstantLong(20);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      Method method0 = new Method();
      String string0 = null;
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(method0, (String) null, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2, 2);
      constantNameAndType0.toString();
      constantNameAndType0.copy();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addFieldref("CONSTANT_NameAndType[12](name_index = 2, signature_index = 2)", "CONSTANT_NameAndType[12](name_index = 2, signature_index = 2)", "CONSTANT_NameAndType[12](name_index = 2, signature_index = 2)");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(1096.037916);
      constantPoolGen0.toString();
      int int0 = 3;
      constantPoolGen0.addUtf8("Z48},%)y.Umzqi`86.%f7sT9");
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString((ConstantString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 2);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.setConstant(47, constantMethodHandle0);
      assertEquals(1, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      int int0 = 241;
      ConstantClass constantClass0 = new ConstantClass(241);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantLong constantLong0 = new ConstantLong(241);
      constantArray0[2] = (Constant) constantLong0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Constant[] constantArray0 = new Constant[6];
          String string0 = "' does not implement '";
          ConstantUtf8 constantUtf8_0 = new ConstantUtf8("' does not implement '");
          constantArray0[4] = (Constant) constantUtf8_0;
          ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
          constantArray0[3] = (Constant) constantUtf8_0;
          ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(0, 19);
          ConstantPool constantPool0 = new ConstantPool(constantArray0);
          ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1556)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor139.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(241, 241);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantString constantString0 = new ConstantString(241);
      constantArray0[4] = (Constant) constantString0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(46, 46);
      constantNameAndType0.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2, 2);
      constantNameAndType0.toString();
      constantNameAndType0.copy();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(0L);
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addLong(0L);
      constantPoolGen0.addClass("tVND0");
      constantPoolGen0.lookupNameAndType("tVND0", "/iC_f%s~e");
      constantPoolGen0.getSize();
      constantPoolGen0.addDouble(5);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantDouble constantDouble0 = new ConstantDouble((-1));
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      constantPoolGen0.addDouble((-1));
      constantPoolGen0.lookupUtf8("/iC_f%s~e");
      constantPoolGen0.adjustSize();
      int int0 = constantPoolGen0.lookupString("");
      assertEquals(10, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addInteger(0);
      constantPoolGen0.addFieldref("=Z@,X$Qpq7M+;!o0[\"I", "=Z@,X$Qpq7M+;!o0[\"I", "=Z@,X$Qpq7M+;!o0[\"I");
      constantPool0.copy();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(250, 250);
      Constant constant0 = constantNameAndType0.copy();
      constant0.toString();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constant0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("&4OG", "&4OG", "&4OG");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int0 = Member.PUBLIC;
      constantPoolGen0.addInteger(0);
      String string0 = Constants.ILLEGAL_OPCODE;
      Integer integer0 = new Integer(4);
      ConstantPool constantPool1 = constantPool0.copy();
      InstructionList instructionList0 = new InstructionList();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(250, 250);
      constantNameAndType0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-70);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-18);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      try { 
        constantPool1.constantToString((-1083), (byte) (-70));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1083. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble((-1.0));
      constantPoolGen0.addFloat((-858.349F));
      constantPoolGen0.addInteger(1215);
      int int0 = constantPoolGen0.addFloat((-3155.7654F));
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(9, 256);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantMethodHandle0, constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 9, reference_index = 256)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      int int0 = 688;
      ConstantClass constantClass0 = new ConstantClass(688);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.toString();
      int int1 = constantPoolGen0.index;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 688
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFieldref((String) null, "", (String) null);
      constantPoolGen0.adjustSize();
      ConstantString constantString0 = new ConstantString((-1));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantString0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantArray0[0], constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      String string0 = "ql:F203q+P%[k;";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ql:F203q+P%[k;");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3498);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantString constantString0 = new ConstantString(3498);
      constantArray0[2] = (Constant) constantString0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(3498);
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.addLong(0L);
      int int0 = Float.BYTES;
      LDC2_W lDC2_W0 = new LDC2_W(4);
      BasicType basicType0 = Type.INT;
      ArrayType arrayType0 = new ArrayType(basicType0, 4);
      constantPoolGen0.addArrayClass(arrayType0);
      int int1 = constantPoolGen0.lookupLong(4);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-7), (-7));
      constantMethodHandle0.copy();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(250, (-7));
      constantNameAndType0.copy();
      constantMethodHandle0.toString();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantFloat constantFloat0 = new ConstantFloat((-948.72F));
      constantPoolGen0.addLong(1890);
      constantPoolGen0.getSize();
      constantPoolGen0.addLong(1890);
      constantPoolGen0.size = (-7);
      int int0 = constantPoolGen0.lookupString("/q\"7+!T");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = " Targeg len1th: ";
      constantPoolGen0.getFinalConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Constant[] constantArray0 = new Constant[15];
      ConstantDouble constantDouble0 = new ConstantDouble((-250.18060939));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      constantDouble1.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      constantPoolGen0.lookupFieldref("Z48},%)y.Umzqu`86.#%#Z48},%)y.Umzqu`86.", "Z48},%)y.Umzqu`86.#%#Z48},%)y.Umzqu`86.", "Z48},%)y.Umzqu`86.#%#Z48},%)y.Umzqu`86.");
      constantPoolGen0.adjustSize();
      ConstantString constantString0 = new ConstantString(1865);
      constantPoolGen0.addClass("if_icmpge");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Double.SIZE;
      constantPoolGen0.getFinalConstantPool();
      int int1 = Character.MAX_CODE_POINT;
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(64);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int2 = Double.SIZE;
      constantPoolGen1.addLong(290L);
      ConstantLong constantLong0 = new ConstantLong(1);
      constantPoolGen1.addConstant(constantLong0, constantPoolGen0);
      int int3 = Pattern.UNICODE_CHARACTER_CLASS;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1);
      constantMethodType0.setDescriptorIndex(3);
      MockFile mockFile0 = new MockFile("3J$O@X{k0~!^Xmkbc", "3J$O@X{k0~!^Xmkbc");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantMethodType0.dump(dataOutputStream0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(1);
      constantPoolGen0.lookupFieldref("%rC-0o%1)CONSTANT_Integer[3](bytes = -3244)\n", "%rC-0o%1)CONSTANT_Integer[3](bytes = -3244)\n", "3J$O@X{k0~!^Xmkbc");
      int int4 = constantPoolGen1.addDouble(0.0);
      assertEquals(7, constantPoolGen1.getSize());
      assertEquals(5, int4);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2148, 2148);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantFloat constantFloat0 = new ConstantFloat(2148);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(373, 7);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantClass constantClass0 = new ConstantClass(7);
      constantArray0[3] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger((-2045222520));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-379), (-2045222520));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(12);
      constantArray0[3] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      float float0 = 1.0F;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "^tSl(KAk";
      constantPoolGen0.addNameAndType("^tSl(KAk", "^tSl(KAk");
      constantPoolGen0.addFieldref("^tSl(KAk", "^tSl(KAk", "^tSl(KAk");
      String string1 = "E2=YE&:(0Uw(#PatF";
      constantPoolGen0.addString("E2=YE&:(0Uw(#PatF");
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType((byte)45, (-1180));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: 45
         //
         verifyException("org.apache.bcel.generic.BasicType", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "&";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = null;
      constantPoolGen0.getConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.MULTILINE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      constantPoolGen0.lookupUtf8("Z48},%)y/Umzqu`86/");
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      int int0 = constantPoolGen0.size;
      constantPoolGen0.toString();
      ConstantMethodType constantMethodType0 = new ConstantMethodType(256);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantMethodType1.toString();
      constantPoolGen0.addFloat(0);
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType0);
      constantPoolGen0.addFloat(0);
      Constant[] constantArray0 = null;
      ConstantPoolGen constantPoolGen1 = null;
      try {
        constantPoolGen1 = new ConstantPoolGen((Constant[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger((-465));
      constantPoolGen0.addInteger((-2191));
      constantPoolGen0.getSize();
      Method method0 = new Method();
      assertFalse(method0.isVolatile());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "org.apache.bcel.generic.ConstantPoolGen";
      int int0 = Byte.SIZE;
      constantPoolGen0.getSize();
      NEW nEW0 = new NEW();
      MethodGen methodGen0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1, 1);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("m_^u##~Nb.]I");
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPool0.setConstantPool(constantArray0);
      constantMethodHandle0.setReferenceKind(1);
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen0);
      constantPoolGen0.getConstantPool();
      int int0 = constantPoolGen0.addDouble(0.0);
      assertEquals(10, constantPoolGen0.getSize());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ObjectType objectType0 = new ObjectType("348},%)>Umzqi`86.");
      Boolean boolean0 = new Boolean("348},%)>Umzqi`86.");
      int int0 = Pattern.UNIX_LINES;
      int int1 = Long.BYTES;
      constantPoolGen0.addInterfaceMethodref("348},%)>Umzqi`86.", "348},%)>Umzqi`86.", "f7sT9");
      int int2 = Member.DECLARED;
      Constant constant0 = constantPoolGen0.getConstant(6);
      constant0.toString();
      constantPoolGen0.adjustSize();
      String string0 = "\nExcetion handmer(s)= \n";
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constant0, constantPoolGen0);
      constantPoolGen1.lookupString("348},%)>Umzqi`86.");
      String string1 = "%";
      constantPoolGen1.addInteger(1);
      InstructionList instructionList0 = null;
      try {
        instructionList0 = new InstructionList((Instruction) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Assigning null to handle
         //
         verifyException("org.apache.bcel.generic.InstructionHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.addMethodref(";HpFZyw[W%,=k9>P", "GoH|Z_0^`y", "nB)");
      constantPoolGen0.addInteger(256);
      ConstantInteger constantInteger0 = new ConstantInteger(256);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantInteger1;
      constantArray0[1] = (Constant) constantInteger1;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantInteger1, constantPoolGen1);
      constantPoolGen0.lookupMethodref("GoH|Z_0^`y", "\n", ";HpFZyw[W%,=k9>P");
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(253, 253);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.getFinalConstantPool();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1516), 57);
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, visitor0);
      DescendingVisitor descendingVisitor1 = new DescendingVisitor((JavaClass) null, descendingVisitor0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantFieldref1.accept(descendingVisitor1);
      constantPoolGen0.toString();
      JavaClass.getComparator();
      constantFieldref0.setNameAndTypeIndex((-1516));
      ConstantInteger constantInteger0 = new ConstantInteger(253);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantPoolGen1.addConstant(constantInteger1, constantPoolGen0);
      NEW nEW0 = new NEW();
      // Undeclared exception!
      try { 
        nEW0.getLoadClassType(constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addFieldref("=Z@,X$Qpq7M+;!o0[\"I", "=Z@,X$Qpq7M+;!o0[\"I", "=Z@,X$Qpq7M+;!o0[\"I");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(250, 250);
      ConstantNameAndType constantNameAndType1 = (ConstantNameAndType)constantNameAndType0.copy();
      constantNameAndType1.setSignatureIndex(4);
      constantNameAndType1.toString();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantFloat constantFloat0 = new ConstantFloat(926.3F);
      constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      constantPoolGen1.getFinalConstantPool();
      int int0 = constantPoolGen0.getSize();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((-862.2F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantDouble constantDouble0 = new ConstantDouble((-862.2F));
      constantArray0[1] = (Constant) constantDouble0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-326));
      constantArray0[2] = (Constant) constantMethodType0;
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      Constant.setComparator(bCELComparator0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInteger((-326));
      constantPoolGen0.lookupDouble((-862.2F));
      ObjectType objectType0 = new ObjectType(",,q6GOP^[;6YMch");
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",,q6GOP^[;6YMch";
      stringArray0[1] = ",,q6GOP^[;6YMch";
      stringArray0[2] = ",,q6GOP^[;6YMch";
      stringArray0[3] = ",,q6GOP^[;6YMch";
      stringArray0[4] = ",,q6GOP^[;6YMch";
      stringArray0[5] = ",,q6GOP^[;6YMch";
      LALOAD lALOAD0 = (LALOAD)InstructionConstants.LALOAD;
      InstructionList instructionList0 = new InstructionList(lALOAD0);
      MethodGen methodGen0 = null;
      try {
        methodGen0 = new MethodGen(69, objectType0, objectType0.NO_ARGS, stringArray0, "Hnt72}{{", ",,q6GOP^[;6YMch", instructionList0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Mismatch in argument array lengths: 0 vs. 6
         //
         verifyException("org.apache.bcel.generic.MethodGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      BasicType basicType0 = Type.CHAR;
      constantPoolGen0.addDouble(0.0);
      Boolean boolean0 = Boolean.FALSE;
      PUSH pUSH0 = new PUSH(constantPoolGen0, (String) null);
      constantPoolGen0.addFieldref("org/apache/bcel/generic/ConstantPoolGen#il/append(_factory/createCheckCast(#Invalid byte tag in constant pool: ", "&71>lu%%\"SoFhUa?gJ", "&71>lu%%\"SoFhUa?gJ");
      constantPoolGen0.getConstantPool();
      int int0 = constantPoolGen0.addDouble(0.0);
      assertEquals(8, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addString("Z48},%)y.Umzqu`86.");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen1.lookupNameAndType("I]XU?;=Y%I]XU?;=Y%Q_t", "Z48},%)y.Umzqu`86.");
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantPool0);
      constantPoolGen3.addString("Z48},%)y.Umzqu`86.");
      constantPoolGen3.addFloat(3106.73F);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1), 230);
      constantPoolGen3.toString();
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      constantFieldref0.toString();
      int int1 = Float.SIZE;
      // Undeclared exception!
      try { 
        constantPoolGen3.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupInteger(3);
      constantPoolGen0.lookupClass("org/apache/bcel/generic/ConstantPoolGen%Unexpected constant type: ");
      constantPoolGen0.addString("\"");
      constantPoolGen0.lookupString("\"");
      int int0 = Member.PUBLIC;
      String string0 = "WS>U0";
      ArrayType arrayType0 = new ArrayType("org/apache/bcel/generic/ConstantPoolGen%Unexpected constant type: ", 2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"");
      constantPoolGen0.lookupNameAndType("WS>U0", "");
      String string1 = "})4G)z%";
      // Undeclared exception!
      try { 
        Type.getReturnType("})4G)z%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: z%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.addString("Z48},%)y.Umzqi`86.");
      ObjectType objectType0 = Type.STRINGBUFFER;
      Boolean boolean0 = Boolean.FALSE;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Z48},%)y.Umzqi`86.");
      Constant constant0 = constantUtf8_0.copy();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2, 208);
      constantNameAndType0.copy();
      constantNameAndType0.setSignatureIndex(1100);
      constant0.toString();
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(1100, 137);
      constantNameAndType1.setSignatureIndex(2);
      constant0.toString();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantFloat constantFloat0 = new ConstantFloat(2951.0F);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-675), 227);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType0, constantPoolGen1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantString cannot be cast to org.apache.bcel.classfile.ConstantUtf8
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((-250.18060939));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      int int0 = 0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int1 = ObjectStreamConstants.baseWireHandle;
      ConstantClass constantClass0 = new ConstantClass(8257536);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      String string0 = "E.NWl`:+{zy\\C_W<s ;";
      ConstantFieldref constantFieldref0 = new ConstantFieldref(0, 0);
      constantPoolGen0.lookupFieldref("E.NWl`:+{zyC_W<s ;", "E.NWl`:+{zyC_W<s ;", "E.NWl`:+{zyC_W<s ;");
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addString("Z48},%)y.Umzqi`86.");
      ObjectType objectType0 = new ObjectType("Z48},%)y.Umzqi`86.");
      Boolean boolean0 = new Boolean("Z48},%)y.Umzqi`86.");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("java.elt.irj");
      constantUtf8_0.copy();
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen1);
      constantPoolGen0.addInterfaceMethodref("java.elt.irj", "java.elt.irj", "f7sT9");
      int int0 = Member.DECLARED;
      Pattern.quote("f7sT9");
      Constant constant0 = constantPoolGen0.getConstant(8);
      constantPoolGen1.adjustSize();
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      constantPoolGen1.lookupMethodref("java.elt.irj", "2*\"|e6l#5", "\nExceptin anler(s) | \n");
      int int1 = Character.MIN_RADIX;
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.lookupClass("2*\"|e6l#5");
      constantPoolGen1.addConstant(constant0, constantPoolGen0);
      constantPoolGen2.lookupString("Z48},%)y.Umzqi`86.");
      constantPoolGen2.addFieldref("2*\"|e6l#5", "<6'a=x", "Unknown constant type ");
      int int2 = Double.BYTES;
      constantPoolGen1.lookupInterfaceMethodref("<6'a=x", "java.elt.irj", "vO:tx(LoiCdSEG.,");
      Constant constant1 = constantPoolGen2.getConstant(261);
      int int3 = constantPoolGen0.addConstant(constant1, constantPoolGen2);
      assertEquals(15, constantPoolGen0.getSize());
      assertEquals(14, int3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addInteger((-2021161078));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addString("Z48},%)y.Umzqi`086.");
      ObjectType objectType0 = new ObjectType("Z48},%)y.Umzqi`086.");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Z48},%)y.Umzqi`086.");
      constantPoolGen0.addMethodref("Z48},%)y.Umzqi`086.", ",+kd>-", "Z48},%)y.Umzqi`086.");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(",+kd>-");
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen1);
      int int0 = Byte.SIZE;
      ConstantMethodref constantMethodref0 = (ConstantMethodref)constantPoolGen0.getConstant(8);
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      constantPoolGen1.lookupMethodref("Z48},%)y.Umzqi`086.", "Z48},%)y.Umzqi`086.", "Z48},%)y.Umzqi`086.");
      constantMethodref0.getClass(constantPool0);
      int int1 = Long.BYTES;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iF_ICMPGT0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen();
      int int3 = constantPoolGen0.size;
      constantPoolGen0.addConstant(constantMethodref0, constantPoolGen2);
      constantPoolGen1.addFieldref("", "", "Z48},%)y.Umzqi`086.");
      constantPoolGen3.addFieldref("Z48},%)y.Umzqi`086.", "", ",+kd>-");
      constantPoolGen1.lookupInterfaceMethodref("", "", "x;9B3Aj[u]%#");
      assertEquals(6, constantPoolGen1.getSize());
      
      int int4 = Member.PUBLIC;
      assertFalse(int4 == int5);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addInteger((-2021161078));
      String string0 = "Z48},%)y.Umzqi`86.";
      constantPoolGen0.addString("Z48},%)y.Umzqi`86.");
      ObjectType objectType0 = new ObjectType("Z48},%)y.Umzqi`86.");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Z48},%)y.Umzqi`86.");
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant.setComparator(bCELComparator0);
      constantPoolGen0.addMethodref("Z48},%)y.Umzqi`86.", "Z48},%)y.Umzqi`86.", "Z48},%)y.Umzqi`86.");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("Z48},%)y.Umzqi`86.");
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen0);
      int int0 = Double.MAX_EXPONENT;
      int int1 = Member.DECLARED;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1, 1);
      constantPoolGen0.adjustSize();
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      constantPoolGen0.lookupMethodref("Z48},%)y.Umzqi`86.", "Z48},%)y.Umzqi`86.", "Z48},%)y.Umzqi`86.");
      int int2 = Character.MIN_RADIX;
      constantPoolGen0.lookupFieldref("f7sT9", "HG?P~=54&HG?P~=54&1:", (String) null);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInterfaceMethodref0, constantPoolGen0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantInteger cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }
}
