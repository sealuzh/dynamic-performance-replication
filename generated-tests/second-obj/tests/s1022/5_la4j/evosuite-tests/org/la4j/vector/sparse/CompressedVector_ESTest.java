/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:17:39 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.function.Consumer;
import java.util.stream.LongStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorPredicate;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertNotNull(vectorIterator0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Byte.toUnsignedInt((byte)13);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, (byte)13);
      compressedVector0.blank();
      // Undeclared exception!
      try { 
        CompressedVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(3202);
      assertEquals(3202, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(9, 924);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 924.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 13);
      boolean boolean0 = compressedVector0.nonZeroAt(13);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(13, compressedVector0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1144, 3247);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1), vectorFunction0);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.setAll(2.0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(448);
      // Undeclared exception!
      try { 
        CompressedVector.random(448, (double) 448, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector.random(2414, 1.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("a9<S5?Oynj@{$o:vq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(37);
      int int0 = 63;
      mockRandom0.nextInt(63);
      CompressedVector compressedVector0 = CompressedVector.random(37, 1.0, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-4244), vectorFunction0);
      compressedVector0.toColumnMatrix();
      compressedVector0.nonZeroAt(int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 430;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroAt(430);
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      hashMap0.entrySet();
      CompressedVector compressedVector0 = CompressedVector.zero(2213);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2213).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2213, vectorFunction0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2213).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.toBinary();
      compressedVector0.updateAt(2213, vectorFunction1);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Set<Map.Entry<Integer, Byte>> set0 = (Set<Map.Entry<Integer, Byte>>)hashMap0.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      CompressedVector compressedVector0 = CompressedVector.zero(2213);
      assertEquals(2213, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2213).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2213, vectorFunction0);
      assertEquals(2213, compressedVector0.length());
      assertEquals(4.5187528242205153E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)32).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      Byte byte0 = hashMap0.put((Integer) null, (Byte) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(byte0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(2213, compressedVector0.length());
      assertEquals(4.5187528242205153E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(byteArray0);
      
      compressedVector0.updateAt(32, vectorFunction1);
      assertEquals(2213, compressedVector0.length());
      assertEquals(9.037505648441031E-4, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      
      double double0 = compressedVector0.getOrElse(8, 2213);
      assertEquals(2213, compressedVector0.length());
      assertEquals(9.037505648441031E-4, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2213.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap1, 3339);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(3339, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(116.0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(3339, compressedVector0.length());
      assertEquals(3339, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      
      org.evosuite.runtime.Random.setNextRandom(3339);
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap1, 3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(3, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(3339, compressedVector0.length());
      assertEquals(3339, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertNotSame(compressedVector0, compressedVector1);
      
      double double0 = compressedVector0.getOrElse(1, 3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(3339, compressedVector0.length());
      assertEquals(3339, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(116.0, double0, 0.01);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertNotSame(compressedVector0, compressedVector1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3073, 1131);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3073, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements(1977, 1977);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3073, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      double double0 = compressedVector0.getOrElse(1154, (-543.3));
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3073, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals((-543.3), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      String string0 = compressedVector0.toString();
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals("", string0);
      assertNotNull(string0);
      
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0, compressedVector1.length());
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(2373);
      assertEquals(2373, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(1275.9554128553);
      assertEquals(2373, compressedVector0.length());
      assertEquals(2373, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.is((VectorPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 48.0;
      doubleArray0[1] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {48.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {48.0, 0.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements((-2722), (-2722));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {48.0, 0.0}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = null;
      // Undeclared exception!
      try { 
        compressedVector0.eachNonZero((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1210.35;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 1210.35}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2083.9579, 1210.35).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 1210.35}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2117);
      intArray0[1] = (-552);
      intArray0[2] = 9;
      CompressedVector compressedVector1 = null;
      try {
        compressedVector1 = new CompressedVector((-552), (-2117), doubleArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -552
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      byte byte0 = (byte)13;
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, (byte)13);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(13, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.update((VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 3076;
      CompressedVector compressedVector0 = new CompressedVector(3076);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3076, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(9);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3076, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(9, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertNotNull(decimalFormat0);
      
      String string0 = compressedVector0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(3076, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("%%MatrixMarket vector coordinate real\n3076 0\n", string0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotSame(compressedVector0, compressedVector1);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(504);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(504, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(Double.POSITIVE_INFINITY);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(504, compressedVector0.cardinality());
      assertEquals(504, compressedVector0.length());
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 36);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(36, compressedVector1.length());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(4, 2);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(334, (-964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -964.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      int int0 = 3339;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap1, 3339);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3339, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(116.0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(3339, compressedVector0.length());
      assertEquals(3339, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      
      int int1 = 1138;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(3339, 1138);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random((-51), (-1.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      compressedVector0.swapElements((-32), (-32));
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      Double double0 = new Double(5);
      assertEquals(5.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = hashMap0.putIfAbsent(integer0, double0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(double1);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 37);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(37, compressedVector0.length());
      assertEquals(0.02702702702702703, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      int int0 = 2025;
      CompressedVector compressedVector0 = new CompressedVector(2025, 2025);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2025, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      Vector vector0 = Vector.random(2418, mockRandom0);
      assertEquals(2418, vector0.length());
      assertNotNull(vector0);
      
      compressedVector0.setAll(0L);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2025, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.hadamardProduct(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 2025 does not equal to 2418.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (-25.041041319122883);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(9, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-25.041041319122883), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)hashMap0.entrySet();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      double double0 = compressedVector0.fold(vectorAccumulator0);
      assertEquals(9, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-25.041041319122883), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 1681.0;
      doubleArray0[2] = (double) 885;
      doubleArray0[4] = (double) 885;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 885.0, 0.0, 885.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      compressedVector0.swapElements((-3059), 2019);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 885.0, 0.0, 885.0}, doubleArray0, 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 885.0, 0.0, 885.0}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
      
      Double double0 = new Double(885);
      assertEquals(885.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      compressedVector0.set(1, 2019);
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 885.0, 0.0, 885.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(2039, 885.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2039' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Float float0 = new Float(1681.0);
      assertEquals(1681.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1681.0;
      doubleArray0[1] = 1681.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {1681.0, 1681.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = compressedVector0.to(vectorFactory0);
      assertEquals(2, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(2, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertArrayEquals(new double[] {1681.0, 1681.0}, doubleArray0, 0.01);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 23;
      int[] intArray0 = new int[4];
      intArray0[1] = 23;
      CompressedVector compressedVector0 = new CompressedVector(23, 23, doubleArray0, intArray0);
      assertEquals(23, compressedVector0.length());
      assertEquals(23, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {23.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {0, 23, 0, 0}, intArray0);
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.norm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = 32;
      Integer integer0 = new Integer((-549));
      assertEquals((-549), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(integer0.equals((Object)int0));
      assertNull(integer1);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = 2213;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2213);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(2213, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2213).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2213, vectorFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2213, compressedVector0.length());
      assertEquals(4.5187528242205153E-4, compressedVector0.density(), 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.set(2213, 2213);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '2213' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3756.14149549;
      doubleArray0[1] = (-901.6264188366);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {3756.14149549, (-901.6264188366)}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-233), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements(3, 1153);
      assertEquals(6, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(6, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("?HEZ_(z1)a@EQ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 48.0;
      doubleArray0[1] = 0.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {48.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      compressedVector0.swapElements((-2722), (-1));
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(2, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {48.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.eachNonZero((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      mockRandom0.setSeed((-51));
      LongStream longStream0 = mockRandom0.longs();
      assertNotNull(longStream0);
      
      int int0 = 3;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      int[] intArray0 = new int[4];
      intArray0[0] = (-51);
      intArray0[1] = (-51);
      intArray0[2] = (-51);
      intArray0[3] = 3;
      CompressedVector compressedVector0 = new CompressedVector(3, 3, doubleArray0, intArray0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertArrayEquals(new double[] {3.0, 3.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {(-51), (-51), (-51), 3}, intArray0);
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-51), (-921));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte byte0 = (byte)13;
      int int0 = Float.MIN_EXPONENT;
      assertEquals((-126), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int1 = 3;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2065.041926241979)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = Float.MIN_EXPONENT;
      assertEquals((-126), int0);
      
      double double0 = 1.0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      int int1 = 3;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements((byte)13, 16);
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.zero(3);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(3, compressedVector1.length());
      assertEquals(0, compressedVector1.cardinality());
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(1243, 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1243' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = Float.MIN_EXPONENT;
      assertEquals((-126), int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-126);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, (-126.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      compressedVector0.swapElements(16, 3);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, (-126.0), 1.0, 1.0}, doubleArray0, 0.01);
      
      VectorIterator vectorIterator0 = compressedVector0.nonZeroIterator();
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(4, compressedVector0.length());
      assertEquals(0.75, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, (-126.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertNotNull(vectorIterator0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(16, vectorFunction0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.5, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, (-126.0), 1.0, 1.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse(3843, 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '3843' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(6, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      Double double0 = new Double(430);
      assertEquals(430.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 3;
      intArray0[1] = 1121;
      intArray0[2] = 1127;
      intArray0[3] = 2656;
      intArray0[4] = 3;
      intArray0[5] = 1127;
      intArray0[6] = 430;
      intArray0[7] = 1127;
      intArray0[8] = 3;
      CompressedVector compressedVector1 = new CompressedVector(1127, 3, doubleArray0, intArray0);
      assertEquals(1127, compressedVector1.length());
      assertEquals(0.0026619343389529724, compressedVector1.density(), 0.01);
      assertEquals(3, compressedVector1.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {3, 1121, 1127, 2656, 3, 1127, 430, 1127, 3}, intArray0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotNull(compressedVector1);
      
      compressedVector1.swapElements(3, 430);
      assertEquals(1127, compressedVector1.length());
      assertEquals(0.0026619343389529724, compressedVector1.density(), 0.01);
      assertEquals(3, compressedVector1.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {430, 1121, 1127, 2656, 3, 1127, 430, 1127, 3}, intArray0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector1, compressedVector0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(1127, vectorFunction0);
      assertEquals(0.001774622892635315, compressedVector1.density(), 0.01);
      assertEquals(1127, compressedVector1.length());
      assertEquals(2, compressedVector1.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {430, 1121, 1127, 2656, 3, 1127, 430, 1127, 3}, intArray0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector1, compressedVector0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((byte)13);
      assertEquals(13, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(integer0, integer0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer1);
      
      int int0 = Byte.SIZE;
      assertEquals(8, int0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertNotNull(sparseVector0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = Byte.SIZE;
      assertEquals(8, int0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, (byte)13);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(13, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1210.35;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.5, compressedVector1.density(), 0.01);
      assertEquals(2, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertArrayEquals(new double[] {0.0, 1210.35}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)compressedVector0.toRowMatrix();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(13, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(13, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotNull(cRSMatrix0);
      
      compressedVector1.swapElements((-2722), 32);
      assertEquals(0.5, compressedVector1.density(), 0.01);
      assertEquals(2, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertArrayEquals(new double[] {0.0, 1210.35}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector1, compressedVector0);
      
      compressedVector0.eachNonZero((VectorProcedure) null);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(13, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(compressedVector0, compressedVector1);
      
      boolean boolean0 = compressedVector1.nonZeroAt((-2722));
      assertEquals(0.5, compressedVector1.density(), 0.01);
      assertEquals(2, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 1210.35}, doubleArray0, 0.01);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector1, compressedVector0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = Float.MIN_EXPONENT;
      assertEquals((-126), int0);
      
      double double0 = (-25.041041319122883);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-25.041041319122883);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertArrayEquals(new double[] {(-25.041041319122883), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      assertNotNull(ooPlaceInnerProduct0);
      
      VectorOperation<Double> vectorOperation0 = ooPlaceInnerProduct0.partiallyApply((SparseVector) compressedVector0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertArrayEquals(new double[] {(-25.041041319122883), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(vectorOperation0);
      
      Double double1 = compressedVector0.apply(vectorOperation0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.16666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(627.0537503460195, (double)double1, 0.01);
      assertArrayEquals(new double[] {(-25.041041319122883), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      assertNotNull(ooPlaceVectorsSubtraction0);
      
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      assertEquals(6, denseVector0.length());
      assertArrayEquals(new double[] {(-25.041041319122883), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseVector0);
      
      DenseVector denseVector1 = DenseVector.fromCSV("");
      assertEquals(0, denseVector1.length());
      assertFalse(denseVector1.equals((Object)denseVector0));
      assertNotSame(denseVector1, denseVector0);
      assertNotNull(denseVector1);
      
      // Undeclared exception!
      try { 
        ooPlaceVectorsSubtraction0.apply(denseVector1, (SparseVector) compressedVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = Float.MIN_EXPONENT;
      assertEquals((-126), int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-126);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(9, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-126.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)hashMap0.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      double double0 = new Double((-126.0));
      assertEquals((-126.0), double0, 0.01);
      
      double double1 = compressedVector0.euclideanNorm();
      assertEquals(9, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(126.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-126.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      compressedVector0.swapElements(1442, 3);
      assertEquals(9, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-126.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCollection((Collection<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 1681.0;
      doubleArray0[3] = (double) 430;
      doubleArray0[3] = 1681.0;
      doubleArray0[4] = (double) 430;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 1681.0, 0.0, 1681.0, 430.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      compressedVector0.swapElements(3, 955);
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 1681.0, 0.0, 1681.0, 430.0}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 1681.0, 0.0, 1681.0, 430.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements((-1248), 3373);
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 1681.0, 0.0, 1681.0, 430.0}, doubleArray0, 0.01);
      
      double double0 = compressedVector0.manhattanNorm();
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3792.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1681.0, 0.0, 1681.0, 430.0}, doubleArray0, 0.01);
      
      compressedVector0.setAll(1425.9102567);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(5, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 1681.0, 0.0, 1681.0, 430.0}, doubleArray0, 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt(0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(5, compressedVector0.cardinality());
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 1681.0, 0.0, 1681.0, 430.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = Float.MIN_EXPONENT;
      assertEquals((-126), int0);
      
      double double0 = (-24.147841168325442);
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = (-24.147841168325442);
      doubleArray0[2] = (-2065.041926241979);
      doubleArray0[3] = (double) (-126);
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)hashMap0.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      doubleArray0[3] = (-24.147841168325442);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2065.041926241979), (-24.147841168325442), 0.0, 0.0, 0.0, 0.0, (-24.147841168325442)}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Set<Map.Entry<Integer, Integer>> set1 = (Set<Map.Entry<Integer, Integer>>)hashMap0.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertSame(set1, set0);
      assertNotNull(set1);
      
      compressedVector0.swapElements((-126), 3);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-2065.041926241979), (-24.147841168325442), 0.0, 0.0, 0.0, 0.0, (-24.147841168325442)}, doubleArray0, 0.01);
      
      byte byte0 = (byte)51;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = Float.MIN_EXPONENT;
      assertEquals((-126), int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (double) (-126);
      doubleArray0[3] = (-25.041041319122883);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-25.041041319122883), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      int int1 = 3;
      compressedVector0.swapElements((-126), 3);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-25.041041319122883), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = Byte.SIZE;
      assertEquals(8, int0);
      
      double double0 = (-24.147841168325442);
      double[] doubleArray0 = new double[9];
      doubleArray0[8] = (-24.147841168325442);
      doubleArray0[2] = (-2065.041926241979);
      doubleArray0[3] = (double) 8;
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)hashMap0.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      doubleArray0[3] = (-24.147841168325442);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, (-2065.041926241979), (-24.147841168325442), 0.0, 0.0, 0.0, 0.0, (-24.147841168325442)}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      Set<Map.Entry<Integer, Integer>> set1 = (Set<Map.Entry<Integer, Integer>>)hashMap0.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertSame(set1, set0);
      assertNotNull(set1);
      
      compressedVector0.swapElements(8, 3);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(9, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, (-2065.041926241979), (-24.147841168325442), 0.0, 0.0, 0.0, 0.0, (-24.147841168325442)}, doubleArray0, 0.01);
      
      byte byte0 = (byte)51;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = 2213;
      Set<Map.Entry<Integer, Byte>> set0 = (Set<Map.Entry<Integer, Byte>>)hashMap0.entrySet();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 2213);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2213, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2213).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2213, vectorFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(4.5187528242205153E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2213, compressedVector0.length());
      
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(32, vectorFunction1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(4.5187528242205153E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(2213, compressedVector0.length());
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2213, (-4367));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 430;
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      boolean boolean0 = Float.isFinite(430);
      assertTrue(boolean0);
      
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = (double) 430;
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 430.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.swapElements(3, 1);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 430.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = 8;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 430.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("?HEZ_(z1)a@EQ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 430;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-25.041041319122883);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-25.041041319122883)}, doubleArray0, 0.01);
      assertNotNull(compressedVector0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Set<Map.Entry<Integer, Integer>> set0 = (Set<Map.Entry<Integer, Integer>>)hashMap0.entrySet();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = compressedVector0.fold(vectorAccumulator0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-25.041041319122883)}, doubleArray0, 0.01);
      
      compressedVector0.swapElements((-5456), (-5456));
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-25.041041319122883)}, doubleArray0, 0.01);
      
      compressedVector0.swapElements(3, (-2117));
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-25.041041319122883)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-25.041041319122883)}, doubleArray0, 0.01);
      assertNotNull(byteArray0);
      
      DenseVector denseVector0 = compressedVector0.toDenseVector();
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, denseVector0.length());
      assertArrayEquals(new double[] {(-25.041041319122883)}, doubleArray0, 0.01);
      assertNotNull(denseVector0);
      
      SparseVector sparseVector0 = SparseVector.zero(1592);
      assertEquals(1592, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertNotSame(sparseVector0, compressedVector0);
      assertNotNull(sparseVector0);
      
      boolean boolean0 = compressedVector0.equals((Vector) sparseVector0, (double) 430);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1592, sparseVector0.length());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-25.041041319122883)}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(sparseVector0.equals((Object)compressedVector0));
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(sparseVector0, compressedVector0);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertArrayEquals(new double[] {(-25.041041319122883)}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertNotSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotNull(compressedVector1);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2142501087, 1592);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }
}
