/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 15:39:42 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.ReferenceCodec;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Rectangle2D;
import java.io.ByteArrayInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.Collator;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.LongBinaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("getgetClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : getgetClass
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Class<Insets> class1 = Insets.class;
      TypeUtils.getParserFeatures(class1);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<SQLTransientException> class0 = SQLTransientException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@6
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TypeUtils.clearClassMapping();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("H;Z^|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Boolean boolean0 = new Boolean("org.springframework.security.core.context.SecurityContextImpl");
      TypeUtils.clearClassMapping();
      TreeSet<RuntimeException> treeSet0 = new TreeSet<RuntimeException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Rectangle");
      assertNull(class0);
      
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.isPath(class0);
      TypeUtils.isGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Object object0 = new Object();
      Class<Method> class0 = Method.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      String[] stringArray0 = new String[5];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      TypeUtils.isGenericParamType(class1);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.reflect.Method
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Boolean> class0 = Boolean.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      Type type1 = TypeUtils.getCollectionItemType(type0);
      TypeUtils.getRawClass(type1);
      TypeUtils.clearClassMapping();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.castToDouble((Object) null);
      Class<MockDate> class0 = MockDate.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(timeDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.TimeDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("Ljava.awt.Rectangle");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(noSuchMethodError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NoSuchMethodError: Ljava.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SimpleDateFormat> class1 = SimpleDateFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.SimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.castToString((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.al\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("i>D5l_]&v]wvEz* Hg4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : i>D5l_]&v]wvEz* Hg4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.isProxy(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(classLoader1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.misc.Launcher$ExtClassLoader@2a5ca609
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JobAttributes jobAttributes0 = new JobAttributes();
      TypeUtils.clearClassMapping();
      TypeUtils.castToSqlDate((Object) null);
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(linkedHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TypeUtils.clearClassMapping();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("getgtClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : getgtClass
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeUtils.decapitalize("|9t#NV_o68");
      TypeUtils.toLocale("|9t#NV_o68");
      Class<Insets> class0 = Insets.class;
      TypeUtils.getParserFeatures(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.getClassFromMapping("|9t#NV_o68");
      Properties properties0 = new Properties();
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      SQLSyntaxErrorException sQLSyntaxErrorException0 = TypeUtils.castToJavaBean((Object) null, class1);
      assertNull(sQLSyntaxErrorException0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.castToString(mockIllegalStateException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(mockIllegalStateException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.evosu\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.castToString(type0);
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      OptionalCodec optionalCodec0 = new OptionalCodec();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(optionalCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.OptionalCodec@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      TypeUtils.clearClassMapping();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      TypeUtils.decapitalize("");
      Dimension dimension0 = new Dimension((-1879048190), 0);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      mockThread0.getStackTrace();
      TypeUtils.loadClass("-#Shph7NT", classLoader0, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockThread0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"daemon\":false,\"getId\":0,\"getStackTrace\":[{\"fileName\":\"<evosuite>\",\"getClassName\":\"<evosuite>\",\"isNativeMethod\":false,\"lineNumber\":-1,\"methodName\":\"<evosuite>\"},{\"fileName\":\"<evosuite>\",\"getClassName\":\"<evosuite>\",\"isNativeMethod\":false,\"lineNumber\":-1,\"methodName\":\"<evosuite>\"},{\"fileName\":\"<evosuite>\",\"getClassName\":\"<evosuite>\",\"isNativeMethod\":false,\"lineNumber\":-1,\"methodName\":\"<evosuite>\"}],\"getState\":\"NEW\",\"getThreadGroup\":{\"daemon\":false,\"destroyed\":false,\"maxPriority\":10,\"name\":\"Test_Execution_Group\",\"parent\":{\"daemon\":false,\"destroyed\":false,\"maxPriority\":10,\"name\":\"main\",\"parent\":{\"daemon\":false,\"destroyed\":false,\"maxPriority\":10,\"name\":\"system\"}}},\"isAlive\":false,\"isInterrupted\":false,\"name\":\"MockThread-0\",\"priority\":5,\"uncaughtExceptionHandler\":{\"$ref\":\"$.getThreadGroup\"}}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      Class<Integer> class0 = Integer.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      Class<?> class1 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      TypeUtils.loadClass("DAY_OF_WEEK_MASK");
      ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl((Type[]) null, parameterizedTypeImpl1, class1);
      ParserConfig parserConfig0 = new ParserConfig(true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl2, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.getClassFromMapping("kotlin.reflect.KFunction");
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      parserConfig0.createJavaBeanDeserializer(class1, class1);
      TypeUtils.toLocale("jud[jxH(9Yw>f0F");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLFeatureNotSupportedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      TypeUtils.loadClass((String) null);
      Class<Point> class0 = Point.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils.castToLong((Object) null);
      Class<Double> class0 = Double.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TypeUtils.decapitalize("DOc `[r'^u^I");
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.clearClassMapping();
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.parser.ParserConfig@95
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TypeUtils.castToLong((Object) null);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TypeUtils.decapitalize("");
      Dimension dimension0 = new Dimension((-2093064), 4);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      TypeUtils.loadClass("", classLoader0, false);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dimension0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("a:LV!&#;Um>_");
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "[I", 1075L);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("a:LV!&#;Um>_", classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("<~A`@Z*um");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParserConfig.getGlobalInstance();
      AtomicLong atomicLong0 = new AtomicLong((-2425L));
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn((-2950L)).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      LongBinaryOperator longBinaryOperator1 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn((-2950L)).when(longBinaryOperator1).applyAsLong(anyLong() , anyLong());
      atomicLong0.getAndAccumulate((-1393L), longBinaryOperator1);
      atomicLong0.incrementAndGet();
      atomicLong0.getAndAccumulate((-2425L), longBinaryOperator0);
      atomicLong0.lazySet((-2949L));
      atomicLong0.lazySet((-1L));
      Date date0 = TypeUtils.castToDate(atomicLong0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TypeUtils.decapitalize("r");
      TypeUtils.toLocale("r");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("r");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TypeUtils.decapitalize("<~A`@Z*um");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<ClassLoader> class0 = ClassLoader.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      boolean boolean0 = TypeUtils.isHibernateInitialized(serializeBeanInfo0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Class<ClassLoader> class0 = ClassLoader.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.cast((Object) hashtable0, (Type) class0, parserConfig0);
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("Ljava.awt.Rectangle");
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      boolean boolean0 = TypeUtils.isHibernateInitialized(imageCapabilities0);
      assertTrue(boolean0);
      
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, hashMap0, false, propertyNamingStrategy1);
      boolean boolean1 = TypeUtils.isNumber("");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.addDeny("kotlin.reflect.KFunction");
      Class<InterruptedException> class0 = InterruptedException.class;
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.InterruptedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Double.min((-3380.756014), 0.0);
      Double.sum(0.0, (-1.0));
      MockDate mockDate0 = new MockDate(39, 52, 52, 71, 52, 71);
      java.sql.Date date0 = TypeUtils.castToSqlDate(mockDate0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      TypeUtils.toLocale("getgtClass");
      boolean boolean0 = new Boolean("getgtClass");
      VerifyError verifyError0 = new VerifyError("<Pw=T{");
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TimeDeserializer timeDeserializer1 = TypeUtils.cast((Object) timeDeserializer0, class0, (ParserConfig) null);
      assertSame(timeDeserializer1, timeDeserializer0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.getClassFromMapping("");
      Long long0 = TypeUtils.castToLong("");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("dd.MM.yyyy HH:mm:ss", "dd.MM.yyyy HH:mm:ss");
      ClassLoader.getSystemClassLoader();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "dd.MM.yyyy HH:mm:ss", (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      ParserConfig.getGlobalInstance();
      MessageFormat messageFormat0 = new MessageFormat("fastjson.parser.deny");
      TypeUtils.isKotlin(class0);
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      MessageFormat messageFormat0 = new MessageFormat("fastjson.parser.deny");
      Class<Double> class1 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig1, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.ParserConfig@9a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      String string0 = "sh";
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "sh", fieldArray0);
      BiFunction<Field, Object, Field> biFunction0 = (BiFunction<Field, Object, Field>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        weakHashMap0.merge("sh", (Field) null, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      AtomicLong atomicLong0 = new AtomicLong(293871023293056L);
      atomicLong0.lazySet(3754L);
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "kZyj|";
      stringArray0[1] = "kZyj|";
      stringArray0[1] = "kZyj|";
      Class<InterruptedException> class0 = InterruptedException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "kZyj|", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.InterruptedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TypeUtils.clearClassMapping();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.getDeserializer((Type) null);
      TreeSet<Point> treeSet0 = new TreeSet<Point>();
      treeSet0.descendingIterator();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) treeSet0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Character> class0 = Character.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      Class<?> class1 = TypeUtils.getClass(type0);
      TypeUtils.getClassFromMapping("+gWVEb'*MpFd}4'0t 2");
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("b#52");
      NoClassDefFoundError noClassDefFoundError1 = new NoClassDefFoundError();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      Float float0 = new Float(1075.6100456);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(float0);
      assertEquals("1970-01-01 00:00:01.075", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      Class<Character> class0 = Character.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      Class<?> class1 = TypeUtils.getClass(type0);
      TypeUtils.getClassFromMapping("+gWVEb'*MpFd}4'0t 2");
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      TypeUtils.isKotlin(class2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : char
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Double double0 = new Double(2473.293989643);
      TypeUtils.castToFloat(double0);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Class<Integer> class1 = Integer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ParserConfig parserConfig0 = ParserConfig.global;
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("fastjson.parser.deny");
      TypeUtils.isKotlin(class0);
      ParserConfig parserConfig1 = new ParserConfig(true);
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) map0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object0 = new Object();
      Class<Method> class0 = Method.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TypeUtils.clearClassMapping();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(linkedHashMap0);
      Class<?> class0 = TypeUtils.loadClass("byte");
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TreeMap<String, Object> treeMap0 = new TreeMap<String, Object>();
      treeMap0.put("Ljava.awt.Font", "Ljava.awt.Font");
      treeMap0.put("r1hR2Xsbvm-", "org.apache.ibatis.javassist.util.proxy.ProxyObject");
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      treeMap0.tailMap("org.apache.ibatis.javassist.util.proxy.ProxyObject", true);
      ParserConfig parserConfig0 = new ParserConfig(true);
      TypeUtils.castToJavaBean((Map<String, Object>) treeMap0, class0, parserConfig0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, (PropertyNamingStrategy) null, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeUtils.getGenericParamType(class0);
      TypeUtils.getClassFromMapping("has");
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      TypeUtils.isKotlin(class1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      Class<?> class2 = TypeUtils.getClassFromMapping("has");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<AtomicInteger> class1 = AtomicInteger.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils.castToString(mockIllegalStateException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(mockIllegalStateException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.evosu\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParserConfig.getGlobalInstance();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) identityHashMap0, true, (PropertyNamingStrategy) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      TypeUtils.loadClass("fastjson.parser.deny");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      boolean boolean0 = TypeUtils.isGenericParamType(type0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("dd.MM.yyyy HH:mm:ss", "dd.MM.yyyy HH:mm:ss");
      ClassLoader.getSystemClassLoader();
      TypeUtils.castToBytes("dd.MM.yyyy HH:mm:ss");
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TypeUtils.decapitalize("<~A`@Z*um");
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError((String) null);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.isKotlin(class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      typeArray0[1] = type0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, typeArray0[2]);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParserConfig.getGlobalInstance();
      Class<MessageFormat> class1 = MessageFormat.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<Short> class2 = Short.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class2, "(I)Ljava/lang/Integer;", fieldArray0);
      weakHashMap0.replace("getClass", (Field) null, (Field) null);
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) weakHashMap0, true, (PropertyNamingStrategy) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "K 5w[}G*q@RRV:QmO`", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SimpleDateFormat> class1 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.parserAllFieldToCache(class1, identityHashMap0);
      ParserConfig.getGlobalInstance();
      TypeUtils.loadClass("fastjson.parser.deny");
      ParserConfig parserConfig1 = new ParserConfig();
      TypeUtils.isKotlin(class0);
      MessageFormat messageFormat0 = new MessageFormat("cl");
      Class<Double> class2 = Double.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) messageFormat0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.text.MessageFormat@c69
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "";
      TypeUtils.decapitalize("");
      TypeUtils.toLocale("");
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("");
      outOfMemoryError0.printStackTrace();
      outOfMemoryError0.getStackTrace();
      outOfMemoryError0.getStackTrace();
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.JSONException");
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      Class<OptionalCodec> class2 = OptionalCodec.class;
      TypeUtils.getKoltinConstructorParameters(class2);
      TypeUtils.getParserFeatures(class1);
      Class<MockSimpleDateFormat> class3 = MockSimpleDateFormat.class;
      TypeUtils.getKoltinConstructorParameters(class3);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TypeUtils.decapitalize("Ljava.util.concurrent.ConcurrentSkipListSet");
      Dimension dimension0 = new Dimension(0, (-418));
      MockThread mockThread0 = new MockThread();
      mockThread0.getContextClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("Ljava.util.concurrent.ConcurrentSkipListSet");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.util.concurrent.ConcurrentSkipListSet
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParserConfig.getGlobalInstance();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<TimeUnit> class1 = TimeUnit.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) linkedHashMap0, true, (PropertyNamingStrategy) null);
      ParserConfig.getGlobalInstance();
      TypeUtils.loadClass("fastjson.parser.autoTypeAccept");
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("kbr(w%P%a8");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTimeoutException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@160a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      Class<TimeUnit> class1 = TimeUnit.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) treeMap0, false, propertyNamingStrategy0);
      ParserConfig.getGlobalInstance();
      HttpCookie httpCookie0 = new HttpCookie("O", "");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) httpCookie0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : O=\"\"
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.getParserFeatures(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.getClassFromMapping("X]");
      Properties properties0 = new Properties();
      AtomicLong atomicLong0 = new AtomicLong(0);
      TypeUtils.castToLong(atomicLong0);
      Class<FieldInfo> class1 = FieldInfo.class;
      TypeUtils.isProxy(class1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong((-2326L));
      atomicLong0.addAndGet((-1L));
      atomicLong0.lazySet((-2326L));
      TypeUtils.castToInt(atomicLong0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Class<Integer> class1 = Integer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TypeUtils.decapitalize("");
      TypeUtils.toLocale("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      Class<SimpleDateFormat> class1 = SimpleDateFormat.class;
      TypeUtils.castToEnum((Object) "", class1, parserConfig0);
      TypeUtils.loadClass("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.text.SimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "kZyj|";
      stringArray0[1] = "[";
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      TypeUtils.castToChar("");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instant instant0 = MockInstant.ofEpochSecond(3902L, 3902L);
      Timestamp timestamp0 = Timestamp.from(instant0);
      timestamp0.toInstant();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"Ji~Hjc");
      timestamp0.toInstant();
      TypeUtils.castToTimestamp(timestamp0);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '?';
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(charArray0, (-46160863));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TypeUtils.isNumber("(CLjava/lang/String;Ljava/math/BigDecimal;)V");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      TypeUtils.loadClass((String) null);
      StackTraceElement stackTraceElement0 = new StackTraceElement("LVZj_a3_", "LVZj_a3_", (String) null, 114);
      TypeUtils.castToFloat((Object) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      ParserConfig.getGlobalInstance();
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class1, jSONType0);
      TypeUtils.isGenericParamType(class2);
      Type type0 = TypeUtils.unwrapOptional(class1);
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = type0;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = type0;
      Class<?> class3 = TypeUtils.getRawClass(typeArray0[1]);
      typeArray0[4] = (Type) class3;
      typeArray0[5] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], type0);
      parameterizedTypeImpl0.getTypeName();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("create asm deserializer error, ");
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTimeoutException0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.StackTraceElement
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Type[] typeArray0 = new Type[0];
      Class<Double> class0 = Double.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, class1);
      parameterizedTypeImpl0.getTypeName();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("GV\"+am");
      Type[] typeArray1 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray1, class1, (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class2, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Double
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      hashMap0.put("Ljava.util.concurrent.ConcurrentSkipListSet", "Ljava.util.concurrent.ConcurrentSkipListSet");
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "|9t#NV_o68", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.SimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ParserConfig.getGlobalInstance();
      Class<Double> class0 = Double.TYPE;
      TypeUtils.isKotlin(class0);
      TypeUtils.decapitalize("L{$.F9`$-Eklm Wz");
      TypeUtils.fnv1a_64_lower("6<kM~Pd/ZR1{_}*");
      TypeUtils.castToBytes("l{$.F9`$-Eklm Wz");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("com.alibaba.fastjson.serializer.AppendableSerializer", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. com.alibaba.fastjson.serializer.AppendableSerializer -> java.lang.String
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      TypeUtils.loadClass("scanBoolean", classLoader1, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "scanBoolean", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Class<Integer> class1 = Integer.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class1;
      typeArray0[5] = (Type) class1;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class1;
      typeArray0[8] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[0]);
      Byte byte0 = new Byte((byte)104);
      TypeUtils.castToShort(byte0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("UTF-8", "N", "andDecrement", (-1027));
      TypeUtils.castToFloat((Object) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TypeUtils.decapitalize("H> X:q5MSi)Ojb\"");
      Dimension dimension0 = new Dimension(0, (-418));
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("H> X:q5MSi)Ojb\"", classLoader0, true);
      ParserConfig parserConfig0 = ParserConfig.global;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.cast((Object) "", (Type) parameterizedTypeImpl0, parserConfig0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Vector<FieldInfo> vector0 = new Vector<FieldInfo>();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      Class<Integer> class0 = Integer.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(linkedHashMap0);
      TypeUtils.castToBigDecimal(treeMap0);
      TypeUtils.getCollectionItemType(class0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      Class<Integer> class0 = Integer.class;
      Map<String, String> map0 = new java.util.IdentityHashMap<String, String>();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      TypeUtils.castToShort((Object) null);
      System.setCurrentTimeMillis(0L);
      TypeUtils.castToLong((Object) null);
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.lang.Integer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TypeUtils.castToShort((Object) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TypeUtils.isNumber("(CLjava/lang/String;Ljava/math/BigDecimal;)V");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<RenderingHints> class0 = RenderingHints.class;
      TypeUtils.isKotlin(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Class<GridBagConstraints>[] classArray0 = (Class<GridBagConstraints>[]) Array.newInstance(Class.class, 2);
      Class<GridBagConstraints> class1 = GridBagConstraints.class;
      classArray0[0] = class1;
      Class<GridBagConstraints> class2 = GridBagConstraints.class;
      classArray0[1] = class2;
      parserConfig0.initJavaBeanDeserializers(classArray0);
      Class<Float> class3 = Float.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) decimalFormat0, (Type) class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.text.DecimalFormat@674dc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.isKotlin(class0);
      Class<Rectangle> class1 = Rectangle.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      treeMap0.put("fastjson.parser.deny", "toString");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) treeMap1, true, propertyNamingStrategy0);
      ParserConfig parserConfig1 = new ParserConfig(true);
      JobAttributes jobAttributes1 = new JobAttributes();
      parserConfig1.initJavaBeanDeserializers((Class<?>[]) null);
      Properties properties0 = new Properties();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@12e1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Constructor<SQLFeatureNotSupportedException>[] constructorArray0 = (Constructor<SQLFeatureNotSupportedException>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      TypeUtils.isHibernateInitialized((Object) null);
      Class<TimeUnit> class0 = TimeUnit.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, hashMap0, false, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TypeUtils.clearClassMapping();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(linkedHashMap0);
      TypeUtils.castToBigDecimal(treeMap0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("xB[(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"xB[(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("Ljava.awt.Rectangle");
      Timestamp timestamp0 = new Timestamp(0L);
      TypeUtils.castToBigDecimal((Object) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      Class<MockCalendar> class0 = MockCalendar.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig1, class0);
      TypeUtils.getGenericParamType(class0);
      TypeUtils.getClassFromMapping("Eu}+V`&X=3vo&");
      OptionalCodec optionalCodec0 = new OptionalCodec();
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TypeUtils.decapitalize("isEmpty");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@99
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      Class<Integer> class1 = Integer.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.global;
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("TODO");
      Class<SQLNonTransientException> class2 = SQLNonTransientException.class;
      TypeUtils.isKotlin(class2);
      ParserConfig parserConfig1 = new ParserConfig(true);
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[2] = (Type) class2;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) outOfMemoryError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(1075L);
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      atomicLong0.getAndAccumulate(1075L, longBinaryOperator0);
      atomicLong0.lazySet(1075L);
      atomicLong0.lazySet(1075L);
      TypeUtils.castToBoolean(atomicLong0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong((-2326L));
      atomicLong0.lazySet((-908L));
      TypeUtils.castToBoolean("");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TypeUtils.clearClassMapping();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockThrowable mockThrowable0 = new MockThrowable("org.springframework.security.web.savedrequest.DefaultSavedRequest");
      mockThrowable0.getSuppressed();
      mockThrowable0.printStackTrace();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("javassist.util.proxy.ProxyObject");
      noClassDefFoundError0.getStackTrace();
      noClassDefFoundError0.getStackTrace();
      Boolean boolean0 = new Boolean(false);
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.isProxy(class0);
      Boolean boolean1 = new Boolean(false);
      TypeUtils.castToBoolean(boolean1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      ParserConfig.getGlobalInstance();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.deny", treeMap0);
      Class<SQLIntegrityConstraintViolationException> class1 = SQLIntegrityConstraintViolationException.class;
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class1, jSONType0);
      TypeUtils.isGenericParamType(class2);
      Type type0 = TypeUtils.unwrapOptional(class1);
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = type0;
      typeArray0[1] = (Type) class1;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<ImageCapabilities> class3 = ImageCapabilities.class;
      TypeUtils.buildBeanInfo((Class<?>) class3, (Map<String, String>) hashMap0, (PropertyNamingStrategy) null, false);
      TypeUtils.isHibernateInitialized(class0);
      TypeUtils.isHibernateInitialized(treeMap0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Constructor<SQLFeatureNotSupportedException>[] constructorArray0 = (Constructor<SQLFeatureNotSupportedException>[]) Array.newInstance(Constructor.class, 7);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      LinkedHashSet<java.sql.Date> linkedHashSet0 = new LinkedHashSet<java.sql.Date>();
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) linkedHashSet0, (Class<SQLSyntaxErrorException>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // clazz is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      Class<Integer> class0 = Integer.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      TypeUtils.castToShort((Object) null);
      System.setCurrentTimeMillis(0L);
      VerifyError verifyError0 = new VerifyError();
      MockDate mockDate0 = new MockDate(16, 633, 37, 633, (-1172), 3524);
      TypeUtils.castToDate(mockDate0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(linkedHashMap0);
      VerifyError verifyError0 = new VerifyError();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("<WeBloXn/n |");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"<WeBloXn/n |\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(linkedHashMap0);
      treeMap0.put("a^~/XA^=4mhNU", "a^~/XA^=4mhNU");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(treeMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "getgtClass";
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents1 = BufferCapabilities.FlipContents.BACKGROUND;
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("getgtClass");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getgtClass\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Type type0 = TypeUtils.unwrapOptional(class0);
      Type[] typeArray0 = new Type[6];
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = type0;
      Class<?> class1 = TypeUtils.getRawClass(typeArray0[1]);
      typeArray0[4] = (Type) class1;
      typeArray0[5] = type0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], type0);
      System.setCurrentTimeMillis(0L);
      TypeUtils.unwrapOptional(typeArray0[1]);
      Locale locale0 = Locale.FRANCE;
      Collator collator0 = Collator.getInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(collator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.text.RuleBasedCollator@ea51b32a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      Class<Integer> class0 = Integer.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      TypeUtils.castToShort((Object) null);
      parameterizedTypeImpl0.getTypeName();
      System.setCurrentTimeMillis(0L);
      TypeUtils.castToLong((Object) null);
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Timestamp timestamp0 = new Timestamp(1168L);
      TypeUtils.loadClass("+(#pxr>0>|34");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.toLocale("%aB;fR@|%p.U+");
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      TypeUtils.fnv1a_64("Z");
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      Class<Integer> class0 = Integer.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<AtomicLong> class1 = AtomicLong.class;
      ParserConfig parserConfig1 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) identityHashMap0, class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.concurrent.atomic.AtomicLong
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      outOfMemoryError0.getStackTrace();
      outOfMemoryError0.getStackTrace();
      TypeUtils.loadClass("com.alibaba.fastjson.JSONException");
      Class<Integer> class0 = Integer.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) outOfMemoryError0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.OutOfMemoryError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("dd.MM.yyyy HH:mm:ss", "dd.MM.yyyy HH:mm:ss");
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("L", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeAccept", class0, class0, class0, (Field) null, 1776, 14, (-1));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Type type0 = beanContext0.getFieldType();
      TypeUtils.getCollectionItemClass(type0);
      beanContext0.getField();
      TypeUtils.castToInt((Object) null);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass(";Z^j|", classLoader1, false);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) aSMClassLoader0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.util.ASMClassLoader@379ff7b4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParserConfig.getGlobalInstance();
      String string0 = "xB[(";
      Class<Character> class0 = Character.TYPE;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class2, "|9%7A!EG1", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeAccept", class1, class2, class2, (Field) null, 54, 86, 54);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.getSuperMethodAnnotation(fieldInfo0.fieldClass, (Method) null);
      FieldInfo fieldInfo1 = null;
      try {
        fieldInfo1 = new FieldInfo("xB[(", (Method) null, (Field) null, class0, class2, 65, (-1039), (-1039), (JSONField) null, (JSONField) null, "xB[(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      ParserConfig.getGlobalInstance();
      JSONObject jSONObject0 = new JSONObject(1390);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      jSONObject1.getByte("1.2.46");
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.getCollectionItemClass(class1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-87);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)43;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TypeUtils.castToBigDecimal(bigInteger0);
      TypeUtils.getCollectionItemClass(class0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      TypeUtils.castToSqlTime("");
      TypeUtils.clearClassMapping();
      System.setCurrentTimeMillis((-2584L));
      TypeUtils.isHibernateInitialized("");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.getKoltinConstructorParameters(class0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.global;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap1, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      TypeUtils.getClassFromMapping("fastjson.parser.deny");
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, (Type) null);
      ParserConfig parserConfig1 = new ParserConfig((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@7519
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      TimeZone timeZone0 = TimeZone.getTimeZone("isEmpty");
      Locale locale0 = Locale.FRENCH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      mockGregorianCalendar0.getTimeInMillis();
      TypeUtils.castToTimestamp(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
