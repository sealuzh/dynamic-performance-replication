/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:06:11 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.MnCross;
import org.freehep.math.minuit.MnFunctionCross;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnFunctionCross_ESTest extends MnFunctionCross_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 3.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.toString();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-477.646), 3199.7748497, 3.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      mnUserParameterState0.clone();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1358.4238877337), mnStrategy0, (-1808.4552203245));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3.0, 3);
      // Undeclared exception!
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3, 3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, Double.POSITIVE_INFINITY, mnStrategy0, Double.POSITIVE_INFINITY);
      int[] intArray0 = new int[2];
      mnUserParameters1.add("SS}ZjT", Double.POSITIVE_INFINITY);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, Double.POSITIVE_INFINITY, (-931));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-617.7656582146897);
      doubleArray0[1] = (-617.7656582146897);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3016.561, (MnStrategy) null, (-2933.7039365025944));
      int[] intArray0 = new int[9];
      intArray0[2] = 0;
      intArray0[5] = 0;
      intArray0[7] = (-2390);
      mnUserParameters0.setUpperLimit(0, 4941.644363);
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2933.7039365025944), 430);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 8.200000000000001;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-8.595802332370244);
      doubleArray0[3] = 5.0;
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(doubleArray0, doubleArray0);
      MnStrategy mnStrategy0 = new MnStrategy((-4510));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 5.0, mnStrategy0, 2817.1787553598);
      int[] intArray0 = new int[0];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 574.191, 1762);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.toString();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray0 = mnUserParameters0.errors();
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2954.416915).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4.0, mnStrategy0, 2954.416915);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 931.0, 2143025013);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3882.9128961791967), (-3882.9128961791967), 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-738.885969642839), mnStrategy0, 0.0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 8.0, 1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, Double.POSITIVE_INFINITY, mnStrategy0, Double.POSITIVE_INFINITY);
      int[] intArray0 = new int[2];
      mnUserParameters0.add("SS}ZjT", Double.POSITIVE_INFINITY);
      mnUserParameters0.setLowerLimit("SS}ZjT", (-3746.1418031396543));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-946);
      doubleArray0[3] = (-2994.0);
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-3746.1418031396543), 353);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 3.0;
      doubleArray0[16] = 2954.416915;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      mnUserParameters1.toString();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameters1.errors();
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3.0, mnStrategy0, (-1808.4552203245));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3.0, 1503);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 2954.416915;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      mnUserParameters1.toString();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray1 = mnUserParameters1.errors();
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnStrategy mnStrategy1 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3267.7050979184, mnStrategy1, 3481.076585939205);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, (-519.5147539868641), 3);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.toString();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameters0.errors();
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3199.7748497, mnStrategy0, (-1358.4238877337));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3.0, 2145871193);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(510.8223606576501, 510.8223606576501, 3.0, (-477.646), 3.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 8.0;
      double double0 = 2726.03183;
      doubleArray0[2] = 2726.03183;
      doubleArray0[3] = 2954.416915;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3.0, mnStrategy0, 2726.03183);
      int[] intArray0 = new int[0];
      mnStrategy0.setGradientTolerance(2726.03183);
      int[] intArray1 = new int[2];
      doubleArray0[2] = (double) 0;
      int int1 = (-941);
      mnUserParameters1.add("SS<ZjT", 8.0);
      mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 510.8223606576501, 1502);
      mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, (-1046.0), (-941));
      // Undeclared exception!
      try { 
        mnUserParameters1.fix("@o;6dCHi");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4.0, 4.0, 3.0, 4.0, 3.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[19];
      doubleArray0[18] = 4.0;
      doubleArray0[3] = 0.001;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 4.0, mnStrategy0, 0.001);
      int[] intArray0 = new int[0];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 0);
      int int0 = (-963);
      MnStrategy mnStrategy1 = new MnStrategy();
      MnUserParameters mnUserParameters2 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnUserParameters2.setValue((-963), 0.001);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 3.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      mnUserParameters1.toString();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-477.646), 3199.7748497, 3.0, (-1808.4552203245), 3.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-1358.4238877337), mnStrategy0, (-1808.4552203245));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3.0, 3);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 1987.66071812377, 1610612736);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(510.8223606576501, 510.8223606576501, 3.0, (-476.5914970776657)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.0;
      doubleArray0[2] = 510.8223606576501;
      doubleArray0[3] = 3.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientTolerance(510.8223606576501);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3.0, mnStrategy0, 3.0);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      mnUserParameters1.add("SS}ZjT", 510.8223606576501);
      mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 3.0, 2054);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 510.8223606576501, 0);
      mnUserParameters1.setLowerLimit("SS}ZjT", 3.0);
      // Undeclared exception!
      try { 
        mnUserParameterState0.intOfExt((-946));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=-946
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.toString();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameters0.errors();
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4.0E-7, 2954.416915, (-1358.4238877337), 3199.7748497, (-2555.519099)).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3199.7748497, mnStrategy0, (-1358.4238877337));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3.0, 2145871193);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.toString();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnUserParameters0.errors();
      int[] intArray0 = new int[0];
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2954.416915, (-1508.1808), 2954.416915, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3199.7748497, mnStrategy0, (-1358.4238877337));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 3.0, 2145871193);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3882.9128961791967), (-3882.9128961791967), 0.2, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[0];
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-738.885969642839), mnStrategy0, 0.0);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 8.0, 1);
      assertNotNull(mnCross0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 3.0;
      double double0 = 2955.536974433184;
      doubleArray0[16] = 2955.536974433184;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      mnUserParameters1.toString();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      double[] doubleArray1 = mnUserParameters1.errors();
      int[] intArray0 = new int[0];
      int int0 = 3;
      double double1 = 6.66300417703936E13;
      double double2 = 7.0;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(6.66300417703936E13, 7.0, 3.0).when(fCNBase0).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 2955.536974433184, mnStrategy0, 3126.8978);
      int int1 = 2054;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray1, 2054, 3);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray1, 3, 522);
      // Undeclared exception!
      try { 
        mnUserParameters0.setLowerLimit("\n# ext. ||   name    ||   type  ||   value   ||  error +/- \n\n\n\n", 9.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(4.0, 4.0, 3.0, (-477.646), 3.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[19];
      doubleArray0[18] = 4.0;
      doubleArray0[3] = 0.001;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, (-477.646), mnStrategy0, 0.001);
      int[] intArray0 = new int[0];
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 0);
      int int0 = (-963);
      MnUserParameters mnUserParameters2 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnUserParameters2.setValue((-963), 0.001);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 3.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3.0, mnStrategy0, Double.POSITIVE_INFINITY);
      int[] intArray0 = new int[2];
      mnUserParameters0.add("SS}ZjT", Double.POSITIVE_INFINITY);
      double double0 = (-3746.1418031396543);
      mnUserParameters0.setLowerLimit("SS}ZjT", (-3746.1418031396543));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-946);
      doubleArray0[3] = (-2994.0);
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 3.0;
      // Undeclared exception!
      try { 
        mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, (-477.646), (-1265));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.freehep.math.minuit.MnFunctionCross", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(515.6129818331946, 515.6129818331946, 3.0, 3.0, 3.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 515.6129818331946;
      doubleArray0[3] = 3.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[2];
      mnUserParameters1.add("SS}ZjT", 515.6129818331946);
      mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 3.0, 2054);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 515.6129818331946, 0);
      mnUserParameters1.setLowerLimit("SS}ZjT", (-3746.1418031396543));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, (-2994.0), 15);
      mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 2747.1, (-946));
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-946);
      doubleArray0[2] = (double) (-947);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray1, doubleArray1, doubleArray1, 10.0, 1383);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(510.8223606576501, 510.8223606576501, 3.0, (-477.646), 3.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.0;
      doubleArray0[2] = 510.8223606576501;
      doubleArray0[3] = 3.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 3.0, mnStrategy0, 3.0);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      mnUserParameters1.add("SS}ZjT", 510.8223606576501);
      int[] intArray2 = new int[1];
      MnCross mnCross0 = mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 3.0, 0);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 510.8223606576501, 0);
      mnUserParameters1.setLowerLimit("SS}ZjT", (-3746.1418031396543));
      mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 11.0, (-946));
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-946);
      doubleArray1[3] = 10.0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (-3746.1418031396543);
      MnCross mnCross1 = mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray1, 0, 2146876580);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(510.8223606576501, 510.8223606576501, 510.8223606576501, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 510.8223606576501;
      doubleArray0[2] = 510.8223606576501;
      doubleArray0[3] = 510.8223606576501;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientTolerance(510.8223606576501);
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 510.8223606576501, mnStrategy0, 510.8223606576501);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      mnUserParameters1.add("SS}ZjT", 510.8223606576501);
      mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray0, 510.8223606576501, 2054);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 510.8223606576501, 0);
      mnUserParameters1.setLowerLimit("SS}ZjT", 510.8223606576501);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-946);
      doubleArray1[2] = 510.8223606576501;
      doubleArray1[3] = 10.0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = 10.0;
      mnFunctionCross0.cross(intArray1, doubleArray0, doubleArray1, 0, 2146876580);
      // Undeclared exception!
      try { 
        mnUserParameterState0.intOfExt((-946));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ext=-946
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 2.4289426121396187, (-477.646), 2.4289426121396187).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[2];
      mnUserParameters1.add("SS}ZjT", Double.POSITIVE_INFINITY);
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, (-946));
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, 2054);
      mnUserParameters1.setLowerLimit("SS}ZjT", 0.5);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-946);
      doubleArray0[0] = 0.5;
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-477.646), (-946));
      mnUserParameterState0.setLimits("SS}ZjT", (-457.456882234637), (-946.0));
      MnCross mnCross1 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-931), (-709918049));
      assertFalse(mnCross1.equals((Object)mnCross0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.5, (-477.646), 0.5).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[12];
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters1);
      MnStrategy mnStrategy0 = new MnStrategy();
      MnFunctionCross mnFunctionCross0 = new MnFunctionCross(fCNBase0, mnUserParameterState0, 0.0, mnStrategy0, 0.0);
      int[] intArray0 = new int[2];
      mnStrategy0.setHessianStepTolerance((-894));
      mnUserParameters1.add("SmS}ZjT", Double.POSITIVE_INFINITY);
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, 0.0, (-894));
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-894);
      doubleArray1[2] = (-0.6848435748980144);
      mnFunctionCross0.cross(intArray0, doubleArray1, doubleArray0, 0.5, (-894));
      mnUserParameters1.setLowerLimit("SmS}ZjT", (-3746.1418));
      MnCross mnCross0 = mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-2994.0), (-10));
      doubleArray0[2] = (double) (-10);
      doubleArray0[0] = (-477.646);
      mnUserParameterState0.errors();
      mnFunctionCross0.cross(intArray0, doubleArray0, doubleArray0, (-18.505289416417586), (-3298));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3746.1418), (-18.505289416417586), (-10.0), (double)(-10), (double)(-10)).when(fCNBase1).valueOf(any(double[].class));
      MnFunctionCross mnFunctionCross1 = new MnFunctionCross(fCNBase1, mnUserParameterState0, (-0.6848435748980144), mnStrategy0, (-18.505289416417586));
      mnFunctionCross1.cross(intArray0, doubleArray1, doubleArray0, 383.2936157913603, 30);
      MnCross mnCross1 = mnFunctionCross1.cross(intArray0, doubleArray0, doubleArray0, 2.2, 7);
      assertFalse(mnCross1.equals((Object)mnCross0));
  }
}
