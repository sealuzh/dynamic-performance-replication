/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:07:02 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.EigenDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EigenDecompositor_ESTest extends EigenDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      EigenDecompositor eigenDecompositor0 = null;
      try {
        eigenDecompositor0 = new EigenDecompositor(columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrix can not be used with this decompositor.
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.constant(8, 8, 0.7210528872413384);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.random(6, 6, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextLong();
      DenseMatrix denseMatrix0 = DenseMatrix.random(6, 6, mockRandom0);
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = (double) (-6683);
      doubleArray2[2] = (double) (-6683);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-6683);
      doubleArray3[2] = (double) (-6683);
      doubleArray0[2] = doubleArray3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.4444444444444444, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(4, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals((-6683.0), columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(columnMajorSparseMatrix0);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.4444444444444444, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(4, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals((-6683.0), columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.4444444444444444, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(4, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals((-6683.0), columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(matrixArray0);
      
      Matrix[] matrixArray1 = eigenDecompositor0.decompose();
      assertFalse(matrixArray1.equals((Object)matrixArray0));
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.4444444444444444, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(4, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals((-6683.0), columnMajorSparseMatrix0.min(), 0.01);
      assertNotSame(matrixArray1, matrixArray0);
      assertNotNull(matrixArray1);
      
      Matrix[] matrixArray2 = eigenDecompositor0.decompose();
      assertFalse(matrixArray2.equals((Object)matrixArray0));
      assertFalse(matrixArray2.equals((Object)matrixArray1));
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.4444444444444444, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(4, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals((-6683.0), columnMajorSparseMatrix0.min(), 0.01);
      assertNotSame(matrixArray2, matrixArray0);
      assertNotSame(matrixArray2, matrixArray1);
      assertNotNull(matrixArray2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-6700);
      doubleArray1[2] = (double) (-6700);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.2138757676568719;
      doubleArray1[0] = (double) (-6700);
      doubleArray2[2] = (double) (-6700);
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(0.6666666666666666, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.2138757676568719, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.cardinality());
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals((-6700.0), columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(columnMajorSparseMatrix0);
      assertEquals(0.6666666666666666, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.2138757676568719, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.cardinality());
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals((-6700.0), columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(0.6666666666666666, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.2138757676568719, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.cardinality());
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals((-6700.0), columnMajorSparseMatrix0.min(), 0.01);
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(10, 10, mockRandom0);
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, denseMatrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      EigenDecompositor eigenDecompositor1 = new EigenDecompositor(denseMatrix0);
      assertFalse(eigenDecompositor1.equals((Object)eigenDecompositor0));
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, denseMatrix0.columns());
      assertNotNull(eigenDecompositor1);
      
      Matrix[] matrixArray0 = eigenDecompositor1.decompose();
      assertFalse(eigenDecompositor1.equals((Object)eigenDecompositor0));
      assertEquals(10, denseMatrix0.rows());
      assertEquals(10, denseMatrix0.columns());
      assertNotSame(eigenDecompositor1, eigenDecompositor0);
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.random(26, 26, mockRandom0);
      assertEquals(26, denseMatrix0.rows());
      assertEquals(26, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(denseMatrix0);
      assertEquals(26, denseMatrix0.rows());
      assertEquals(26, denseMatrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      // Undeclared exception!
      eigenDecompositor0.decompose();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.2138757676568719;
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.2138757676568719, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.2222222222222222, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(columnMajorSparseMatrix0);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.2138757676568719, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.2222222222222222, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.2138757676568719, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.2222222222222222, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.2138757676568719;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[1] = 0.2138757676568719;
      doubleArray0[2] = doubleArray3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(0.2138757676568719, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.2222222222222222, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(columnMajorSparseMatrix0);
      assertEquals(0.2138757676568719, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.2222222222222222, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2, columnMajorSparseMatrix0.cardinality());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(0.2138757676568719, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.2222222222222222, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2, columnMajorSparseMatrix0.cardinality());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(1, 1, 1);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(1, sparseMatrix0.rows());
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertNotNull(sparseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(sparseMatrix0);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(1, sparseMatrix0.rows());
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertNotNull(eigenDecompositor0);
      
      eigenDecompositor0.matrix = (Matrix) columnMajorSparseMatrix0;
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(1, sparseMatrix0.rows());
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(3, eigenDecompositor0.matrix.rows());
      assertEquals(0, eigenDecompositor0.matrix.columns());
      
      // Undeclared exception!
      try { 
        eigenDecompositor0.decompose();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't decompose rectangle matrix
         //
         verifyException("org.la4j.decomposition.EigenDecompositor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-6671);
      doubleArray1[1] = (double) (-6671);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = (double) (-6671);
      doubleArray2[2] = (double) (-6671);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (-6671);
      doubleArray3[2] = (double) (-6671);
      doubleArray0[2] = doubleArray3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals(0.6666666666666666, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals((-6671.0), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(6, columnMajorSparseMatrix0.cardinality());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(columnMajorSparseMatrix0);
      assertEquals(0.6666666666666666, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals((-6671.0), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(6, columnMajorSparseMatrix0.cardinality());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals(0.6666666666666666, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals((-6671.0), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(6, columnMajorSparseMatrix0.cardinality());
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-6700);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.2138757676568719;
      doubleArray1[0] = (double) (-6700);
      doubleArray2[1] = (double) (-6700);
      doubleArray2[2] = (double) (-6700);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (-6700);
      doubleArray3[2] = (double) (-6700);
      doubleArray3[3] = 0.2138757676568719;
      doubleArray0[2] = doubleArray3;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertEquals((-6700.0), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.6666666666666666, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.2138757676568719, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.cardinality());
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertNotNull(columnMajorSparseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(columnMajorSparseMatrix0);
      assertEquals((-6700.0), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.6666666666666666, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.2138757676568719, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.cardinality());
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertEquals((-6700.0), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.6666666666666666, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.2138757676568719, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.cardinality());
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertNotNull(matrixArray0);
      
      boolean boolean0 = eigenDecompositor0.applicableTo(columnMajorSparseMatrix0);
      assertEquals((-6700.0), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.6666666666666666, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0.2138757676568719, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, columnMajorSparseMatrix0.cardinality());
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      assertNotNull(ooPlaceOuterProduct0);
      
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-6700);
      doubleArray1[1] = (double) (-6700);
      doubleArray1[2] = (double) (-6700);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.2138757676568719;
      doubleArray1[0] = (double) (-6700);
      doubleArray2[2] = (double) (-6700);
      doubleArray0[1] = doubleArray2;
      doubleArray0[2] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(7, columnMajorSparseMatrix0.cardinality());
      assertEquals((-6700.0), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.7777777777777778, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(0.2138757676568719, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      EigenDecompositor eigenDecompositor0 = new EigenDecompositor(columnMajorSparseMatrix0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(7, columnMajorSparseMatrix0.cardinality());
      assertEquals((-6700.0), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.7777777777777778, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(0.2138757676568719, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertNotNull(eigenDecompositor0);
      
      Matrix[] matrixArray0 = eigenDecompositor0.decompose();
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(7, columnMajorSparseMatrix0.cardinality());
      assertEquals((-6700.0), columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.7777777777777778, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.rows());
      assertEquals(0.2138757676568719, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(3, columnMajorSparseMatrix0.columns());
      assertNotNull(matrixArray0);
  }
}
