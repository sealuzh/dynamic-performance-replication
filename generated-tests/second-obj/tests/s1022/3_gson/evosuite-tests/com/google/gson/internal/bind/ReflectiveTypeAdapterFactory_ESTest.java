/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:22:29 GMT 2018
 */

package com.google.gson.internal.bind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.FieldNamingPolicy;
import com.google.gson.FieldNamingStrategy;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.internal.ConstructorConstructor;
import com.google.gson.internal.Excluder;
import com.google.gson.internal.ObjectConstructor;
import com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory;
import com.google.gson.internal.bind.ReflectiveTypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import java.io.CharArrayReader;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReflectiveTypeAdapterFactory_ESTest extends ReflectiveTypeAdapterFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ReflectiveTypeAdapterFactory.Adapter<Integer> reflectiveTypeAdapterFactory_Adapter0 = new ReflectiveTypeAdapterFactory.Adapter<Integer>((ObjectConstructor<Integer>) null, hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      int int0 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      JsonPrimitive jsonPrimitive0 = new JsonPrimitive(boolean0);
      FieldNamingPolicy fieldNamingPolicy0 = FieldNamingPolicy.IDENTITY;
      JsonArray jsonArray0 = new JsonArray();
      // Undeclared exception!
      try { 
        reflectiveTypeAdapterFactory_Adapter0.fromJsonTree(jsonArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      ConstructorConstructor constructorConstructor0 = null;
      FieldNamingStrategy fieldNamingStrategy0 = null;
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = new Excluder();
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
      Gson gson0 = new Gson();
      Excluder excluder2 = excluder1.excludeFieldsWithoutExposeAnnotation();
      Class<Integer> class0 = Integer.TYPE;
      TypeToken<Integer> typeToken0 = TypeToken.get(class0);
      Gson gson1 = new Gson();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/3_gson");
      Class<Object> class1 = Object.class;
      TypeToken<Object> typeToken1 = TypeToken.get(class1);
      gson1.getDelegateAdapter((TypeAdapterFactory) excluder2, typeToken1);
      JsonObject jsonObject0 = new JsonObject();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      // Undeclared exception!
      try { 
        gson1.getDelegateAdapter((TypeAdapterFactory) null, typeToken0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // GSON cannot serialize int
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMap<String, ReflectiveTypeAdapterFactory.BoundField> hashMap0 = new HashMap<String, ReflectiveTypeAdapterFactory.BoundField>();
      MockFileWriter mockFileWriter0 = new MockFileWriter("49\"HL82e|~<>:`mG");
      Excluder excluder0 = new Excluder();
      Excluder excluder1 = new Excluder();
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
      ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory0 = new ReflectiveTypeAdapterFactory((ConstructorConstructor) null, (FieldNamingStrategy) null, excluder0, jsonAdapterAnnotationTypeAdapterFactory0);
      excluder1.excludeFieldsWithoutExposeAnnotation();
      Gson gson0 = new Gson();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/3_gson");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      gson0.toJsonTree((Object) jsonAdapterAnnotationTypeAdapterFactory0);
      Class<Integer> class0 = Integer.class;
      TypeToken.get(class0);
      Class<Float> class1 = Float.TYPE;
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory1 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
      gson0.excluder();
      excluder1.disableInnerClassSerialization();
      Gson gson1 = new Gson();
      assertFalse(gson1.serializeNulls());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonArray jsonArray0 = new JsonArray();
      char[] charArray0 = new char[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      charArray0[0] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      JsonAdapterAnnotationTypeAdapterFactory jsonAdapterAnnotationTypeAdapterFactory0 = new JsonAdapterAnnotationTypeAdapterFactory((ConstructorConstructor) null);
      Gson gson0 = new Gson();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Integer> class0 = Integer.class;
      TypeToken.get(class0);
      Class<Float> class1 = Float.TYPE;
      FieldNamingStrategy fieldNamingStrategy0 = gson0.fieldNamingStrategy();
      gson0.toJsonTree((Object) charArrayReader0);
      int int0 = Character.MIN_CODE_POINT;
      Excluder excluder0 = Excluder.DEFAULT;
      ReflectiveTypeAdapterFactory reflectiveTypeAdapterFactory0 = new ReflectiveTypeAdapterFactory((ConstructorConstructor) null, fieldNamingStrategy0, excluder0, jsonAdapterAnnotationTypeAdapterFactory0);
  }
}
