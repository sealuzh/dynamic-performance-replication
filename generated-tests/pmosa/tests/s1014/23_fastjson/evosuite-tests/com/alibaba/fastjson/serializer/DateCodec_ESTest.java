/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 03:19:01 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.util.Enumeration;
import java.util.IdentityHashMap;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      System.setCurrentTimeMillis((-1179L));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7+v2");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) "7+v2", (Object) defaultJSONParser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]{P0|6", parserConfig0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) "(C)Ljava/lang/Character;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(C)Ljava/lang/Character;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("7DL8<ONPfTErKJ#:O73", parserConfig0);
      Class<Object> class0 = Object.class;
      JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) byte0, (Object) "7DL8<ONPfTErKJ#:O73");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7DL8<ONPfTErKJ#:O73\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      JSONSerializer jSONSerializer1 = new JSONSerializer();
      Class<Long> class0 = Long.TYPE;
      MockDate mockDate0 = new MockDate((-3348), (-2340), (-3348));
      dateCodec0.write(jSONSerializer0, mockDate0, class0, class0, (-1637));
      dateCodec0.getFastMatchToken();
      dateCodec0.getFastMatchToken();
      System.setCurrentTimeMillis((-520L));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]{P0|6", parserConfig0);
      Class<Object> class0 = Object.class;
      JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) null, (Object) byte0, (Object) "]{P0|6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"]{P0|6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00t00:00:00");
      Class<Object> class0 = Object.class;
      Class<Integer> class1 = Integer.class;
      JavaBeanInfo.getBuilderClass(class1, (JSONType) null);
      Byte byte0 = new Byte((byte)0);
      DateCodec dateCodec1 = DateCodec.instance;
      dateCodec1.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) "0000-00-00t00:00:00");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]{P0|6", parserConfig0);
      Class<Object> class0 = Object.class;
      MockDate mockDate0 = new MockDate((-1205), 2, 45);
      MockFile mockFile0 = new MockFile("/Date(()", "fastjson.parser.autoTypeAccept");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializeWriter serializeWriter0 = new SerializeWriter(mockPrintWriter0, 3258, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, byte0, serializerFeature5, class0, 562);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.util.Date
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]{_0|6", parserConfig0);
      Class<Object> class0 = Object.class;
      MockDate mockDate0 = new MockDate((-1205), 2, (-1205));
      MockFile mockFile0 = new MockFile("/Date(()", "fastjson.parser.autoTypeAccept");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[3] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[4] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[5] = serializerFeature4;
      SerializeWriter serializeWriter0 = new SerializeWriter(mockPrintWriter0, 3258, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      Byte byte0 = new Byte((byte)0);
      dateCodec0.write(jSONSerializer0, byte0, serializerFeature4, class0, 562);
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Object> class0 = Object.class;
      MockFile mockFile0 = new MockFile("fastjson.parser.deny", "fastjson.parser.autoTypeAccept");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      SerializeWriter serializeWriter0 = new SerializeWriter(mockPrintWriter0, (-3607), serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3607), (-3607), (-3607));
      Byte byte0 = new Byte((byte) (-42));
      dateCodec0.write(jSONSerializer0, mockGregorianCalendar0, byte0, class0, (-3607));
      assertEquals(21, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6a*(X(.V", parserConfig0);
      Class<Object> class0 = Object.class;
      MockDate mockDate0 = new MockDate(2, 1, 1, 2, 0);
      MockFile mockFile0 = new MockFile("6a*(X(.V", "/Date(xh'*.a@@v2r");
      MockFileWriter mockFileWriter0 = new MockFileWriter("/Date(xh'*.a@@v2r", false);
      Double double0 = new Double(355.32775079);
      Object object0 = new Object();
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class1, (Object) "/Date(xh'*.a@@v2r");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(xh'*.a@@v2r\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6a*(X(.V", parserConfig0);
      MockFile mockFile0 = new MockFile("6a*(X(.V", "()Ljava/lang/Charact-;");
      Class<Object> class0 = Object.class;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, object0, (Object) "()Ljava/lang/Charact-;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"()Ljava/lang/Charact-;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("WriteDateUseDateFormat");
      Class<Object> class0 = Object.class;
      DateCodec dateCodec0 = DateCodec.instance;
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("WriteDateUseDateFormat", identityHashMap0);
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) null, (Object) "WriteDateUseDateFormat");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"WriteDateUseDateFormat\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Class<Object> class0 = Object.class;
      MockFile mockFile0 = new MockFile("jabqb8cukow|@q$_ 3", "jabqb8cukow|@q$_ 3");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      mockPrintWriter0.print('q');
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNullBooleanAsFalse;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[5] = serializerFeature5;
      SerializeWriter serializeWriter0 = new SerializeWriter(mockPrintWriter0, 3258, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(33, 11, 33, 11, (-462));
      Byte byte0 = new Byte((byte)20);
      MockDate mockDate0 = new MockDate(3258, 33, (byte) (-60), 6, (-209339337), 6);
      dateCodec0.write(jSONSerializer0, mockDate0, serializerFeature0, class0, 8);
      assertEquals(22, serializeWriter0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00");
      Class<Object> class0 = Object.class;
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) defaultJSONParser0, (Object) "0000-00-00");
      Locale locale0 = Locale.GERMAN;
      // Undeclared exception!
      try { 
        dateCodec0.cast((DefaultJSONParser) null, (Type) class0, (Object) null, (Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<Object> class0 = Object.class;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("fastjson.parser.autoTypeAccept");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      SerializeWriter serializeWriter0 = new SerializeWriter(mockPrintWriter0, 3258, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3258, 3258, 3258);
      MockDate mockDate0 = new MockDate((-544), (-544), 3258, (byte) (-28), 48);
      mockGregorianCalendar0.setTime(mockDate0);
      Byte byte0 = new Byte((byte) (-28));
      dateCodec0.write(jSONSerializer0, mockGregorianCalendar0, byte0, class0, 3258);
      assertEquals(22, serializeWriter0.size());
  }
}
