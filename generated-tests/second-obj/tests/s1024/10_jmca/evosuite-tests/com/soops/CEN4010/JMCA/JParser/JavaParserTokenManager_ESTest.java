/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:15:46 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2063);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2063. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Token.newToken(13);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token.GTToken token_GTToken1 = new Token.GTToken();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-119);
      token_GTToken0.next = (Token) token_GTToken1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 13);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-119), 0);
      byteArrayInputStream0.close();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -119, column 0.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = new Token();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      token_GTToken0.endColumn = 30;
      token0.endColumn = (int) (byte)120;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      token0.endColumn = (int) (byte)120;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 44);
      byteArrayInputStream0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 30);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(30);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 30. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)68, 2938);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, 423, (byte)124);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.GetImage();
      Token.newToken(0);
      javaCharStream0.GetImage();
      Token token0 = new Token();
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(106, token1.kind);
      assertEquals("|", token1.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Token token0 = new Token();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      token_GTToken0.endColumn = 0;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 73);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 115, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w");
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 3021);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 3021. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Token token0 = new Token();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      token_GTToken0.endColumn = 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)119;
      byteArray0[3] = (byte)66;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 64);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 355, 43);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token1 = token_GTToken0.next;
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(44, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Token token0 = Token.newToken(24);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)91}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)53, (byte)91);
      assertNotNull(javaCharStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)91}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)91}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals("5", token1.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)91}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(53, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(91, token1.endColumn);
      assertEquals(91, token1.beginColumn);
      assertEquals(53, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      
      token_GTToken1.endColumn = 1;
      assertNull(token_GTToken1.toString());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)116);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)116, (byte)116, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1, 43);
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)116, (byte)116, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArrayInputStream0.mark((byte)116);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)116, (byte)116, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)116, (byte)116, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      token_GTToken1.endColumn = (-1);
      assertNull(token_GTToken1.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)116, (byte)116, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals("tt", token0.toString());
      assertArrayEquals(new byte[] {(byte)116, (byte)116, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(43, token0.beginColumn);
      assertEquals(44, token0.endColumn);
      
      byteArrayInputStream0.mark(0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)116, (byte)116, (byte)0, (byte)0}, byteArray0);
      
      token0.beginColumn = (-3928);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals("tt", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 22);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 22. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token0 = Token.newToken(30);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      token_GTToken0.endColumn = 30;
      assertNull(token_GTToken0.toString());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)120;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 44);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)115, (byte)120, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.mark((byte)115);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)115, (byte)120, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 436);
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)115, (byte)120, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)115, (byte)120, (byte)0, (byte)0}, byteArray0);
      
      javaCharStream0.inputStream = (Reader) inputStreamReader0;
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals(4, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)115, (byte)120, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)115, (byte)120, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.prevCharIsCR = false;
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(token1, token0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotNull(token1);
      assertEquals("sx", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(436, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(437, javaCharStream0.getEndColumn());
      assertEquals(437, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)115, (byte)120, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(436, token1.beginColumn);
      assertEquals(437, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals("sx", string0);
      assertNotNull(string0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(436, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(437, javaCharStream0.getEndColumn());
      assertEquals(437, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)115, (byte)120, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Token token0 = Token.newToken(30);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      Token token1 = Token.newToken(0);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 44);
      assertNotNull(byteArrayInputStream0);
      assertEquals(22, byteArrayInputStream0.available());
      
      byteArrayInputStream0.mark(0);
      assertEquals(22, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 355, 0);
      assertNotNull(javaCharStream0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(22, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = token_GTToken0.next;
      assertNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(355, javaCharStream0.getEndLine());
      assertEquals(355, javaCharStream0.getBeginLine());
      assertEquals(355, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("te", token3.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token3.beginColumn);
      assertEquals(355, token3.beginLine);
      assertEquals(1, token3.endColumn);
      assertEquals(74, token3.kind);
      assertEquals(355, token3.endLine);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Token token0 = Token.newToken(30);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      token_GTToken0.endColumn = 30;
      assertNull(token_GTToken0.toString());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      token_GTToken0.endLine = (int) (byte)95;
      assertNull(token_GTToken0.toString());
      
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)66;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 44);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)95, (byte)66}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-817), 1358);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals(821, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)95, (byte)66}, byteArray0);
      
      byteArrayInputStream0.mark((-671));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)95, (byte)66}, byteArray0);
      
      byteArrayInputStream1.mark(30);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(821, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)95, (byte)66}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 95, 0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)95, (byte)66}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertNotNull(byteArrayInputStream2);
      assertEquals(4, byteArrayInputStream2.available());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)95, (byte)66}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)95, (byte)66}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)95, (byte)66}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(token1, token0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotNull(token1);
      assertEquals("_", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)95, (byte)66}, byteArray0);
      assertEquals(74, token1.kind);
      assertEquals(0, token1.endColumn);
      assertEquals(95, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(95, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals("_", string0);
      assertNotNull(string0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertArrayEquals(new byte[] {(byte)95, (byte)0, (byte)95, (byte)66}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[1] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 0, 60);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals(7, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, 0, 99);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaCharStream0);
      assertEquals(7, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream1);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(inputStreamReader0);
      assertEquals(7, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(7, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNull(token_GTToken0.toString());
      assertEquals(7, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(99, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals("--", token1.toString());
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(99, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(100, token1.endColumn);
      assertEquals(100, token1.kind);
      assertEquals(0, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.kind);
      
      token_GTToken1.endColumn = 0;
      assertNull(token_GTToken1.toString());
      
      token_GTToken1.realKind = (-5253);
      assertNull(token_GTToken1.toString());
      
      token_GTToken1.specialToken = (Token) token_GTToken0;
      assertNull(token_GTToken0.toString());
      assertNull(token_GTToken1.toString());
      assertNull(token_GTToken1.specialToken.toString());
      
      token_GTToken0.beginLine = 8;
      assertNull(token_GTToken0.toString());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)91;
      token_GTToken1.endColumn = 0;
      assertNull(token_GTToken1.toString());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)91, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 0);
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)91, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)91, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("rr", token0.toString());
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)91, (byte)0}, byteArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("[", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)114, (byte)114, (byte)91, (byte)0}, byteArray0);
      assertEquals(2, token1.endColumn);
      assertEquals(81, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)93);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)96, (byte)124, (byte)124, (byte)93, (byte)114}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)124, (-1168));
      assertNotNull(javaCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)96, (byte)124, (byte)124, (byte)93, (byte)114}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArrayInputStream0.mark((byte)96);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)96, (byte)124, (byte)124, (byte)93, (byte)114}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals(5, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)96, (byte)124, (byte)124, (byte)93, (byte)114}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)96, (byte)124, (byte)124, (byte)93, (byte)114}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 124, column -1168.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)124;
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertArrayEquals(new byte[] {(byte)124, (byte)114, (byte)124}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)124, (byte)114, (byte)124}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 0);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)124, (byte)114, (byte)124}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)124, (byte)114, (byte)124}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals("|", token0.toString());
      assertArrayEquals(new byte[] {(byte)124, (byte)114, (byte)124}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.endLine);
      assertEquals(106, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedReader0, 0, 34);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)124, (byte)114, (byte)124}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaParserTokenManager0.SwitchTo(0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)124, (byte)114, (byte)124}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)124;
      boolean boolean3 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertArrayEquals(new byte[] {(byte)114, (byte)124}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)114, (byte)124}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 71, (byte)114);
      assertNotNull(javaCharStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)114, (byte)124}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)114, (byte)124}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(114, javaCharStream0.getColumn());
      assertEquals(114, javaCharStream0.getBeginColumn());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(114, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals("r", token0.toString());
      assertArrayEquals(new byte[] {(byte)114, (byte)124}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(71, token0.beginLine);
      assertEquals(114, token0.beginColumn);
      assertEquals(71, token0.endLine);
      assertEquals(114, token0.endColumn);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(114, javaCharStream0.getColumn());
      assertEquals(114, javaCharStream0.getBeginColumn());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(114, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)114, (byte)124}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(71);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 71. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[2] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)24);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)24}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 0);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)24}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      token0.beginColumn = 35;
      assertNull(token0.toString());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)66, 0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals((-63), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)24}, byteArray0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertTrue(boolean0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)24}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)24}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = Token.newToken((byte)0);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("B", token2.toString());
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)24}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endColumn);
      assertEquals(74, token2.kind);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)24}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1395));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1395. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      token0.next = (Token) token_GTToken0;
      assertNull(token0.toString());
      assertNull(token_GTToken0.toString());
      assertNull(token0.next.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endLine);
      
      token_GTToken1.endColumn = 0;
      assertNull(token_GTToken1.toString());
      
      Token.GTToken token_GTToken2 = new Token.GTToken();
      assertFalse(token_GTToken2.equals((Object)token_GTToken1));
      assertFalse(token_GTToken2.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken2);
      assertNull(token_GTToken2.toString());
      assertEquals(0, token_GTToken2.kind);
      assertEquals(0, token_GTToken2.beginLine);
      assertEquals(0, token_GTToken2.beginColumn);
      assertEquals(0, token_GTToken2.endColumn);
      assertEquals(0, token_GTToken2.endLine);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)102;
      byteArray0[5] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 50);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte) (-91), (byte)95, (byte)102, (byte)0, (byte)102}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1802), 3687);
      assertNotNull(javaCharStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte) (-91), (byte)95, (byte)102, (byte)0, (byte)102}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte) (-91), (byte)95, (byte)102, (byte)0, (byte)102}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte) (-91), (byte)95, (byte)102, (byte)0, (byte)102}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("f", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1802), javaCharStream0.getEndLine());
      assertEquals((-1802), javaCharStream0.getLine());
      assertEquals(3687, javaCharStream0.getColumn());
      assertEquals(3687, javaCharStream0.getBeginColumn());
      assertEquals((-1802), javaCharStream0.getBeginLine());
      assertEquals(3687, javaCharStream0.getEndColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte) (-91), (byte)95, (byte)102, (byte)0, (byte)102}, byteArray0);
      assertEquals((-1802), token1.beginLine);
      assertEquals(3687, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals((-1802), token1.endLine);
      assertEquals(3687, token1.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(2155);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2155. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)53;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 0, 44);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)53, (byte)0, (byte)53}, byteArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)102, 1205);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)53, (byte)0, (byte)53}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)53;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray2, 29, 0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals((-28), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)53}, byteArray2);
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream2);
      assertEquals(4, byteArrayInputStream2.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)53, (byte)0, (byte)53}, byteArray1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 44, (byte)53);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)53, (byte)0, (byte)53}, byteArray1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)53, (byte)0, (byte)53}, byteArray1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertEquals("f5", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(44, javaCharStream1.getEndLine());
      assertEquals(44, javaCharStream1.getLine());
      assertEquals(53, javaCharStream1.getBeginColumn());
      assertEquals(54, javaCharStream1.getEndColumn());
      assertEquals(54, javaCharStream1.getColumn());
      assertEquals(44, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)53, (byte)0, (byte)53}, byteArray1);
      assertEquals(74, token0.kind);
      assertEquals(54, token0.endColumn);
      assertEquals(44, token0.endLine);
      assertEquals(44, token0.beginLine);
      assertEquals(53, token0.beginColumn);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 48. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Token token0 = Token.newToken(13);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginLine);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 13);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)102, 0);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertFalse(token_GTToken0.equals((Object)token_GTToken1));
      assertNotSame(token_GTToken0, token_GTToken1);
      assertNull(token_GTToken0.toString());
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102}, byteArray0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals("fff", token1.toString());
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(102, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(102, token1.endLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(102, token2.beginLine);
      assertEquals(2, token2.endColumn);
      assertEquals(102, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(2, token2.beginColumn);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 56);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals(5, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, (byte)68, 0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaCharStream0);
      assertEquals(5, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(5, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(68, javaCharStream0.getBeginLine());
      assertEquals(68, javaCharStream0.getEndLine());
      assertEquals(68, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("?", token0.toString());
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(68, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(68, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(91, token0.kind);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(68);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 68. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      
      token0.image = null;
      assertNull(token0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)103;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)61, (byte)103, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.mark(0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)61, (byte)103, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)115, (-1928));
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)61, (byte)103, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)61, (byte)103, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)61, (byte)103, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(115, javaCharStream0.getLine());
      assertEquals(115, javaCharStream0.getBeginLine());
      assertEquals((-1928), javaCharStream0.getEndColumn());
      assertEquals((-1928), javaCharStream0.getBeginColumn());
      assertEquals((-1928), javaCharStream0.getColumn());
      assertEquals(115, javaCharStream0.getEndLine());
      assertEquals("=", token1.toString());
      assertArrayEquals(new byte[] {(byte)61, (byte)103, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1928), token1.endColumn);
      assertEquals((-1928), token1.beginColumn);
      assertEquals(115, token1.beginLine);
      assertEquals(115, token1.endLine);
      assertEquals(87, token1.kind);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(48);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 48. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      
      byte byte0 = (byte)90;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 794);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)90, 0);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(90, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(90, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getLine());
      assertEquals("-", token0.toString());
      assertArrayEquals(new byte[] {(byte)45, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(90, token0.beginLine);
      assertEquals(102, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(90, token0.endLine);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 31);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 31. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      token_GTToken0.beginLine = 25;
      assertNull(token_GTToken0.toString());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)24;
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      token_GTToken0.specialToken = null;
      assertNull(token_GTToken0.toString());
      
      byteArray0[2] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 25);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)123, (byte)24, (byte)21, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)21, 0);
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)123, (byte)24, (byte)21, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 678, 34);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)123, (byte)24, (byte)21, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArrayInputStream0.close();
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)123, (byte)24, (byte)21, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)123, (byte)24, (byte)21, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 0, 100);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)123, (byte)24, (byte)21, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 37, 4854);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals((-33), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)123, (byte)24, (byte)21, (byte)0}, byteArray0);
      
      byteArrayInputStream1.close();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals((-33), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)123, (byte)24, (byte)21, (byte)0}, byteArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertNotNull(mockPrintStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)123, (byte)24, (byte)21, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      PrintStream printStream0 = javaParserTokenManager0.debugStream;
      assertNotNull(printStream0);
      assertArrayEquals(new byte[] {(byte)123, (byte)24, (byte)21, (byte)0}, byteArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotNull(token1);
      assertEquals("{", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)123, (byte)24, (byte)21, (byte)0}, byteArray0);
      assertEquals(21, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(79, token1.kind);
      assertEquals(21, token1.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      
      token_GTToken0.endColumn = 0;
      assertNull(token_GTToken0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginLine);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2843), 0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)68, (byte)102, (byte)102, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals(7, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)68, (byte)102, (byte)102, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = Token.newToken(0);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, 120, 35);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaCharStream0);
      assertEquals(7, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)68, (byte)102, (byte)102, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(7, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)68, (byte)102, (byte)102, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(120, javaCharStream0.getBeginLine());
      assertEquals(120, javaCharStream0.getLine());
      assertEquals(35, javaCharStream0.getBeginColumn());
      assertEquals(120, javaCharStream0.getEndLine());
      assertEquals("Dff", token1.toString());
      assertArrayEquals(new byte[] {(byte)68, (byte)102, (byte)102, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(37, token1.endColumn);
      assertEquals(120, token1.endLine);
      assertEquals(120, token1.beginLine);
      assertEquals(35, token1.beginColumn);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)116;
      byteArray0[0] = (byte)40;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      javaParserTokenManager0.jjround = (int) (byte)53;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)102;
      byteArray1[2] = (byte)102;
      byteArray1[3] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 0, 20);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)102, (byte)53}, byteArray1);
      
      token_GTToken0.kind = (int) (byte)116;
      assertNull(token_GTToken0.toString());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 355, 43);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)102, (byte)53}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.ReInit(javaCharStream0, 3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)102, (byte)53}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 355, column 47.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      token_GTToken0.next = token0;
      assertNull(token0.toString());
      assertNull(token_GTToken0.toString());
      assertNull(token_GTToken0.next.toString());
      
      token_GTToken0.endColumn = 24;
      assertNull(token_GTToken0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 35);
      assertNotNull(byteArrayInputStream0);
      assertEquals(10, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)116, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 24);
      assertNotNull(javaCharStream0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)116, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = token_GTToken0.next;
      assertSame(token1, token0);
      assertNotNull(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)116, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(10, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)116, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("aat", token2.toString());
      assertArrayEquals(new byte[] {(byte)97, (byte)97, (byte)116, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, token2.beginLine);
      assertEquals(26, token2.endColumn);
      assertEquals(24, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(0, token2.endLine);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Token token0 = Token.newToken(30);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      
      token_GTToken0.endColumn = 30;
      assertNull(token_GTToken0.toString());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      byteArray0[0] = (byte)67;
      byteArray0[3] = (byte)67;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 44);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)67, (byte)95, (byte)0, (byte)67}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 355, 43);
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)67, (byte)95, (byte)0, (byte)67}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArrayInputStream0.mark((byte)67);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)67, (byte)95, (byte)0, (byte)67}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)67, (byte)95, (byte)0, (byte)67}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)67, (byte)95, (byte)0, (byte)67}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(355, javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(355, javaCharStream0.getLine());
      assertEquals(355, javaCharStream0.getEndLine());
      assertEquals("C_", token2.toString());
      assertArrayEquals(new byte[] {(byte)67, (byte)95, (byte)0, (byte)67}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(43, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(355, token2.endLine);
      assertEquals(44, token2.endColumn);
      assertEquals(355, token2.beginLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 355, column 45.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      token_GTToken0.realKind = (-1071);
      assertNull(token_GTToken0.toString());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)93);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)80, (byte)124, (byte)124, (byte)93, (byte)114}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)124, (-1168));
      assertNotNull(javaCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)80, (byte)124, (byte)124, (byte)93, (byte)114}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArrayInputStream0.mark((byte)80);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)80, (byte)124, (byte)124, (byte)93, (byte)114}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals(5, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)80, (byte)124, (byte)124, (byte)93, (byte)114}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)80, (byte)124, (byte)124, (byte)93, (byte)114}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1168), javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals((-1168), javaCharStream0.getBeginColumn());
      assertEquals((-1168), javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals("P", token0.toString());
      assertArrayEquals(new byte[] {(byte)80, (byte)124, (byte)124, (byte)93, (byte)114}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(124, token0.beginLine);
      assertEquals((-1168), token0.beginColumn);
      assertEquals((-1168), token0.endColumn);
      assertEquals(124, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(token1, token0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotNull(token1);
      assertEquals("||", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals((-1167), javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals((-1166), javaCharStream0.getEndColumn());
      assertEquals((-1166), javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)80, (byte)124, (byte)124, (byte)93, (byte)114}, byteArray0);
      assertEquals(124, token1.endLine);
      assertEquals(124, token1.beginLine);
      assertEquals((-1167), token1.beginColumn);
      assertEquals(97, token1.kind);
      assertEquals((-1166), token1.endColumn);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)102;
      byteArray1[3] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 0, 44);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)40}, byteArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 355, 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)40}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, int0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)40}, byteArray1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)40}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(355, javaCharStream0.getEndLine());
      assertEquals(355, javaCharStream0.getLine());
      assertEquals(355, javaCharStream0.getBeginLine());
      assertEquals("(", token0.toString());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)40}, byteArray1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(77, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(355, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(355, token0.endLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(355, javaCharStream0.getEndLine());
      assertEquals(355, javaCharStream0.getLine());
      assertEquals(355, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)40}, byteArray1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(mockPrintStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(355, javaCharStream0.getEndLine());
      assertEquals(355, javaCharStream0.getLine());
      assertEquals(355, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)40}, byteArray1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(30);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 30. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 51, (byte)91);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(92, javaCharStream0.getColumn());
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getEndLine());
      assertEquals(92, javaCharStream0.getEndColumn());
      assertEquals("55", token0.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(91, token0.beginColumn);
      assertEquals(92, token0.endColumn);
      assertEquals(51, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(51, token0.endLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 51, column 94.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      token0.next = (Token) token_GTToken0;
      assertNull(token0.toString());
      assertNull(token_GTToken0.toString());
      assertNull(token0.next.toString());
      
      Token token1 = Token.newToken(0);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals(10, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, 32, 0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaCharStream0);
      assertEquals(10, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(10, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotNull(string0);
      assertEquals(10, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals("e", token2.toString());
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(32, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(32, token2.endLine);
      assertEquals(74, token2.kind);
      
      String string1 = javaCharStream0.GetImage();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals("e", string1);
      assertNotNull(string1);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      byteArrayInputStream1.mark(122);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token3 = Token.newToken(0);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertNull(token3.toString());
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(107);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 107. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      token_GTToken0.endColumn = 0;
      assertNull(token_GTToken0.toString());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endColumn);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)94;
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      assertNotNull(fileSystemHandling2);
      
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)111);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)63, (byte)111, (byte)94, (byte)111, (byte)102, (byte)102, (byte)63, (byte)63}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 18, 0);
      assertNotNull(javaCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)63, (byte)111, (byte)94, (byte)111, (byte)102, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)63, (byte)111, (byte)94, (byte)111, (byte)102, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)63, (byte)111, (byte)94, (byte)111, (byte)102, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals("?", token1.toString());
      assertArrayEquals(new byte[] {(byte)63, (byte)111, (byte)94, (byte)111, (byte)102, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(18, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(18, token1.beginLine);
      assertEquals(91, token1.kind);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals("o", token2.toString());
      assertArrayEquals(new byte[] {(byte)63, (byte)111, (byte)94, (byte)111, (byte)102, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(18, token2.endLine);
      assertEquals(18, token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.endColumn);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertNull(token0.toString());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)63, (byte)111, (byte)94, (byte)111, (byte)102, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals("^", token3.toString());
      assertArrayEquals(new byte[] {(byte)63, (byte)111, (byte)94, (byte)111, (byte)102, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token3.endColumn);
      assertEquals(2, token3.beginColumn);
      assertEquals(107, token3.kind);
      assertEquals(18, token3.endLine);
      assertEquals(18, token3.beginLine);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken1);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotSame(token_GTToken1, token_GTToken0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertNull(token_GTToken1.toString());
      assertArrayEquals(new byte[] {(byte)63, (byte)111, (byte)94, (byte)111, (byte)102, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endColumn);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      token_GTToken0.endColumn = 0;
      assertNull(token_GTToken0.toString());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)94;
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling2);
      
      byteArray0[2] = (byte)111;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)111);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)63, (byte)111, (byte)111, (byte)0, (byte)102, (byte)102, (byte)63, (byte)63}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 18, 0);
      assertNotNull(javaCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)63, (byte)111, (byte)111, (byte)0, (byte)102, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)63, (byte)111, (byte)111, (byte)0, (byte)102, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)63, (byte)111, (byte)111, (byte)0, (byte)102, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals("?", token1.toString());
      assertArrayEquals(new byte[] {(byte)63, (byte)111, (byte)111, (byte)0, (byte)102, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.beginColumn);
      assertEquals(18, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertEquals(91, token1.kind);
      assertEquals(18, token1.endLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("oo", token2.toString());
      assertArrayEquals(new byte[] {(byte)63, (byte)111, (byte)111, (byte)0, (byte)102, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token2.endColumn);
      assertEquals(18, token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.beginColumn);
      assertEquals(18, token2.endLine);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertNull(token0.toString());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)63, (byte)111, (byte)111, (byte)0, (byte)102, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 18, column 3.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      
      token_GTToken0.endColumn = 30;
      assertNull(token_GTToken0.toString());
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)95;
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 0, 96);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)95, (byte)32, (byte)32}, byteArray1);
      
      token_GTToken0.kind = (int) (byte)32;
      assertNull(token_GTToken0.toString());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 355, 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)95, (byte)32, (byte)32}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)95, (byte)32, (byte)32}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)95, (byte)32, (byte)32}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNull(token_GTToken0.toString());
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)95, (byte)32, (byte)32}, byteArray1);
      assertEquals(32, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(30, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)95, (byte)32, (byte)32}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(token0);
      assertEquals("f_", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(355, javaCharStream0.getEndLine());
      assertEquals(355, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(355, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)95, (byte)32, (byte)32}, byteArray1);
      assertEquals(0, token0.beginColumn);
      assertEquals(355, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(355, token0.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(355, javaCharStream0.getEndLine());
      assertEquals(355, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(355, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)95, (byte)32, (byte)32}, byteArray1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(355, javaCharStream0.getEndLine());
      assertEquals(355, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(355, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)95, (byte)32, (byte)32}, byteArray1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(token1, token0);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(token1);
      assertEquals("", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(355, javaCharStream0.getEndLine());
      assertEquals(355, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(355, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)95, (byte)32, (byte)32}, byteArray1);
      assertEquals(355, token1.endLine);
      assertEquals(355, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      token_GTToken0.endColumn = 30;
      assertNull(token_GTToken0.toString());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-543), 14);
      assertNotNull(javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byteArrayInputStream0.mark(30);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-543), javaCharStream0.getEndLine());
      assertEquals((-543), javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-543), token0.beginLine);
      assertEquals(13, token0.endColumn);
      assertEquals((-543), token0.endLine);
      assertEquals(13, token0.beginColumn);
      assertEquals(0, token0.kind);
      
      char[] charArray0 = new char[5];
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-543), javaCharStream0.getEndLine());
      assertEquals((-543), javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      charArray0[0] = 'a';
      charArray0[1] = '+';
      charArray0[2] = '1';
      charArray0[3] = '-';
      charArray0[4] = '!';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'a', '+', '1', '-', '!'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'a', '+', '1', '-', '!'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'a', '+', '1', '-', '!'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string0 = token_GTToken0.toString();
      assertNull(string0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(30, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("a", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      String string1 = javaCharStream0.GetImage();
      assertEquals("a", string1);
      assertNotNull(string1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token2 = new Token();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertNull(token2.toString());
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((byte)53);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 53. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      token_GTToken0.endColumn = 25;
      assertNull(token_GTToken0.toString());
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte)24;
      byteArray1[2] = (byte) (-68);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 0, 25);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)99, (byte)24, (byte) (-68), (byte)0}, byteArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-68), 25);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)99, (byte)24, (byte) (-68), (byte)0}, byteArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)99, (byte)24, (byte) (-68), (byte)0}, byteArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)99, (byte)24, (byte) (-68), (byte)0}, byteArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-68), javaCharStream0.getBeginLine());
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals((-68), javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals(25, javaCharStream0.getBeginColumn());
      assertEquals((-68), javaCharStream0.getEndLine());
      assertEquals("c", token0.toString());
      assertArrayEquals(new byte[] {(byte)99, (byte)24, (byte) (-68), (byte)0}, byteArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(25, token0.endColumn);
      assertEquals((-68), token0.beginLine);
      assertEquals(25, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-68), token0.endLine);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J$");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 22, 0, (-2957));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)99, (byte)24, (byte) (-68), (byte)0}, byteArray1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotSame(token1, token0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token1);
      assertEquals("c", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-68), javaCharStream0.getBeginLine());
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals((-68), javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals(25, javaCharStream0.getBeginColumn());
      assertEquals((-68), javaCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)99, (byte)24, (byte) (-68), (byte)0}, byteArray1);
      assertEquals(25, token1.beginColumn);
      assertEquals((-68), token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals((-68), token1.beginLine);
      assertEquals(25, token1.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      try { 
        javaCharStream1.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)114;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)102, (byte)91, (byte)102, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)91, (byte)102, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 250, 52);
      assertNotNull(javaCharStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)91, (byte)102, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)91, (byte)102, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(250, javaCharStream0.getBeginLine());
      assertEquals(250, javaCharStream0.getEndLine());
      assertEquals(250, javaCharStream0.getLine());
      assertEquals("f", token0.toString());
      assertArrayEquals(new byte[] {(byte)102, (byte)91, (byte)102, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(250, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(52, token0.endColumn);
      assertEquals(250, token0.endLine);
      assertEquals(52, token0.beginColumn);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte)91;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1, (byte)114, 11);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream1);
      assertEquals((-111), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)91, (byte)102, (byte)91}, byteArray1);
      
      // Undeclared exception!
      try { 
        byteArrayInputStream1.read(byteArray0, 725, 122);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      token_GTToken0.endColumn = 30;
      assertNull(token_GTToken0.toString());
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 0, 44);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)53}, byteArray1);
      
      token_GTToken0.beginColumn = (-3435);
      assertNull(token_GTToken0.toString());
      
      token_GTToken0.kind = (int) (byte)53;
      assertNull(token_GTToken0.toString());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 355, 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)53}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)53}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNull(token_GTToken0.toString());
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)53}, byteArray1);
      assertEquals((-3435), token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(30, token_GTToken0.endColumn);
      assertEquals(53, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)0, (byte)53}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 355, column 0.  Encountered: \"\\\\\" (92), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)49;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 0, 44);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)49, (byte)0, (byte)49}, byteArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)102, 1205);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)49, (byte)0, (byte)49}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)49;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray2, 29, 0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals((-28), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)49}, byteArray2);
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream2);
      assertEquals(4, byteArrayInputStream2.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)49, (byte)0, (byte)49}, byteArray1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 44, (byte)49);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)49, (byte)0, (byte)49}, byteArray1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)49, (byte)0, (byte)49}, byteArray1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertEquals("f1", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(44, javaCharStream1.getLine());
      assertEquals(49, javaCharStream1.getBeginColumn());
      assertEquals(44, javaCharStream1.getBeginLine());
      assertEquals(50, javaCharStream1.getEndColumn());
      assertEquals(44, javaCharStream1.getEndLine());
      assertEquals(50, javaCharStream1.getColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)49, (byte)0, (byte)49}, byteArray1);
      assertEquals(74, token0.kind);
      assertEquals(50, token0.endColumn);
      assertEquals(44, token0.beginLine);
      assertEquals(49, token0.beginColumn);
      assertEquals(44, token0.endLine);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      token_GTToken0.endColumn = 30;
      assertNull(token_GTToken0.toString());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-543), 14);
      assertNotNull(javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArrayInputStream0.mark((-1635));
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertEquals((-543), javaCharStream0.getLine());
      assertEquals((-543), javaCharStream0.getEndLine());
      assertEquals("", token0.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-543), token0.beginLine);
      assertEquals(13, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals((-543), token0.endLine);
      assertEquals(13, token0.beginColumn);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      charArray0[1] = '+';
      charArray0[2] = '1';
      charArray0[4] = '!';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'c', '+', '1', '\u0000', '!'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'c', '+', '1', '\u0000', '!'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'c', '+', '1', '\u0000', '!'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = token_GTToken0.toString();
      assertNull(string0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(30, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("c", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.SwitchTo(0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals("+", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.endColumn);
      assertEquals(101, token2.kind);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (int) '1');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 49. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      token0.image = "K45c%mBm'V8>n!*S?";
      assertEquals("K45c%mBm'V8>n!*S?", token0.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      
      token_GTToken0.endColumn = 0;
      assertNull(token_GTToken0.toString());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      Token token1 = Token.newToken(0);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)49);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)49, (byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 48, 2143297520);
      assertNotNull(javaCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)49, (byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(49, int0);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)49, (byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)49, (byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)49, (byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals(8, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)49, (byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream1.mark(2143297520);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)49, (byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(48, javaCharStream0.getBeginLine());
      assertEquals(2143297520, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getEndLine());
      assertEquals(2143297520, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getLine());
      assertEquals(2143297520, javaCharStream0.getColumn());
      assertEquals("1", token2.toString());
      assertArrayEquals(new byte[] {(byte)49, (byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(48, token2.endLine);
      assertEquals(2143297520, token2.beginColumn);
      assertEquals(48, token2.beginLine);
      assertEquals(66, token2.kind);
      assertEquals(2143297520, token2.endColumn);
      
      Token token3 = token_GTToken0.next;
      assertNull(token3);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals("K45c%mBm'V8>n!*S?", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(48, javaCharStream0.getBeginLine());
      assertEquals(2143297520, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getEndLine());
      assertEquals(2143297520, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getLine());
      assertEquals(2143297520, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)49, (byte)49, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 48, column 2143297521.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)63;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)114;
      token0.beginLine = (int) (byte)82;
      assertNull(token0.toString());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)63);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)82, (byte)63, (byte)0, (byte)49, (byte)114}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)114, (byte)114);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals((-109), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)82, (byte)63, (byte)0, (byte)49, (byte)114}, byteArray0);
      
      boolean boolean0 = byteArrayInputStream1.markSupported();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertTrue(boolean0);
      assertEquals((-109), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)82, (byte)63, (byte)0, (byte)49, (byte)114}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 30, (byte)114);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(javaCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)82, (byte)63, (byte)0, (byte)49, (byte)114}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = byteArrayInputStream1.read(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals((-1), int0);
      assertEquals((-109), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)82, (byte)63, (byte)0, (byte)49, (byte)114}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)82, (byte)63, (byte)0, (byte)49, (byte)114}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)82, (byte)63, (byte)0, (byte)49, (byte)114}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(token1, token0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotNull(token1);
      assertEquals("R", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(114, javaCharStream0.getBeginColumn());
      assertEquals(114, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals(114, javaCharStream0.getColumn());
      assertEquals(30, javaCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)82, (byte)63, (byte)0, (byte)49, (byte)114}, byteArray0);
      assertEquals(74, token1.kind);
      assertEquals(30, token1.beginLine);
      assertEquals(114, token1.beginColumn);
      assertEquals(114, token1.endColumn);
      assertEquals(30, token1.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.SwitchTo(0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(114, javaCharStream0.getBeginColumn());
      assertEquals(114, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals(114, javaCharStream0.getColumn());
      assertEquals(30, javaCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)82, (byte)63, (byte)0, (byte)49, (byte)114}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      token_GTToken0.endColumn = 30;
      assertNull(token_GTToken0.toString());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-543), 30);
      assertNotNull(javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArrayInputStream0.mark((-1635));
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertEquals((-543), javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals((-543), javaCharStream0.getEndLine());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-543), token0.beginLine);
      assertEquals(29, token0.endColumn);
      assertEquals(29, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals((-543), token0.endLine);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = '\u001F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '.', '.', '\u001F', '\u0000'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'.', '.', '.', '\u001F', '\u0000'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = token_GTToken0.specialToken;
      assertNull(token1);
      
      javaParserTokenManager0.SwitchTo(0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals("...", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(121, token2.kind);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals("...", string0);
      assertNotNull(string0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(29);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 29. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-543), 14);
      assertNotNull(javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byteArrayInputStream0.mark((-1635));
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals((-543), javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertEquals((-543), javaCharStream0.getLine());
      assertEquals("", token0.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-543), token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(13, token0.beginColumn);
      assertEquals((-543), token0.endLine);
      assertEquals(13, token0.endColumn);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[3] = '\u001F';
      charArray0[4] = '!';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '.', '\u0000', '\u001F', '!'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'.', '.', '\u0000', '\u001F', '!'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(".", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(85, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaParserTokenManager0.SwitchTo(0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals(".", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(85, token2.kind);
      assertEquals(2, token2.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      String string1 = javaCharStream0.GetImage();
      assertFalse(string1.equals((Object)string0));
      assertEquals(".", string1);
      assertNotNull(string1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      token_GTToken0.endColumn = 30;
      assertNull(token_GTToken0.toString());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-543), 14);
      assertNotNull(javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byteArrayInputStream0.mark((-1635));
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals((-543), javaCharStream0.getLine());
      assertEquals((-543), javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals("", token0.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(13, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals((-543), token0.beginLine);
      assertEquals(13, token0.endColumn);
      assertEquals((-543), token0.endLine);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '1';
      charArray0[3] = '\u001F';
      charArray0[4] = '!';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '.', '1', '\u001F', '!'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'.', '.', '1', '\u001F', '!'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(".", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, token1.beginColumn);
      assertEquals(85, token1.kind);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      javaParserTokenManager0.SwitchTo(0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(".1", token2.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(70, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string1 = javaCharStream0.GetImage();
      assertFalse(string1.equals((Object)string0));
      assertEquals(".1", string1);
      assertNotNull(string1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0, (byte)0}, byteArray0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"\\u001f\" (31), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 30, (byte)40);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-27), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)40, (byte)40);
      assertNotNull(javaCharStream0);
      assertEquals((-27), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byteArrayInputStream0.mark((-4329));
      assertEquals((-27), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-27), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-27), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-27), byteArrayInputStream0.available());
      assertEquals(39, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(39, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(39, token0.beginColumn);
      assertEquals(39, token0.endColumn);
      assertEquals(40, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(40, token0.beginLine);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '!';
      charArray0[1] = '!';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'!', '!'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals((-27), byteArrayInputStream0.available());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'!', '!'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals((-27), byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("!", token1.toString());
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(89, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PrintStream printStream0 = javaParserTokenManager0.debugStream;
      assertNotNull(printStream0);
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)0}, byteArray0);
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertEquals((-27), byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)37;
      byteArray0[1] = (byte)0;
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      token_GTToken0.endColumn = 28;
      assertNull(token_GTToken0.toString());
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)102;
      byteArray1[3] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 0, 44);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)37}, byteArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 355, 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(3, int0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)37}, byteArray1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(355, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(355, javaCharStream0.getEndLine());
      assertEquals(355, javaCharStream0.getLine());
      assertEquals("%", token0.toString());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(355, token0.beginLine);
      assertEquals(355, token0.endLine);
      assertEquals(108, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      
      byteArrayInputStream0.mark(3);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)37}, byteArray1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(355, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(355, javaCharStream0.getEndLine());
      assertEquals(355, javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)0, (byte)0, (byte)37}, byteArray1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(58);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 58. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)124, (byte)124}, byteArray0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 9, 0);
      assertNotNull(javaCharStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)124, (byte)124}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)124, (byte)124}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("||", token1.toString());
      assertArrayEquals(new byte[] {(byte)124, (byte)124}, byteArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(97, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(9, token1.endLine);
      assertEquals(9, token1.beginLine);
      assertEquals(1, token1.endColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 46);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 46. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)98;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      token_GTToken0.endColumn = 30;
      assertNull(token_GTToken0.toString());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)98, (byte)98, (byte)98}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-543), (byte)98);
      assertNotNull(javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)98, (byte)98, (byte)98}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byteArrayInputStream0.mark((-1635));
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)98, (byte)98, (byte)98}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)98, (byte)98, (byte)98}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)98, (byte)98, (byte)98}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-543), javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertEquals((-543), javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
      assertArrayEquals(new byte[] {(byte)98, (byte)98, (byte)98}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
      assertEquals(97, token0.beginColumn);
      assertEquals((-543), token0.endLine);
      assertEquals(97, token0.endColumn);
      assertEquals((-543), token0.beginLine);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'c', 'c', '\u0000', 'J', 'J'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)98, (byte)98, (byte)98}, byteArray0);
      assertArrayEquals(new char[] {'c', 'c', '\u0000', 'J', 'J'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)98, (byte)98, (byte)98}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("cc", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)98, (byte)98, (byte)98}, byteArray0);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo('J');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      token0.beginColumn = 0;
      assertNull(token0.toString());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      token_GTToken0.endColumn = (int) (byte)57;
      assertNull(token_GTToken0.toString());
      
      byteArray0[2] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 18);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)24}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)24}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)57, 18);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals((-54), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)24}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertNotNull(byteArrayInputStream2);
      assertEquals(3, byteArrayInputStream2.available());
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)24}, byteArray0);
      
      Token token1 = Token.newToken(0);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream2, 0, (byte)57);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArrayInputStream2.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)24}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArrayInputStream2.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)24}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(byteArrayInputStream2, byteArrayInputStream0);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(0, byteArrayInputStream2.available());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("9", token2.toString());
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)24}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(57, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(57, token2.beginColumn);
      assertEquals(66, token2.kind);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream0);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream1);
      assertNotNull(token3);
      assertEquals("9", token3.toString());
      assertEquals(0, byteArrayInputStream2.available());
      assertEquals(57, javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)57, (byte)0, (byte)24}, byteArray0);
      assertEquals(0, token3.beginLine);
      assertEquals(66, token3.kind);
      assertEquals(57, token3.beginColumn);
      assertEquals(57, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(13);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 13. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Token token0 = Token.newToken(13);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      token_GTToken0.endColumn = 13;
      assertNull(token_GTToken0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)61;
      Token token1 = Token.newToken(0);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      
      token_GTToken1.next = token1;
      assertNull(token_GTToken1.toString());
      assertNull(token1.toString());
      assertNull(token_GTToken1.next.toString());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 50);
      assertNotNull(byteArrayInputStream0);
      assertEquals(13, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 13);
      assertNotNull(javaCharStream0);
      assertEquals(13, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(13, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(13, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(13, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals("gg", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals(14, token2.endColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(13, token2.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pipedReader0, 1, (-299));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-523));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -523. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      token_GTToken0.endColumn = 30;
      assertNull(token_GTToken0.toString());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 30);
      assertNotNull(byteArrayInputStream0);
      assertEquals(19, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-543), 14);
      assertNotNull(javaCharStream0);
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArrayInputStream0.mark((-1635));
      assertEquals(19, byteArrayInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.jjnewStateCnt = 22;
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(255, int0);
      assertEquals(18, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = ';';
      charArray0[2] = '1';
      javaCharStream0.bufpos = (int) 'l';
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      charArray0[4] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'l', ';', '1', '\u0000', 'x'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'l', ';', '1', '\u0000', 'x'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("l", token0.toString());
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo('x');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 120. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      token_GTToken0.endColumn = 30;
      assertNull(token_GTToken0.toString());
      
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 51);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 51, 0);
      assertNotNull(javaCharStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(0, int0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {';', ';'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {';', ';'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(";", token1.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(83, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(30);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 30. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)55;
      byteArray0[2] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)24);
      assertNotNull(byteArrayInputStream0);
      assertEquals(17, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 0);
      assertNotNull(javaCharStream0);
      assertEquals(17, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(17, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.jjimageLen = (-1412);
      assertEquals(17, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(17, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byteArrayInputStream0.mark(255);
      assertEquals(17, byteArrayInputStream0.available());
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(55, int0);
      assertEquals(16, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[1];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[0] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals(16, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(16, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("l", token1.toString());
      assertEquals(16, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(74, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((byte)55);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 55. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      Token token1 = Token.newToken(0);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-1152));
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1152), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-220), 1230);
      assertNotNull(javaCharStream0);
      assertEquals((-1152), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1152), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token2 = token_GTToken0.specialToken;
      assertNull(token2);
      
      byteArrayInputStream0.mark(1443);
      assertEquals((-1152), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1152), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      token0.endColumn = (int) 'O';
      assertNull(token0.toString());
      
      charArray0[4] = 'O';
      charArray0[5] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000', 'O', 'O'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals((-1152), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000', 'O', 'O'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals((-1152), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      assertEquals("O", token3.toString());
      assertEquals((-1152), byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endColumn);
      assertEquals(1, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(74, token3.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000', 'O', 'O'}, charArray0);
      
      boolean boolean0 = charArrayReader1.ready();
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotSame(charArrayReader1, charArrayReader0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000', 'O', 'O'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals((-1152), byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'O', '\u0000', '\u0000', '\u0000', 'O', 'O'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string1 = token_GTToken0.toString();
      assertNull(string1);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotNull(token4);
      assertEquals((-1152), byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("", token4.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token4.beginLine);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.endColumn);
      assertEquals(0, token4.kind);
      assertEquals(1, token4.endLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      token_GTToken0.endColumn = 0;
      assertNull(token_GTToken0.toString());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)48;
      token_GTToken0.endColumn = (int) (byte)48;
      assertNull(token_GTToken0.toString());
      
      byteArray0[3] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 64);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)119, (byte)48, (byte)0, (byte)48}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 43);
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)119, (byte)48, (byte)0, (byte)48}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)119, (byte)48, (byte)0, (byte)48}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.available = 48;
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byteArrayInputStream0.mark(0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)119, (byte)48, (byte)0, (byte)48}, byteArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNull(token0.toString());
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)119, (byte)48, (byte)0, (byte)48}, byteArray0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("w0", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)119, (byte)48, (byte)0, (byte)48}, byteArray0);
      assertEquals(74, token1.kind);
      assertEquals(43, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(44, token1.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals("w0", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)119, (byte)48, (byte)0, (byte)48}, byteArray0);
      assertEquals(74, token1.kind);
      assertEquals(43, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(44, token1.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token2 = new Token();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertNull(token2.toString());
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("*PwC!2L9(`9b/", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      
      token0.image = "K45c%mBm'V8>n!*S?";
      assertEquals("K45c%mBm'V8>n!*S?", token0.toString());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      
      token_GTToken0.endColumn = 0;
      assertNull(token_GTToken0.toString());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)94;
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling2);
      
      byteArray0[3] = (byte)93;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)94;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)93);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)94, (byte)93, (byte)0, (byte)102, (byte)93, (byte)94}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 18, 0);
      assertNotNull(javaCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)94, (byte)93, (byte)0, (byte)102, (byte)93, (byte)94}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)94, (byte)93, (byte)0, (byte)102, (byte)93, (byte)94}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)94, (byte)93, (byte)0, (byte)102, (byte)93, (byte)94}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals("]", token1.toString());
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)94, (byte)93, (byte)0, (byte)102, (byte)93, (byte)94}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(82, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(18, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertEquals(18, token1.endLine);
      
      token_GTToken1.beginLine = 82;
      assertNull(token_GTToken1.toString());
      
      Token token2 = token_GTToken1.specialToken;
      assertNull(token2);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)94, (byte)93, (byte)0, (byte)102, (byte)93, (byte)94}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals("]", string0);
      assertNotNull(string0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)94, (byte)93, (byte)0, (byte)102, (byte)93, (byte)94}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("]", token3.toString());
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)94, (byte)93, (byte)0, (byte)102, (byte)93, (byte)94}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(82, token3.kind);
      assertEquals(1, token3.beginColumn);
      assertEquals(1, token3.endColumn);
      assertEquals(18, token3.beginLine);
      assertEquals(18, token3.endLine);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)94, (byte)93, (byte)0, (byte)102, (byte)93, (byte)94}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)94, (byte)93, (byte)0, (byte)102, (byte)93, (byte)94}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      String string1 = javaCharStream0.GetImage();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals("]", string1);
      assertNotNull(string1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)94, (byte)93, (byte)0, (byte)102, (byte)93, (byte)94}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotNull(token4);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("^", token4.toString());
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)94, (byte)93, (byte)0, (byte)102, (byte)93, (byte)94}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(107, token4.kind);
      assertEquals(18, token4.beginLine);
      assertEquals(18, token4.endLine);
      assertEquals(2, token4.beginColumn);
      assertEquals(2, token4.endColumn);
      
      Token token5 = javaParserTokenManager1.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      assertNotNull(token5);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals("]", token5.toString());
      assertArrayEquals(new byte[] {(byte)93, (byte)93, (byte)94, (byte)93, (byte)0, (byte)102, (byte)93, (byte)94}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(82, token5.kind);
      assertEquals(18, token5.endLine);
      assertEquals(3, token5.beginColumn);
      assertEquals(3, token5.endColumn);
      assertEquals(18, token5.beginLine);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)87;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 38);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)87, (byte)87, (byte)87, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 0);
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)87, (byte)87, (byte)87, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)87, (byte)87, (byte)87, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)87, (byte)87, (byte)87, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("WWW", token1.toString());
      assertArrayEquals(new byte[] {(byte)87, (byte)87, (byte)87, (byte)0}, byteArray0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(74, token1.kind);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 4.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1924);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)71}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1717), (byte)71);
      assertNotNull(javaCharStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)71}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byteArrayInputStream0.mark((-1));
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)71}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)71}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1717), javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getColumn());
      assertEquals((-1717), javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals((-1717), javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getEndColumn());
      assertEquals("G", token0.toString());
      assertArrayEquals(new byte[] {(byte)71}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(71, token0.beginColumn);
      assertEquals((-1717), token0.endLine);
      assertEquals(71, token0.endColumn);
      assertEquals((-1717), token0.beginLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1717), javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getColumn());
      assertEquals((-1717), javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals((-1717), javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getEndColumn());
      assertArrayEquals(new byte[] {(byte)71}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      
      String string0 = token_GTToken1.toString();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotSame(token_GTToken1, token_GTToken0);
      assertNull(string0);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1717), javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getColumn());
      assertEquals((-1717), javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals((-1717), javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getEndColumn());
      assertArrayEquals(new byte[] {(byte)71}, byteArray0);
      assertEquals((-1717), token1.beginLine);
      assertEquals(71, token1.endColumn);
      assertEquals((-1717), token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(71, token1.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(71);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 71. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Token token0 = Token.newToken(13);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)61;
      Token token1 = Token.newToken(0);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 50);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)61, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 0);
      assertNotNull(javaCharStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)61, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(103, int0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)61, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 0, 0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)61, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)61, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)61, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {}, charArray0);
      
      javaCharStream1.ReInit((Reader) charArrayReader0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)61, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream1.GetImage();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(string0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)61, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotNull(token2);
      assertEquals("g", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)61, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1059);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1059. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)106;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 0, 44);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)106, (byte)0, (byte)53}, byteArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 19, 0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)106, (byte)0, (byte)53}, byteArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(inputStreamReader0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)106, (byte)0, (byte)53}, byteArray1);
      
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)102;
      byteArray2[1] = (byte)53;
      byteArray2[2] = (byte)102;
      byteArray2[3] = (byte)106;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)106, (byte)0, (byte)53}, byteArray1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNull(token_GTToken0.toString());
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)106, (byte)0, (byte)53}, byteArray1);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(token0);
      assertEquals("fj", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)106, (byte)0, (byte)53}, byteArray1);
      assertEquals(19, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(19, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertEquals("fj", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)106, (byte)0, (byte)53}, byteArray1);
      assertEquals(19, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(19, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)106, (byte)0, (byte)53}, byteArray1);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)47;
      byteArray0[0] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      
      int int0 = (-156);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 39, 0);
      assertNotNull(javaCharStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int1 = 93;
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0, 93, (-439));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(93, javaCharStream1.getLine());
      assertEquals(93, javaCharStream1.getEndLine());
      assertEquals((-439), javaCharStream1.getBeginColumn());
      assertEquals(93, javaCharStream1.getBeginLine());
      assertEquals((-439), javaCharStream1.getEndColumn());
      assertEquals((-439), javaCharStream1.getColumn());
      assertEquals("/", token1.toString());
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(93, token1.endLine);
      assertEquals((-439), token1.beginColumn);
      assertEquals(93, token1.beginLine);
      assertEquals((-439), token1.endColumn);
      assertEquals(104, token1.kind);
      
      int int2 = sequenceInputStream0.read(byteArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(93, javaCharStream1.getLine());
      assertEquals(93, javaCharStream1.getEndLine());
      assertEquals((-439), javaCharStream1.getBeginColumn());
      assertEquals(93, javaCharStream1.getBeginLine());
      assertEquals((-439), javaCharStream1.getEndColumn());
      assertEquals((-439), javaCharStream1.getColumn());
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream1.AdjustBuffSize();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(93, javaCharStream1.getLine());
      assertEquals(93, javaCharStream1.getEndLine());
      assertEquals((-439), javaCharStream1.getBeginColumn());
      assertEquals(93, javaCharStream1.getBeginLine());
      assertEquals((-439), javaCharStream1.getEndColumn());
      assertEquals((-439), javaCharStream1.getColumn());
      assertArrayEquals(new byte[] {(byte)47}, byteArray0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      try { 
        javaCharStream1.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Token token0 = Token.newToken(13);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 13);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)47, (byte)102}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)102, 0);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)47, (byte)102}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArrayInputStream0.close();
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)47, (byte)102}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)47, (byte)102}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertFalse(token_GTToken0.equals((Object)token_GTToken1));
      assertNotSame(token_GTToken0, token_GTToken1);
      assertNull(token_GTToken0.toString());
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)47, (byte)102}, byteArray0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals("f", token1.toString());
      assertArrayEquals(new byte[] {(byte)102, (byte)47, (byte)102}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(102, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(102, token1.beginLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals("/", token2.toString());
      assertArrayEquals(new byte[] {(byte)102, (byte)47, (byte)102}, byteArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(102, token2.endLine);
      assertEquals(104, token2.kind);
      assertEquals(102, token2.beginLine);
      assertEquals(1, token2.endColumn);
      assertEquals(1, token2.beginColumn);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      token_GTToken0.endColumn = 30;
      assertNull(token_GTToken0.toString());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 30);
      assertNotNull(byteArrayInputStream0);
      assertEquals(19, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-543), 14);
      assertNotNull(javaCharStream0);
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.jjnewStateCnt = 22;
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(24, int0);
      assertEquals(18, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = '1';
      javaCharStream0.bufpos = (int) '\u001D';
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      charArray0[4] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'l', 'l', '1', '\u0000', 'x'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'l', 'l', '1', '\u0000', 'x'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("ll1", token0.toString());
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo('x');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 120. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)41;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)115, (byte)41, (byte)0}, byteArray0);
      
      byteArrayInputStream0.mark((-1248));
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)115, (byte)41, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 742, 46);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)115, (byte)41, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-1), 14);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)115, (byte)41, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)115, (byte)41, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(14, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(14, javaCharStream1.getBeginColumn());
      assertEquals(14, javaCharStream1.getColumn());
      assertEquals("s", token0.toString());
      assertArrayEquals(new byte[] {(byte)115, (byte)41, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(14, token0.endColumn);
      assertEquals((-1), token0.endLine);
      assertEquals((-1), token0.beginLine);
      assertEquals(14, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(15, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(15, javaCharStream1.getEndColumn());
      assertEquals(15, javaCharStream1.getColumn());
      assertEquals(")", token1.toString());
      assertArrayEquals(new byte[] {(byte)115, (byte)41, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(15, token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals((-1), token1.endLine);
      assertEquals((-1), token1.beginLine);
      assertEquals(15, token1.beginColumn);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(15, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(15, javaCharStream1.getEndColumn());
      assertEquals(15, javaCharStream1.getColumn());
      assertArrayEquals(new byte[] {(byte)115, (byte)41, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1, column 17.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-543), 14);
      assertNotNull(javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArrayInputStream0.mark(0);
      assertEquals(0, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[14];
      charArray0[0] = 'l';
      charArray0[1] = ':';
      javaCharStream0.bufpos = (int) '\u001D';
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      charArray0[4] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("l", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(':');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 58. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "EDvdj\"^(ZW=");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-620), 0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-391), 48);
      assertNotNull(javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArrayInputStream0.mark(2076);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals((-391), javaCharStream0.getLine());
      assertEquals((-391), javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals((-391), javaCharStream0.getEndLine());
      assertEquals("", token0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-391), token0.endLine);
      assertEquals((-391), token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(47, token0.beginColumn);
      assertEquals(47, token0.endColumn);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '!';
      charArray0[1] = '-';
      charArray0[2] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'!', '-', 'I'}, charArray0);
      
      boolean boolean1 = charArrayReader0.ready();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'!', '-', 'I'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-391), javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new char[] {'!', '-', 'I'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = token_GTToken0.toString();
      assertNull(string0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("!", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(89, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(2452);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2452. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1622, 6);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1619), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 31, 1622);
      assertNotNull(javaCharStream0);
      assertEquals((-1619), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1619), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals((-1), int0);
      assertEquals((-1619), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      javaCharStream0.inBuf = 31;
      assertEquals((-1619), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertEquals((-1619), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {';', ';'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals((-1619), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {';', ';'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1619), byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(";", token0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(83, token0.kind);
      assertEquals(1, token0.beginColumn);
      
      javaParserTokenManager0.SwitchTo(0);
      assertEquals((-1619), byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1619), byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(";", string0);
      assertNotNull(string0);
      assertEquals((-1619), byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = Token.newToken(97);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1619), byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      
      token0.image = "K45c%mBm'V8>n!*S?";
      assertEquals("K45c%mBm'V8>n!*S?", token0.toString());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      token_GTToken0.endColumn = 0;
      assertNull(token_GTToken0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)94;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byteArray0[3] = (byte)63;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)63;
      byteArray0[7] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)63);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)94, (byte)63, (byte)0, (byte)102, (byte)63, (byte)63}, byteArray0);
      
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      assertNotNull(fileSystemHandling2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)94, (byte)63, (byte)0, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)94, (byte)63, (byte)0, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(8, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)94, (byte)63, (byte)0, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("?", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)94, (byte)63, (byte)0, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(91, token1.kind);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("?", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)94, (byte)63, (byte)0, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(91, token2.kind);
      assertEquals(1, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertEquals(1, token2.endColumn);
      assertEquals(0, token2.beginLine);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotNull(token3);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("^", token3.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)94, (byte)63, (byte)0, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.endLine);
      assertEquals(2, token3.beginColumn);
      assertEquals(2, token3.endColumn);
      assertEquals(107, token3.kind);
      
      Token token4 = new Token();
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertNotNull(token4);
      assertNull(token4.toString());
      assertEquals(0, token4.endColumn);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.kind);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)94, (byte)63, (byte)0, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.setDebugStream(javaParserTokenManager1.debugStream);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)63, (byte)63, (byte)94, (byte)63, (byte)0, (byte)102, (byte)63, (byte)63}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      token0.next = (Token) token_GTToken0;
      assertNull(token0.toString());
      assertNull(token_GTToken0.toString());
      assertNull(token0.next.toString());
      
      token0.beginLine = 0;
      assertNull(token0.toString());
      
      Token token1 = Token.newToken(313);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.endLine);
      
      token0.specialToken = (Token) token_GTToken1;
      assertNull(token0.toString());
      assertNull(token_GTToken1.toString());
      assertNull(token0.specialToken.toString());
      
      token_GTToken1.endColumn = 0;
      assertNull(token_GTToken1.toString());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      token1.beginLine = (int) (byte)24;
      assertNull(token1.toString());
      
      token_GTToken0.beginLine = 24;
      assertNull(token_GTToken0.toString());
      
      byteArray0[3] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 4295);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte)0, (byte)24}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals(4, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte)0, (byte)24}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 743, 0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte)0, (byte)24}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte)0, (byte)24}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotNull(string0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte)0, (byte)24}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.curLexState = 36;
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(743, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(743, javaCharStream0.getEndLine());
      assertEquals(743, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte)0, (byte)24}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.endColumn);
      assertEquals(743, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(743, token2.beginLine);
      
      String string1 = javaCharStream0.GetImage();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals("w", string1);
      assertNotNull(string1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(743, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(743, javaCharStream0.getEndLine());
      assertEquals(743, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte)0, (byte)24}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token3 = new Token();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
      assertNull(token3.toString());
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endColumn);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotNull(token4);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(743, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(743, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(743, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("", token4.toString());
      assertArrayEquals(new byte[] {(byte)119, (byte)119, (byte)0, (byte)24}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.beginColumn);
      assertEquals(0, token4.kind);
      assertEquals(743, token4.endLine);
      assertEquals(743, token4.beginLine);
      assertEquals(1, token4.endColumn);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Token token0 = Token.newToken(13);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)102;
      token_GTToken0.next = (Token) token_GTToken1;
      assertNull(token_GTToken0.toString());
      assertNull(token_GTToken1.toString());
      assertNull(token_GTToken0.next.toString());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 13);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)54, (byte)102}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)102, 0);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)54, (byte)102}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArrayInputStream0.close();
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)54, (byte)102}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)54, (byte)102}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertFalse(token_GTToken0.equals((Object)token_GTToken1));
      assertNotSame(token_GTToken0, token_GTToken1);
      assertNull(token_GTToken0.toString());
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)54, (byte)102}, byteArray0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("f6f", token1.toString());
      assertArrayEquals(new byte[] {(byte)102, (byte)54, (byte)102}, byteArray0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(102, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(102, token1.beginLine);
      assertEquals(2, token1.endColumn);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertArrayEquals(new byte[] {(byte)102, (byte)54, (byte)102}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(102, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(102, token2.beginLine);
      assertEquals(2, token2.endColumn);
      assertEquals(2, token2.beginColumn);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotNull(token3);
      assertEquals("", token3.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(102, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)54, (byte)102}, byteArray0);
      assertEquals(2, token3.endColumn);
      assertEquals(2, token3.beginColumn);
      assertEquals(102, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(102, token3.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      token_GTToken0.endColumn = 0;
      assertNull(token_GTToken0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endLine);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-124);
      byteArray0[6] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 423, 62);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-416), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)73, (byte)102, (byte)102, (byte)73, (byte) (-124), (byte)0, (byte)102}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals(7, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)73, (byte)102, (byte)102, (byte)73, (byte) (-124), (byte)0, (byte)102}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, 1286, 813);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaCharStream0);
      assertEquals(7, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)73, (byte)102, (byte)102, (byte)73, (byte) (-124), (byte)0, (byte)102}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(7, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)73, (byte)102, (byte)102, (byte)73, (byte) (-124), (byte)0, (byte)102}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotNull(string0);
      assertEquals(7, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)73, (byte)102, (byte)102, (byte)73, (byte) (-124), (byte)0, (byte)102}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotNull(token0);
      assertEquals("IffI", token0.toString());
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(813, javaCharStream0.getBeginColumn());
      assertEquals(1286, javaCharStream0.getEndLine());
      assertEquals(816, javaCharStream0.getEndColumn());
      assertEquals(1286, javaCharStream0.getBeginLine());
      assertEquals(1286, javaCharStream0.getLine());
      assertEquals(816, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)73, (byte)102, (byte)102, (byte)73, (byte) (-124), (byte)0, (byte)102}, byteArray0);
      assertEquals(813, token0.beginColumn);
      assertEquals(816, token0.endColumn);
      assertEquals(1286, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1286, token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      
      String string1 = javaCharStream0.GetImage();
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals("IffI", string1);
      assertNotNull(string1);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(813, javaCharStream0.getBeginColumn());
      assertEquals(1286, javaCharStream0.getEndLine());
      assertEquals(816, javaCharStream0.getEndColumn());
      assertEquals(1286, javaCharStream0.getBeginLine());
      assertEquals(1286, javaCharStream0.getLine());
      assertEquals(816, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)73, (byte)102, (byte)102, (byte)73, (byte) (-124), (byte)0, (byte)102}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      
      Token token1 = new Token();
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(45);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 45. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte)68;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)44, 0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-35), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)44, (byte)68, (byte)102, (byte)68, (byte) (-124), (byte)68, (byte) (-124), (byte) (-85), (byte)68}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals(9, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)44, (byte)68, (byte)102, (byte)68, (byte) (-124), (byte)68, (byte) (-124), (byte) (-85), (byte)68}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, (-1023), (byte) (-124));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaCharStream0);
      assertEquals(9, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)44, (byte)68, (byte)102, (byte)68, (byte) (-124), (byte)68, (byte) (-124), (byte) (-85), (byte)68}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(9, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)44, (byte)68, (byte)102, (byte)68, (byte) (-124), (byte)68, (byte) (-124), (byte) (-85), (byte)68}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotNull(string0);
      assertEquals(9, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)44, (byte)68, (byte)102, (byte)68, (byte) (-124), (byte)68, (byte) (-124), (byte) (-85), (byte)68}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(token1, token0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotNull(token1);
      assertEquals(",", token1.toString());
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals((-1023), javaCharStream0.getBeginLine());
      assertEquals((-124), javaCharStream0.getColumn());
      assertEquals((-124), javaCharStream0.getBeginColumn());
      assertEquals((-1023), javaCharStream0.getLine());
      assertEquals((-124), javaCharStream0.getEndColumn());
      assertEquals((-1023), javaCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)44, (byte)68, (byte)102, (byte)68, (byte) (-124), (byte)68, (byte) (-124), (byte) (-85), (byte)68}, byteArray0);
      assertEquals((-124), token1.endColumn);
      assertEquals((-1023), token1.beginLine);
      assertEquals(84, token1.kind);
      assertEquals((-1023), token1.endLine);
      assertEquals((-124), token1.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      String string1 = javaCharStream0.GetImage();
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(",", string1);
      assertNotNull(string1);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals((-1023), javaCharStream0.getBeginLine());
      assertEquals((-124), javaCharStream0.getColumn());
      assertEquals((-124), javaCharStream0.getBeginColumn());
      assertEquals((-1023), javaCharStream0.getLine());
      assertEquals((-124), javaCharStream0.getEndColumn());
      assertEquals((-1023), javaCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)44, (byte)68, (byte)102, (byte)68, (byte) (-124), (byte)68, (byte) (-124), (byte) (-85), (byte)68}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token2 = new Token();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertNull(token2.toString());
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(85);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 85. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      token_GTToken0.endColumn = 30;
      assertNull(token_GTToken0.toString());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-543), (-33));
      assertNotNull(javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArrayInputStream0.mark(30);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-34), javaCharStream0.getColumn());
      assertEquals((-34), javaCharStream0.getBeginColumn());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertEquals((-34), javaCharStream0.getEndColumn());
      assertEquals((-543), javaCharStream0.getEndLine());
      assertEquals((-543), javaCharStream0.getLine());
      assertEquals("", token0.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.kind);
      assertEquals((-543), token0.endLine);
      assertEquals((-34), token0.beginColumn);
      assertEquals((-543), token0.beginLine);
      assertEquals((-34), token0.endColumn);
      
      char[] charArray0 = new char[5];
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-34), javaCharStream0.getColumn());
      assertEquals((-34), javaCharStream0.getBeginColumn());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertEquals((-34), javaCharStream0.getEndColumn());
      assertEquals((-543), javaCharStream0.getEndLine());
      assertEquals((-543), javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      charArray0[0] = 'a';
      charArray0[1] = '+';
      charArray0[2] = '&';
      charArray0[3] = '-';
      charArray0[4] = '!';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'a', '+', '&', '-', '!'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'a', '+', '&', '-', '!'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-34), javaCharStream0.getBeginColumn());
      assertEquals((-543), javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'a', '+', '&', '-', '!'}, charArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = token_GTToken0.toString();
      assertNull(string0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(30, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("a", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.SwitchTo(0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("+", token2.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token2.endColumn);
      assertEquals(101, token2.kind);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotNull(token3);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("&", token3.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(105, token3.kind);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      
      Token token4 = new Token();
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertNotNull(token4);
      assertNull(token4.toString());
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.kind);
      assertEquals(0, token4.endColumn);
      assertEquals(0, token4.endLine);
      
      javaParserTokenManager0.SkipLexicalActions(token4);
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertNull(token4.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.kind);
      assertEquals(0, token4.endColumn);
      assertEquals(0, token4.endLine);
      
      javaParserTokenManager0.SkipLexicalActions(token4);
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertNull(token4.toString());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.kind);
      assertEquals(0, token4.endColumn);
      assertEquals(0, token4.endLine);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)53, (byte)53, (byte)0}, byteArray0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      
      Token.GTToken token_GTToken2 = new Token.GTToken();
      assertFalse(token_GTToken2.equals((Object)token_GTToken1));
      assertFalse(token_GTToken2.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken2);
      assertNull(token_GTToken2.toString());
      assertEquals(0, token_GTToken2.kind);
      assertEquals(0, token_GTToken2.beginLine);
      assertEquals(0, token_GTToken2.beginColumn);
      assertEquals(0, token_GTToken2.endColumn);
      assertEquals(0, token_GTToken2.endLine);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)54;
      token_GTToken1.next = (Token) token_GTToken2;
      assertNull(token_GTToken1.toString());
      assertNull(token_GTToken2.toString());
      assertNull(token_GTToken1.next.toString());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 13);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)126, 0);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byteArrayInputStream0.close();
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken1);
      assertFalse(token_GTToken1.equals((Object)token_GTToken2));
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotSame(token_GTToken1, token_GTToken2);
      assertNotSame(token_GTToken1, token_GTToken0);
      assertNull(token_GTToken1.toString());
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)0}, byteArray0);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(126, javaCharStream0.getLine());
      assertEquals(126, javaCharStream0.getBeginLine());
      assertEquals("~", token0.toString());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(90, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(126, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(126, token0.beginLine);
      
      byteArrayInputStream0.close();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)0}, byteArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("6", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(126, javaCharStream0.getLine());
      assertEquals(126, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)0}, byteArray0);
      assertEquals(126, token1.beginLine);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(126, token1.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotNull(token2);
      assertEquals("6", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(126, javaCharStream0.getLine());
      assertEquals(126, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)0}, byteArray0);
      assertEquals(1, token2.endColumn);
      assertEquals(1, token2.beginColumn);
      assertEquals(126, token2.endLine);
      assertEquals(66, token2.kind);
      assertEquals(126, token2.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 37);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 37. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      
      Token.GTToken token_GTToken2 = new Token.GTToken();
      assertFalse(token_GTToken2.equals((Object)token_GTToken0));
      assertFalse(token_GTToken2.equals((Object)token_GTToken1));
      assertNotNull(token_GTToken2);
      assertNull(token_GTToken2.toString());
      assertEquals(0, token_GTToken2.endLine);
      assertEquals(0, token_GTToken2.endColumn);
      assertEquals(0, token_GTToken2.beginColumn);
      assertEquals(0, token_GTToken2.beginLine);
      assertEquals(0, token_GTToken2.kind);
      
      token_GTToken1.beginLine = 0;
      assertNull(token_GTToken1.toString());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)54;
      token_GTToken1.next = (Token) token_GTToken2;
      assertNull(token_GTToken1.toString());
      assertNull(token_GTToken2.toString());
      assertNull(token_GTToken1.next.toString());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 13);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)126, 0);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byteArrayInputStream0.close();
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken1);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertFalse(token_GTToken1.equals((Object)token_GTToken2));
      assertNotSame(token_GTToken1, token_GTToken0);
      assertNotSame(token_GTToken1, token_GTToken2);
      assertNull(token_GTToken1.toString());
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)0}, byteArray0);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals(126, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(126, javaCharStream0.getLine());
      assertEquals("~", token0.toString());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(90, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(126, token0.endLine);
      assertEquals(126, token0.beginLine);
      
      byteArrayInputStream0.close();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)126, (byte)54, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(32);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 32. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endLine);
      
      Token.GTToken token_GTToken2 = new Token.GTToken();
      assertFalse(token_GTToken2.equals((Object)token_GTToken1));
      assertFalse(token_GTToken2.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken2);
      assertNull(token_GTToken2.toString());
      assertEquals(0, token_GTToken2.endColumn);
      assertEquals(0, token_GTToken2.beginLine);
      assertEquals(0, token_GTToken2.kind);
      assertEquals(0, token_GTToken2.beginColumn);
      assertEquals(0, token_GTToken2.endLine);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)54;
      token_GTToken1.next = (Token) token_GTToken2;
      assertNull(token_GTToken1.toString());
      assertNull(token_GTToken2.toString());
      assertNull(token_GTToken1.next.toString());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 13);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)106, (byte)54, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)106, 0);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)106, (byte)54, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      token_GTToken1.next = (Token) token_GTToken2;
      assertNull(token_GTToken1.toString());
      assertNull(token_GTToken2.toString());
      assertNull(token_GTToken1.next.toString());
      
      byteArrayInputStream0.close();
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)106, (byte)54, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)106, (byte)54, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken1);
      assertFalse(token_GTToken1.equals((Object)token_GTToken2));
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotSame(token_GTToken1, token_GTToken2);
      assertNotSame(token_GTToken1, token_GTToken0);
      assertNull(token_GTToken1.toString());
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)106, (byte)54, (byte)0}, byteArray0);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endLine);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("j6", token0.toString());
      assertArrayEquals(new byte[] {(byte)106, (byte)54, (byte)0}, byteArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(106, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(106, token0.beginLine);
      
      byteArrayInputStream0.close();
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)106, (byte)54, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 106, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)53;
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      byte[] byteArray1 = new byte[15];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)118;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 0, 44);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertEquals(15, byteArrayInputStream0.available());
      
      byte[] byteArray2 = new byte[7];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray2, (byte)53, 0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals((-46), byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-340), 0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotNull(javaCharStream0);
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, (byte)53, (byte)102);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertNotNull(byteArrayInputStream2);
      assertEquals((-50), byteArrayInputStream2.available());
      assertArrayEquals(new byte[] {(byte)53, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertNotNull(javaParserTokenManager0);
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = Token.newToken((byte)118);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":lW");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertNotSame(token1, token0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotNull(token1);
      assertEquals("fv", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-340), javaCharStream0.getBeginLine());
      assertEquals((-340), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-340), javaCharStream0.getEndLine());
      assertEquals(1, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals((-340), token1.endLine);
      assertEquals((-340), token1.beginLine);
      assertEquals(74, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotNull(token2);
      assertEquals("fv", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-340), javaCharStream0.getBeginLine());
      assertEquals((-340), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-340), javaCharStream0.getEndLine());
      assertEquals(0, token2.beginColumn);
      assertEquals(1, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals((-340), token2.endLine);
      assertEquals((-340), token2.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      token2.next = token1;
      assertEquals("fv", token1.toString());
      assertEquals("fv", token2.toString());
      assertEquals("fv", token2.next.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-340), javaCharStream0.getBeginLine());
      assertEquals((-340), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-340), javaCharStream0.getEndLine());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNull(token_GTToken0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-340), javaCharStream0.getBeginLine());
      assertEquals((-340), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals((-340), javaCharStream0.getEndLine());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)102;
      byteArray0[6] = (byte)102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)102, 0);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-95), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)0, (byte)102}, byteArray0);
      
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 433, (byte)102);
      assertNotNull(javaCharStream0);
      assertEquals((-95), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)0, (byte)102}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals((-95), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)0, (byte)102}, byteArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'8', '8', '8'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals((-95), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)0, (byte)102}, byteArray0);
      assertArrayEquals(new char[] {'8', '8', '8'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals((-95), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)0, (byte)102}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-95), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)0, (byte)102}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("888", token0.toString());
      assertEquals((-95), byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertArrayEquals(new byte[] {(byte)102, (byte)102, (byte)102, (byte)102, (byte)102, (byte)0, (byte)102}, byteArray0);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((byte)102);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 102. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 51, (byte)17);
      assertNotNull(javaCharStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      charArray0[4] = '8';
      charArray0[5] = 'Z';
      charArray0[6] = 'Z';
      charArray0[7] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z', '8', 'Z', 'Z', 'Z'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z', '8', 'Z', 'Z', 'Z'}, charArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("ZZZZ8ZZZ", token0.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, token0.beginLine);
      assertEquals(8, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      
      javaParserTokenManager0.SwitchTo(0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNotNull(token_GTToken1);
      assertNull(token_GTToken1.toString());
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.endColumn);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endLine);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)115, (byte)115, (byte)0}, byteArray0);
      
      byteArrayInputStream0.mark((-1248));
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)115, (byte)115, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 742, 46);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)115, (byte)115, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-1), 14);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)115, (byte)115, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)115, (byte)115, (byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(15, javaCharStream1.getEndColumn());
      assertEquals(15, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(14, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals("ss", token0.toString());
      assertArrayEquals(new byte[] {(byte)115, (byte)115, (byte)0}, byteArray0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(14, token0.beginColumn);
      assertEquals((-1), token0.endLine);
      assertEquals(15, token0.endColumn);
      assertEquals((-1), token0.beginLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1, column 17.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      token_GTToken0.beginLine = (int) (byte)122;
      assertNull(token_GTToken0.toString());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)122, (byte)0}, byteArray0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 9, 0);
      assertNotNull(javaCharStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)122, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)122, (byte)0}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(9, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("z", token1.toString());
      assertArrayEquals(new byte[] {(byte)122, (byte)0}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(9, token1.beginLine);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 46);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 46. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)26;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)26, (byte) (-46), (byte)122, (byte)26}, byteArray0);
      
      byte[] byteArray1 = new byte[9];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte)91;
      byteArray1[2] = (byte)102;
      byteArray1[3] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)114, (byte)91, (byte)102, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)114, 77);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaCharStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)114, (byte)91, (byte)102, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)114, (byte)91, (byte)102, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(77, javaCharStream0.getBeginColumn());
      assertEquals(77, javaCharStream0.getColumn());
      assertEquals(77, javaCharStream0.getEndColumn());
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals(114, javaCharStream0.getLine());
      assertEquals("r", token0.toString());
      assertArrayEquals(new byte[] {(byte)114, (byte)91, (byte)102, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(77, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(114, token0.endLine);
      assertEquals(114, token0.beginLine);
      assertEquals(77, token0.endColumn);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      charArray0[1] = 'N';
      charArray0[2] = 'H';
      charArray0[3] = 'p';
      charArray0[4] = '+';
      charArray0[5] = 'h';
      charArray0[6] = 'p';
      javaCharStream0.nextCharBuf = charArray0;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(77, javaCharStream0.getBeginColumn());
      assertEquals(77, javaCharStream0.getColumn());
      assertEquals(77, javaCharStream0.getEndColumn());
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals(114, javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals("[", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(78, javaCharStream0.getBeginColumn());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals(114, javaCharStream0.getLine());
      assertArrayEquals(new byte[] {(byte)114, (byte)91, (byte)102, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(114, token1.beginLine);
      assertEquals(78, token1.endColumn);
      assertEquals(81, token1.kind);
      assertEquals(78, token1.beginColumn);
      assertEquals(114, token1.endLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(token0.equals((Object)token1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(token0, token1);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(78, javaCharStream0.getBeginColumn());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals(114, javaCharStream0.getLine());
      assertEquals("r", token0.toString());
      assertArrayEquals(new byte[] {(byte)114, (byte)91, (byte)102, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(77, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(114, token0.endLine);
      assertEquals(114, token0.beginLine);
      assertEquals(77, token0.endColumn);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotNull(token2);
      assertEquals("Hp", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals(114, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)114, (byte)91, (byte)102, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(80, token2.endColumn);
      assertEquals(114, token2.beginLine);
      assertEquals(79, token2.beginColumn);
      assertEquals(114, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      
      token2.specialToken = token0;
      assertEquals("Hp", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("r", token2.specialToken.toString());
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals(114, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getColumn());
      assertEquals("r", token0.toString());
      
      byteArrayInputStream0.mark(78);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)114, (byte)91, (byte)102, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      token2.kind = 29;
      assertEquals("Hp", token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals(114, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals(114, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)114, (byte)91, (byte)102, (byte)114, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1122);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1122. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Token token0 = new Token();
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)73;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1704, 4225);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-1702), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)117, (byte)73}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals(2, byteArrayInputStream1.available());
      assertArrayEquals(new byte[] {(byte)117, (byte)73}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1, 0, 0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaCharStream0);
      assertEquals(2, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)117, (byte)73}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)117, (byte)73}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotNull(string0);
      assertEquals(2, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)117, (byte)73}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(token1, token0);
      assertNotNull(token1);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("uI", token1.toString());
      assertArrayEquals(new byte[] {(byte)117, (byte)73}, byteArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling1));
      assertFalse(fileSystemHandling2.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling2);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string1 = javaCharStream0.GetImage();
      assertFalse(string1.equals((Object)string0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals("uI", string1);
      assertNotNull(string1);
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertArrayEquals(new byte[] {(byte)117, (byte)73}, byteArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = new Token();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertNull(token2.toString());
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      
      int int0 = byteArrayInputStream0.read();
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals((-1), int0);
      assertEquals((-1702), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)117, (byte)73}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1042);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1042. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }
}
