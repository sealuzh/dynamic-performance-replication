/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 06:56:07 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("pus", 0L);
      jSONObject0.getDouble("pus");
      long long0 = jSONObject0.getLong("pus");
      Object object0 = new Object();
      jSONObject0.get("pus");
      jSONObject0.optBoolean("pus");
      long long1 = jSONObject0.optLong("pus", 0L);
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(8192);
      linkedList0.add(integer0);
      linkedList0.poll();
      jSONObject0.put("MM6o8<k%_C", (Collection) linkedList0);
      jSONObject0.put("B<zUT#6", (-3096));
      jSONObject0.put("MM6o8<k%_C", true);
      jSONObject0.optBoolean("MM6o8<k%_C");
      JSONObject jSONObject1 = jSONObject0.put("false", (Object) null);
      jSONObject1.optInt("B<zUT#6", (-3096));
      jSONObject0.optJSONObject("B<zUT#6");
      jSONObject1.optBoolean("issplit");
      JSONObject.getNames((Object) null);
      try { 
        jSONObject0.getDouble("issplit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issplit\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("rV-sY/", "gemin");
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      JSONObject.quote("gemin");
      jSONObject1.optBoolean("rV-sY/");
      Float float0 = new Float((-76.14116));
      Float.sum(1497.7823F, 1834.8883F);
      jSONObject1.isNull("r&^44Q7.sb?g`z-W");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.optBoolean("\"gemin\"", false);
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      Float.isFinite(1834.8883F);
      int int0 = 1606;
      jSONObject0.toString(1606);
      Float float1 = new Float(0.0F);
      linkedList0.removeFirstOccurrence(float1);
      jSONObject1.optJSONObject("bkgeVyf&-D");
      JSONObject.numberToString(float0);
      jSONObject1.optLong("gemin");
      JSONObject.doubleToString(3332.6707F);
      jSONObject2.optLong("Fk)9%9b*?6");
      JSONObject jSONObject3 = jSONObject2.accumulate("\"gemin\"", "toS");
      JSONObject.quote("h");
      try { 
        jSONObject3.put((String) null, (long) 1606);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optInt((String) null);
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject1.accumulate("r8-s0/", jSONObject0);
      jSONObject2.optBoolean((String) null);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      JSONObject jSONObject3 = jSONObject0.put("[]", 108);
      jSONObject1.put("h@d_,}(d>^dMG1VR_V^L", (Map) hashMap1);
      jSONObject2.toString(0, 0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject4 = new JSONObject("r8-s0/", stringArray0);
      jSONObject4.optLong("r8-s0/", (-1073L));
      Float.sum(785.0F, (-618.05F));
      Float float0 = new Float((-1732.0066F));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.removeFirstOccurrence(integer0);
      jSONObject4.optJSONObject("r8-s0/");
      JSONObject.numberToString(float0);
      jSONObject3.optLong("[]");
      JSONObject.doubleToString((-3413.1141749662));
      jSONObject0.accumulate("java.lang.Float@0000000013", (Object) null);
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("rV-sYR/", "gtmn");
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONArray0.toJSONObject(jSONArray0);
      jSONObject1.optBoolean("rV-sYR/");
      Float float0 = new Float((-76.14116));
      Float.isFinite((-2336.7424F));
      Float.sum(0.0F, 0.0F);
      JSONObject.numberToString(float0);
      jSONObject0.optInt("java.lang.Float@0000000006");
      JSONObject.getNames((Object) float0);
      Object object0 = new Object();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      jSONObject0.optBoolean("gtmn", false);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject.getNames((Object) null);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      String string0 = "hJ9~/523'K0y:Yx9";
      JSONObject jSONObject1 = jSONObject0.put("hJ9~/523'K0y:Yx9", 0L);
      JSONArray jSONArray0 = jSONObject1.names();
      jSONObject0.toJSONArray(jSONArray0);
      Float float0 = new Float((-1.0F));
      Float.max((-1.0F), (-243.3F));
      Object object0 = new Object();
      JSONObject jSONObject2 = new JSONObject(object0);
      jSONObject1.put("?'/:y:", (Object) jSONArray0);
      Boolean.valueOf(true);
      JSONObject.doubleToString(1795.3);
      HashMap<Byte, JSONObject> hashMap1 = new HashMap<Byte, JSONObject>();
      jSONObject0.optDouble("hJ9~/523'K0y:Yx9");
      JSONObject jSONObject3 = new JSONObject((Map) hashMap1);
      jSONObject0.optInt("Unclosed comment");
      JSONObject.getNames(jSONObject1);
      jSONObject0.optBoolean("\b", true);
      jSONObject2.names();
      JSONObject.doubleToString(3794.9901);
      jSONObject1.toString();
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte byte0 = (byte)42;
      Byte byte1 = new Byte((byte)42);
      JSONObject jSONObject0 = new JSONObject(byte1);
      JSONObject.quote("getdoubleToLongBits");
      JSONObject jSONObject1 = jSONObject0.put("0", (int) (byte)42);
      int int0 = 61;
      jSONObject1.toString(2848, 61);
      jSONObject0.getString("0");
      JSONObject jSONObject2 = jSONObject1.accumulate("Z4", "0");
      StringWriter stringWriter0 = new StringWriter((byte)42);
      jSONObject2.write(stringWriter0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.toArray();
      jSONObject0.getDouble("0");
      JSONObject jSONObject3 = jSONObject2.put("iscompare", (Collection) linkedList0);
      try { 
        jSONObject3.getJSONArray("Z4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z4\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", " at character ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = " at character ";
      stringArray0[1] = "";
      stringArray0[2] = " at character ";
      jSONObject0.optLong("");
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = " at character ";
      stringArray0[7] = "";
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject1 = new JSONObject();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      jSONObject1.optLong("");
      Float float0 = new Float((double) 0L);
      JSONObject.doubleToString(1826.350682579);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap1);
      jSONObject1.optString(" at character ", "");
      JSONObject jSONObject3 = jSONObject0.put("", (Map) hashMap1);
      try { 
        jSONObject3.getInt("zl)pr/<' Sz}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"zl)pr/<' Sz}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Collection<Float> collection0 = hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\t";
      stringArray0[1] = "\t";
      stringArray0[2] = "\t";
      stringArray0[3] = "\t";
      stringArray0[4] = "\t";
      JSONObject jSONObject1 = jSONObject0.put("\t", 0);
      stringArray0[6] = "\t";
      stringArray0[7] = "\t";
      stringArray0[8] = "\t";
      JSONObject jSONObject2 = new JSONObject(collection0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(97);
      jSONObject2.write(stringWriter0);
      Float float0 = new Float((double) 0);
      Float.min(97, (-100.3135F));
      Float.min(3019.8052F, (-1.0F));
      Object object0 = JSONObject.NULL;
      hashMap0.put(object0, float0);
      JSONObject jSONObject3 = new JSONObject(jSONObject1, stringArray0);
      JSONArray jSONArray0 = new JSONArray(collection0);
      jSONObject3.putOpt("Wg$", jSONArray0);
      jSONObject3.getJSONArray("Wg$");
      assertEquals(2, jSONObject3.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(10);
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.put("#$rL hEtp", "#$rL hEtp");
      Boolean.logicalXor(true, true);
      JSONObject jSONObject1 = jSONObject0.put("#$rL hEtp", (long) 10);
      Double double0 = new Double(10);
      JSONObject jSONObject2 = jSONObject1.putOpt("#$rL hEtp", double0);
      jSONObject2.put("#$rL hEtp", false);
      jSONObject1.getBoolean("#$rL hEtp");
      jSONObject0.optJSONObject("#$rL hEtp");
      JSONObject jSONObject3 = jSONObject0.put(" ~W=!", 10);
      jSONObject0.optDouble(" ~W=!", (double) 10);
      int int0 = 1023;
      Integer integer0 = new Integer(931);
      String string0 = "=%KgUxFf_M08b|mp";
      jSONObject1.isNull("=%KgUxFf_M08b|mp");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string1 = "f3z";
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      JSONObject jSONObject4 = jSONObject3.put("f3z", (Collection) linkedList1);
      Double.sum(931, Double.NaN);
      jSONObject4.remove("f3z");
      jSONObject1.optJSONObject("{Q5w");
      JSONObject jSONObject5 = new JSONObject();
      try { 
        jSONObject3.getLong("0>)`H)/.)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0>)`H)/.)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONObject[", "JSONObject[");
      JSONObject jSONObject2 = new JSONObject((Object) "JSONObject[");
      JSONObject jSONObject3 = jSONObject2.put("JSONObject[", 0.5381877726876052);
      jSONObject1.put("JSONObject[", (-4L));
      Boolean boolean0 = new Boolean((String) null);
      Short short0 = new Short((short)125);
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      Integer integer0 = new Integer(12);
      jSONObject2.optDouble("JSONObject[");
      Short short1 = new Short((short)125);
      Integer integer1 = new Integer((short)125);
      Short short2 = new Short((short)125);
      jSONObject3.toString((int) (short)125);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONObject.valueToString(hashMap0, (short)125, 12);
      jSONObject0.toString();
      jSONObject1.put("java.lang.Long@0000000004.", 157);
      JSONObject.numberToString(integer0);
      jSONObject3.toJSONArray(jSONArray0);
      assertEquals(4, jSONObject2.length());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 39;
      JSONTokener jSONTokener0 = new JSONTokener("{BK_d1sIQ]Ej_(<d");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of {BK_d1sIQ]Ej_(<d
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "-1753.95198564.";
      JSONObject jSONObject1 = jSONObject0.put("-1753.95198564.", (-16L));
      JSONArray jSONArray0 = jSONObject0.names();
      jSONObject0.toJSONArray(jSONArray0);
      Boolean boolean0 = new Boolean(".");
      JSONObject.testValidity(boolean0);
      jSONObject1.getDouble("-1753.95198564.");
      jSONObject0.optLong("-1753.95198564.");
      String string1 = "mM_SH-Hc,e=q";
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      try { 
        jSONObject1.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-1753.95198564.", (-16L));
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      Boolean boolean0 = new Boolean(".");
      JSONObject.testValidity(boolean0);
      jSONObject1.getDouble("-1753.95198564.");
      int int0 = jSONObject0.getInt("-1753.95198564.");
      assertEquals((-16), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Collection<Float> collection0 = hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "\t";
      stringArray0[2] = "\t";
      stringArray0[4] = "\t";
      stringArray0[5] = "\t";
      JSONObject jSONObject1 = jSONObject0.put("\t", (-9));
      stringArray0[6] = "\t";
      jSONObject1.getLong("\t");
      String string0 = "0";
      JSONArray jSONArray0 = new JSONArray(collection0);
      try { 
        jSONArray0.getJSONObject((-195));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-195] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = 1996.795;
      Float float0 = new Float(1996.795);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<String, Double> hashMap1 = new HashMap<String, Double>();
      String string0 = "Cj&Y`6C=P&xM+7xvd9";
      jSONObject0.put("Cj&Y`6C=P&xM+7xvd9", (Map) hashMap1);
      int int0 = 45;
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("!!WHAVO", (Collection) linkedList0);
      Long long0 = new Long((-370L));
      JSONObject jSONObject1 = jSONObject0.append("!!WHAVO", long0);
      jSONObject1.optInt("java.lang.Long@00000000030");
      jSONObject0.accumulate("!!WHAVO", linkedList0);
      jSONObject0.toString((-1));
      jSONObject0.remove("wheel.json.JSONObject");
      jSONObject0.optString("/Fu0v-'c7D|}uN", "tpg36");
      try { 
        jSONObject0.getDouble("tpg36");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tpg36\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((int) (byte)88);
      JSONObject jSONObject1 = jSONObject0.append(" at character ", (Object) null);
      jSONObject1.optInt(" at character ");
      StringWriter stringWriter0 = new StringWriter(0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.accumulate("7@IZiOpW`LHrAT53Lra", "7@IZiOpW`LHrAT53Lra");
      Double.isFinite(0.0);
      jSONObject0.toString(8, 8);
      JSONObject.quote("{\n                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\",\n                \"java.lang.String@0000000008\": \"java.lang.String@0000000008\"\n        }");
      Float.max(8, 0.0F);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|PyY*-&qo{,z+J?s";
      stringArray0[1] = "{\n                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\",\n                \"java.lang.String@0000000008\": \"java.lang.String@0000000008\"\n        }";
      stringArray0[2] = "{\n                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\",\n                \"java.lang.String@0000000008\": \"java.lang.String@0000000008\"\n        }";
      stringArray0[3] = "|PyY*-&qo{,z+J?s";
      stringArray0[4] = "|PyY*-&qo{,z+J?s";
      stringArray0[5] = "|PyY*-&qo{,z+J?s";
      stringArray0[6] = "{\n                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\",\n                \"java.lang.String@0000000008\": \"java.lang.String@0000000008\"\n        }";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.put("getsum", (Object) "{\n                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\",\n                \"java.lang.String@0000000008\": \"java.lang.String@0000000008\"\n        }");
      jSONObject2.keys();
      Double.isFinite(0.0);
      JSONObject jSONObject3 = new JSONObject("{\n                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\",\n                \"java.lang.String@0000000008\": \"java.lang.String@0000000008\"\n        }");
      try { 
        jSONObject1.get("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.length();
      String string0 = "7IZi=OpW`HEAT53ra";
      JSONObject jSONObject1 = jSONObject0.accumulate("rV-sYR/", "getmin");
      jSONObject1.optInt("rV-sYR/", (-1020));
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      String string1 = "vB\\0|S:vIBh";
      jSONObject0.put("vB\u0000|S:vIBh", (Map) hashMap0);
      jSONObject1.toString(13, 78);
      jSONObject1.optBoolean("rV-sYR/");
      JSONTokener jSONTokener0 = new JSONTokener("I5;N,NK@96{5,S<Z");
      JSONObject.valueToString(jSONArray0, 0, 17);
      Float float0 = new Float(0.0);
      JSONObject.numberToString(float0);
      String string2 = "co";
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of j
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.length();
      Double.max((-961.39285), (-1650.2104));
      JSONObject jSONObject2 = jSONObject1.accumulate("rV-sYR/", jSONObject0);
      jSONObject2.optInt("rV-sYR/", 42);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "UfU'{rdOx2bQ^n7R";
      stringArray0[1] = "UfU'{rdOx2bQ^n7R";
      stringArray0[2] = "null";
      stringArray0[3] = "UfU'{rdOx2bQ^n7R";
      stringArray0[5] = "rV-sYR/";
      stringArray0[6] = "isoptJSONObject";
      stringArray0[7] = "7IZi=OpW`HEAT53ra";
      stringArray0[8] = "rV-sYR/";
      JSONObject jSONObject3 = new JSONObject("rV-sYR/", stringArray0);
      jSONObject0.keys();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "UfU'{rdOx2bQ^n7R");
      Writer writer0 = jSONObject0.write(stringWriter1);
      Writer writer1 = jSONObject1.write(writer0);
      assertSame(writer1, stringWriter1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject.doubleToString((-269.181));
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) "-269.181");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject2 = new JSONObject("-269.181", stringArray0);
      Iterator iterator0 = jSONObject2.keys();
      Iterator iterator1 = jSONObject0.keys();
      assertNotSame(iterator1, iterator0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.length();
      Double.max((-961.39285), (-1650.2104));
      Long long0 = new Long(0L);
      Float float0 = new Float((float) 0L);
      JSONObject jSONObject2 = jSONObject1.append("~-/]'/!NF-", float0);
      Object object0 = new Object();
      JSONObject.getNames((Object) "7IZi=OpW`HEAT53ra");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONArray1.optInt(0, 3141);
      jSONObject2.remove("DZ*s'ChWO*V-Ip");
      JSONObject.valueToString(jSONArray1, (-604), (-3191));
      jSONObject2.put("7IZi=OpW`HEAT53ra", true);
      Float.min(1111.376F, 3141);
      jSONObject2.toString(4);
      jSONObject1.optString("_2V7DVe", "A JSONArray text must start with '['");
      try { 
        jSONObject1.put((String) null, 28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONObject[", "JSONObject[");
      Double.max(0.0, (-2598.8557934427));
      JSONObject jSONObject2 = jSONObject0.accumulate("JSONObject[", "JSONObject[");
      jSONObject1.toString(18, (-994));
      jSONObject2.toString(65);
      Integer integer0 = new Integer((-2193));
      jSONObject1.optLong("", (long) (-2193));
      JSONObject jSONObject3 = new JSONObject();
      Float float0 = new Float((float) (-37));
      Integer integer1 = new Integer((-994));
      jSONObject2.isNull("JSONObject[");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject1.put("gO+v(8tfR+i", (Collection) linkedList0);
      jSONObject0.toString(1082);
      jSONObject2.optJSONObject("{\"java.lang.String@0000000002\": [\n                                                                 \"java.lang.String@0000000002\",\n                                                                 \"java.lang.String@0000000002\"\n]}");
      JSONObject.numberToString(integer1);
      jSONObject3.optLong("3:vQM]by!(Ru[.P.1! ");
      jSONObject1.has("JSONObject[");
      try { 
        jSONObject2.getDouble("java.lang.Integer@0000000008");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Integer@0000000008\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      jSONObject0.optLong("get", 0L);
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{}";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertNull(stringArray1);
      
      Integer integer0 = new Integer(44);
      jSONArray0.optInt(3516, 44);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONArray jSONArray2 = jSONObject2.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      
      JSONObject jSONObject3 = new JSONObject((Object) "g-t");
      assertEquals(3, jSONObject3.length());
      
      jSONObject2.put("g-t", (Collection) linkedList0);
      jSONArray0.optInt(44, 40);
      Integer integer1 = new Integer(1204);
      JSONObject.valueToString(integer1, 44, 1666);
      JSONObject jSONObject4 = jSONArray1.toJSONObject(jSONArray1);
      jSONObject4.keys();
      jSONObject4.put("true", (Object) jSONArray0);
      jSONObject4.optString("true");
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray0, jSONArray2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONObject[", "JSONObject[");
      Double.max(0.0, (-1025.53));
      Float float0 = new Float(1.0F);
      JSONObject jSONObject2 = new JSONObject(float0);
      jSONObject1.accumulate("_~ztg", jSONObject2);
      String string0 = jSONObject0.toString(16, (-1243));
      jSONObject0.toString((-37));
      Integer integer0 = new Integer((-37));
      jSONObject1.optLong("val", (-1L));
      JSONObject jSONObject3 = new JSONObject();
      Float float1 = new Float((float) (-994));
      Integer integer1 = new Integer(16);
      jSONObject2.isNull("val");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject3.put("{\n\"java.lang.String@0000000002\": \"java.lang.String@0000000002\",\n\"java.lang.String@0000000010\": {\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": java.lang.Boolean@0000000007,\n\"java.lang.String@0000000008\": \"java.lang.Class@0000000009\"\n}\n}", (Collection) linkedList0);
      jSONObject3.toString((-1243));
      jSONObject1.optJSONObject("_~ztg");
      String string1 = JSONObject.numberToString(float1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.accumulate("7@IZiOpW`LHrAT53Lra", "7@IZiOpW`LHrAT53Lra");
      Double.isFinite(0.0);
      jSONObject0.toString(8, 8);
      JSONObject.quote("{\n                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\",\n                \"java.lang.String@0000000008\": \"java.lang.String@0000000008\"\n        }");
      jSONObject0.optBoolean("$37SWS3D=/1P");
      Boolean boolean0 = new Boolean(true);
      jSONObject1.optBoolean("getlogicalAnd", false);
      jSONObject0.optString((String) null, ",lni");
      int int0 = jSONObject1.length();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.accumulate("7@IZiOpW`LHrAT53Lra", "7@IZiOpW`LHrAT53Lra");
      Double.isFinite(0.0);
      try { 
        jSONObject0.getBoolean("7@IZiOpW`LHrAT53Lra");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7@IZiOpW`LHrAT53Lra\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.length();
      Double.max((-961.39285), (-1650.2104));
      JSONObject jSONObject2 = new JSONObject();
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject2);
      assertNull(stringArray0);
      
      Short short0 = new Short((short)51);
      JSONObject jSONObject3 = jSONObject2.append("000", short0);
      boolean boolean0 = jSONObject3.optBoolean("", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      jSONObject0.optLong("get", 0L);
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{}";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject1);
      Integer integer0 = new Integer(44);
      jSONArray0.optInt(3516, 44);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      jSONObject2.toJSONArray(jSONArray0);
      JSONObject jSONObject3 = new JSONObject(jSONArray1);
      JSONObject jSONObject4 = new JSONObject((Object) "g-t");
      JSONObject jSONObject5 = jSONObject2.put("g-t", (Collection) linkedList0);
      jSONArray0.optInt(44, 40);
      Integer integer1 = new Integer(1204);
      JSONObject.valueToString(integer1, 44, 1666);
      JSONObject jSONObject6 = jSONObject1.put("get", true);
      jSONObject6.keys();
      jSONObject1.optJSONObject("Expected '");
      try { 
        jSONObject5.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.length();
      Double.max((-961.39285), (-1650.2104));
      JSONObject jSONObject2 = jSONObject1.accumulate("7IZi=OpW`HEAT53ra", jSONObject0);
      jSONObject2.optInt("7IZi=OpW`HEAT53ra", 42);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      JSONObject jSONObject3 = jSONObject1.put("7IZi=OpW`HEAT53ra", (Map) hashMap1);
      jSONObject1.optBoolean("7IZi=OpW`HEAT53ra");
      JSONTokener jSONTokener0 = new JSONTokener("toL");
      JSONObject.getNames((Object) jSONTokener0);
      jSONObject3.optJSONObject("7IZi=OpW`HEAT53ra");
      try { 
        jSONObject0.get("9E1~[,ChW[VeupXEh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9E1~[,ChW[VeupXEh\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      jSONObject0.put("LjYdF^H|gcd)VN", (Object) "isparseBoolean");
      jSONObject0.toString();
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.doubleToString(1.0);
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "1";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = jSONObject0.optString("1", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = new Object();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optString("\n");
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("|}E,");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |}E,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("5", "5");
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer0 = new Integer((-1602));
      JSONObject jSONObject2 = jSONObject1.put("toS", (Object) integer0);
      jSONObject2.optDouble("toS");
      jSONObject2.put("q)JGjn\u0006R^TfJT?o5", (-2959));
      jSONObject0.optString("null", "null");
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.valueToString((Object) null, (-2959), 49);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONObject[", "JSONObject[");
      Double.max(0.0, (-2598.8557934427));
      JSONObject jSONObject2 = jSONObject0.accumulate("JSONObject[", "JSONObject[");
      jSONObject1.toString(18, (-994));
      JSONObject.getNames(jSONObject0);
      jSONObject2.toString(65);
      Integer integer0 = new Integer((-2211));
      jSONObject1.optLong("", (long) (-2211));
      JSONObject jSONObject3 = new JSONObject();
      Float float0 = new Float((float) (-37));
      Integer integer1 = new Integer((-994));
      jSONObject2.isNull("JSONObject[");
      Double double0 = new Double((-1657.77831));
      JSONObject.getNames((Object) double0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject jSONObject4 = jSONObject1.put("gO+v(8tfR+i", (Collection) linkedList1);
      assertSame(jSONObject0, jSONObject4);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      jSONArray0.put((Map) hashMap0);
      jSONObject0.optLong("", (long) 3516);
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "wheel.json.JSONArray@0000000002";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "wheel.json.JSONArray@0000000002";
      stringArray0[5] = "wheel.json.JSONArray@0000000002";
      stringArray0[6] = "";
      stringArray0[7] = "wheel.json.JSONArray@0000000002";
      stringArray0[8] = "wheel.json.JSONArray@0000000002";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.names();
      jSONObject1.toString(3516);
      JSONObject jSONObject3 = new JSONObject();
      JSONObject.getNames((Object) jSONObject3);
      jSONObject3.optJSONObject("");
      try { 
        jSONObject3.get("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      String string0 = "0..";
      jSONObject0.putOpt("0..", hashMap0);
      jSONObject0.optLong("0..", (-528L));
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.valueToString("0..", 6, (-770));
      Integer integer0 = new Integer((-74));
      jSONObject0.toString((-770), (-74));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.toString(535);
      JSONObject.getNames((Object) jSONArray1);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONObject[", "JSONObject[");
      Double.max(0.0, 0.0);
      JSONObject jSONObject2 = jSONObject1.accumulate("JSONObject[", jSONObject0);
      jSONObject1.optInt("F#l+[J!d}\"s?=<kdYC", 1837);
      // Undeclared exception!
      jSONObject2.toString(8, 24);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      jSONArray0.put((Map) hashMap0);
      jSONObject1.optLong("", (long) 3516);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.valueToString(jSONArray0, 3516, 6);
      Integer integer0 = new Integer(202);
      jSONObject0.toString(202, 202);
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      jSONObject0.toJSONArray(jSONArray1);
      jSONObject1.put("app", 382L);
      JSONObject jSONObject3 = jSONObject2.put("", false);
      assertSame(jSONObject3, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONObject[", "JSONObject[");
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject2 = jSONObject0.put("getappend", (Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject1);
      jSONObject0.toString((-37));
      jSONObject1.optDouble("Null pointer", 1600.7398);
      jSONObject0.toString((-94), 2089);
      jSONObject2.getJSONObject("getappend");
      jSONObject2.put("{\n\"java.lang.String@0000000002\": \"java.lang.String@0000000002\",\n\"java.lang.String@0000000004\": {}\n}", (Map) hashMap0);
      JSONObject jSONObject3 = new JSONObject("JSONObject[", stringArray0);
      JSONObject jSONObject4 = jSONObject3.putOpt("{\n\"java.lang.String@0000000002\": \"java.lang.String@0000000002\",\n\"java.lang.String@0000000004\": {}\n}", jSONObject0);
      boolean boolean0 = new Boolean("Null pointer");
      JSONObject.quote("getappend");
      jSONObject4.optBoolean("isoptJSONObject");
      jSONObject3.optJSONArray("{\n\"java.lang.String@0000000002\": \"java.lang.String@0000000002\",\n\"java.lang.String@0000000004\": {}\n}");
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "-1753.95198564.";
      JSONObject jSONObject1 = jSONObject0.put("-1753.95198564.", 1L);
      jSONObject0.getLong("-1753.95198564.");
      try { 
        jSONObject1.getBoolean("-1753.95198564.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-1753.95198564.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Long.valueOf(1298L);
      Float float0 = new Float((-1816.714709));
      JSONObject.valueToString(float0);
      Object object0 = new Object();
      byte byte0 = (byte) (-48);
      Byte byte1 = new Byte((byte) (-48));
      JSONObject jSONObject2 = jSONObject1.putOpt("toO", byte1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject2.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      jSONObject0.length();
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(0.0);
      hashMap0.put(object0, double0);
      Double.max((-1650.2104), 0.0);
      JSONObject jSONObject1 = jSONObject0.accumulate("rV-jYRr", "getmin");
      jSONObject1.optInt("rV-jYRr", 0);
      JSONObject jSONObject2 = jSONObject1.accumulate("GM(bhPG0ro", "getmin");
      jSONObject0.toString(0, 52);
      jSONObject1.optBoolean("getmin");
      JSONObject.quote("isnames");
      jSONObject2.optBoolean("ha");
      jSONObject0.optJSONArray("9");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.doubleToString(Double.NaN);
      JSONObject jSONObject1 = jSONObject0.append("null", "<D/h");
      jSONObject0.remove("null");
      Float float0 = new Float(576.4755058);
      int int0 = 148;
      jSONObject1.toString(148);
      jSONObject0.optBoolean((String) null, true);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("Rb}Za^8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Rb}Za^8
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(34);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "f;alse");
      stringWriter1.append('`');
      Integer integer0 = new Integer('`');
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.write(stringWriter0);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = jSONObject0.optInt("", 2487);
      assertEquals(2487, int0);
      
      jSONObject0.toString(457, 34);
      jSONObject0.optBoolean("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      String string0 = JSONObject.quote("f;alse");
      assertEquals("\"f;alse\"", string0);
      
      jSONObject0.optBoolean("{");
      jSONObject0.optJSONArray("");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double.max((-2302.179464), Double.NaN);
      JSONObject jSONObject1 = jSONObject0.accumulate("7@IZiOpW`LHrAT53Lra", "' and instead saw '");
      jSONObject0.optInt("' and instead saw '", 48);
      jSONObject1.toString(48, 8);
      jSONObject1.optBoolean("7@IZiOpW`LHrAT53Lra");
      JSONObject.quote("7@IZiOpW`LHrAT53Lra");
      jSONObject1.optBoolean("gettoBinaryString");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((double) 2494.4656F);
      JSONObject jSONObject1 = new JSONObject(float0);
      Double.max(1757.18034291, 2551.1322);
      Boolean boolean0 = new Boolean("] is not a JSONArray.");
      JSONObject jSONObject2 = jSONObject0.accumulate("JSONObject[", boolean0);
      jSONObject1.optInt("isdoubleToLongBits", 0);
      jSONObject2.toString(4, 0);
      jSONObject0.optBoolean(",\n");
      JSONObject.quote("[");
      jSONObject2.optBoolean("JSONObject[");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("] is not a JSONObject.");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.putOpt("pp", "pp");
      JSONObject.doubleToString((-534.2041409));
      Boolean boolean0 = new Boolean("d*zzxN+&o<hAvAfk#Z-");
      try { 
        jSONObject0.append("pp", boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[pp] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("7+t&mOV", "7+t&mOV");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "7+t&mOV";
      stringArray0[1] = "7+t&mOV";
      stringArray0[2] = "7+t&mOV";
      stringArray0[3] = "7+t&mOV";
      JSONObject.valueToString("7+t&mOV");
      jSONObject1.optJSONArray("7+t&mOV");
      jSONObject1.optBoolean(".(T-zD(");
      Integer integer0 = new Integer(5022);
      Short short0 = new Short((short)1264);
      jSONObject1.accumulate("]nQF7{x+W", short0);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      jSONObject0.length();
      jSONObject0.optBoolean("9g3.KV\"&{");
      jSONObject0.optLong((String) null, (-1L));
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.valueToString("9g3.KV\"&{", 0, 0);
      jSONObject1.optDouble("\"java.lang.String@0000000006\"");
      JSONObject jSONObject2 = jSONObject1.append("getquote", hashMap0);
      try { 
        jSONObject2.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(0.0);
      JSONObject.doubleToString(582.676585059761);
      JSONArray jSONArray0 = new JSONArray();
      long long0 = jSONObject0.optLong("' and instead saw '", 0L);
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", (Object) "582.676585059761");
      long long1 = jSONObject1.getLong("' and instead saw '");
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clear();
      String string0 = "Substring bounds error";
      jSONObject0.optLong((String) null);
      jSONObject0.put("Substring bounds error", (Object) hashMap0);
      jSONObject0.put("Substring bounds error", 0.0);
      jSONObject0.getInt("Substring bounds error");
      String string1 = "3T8-sBuD/k";
      jSONObject0.optLong("3T8-sBuD/k");
      try { 
        jSONObject0.getBoolean("3T8-sBuD/k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3T8-sBuD/k\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("isnotify", (Map) hashMap0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "isnotify";
      stringArray0[1] = "isnotify";
      stringArray0[2] = "isnotify";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      hashMap0.put(jSONObject2, (Integer) null);
      jSONObject1.put("ishashCode", (Object) jSONObject0);
      JSONObject jSONObject3 = jSONObject1.put("isnotify", (Map) hashMap0);
      jSONObject3.put("isnotify", 1L);
      jSONObject3.getInt("isnotify");
      jSONObject3.optString("ishashCode", "isnotify");
      // Undeclared exception!
      jSONObject0.toString(1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("0..", hashMap0);
      Boolean boolean0 = new Boolean(" rprC{X2U3My]");
      JSONObject jSONObject2 = jSONObject1.append("<D/h", boolean0);
      jSONObject2.toString((-664));
      jSONObject0.toString((-1134));
      long long0 = jSONObject2.optLong("", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.accumulate("7@IZiOpW`LHrAT53Lra", "7@IZiOpW`LHrAT53Lra");
      jSONObject0.toString(8, 8);
      jSONObject0.optBoolean("7@IZiOpW`LHrAT53Lra");
      JSONObject.quote("{\n                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\",\n                \"java.lang.String@0000000008\": \"java.lang.String@0000000008\"\n        }");
      jSONObject0.optBoolean("$37SWS3D=/1P");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject.getNames((Object) "isoptJSONArray");
      jSONObject0.put("app", (Map) hashMap0);
      try { 
        jSONObject0.getLong("app");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"app\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "U3uL}0 58TequW<Ia";
      jSONObject0.put("U3uL}0 58TequW<Ia", (Collection) linkedList0);
      jSONObject0.names();
      JSONObject jSONObject1 = new JSONObject((Object) "JSONArray[");
      jSONObject1.toString(10, 10);
      String string1 = "q8";
      try { 
        Double.valueOf("q8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONTokener jSONTokener1 = new JSONTokener("{}");
      jSONTokener1.nextValue();
      Integer integer0 = new Integer(10);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put(",ao'&NQ]?(*wIi$Oz^", integer0);
      Float float0 = new Float((float) 746);
      JSONObject jSONObject1 = new JSONObject((Object) ",ao'&NQ]?(*wIi$Oz^");
      jSONObject1.put(",ao'&NQ]?(*wIi$Oz^", (-1.0));
      jSONObject1.optLong((String) null, 0L);
      JSONObject.valueToString(jSONTokener0);
      // Undeclared exception!
      jSONObject1.toString(1392);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Short short0 = new Short((short)47);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "gettoOctalString";
      stringArray0[1] = "JSONArray[";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.accumulate("2}e39-D|jNf", (Object) null);
      jSONObject1.keys();
      jSONObject1.put("' and instead saw '", 2190L);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("%'5pIodHq\"((", 0L);
      jSONObject0.getDouble("%'5pIodHq\"((");
      Object object0 = new Object();
      jSONObject0.get("%'5pIodHq\"((");
      jSONObject0.optBoolean("%'5pIodHq\"((");
      long long0 = jSONObject0.optLong("%'5pIodHq\"((", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("7+t&mOV", "7+t&mOV");
      jSONObject1.length();
      jSONObject1.optBoolean((String) null);
      jSONObject0.optBoolean((String) null);
      jSONObject0.optLong("getquote", (long) 1);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject1.append("7+t&mOV", jSONObject2);
      assertNotSame(jSONObject2, jSONObject3);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      String string0 = "JSONArray[";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray[", (Collection) linkedList0);
      try { 
        jSONObject1.getDouble("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = Long.valueOf(0L);
      jSONObject0.putOpt("' and instead saw '", long0);
      try { 
        jSONObject0.getJSONObject("' and instead saw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"' and instead saw '\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("0..", hashMap0);
      JSONObject.doubleToString(308.4877571266);
      Boolean boolean0 = new Boolean(" rprC{X2U3My]");
      JSONObject jSONObject2 = jSONObject1.append("<D/h", boolean0);
      jSONObject2.toString((-664));
      try { 
        jSONObject0.put((String) null, 308.4877571266);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = Long.valueOf(0L);
      JSONObject jSONObject1 = jSONObject0.putOpt("' and instead saw '", long0);
      JSONObject.doubleToString(308.4877571266);
      jSONObject1.append("87 ", "<D/h");
      jSONObject0.getString("' and instead saw '");
      jSONObject0.toString((-664));
      JSONObject.doubleToString((-664));
      double double0 = jSONObject1.optDouble("-664");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("oyT]3w36)\"f4VJxL", (Collection) linkedList0);
      jSONObject1.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}");
      jSONTokener0.nextValue();
      Integer integer0 = new Integer(746);
      hashMap0.put("{\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}", integer0);
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}");
      JSONObject.getNames((Object) jSONObject2);
      jSONObject1.get("oyT]3w36)\"f4VJxL");
      JSONObject jSONObject3 = jSONObject1.optJSONObject("ishashCode");
      assertNull(jSONObject3);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt(";Y,7;s Zc`ivivB", ";Y,7;s Zc`ivivB");
      JSONObject.doubleToString(2494.4656F);
      JSONObject jSONObject1 = jSONObject0.append("<D/h", "2494.465576171875");
      Float float0 = new Float(0.0);
      JSONObject.valueToString(float0, 1323, 1323);
      jSONObject1.toString((-664));
      boolean boolean0 = jSONObject0.optBoolean(";Y,7;s Zc`ivivB", false);
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = "q.D2:Y";
      jSONObject0.put("q.D2:Y", (-1305L));
      jSONObject0.getDouble("q.D2:Y");
      JSONObject.valueToString(boolean0);
      Long long0 = new Long(361L);
      try { 
        Long.valueOf("java.lang.Boolean@0000000006");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Boolean@0000000006\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("pu", "pu");
      jSONObject0.length();
      Float float0 = new Float((float) 1);
      JSONObject jSONObject2 = jSONObject0.append("JSON does not allow non-finite numbers.", float0);
      jSONObject0.toString(9);
      jSONObject1.optLong("<D/h", 0L);
      JSONObject jSONObject3 = jSONObject0.put("@O`Xxq", false);
      assertSame(jSONObject3, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = new JSONObject(double0);
      try { 
        jSONObject1.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      String string0 = JSONObject.doubleToString(0);
      Long long0 = new Long((-934L));
      String string1 = JSONObject.valueToString(long0, 0, 0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 2;
      JSONObject jSONObject1 = jSONObject0.put("a|[|j<Jpk:i5gw;7mm", 2);
      try { 
        jSONObject1.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "oyT]3w36)\"f4VJxL";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("oyT]3w36)\"f4VJxL", (Collection) linkedList0);
      jSONObject1.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}");
      jSONTokener0.nextValue();
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 63 of {\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(34);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "f;alse");
      stringWriter1.append('`');
      stringWriter0.append((CharSequence) "f;alse");
      Integer integer0 = new Integer('`');
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.write(stringWriter0);
      Double double0 = new Double(Double.NaN);
      Long long0 = new Long(2487);
      JSONObject jSONObject1 = jSONObject0.append("~-/]'/!NF-", long0);
      Object object0 = JSONObject.NULL;
      jSONObject1.put("getreverseBytes", object0);
      Object object1 = JSONObject.NULL;
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject1.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null, (-2467));
      Float float0 = new Float((-1836.45842211983));
      JSONObject.doubleToString(0.0);
      JSONObject.doubleToString(0.0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("*86LYFf{^HFj/EgJ");
      assertEquals("\"*86LYFf{^HFj/EgJ\"", string0);
      
      JSONObject.valueToString(jSONObject0);
      String string1 = JSONObject.doubleToString(0.0);
      assertEquals("0", string1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-875), (-875));
      try { 
        jSONObject0.getBoolean("t7dqFa[JmAE1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"t7dqFa[JmAE1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("'O1?OySeq");
      long long0 = new Integer(2525);
      String string0 = jSONObject0.optString("", "'O1?OySeq");
      assertEquals("'O1?OySeq", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("/{W:_s*a$+1QZ Q");
      assertEquals("\"/{W:_s*a$+1QZ Q\"", string0);
      
      boolean boolean0 = jSONObject0.optBoolean(",\n", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-1753.95198564.", 1L);
      try { 
        jSONObject1.getBoolean("-1753.95198564.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-1753.95198564.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("Unclosed comment");
      jSONObject0.toString(0, 431);
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "] not found.";
      stringArray0[2] = "{}";
      stringArray0[3] = "Unclosed comment";
      stringArray0[4] = "Unclosed comment";
      stringArray0[5] = "\"R)gDyloM7.e{u(J};";
      stringArray0[6] = "{}";
      stringArray0[7] = "Unclosed comment";
      stringArray0[8] = "getoptJSONArray";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString((String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject.testValidity(linkedList0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONObject0);
      Object object0 = new Object();
      jSONObject0.putOpt("wheel.json.JSONObject@0000000001", object0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Integer integer0 = new Integer(0);
      JSONObject.valueToString((Object) null);
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      Float float0 = new Float(911.84265F);
      jSONObject0.putOpt("", "NS~,Lz1+SJ3");
      JSONObject.valueToString("NS~,Lz1+SJ3");
      Boolean.valueOf("v56qVkj$R_yu.tJ]");
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("UG");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject.testValidity("");
      jSONObject0.accumulate("", "UG");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(999, (-1L));
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1000, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject.valueToString((Object) null);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      Long long0 = new Long(0L);
      Long.min((-3722L), (-726L));
      JSONObject.testValidity(long0);
      long long1 = jSONObject0.optLong((String) null);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(linkedList0);
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float((-876.87F));
      Long long0 = new Long(0L);
      Short short0 = new Short((short)2003);
      JSONObject.valueToString(short0, 783, 0);
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
      
      String string0 = JSONObject.valueToString(jSONObject0, (-3368), (-3368));
      assertEquals("{}", string0);
      
      jSONObject0.put("abp7I8?ra5FDf8qB", 0.0);
      String[] stringArray0 = JSONObject.getNames((Object) "{}");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = jSONObject0.has(" 1g");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      jSONObject0.optJSONArray("getcompare");
      Integer integer0 = new Integer(5022);
      jSONObject0.accumulate("*jTw#jW37:^e=1", integer0);
      jSONObject0.put("{}", 455.79);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "false");
      jSONObject0.put("", 0.0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Expected a ',' or ']'", "Expected a ',' or ']'");
      StringWriter stringWriter0 = new StringWriter();
      String string0 = JSONObject.valueToString(stringWriter0, (-1753), (-1753));
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"java.io.StringWriter@0000000003\"");
      jSONObject0.write(stringWriter1);
      JSONObject.getNames((Object) null);
      Boolean boolean0 = Boolean.FALSE;
      Float float0 = new Float((-2083.2664F));
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      jSONObject1.optBoolean("iDwp'@%");
      String string0 = JSONObject.valueToString(jSONObject0, (-3368), (-3368));
      String string1 = jSONObject0.optString(",^W:]}/\"[{;=#", ",^W:]}/\"[{;=#");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(62);
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      stringWriter0.write(charArray0);
      charArray0[1] = 'U';
      charArray0[2] = 'l';
      stringWriter0.write(charArray0);
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      long long0 = jSONObject0.optLong("#?");
      assertEquals(0L, long0);
      assertEquals(3, jSONObject0.length());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "#?");
      stringWriter1.append('O');
      Double double0 = new Double((-1222.66206));
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("A JSONObject text must begin with '{'");
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      boolean boolean0 = jSONObject2.isNull("");
      assertTrue(boolean0);
      
      JSONObject.valueToString("#?");
      double double1 = jSONObject2.optDouble("", (double) 0L);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "3";
      stringArray0[1] = "";
      stringArray0[2] = "j2 K3qs*(bLU4II";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.put("3", false);
      double double0 = jSONObject1.optDouble("j2 K3qs*(bLU4II");
      assertEquals(Double.NaN, double0, 0.01);
      
      JSONObject.valueToString(jSONObject1, (-2860), (-2860));
      boolean boolean0 = jSONObject1.optBoolean("3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("UG");
      assertEquals("", string0);
      
      long long0 = jSONObject0.optLong(",\n");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("equ", 0.0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("<6H ( ", "<6H ( ");
      JSONObject.getNames(jSONObject1);
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      hashMap0.replace((Boolean) null, ",");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put(",", (Map) hashMap0);
      jSONObject0.names();
      JSONObject.getNames(jSONObject0);
      jSONObject0.optLong("{}", 0L);
      Float float0 = new Float((double) 0L);
      Float.min(0L, 1.0F);
      JSONObject.numberToString(float0);
      jSONObject1.optBoolean((String) null);
      jSONObject0.optString("wheel.json.JSONObject");
      jSONObject0.toString();
      jSONObject1.putOpt("{\"java.lang.String@0000000003\":wheel.json.JSONObject@0000000002}", (Object) null);
      JSONObject.quote((String) null);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.valueToString(boolean0);
      try { 
        jSONObject1.getBoolean("ruzN\"dw.3arSQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ruzN\\\"dw.3arSQ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)1685);
      JSONObject jSONObject1 = jSONObject0.put("Zu]HFK$N4i<%l", (Object) short0);
      int int0 = jSONObject1.optInt("Zu]HFK$N4i<%l");
      assertEquals(1685, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-876.87F));
      Float.min(1, (-3577.0F));
      JSONObject.valueToString(float0, 1, (-2860));
      JSONObject.doubleToString(1);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("%'5podHq\"((", 0L);
      jSONObject0.getDouble("%'5podHq\"((");
      String string0 = JSONObject.valueToString(jSONObject1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", " at character ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = " at character ";
      stringArray0[1] = "";
      stringArray0[2] = " at character ";
      jSONObject0.optLong("");
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = " at character ";
      stringArray0[6] = "isN";
      stringArray0[7] = "";
      stringArray0[8] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString(0);
      jSONObject1.opt("cHd1\"");
      JSONObject jSONObject2 = jSONObject1.put("isN", (Object) " at character ");
      jSONObject0.opt("Null pointer");
      jSONObject1.toString();
      jSONObject0.put("", 0);
      int int0 = jSONObject2.optInt(" at character ");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
      
      int int1 = jSONObject0.length();
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "isnotify";
      JSONObject jSONObject1 = jSONObject0.put("isnotify", (Map) hashMap0);
      String string1 = "ishashCode";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "isnotify";
      stringArray0[1] = "isnotify";
      stringArray0[2] = "isnotify";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      hashMap0.put(jSONObject2, (Integer) null);
      jSONObject1.put("ishashCode", (Object) jSONObject0);
      JSONObject jSONObject3 = jSONObject1.put("isnotify", (Map) hashMap0);
      try { 
        jSONObject3.getInt("isnotify");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isnotify\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)88);
      JSONObject.valueToString(byte0, (-948), (byte)88);
      jSONObject0.toString((int) (byte)88);
      JSONObject.valueToString(byte0, (byte)88, 46);
      JSONObject jSONObject1 = jSONObject0.append(" at character ", (Object) null);
      int int0 = jSONObject1.optInt(" at character ");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf((String) null);
      JSONObject.valueToString(boolean0, (-6254807), (-633));
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      JSONObject.valueToString(jSONObject1, (-1252), 1);
      assertEquals(2, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Boolean boolean0 = new Boolean((String) null);
      Object object0 = JSONObject.NULL;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Object object0 = JSONObject.NULL;
      JSONObject.getNames((Object) "0");
      JSONObject jSONObject0 = new JSONObject(object0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.put("m7uOI$kfn z", (Object) double0);
      try { 
        jSONObject1.accumulate((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("SZ", (-4825));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push("SZ");
      jSONObject0.put("SZ", (Collection) linkedList0);
      jSONObject0.optString("SZ", "Bad value from toJSONString: ");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("rE*{hS?Rwh ", (-869.485));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Long long0 = new Long(1L);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "lW=^\">#nWD";
      stringArray0[2] = "$deTsH`Z";
      stringArray0[3] = "1325.7080661370187.";
      stringArray0[4] = "?";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      try { 
        jSONObject0.put(stringArray0[0], (-6285));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(62);
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = 'U';
      charArray0[2] = 'l';
      stringWriter0.write(charArray0);
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      long long0 = jSONObject0.optLong("#?");
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "#?");
      stringWriter1.append('O');
      Double double0 = new Double((-1222.66206));
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("A JSONObject text must begin with '{'");
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A JSONObject text must begin with '{'";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      boolean boolean0 = jSONObject2.isNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      Float float0 = new Float(1018.9F);
      JSONObject.doubleToString(1018.9F);
      boolean boolean0 = jSONObject0.has("0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(linkedList0, 7, 107);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      stringArray0[2] = "1";
      stringArray0[3] = "1";
      JSONObject jSONObject0 = new JSONObject("1", stringArray0);
      try { 
        jSONObject0.getDouble("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("?LmPq_u", (Collection) linkedList0);
      Long long0 = new Long((-635L));
      Long.max((-635L), (-635L));
      Long.divideUnsigned((-635L), 2815L);
      Long.getLong("/sJs");
      JSONObject.doubleToString(6553017432934121L);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject.quote("yj<.");
      jSONObject1.optLong("\r", 0L);
      jSONObject1.names();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject.doubleToString((-15.126118340542483));
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("-*L99%}");
      try { 
        jSONObject0.getInt("1424.5104195250");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1424.5104195250\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "83";
      try { 
        jSONObject0.getLong("83");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"83\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.lang.Float@00000000010", (-1L));
      jSONObject0.optInt("java.lang.Float@00000000010");
      JSONObject.valueToString(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt(";Y,7;s Zc`ivivB", ";Y,7;s Zc`ivivB");
      JSONObject.doubleToString(2494.4656F);
      JSONObject jSONObject1 = jSONObject0.append("<D/h", "2494.465576171875");
      jSONObject1.toString((-664));
      jSONObject0.optLong("<D/h", 0L);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      try { 
        jSONObject0.getLong("3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optLong("wheel.json.JSONObject@0000000001", 354L);
      jSONObject0.isNull("wheel.json.JSONObject@0000000001");
      jSONObject0.put(",\n", (Object) "wheel.json.JSONObject@0000000001");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Object object0 = JSONObject.NULL;
      Float float0 = new Float((-2869.5256));
      JSONObject.doubleToString((-2869.5256));
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 2495, 57);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("Unterminated string", (-1650L));
      assertEquals((-1650L), long0);
      
      double double0 = jSONObject0.optDouble("true", 1.0);
      assertEquals(1.0, double0, 0.01);
      
      Float float0 = new Float(1.0F);
      jSONObject0.put("%.", 1182);
      Short short0 = new Short((short)1126);
      String string0 = JSONObject.valueToString(short0);
      String string1 = jSONObject0.optString("java.lang.Short@0000000005", "`H2+");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("1.00", object0);
      jSONObject0.optString((String) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("434.24041963940");
      JSONObject.valueToString("434.24041963940", (-4411), (-4411));
      int int0 = jSONObject0.optInt((String) null, (-4411));
      assertEquals((-4411), int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString((Object) null, (-1151), (-1151));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer.getInteger("0.0", (Integer) null);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
      
      int int0 = jSONObject0.optInt("JSONArray initial value should be a string or collection or array.");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optBoolean("] is not a Boolean.", false);
      jSONObject0.optInt("] is not a Boolean.");
      jSONObject0.optInt("\n", 0);
      JSONObject.doubleToString(1.0);
      JSONObject jSONObject1 = jSONObject0.put(" <`RZ+dXE_4*8v", (Map) null);
      jSONObject0.opt(" <`RZ+dXE_4*8v");
      String string0 = "wheel.json.JSONObject$1";
      jSONObject1.optBoolean("wheel.json.JSONObject$1");
      Byte byte0 = new Byte((byte) (-77));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(2525);
      assertEquals("{}", string0);
      
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object1);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = JSONObject.quote("\"\"");
      assertEquals("\"\\\"\\\"\"", string0);
      
      String string1 = JSONObject.doubleToString(0.0);
      assertEquals("0", string1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("Sd/Xy", "&H-5!NsK#");
      jSONObject0.toString();
      jSONObject0.optJSONArray("1325.70806613701870");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Float float0 = new Float(0.0F);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(35.88576);
      jSONObject0.optDouble("35.88576");
      JSONObject.valueToString(jSONObject0, 55, 1278);
      jSONObject0.put("34.0", false);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Byte byte0 = new Byte((byte)5);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "}";
      stringArray0[1] = "2";
      stringArray0[2] = "0.0";
      stringArray0[3] = "351.98119.";
      stringArray0[4] = "JSONObject[";
      stringArray0[5] = ",";
      stringArray0[6] = "";
      String string0 = "3640.3668440750";
      stringArray0[7] = "3640.3668440750";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("\r", (long) (byte)5);
      jSONObject1.toString((int) (byte)5, (int) (byte)5);
      jSONObject0.keys();
      try { 
        jSONObject0.getInt("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONObject[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2004.753260176);
      assertEquals("2004.753260176", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Long long0 = new Long(1L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "yd@V<:RvZ";
      stringArray0[1] = "lW=^\">#nWD";
      stringArray0[2] = "$deTsH`Z";
      stringArray0[3] = "1325.7080661370187.";
      stringArray0[4] = "?";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.put("351.981190", (-6285));
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(2004.753260176);
      jSONObject0.toString();
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (-1971.5674528962022));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 0.0F);
      JSONObject.numberToString(float0);
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.lang.Float@0000000001";
      stringArray0[1] = "java.lang.Float@0000000001";
      stringArray0[2] = "java.lang.Float@0000000001";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-1971.5674528962022));
      Long long0 = new Long(0L);
      Boolean boolean0 = new Boolean("-1971.5674528962022");
      JSONObject.quote("Qz!gK/:O7 .)^ 7xZG");
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", 3111.986254108);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject.doubleToString(0.0);
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-856.265F));
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject.doubleToString(0.0);
      Long long0 = new Long((-1851L));
      try { 
        Long.parseUnsignedLong((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(34, 34);
      JSONObject.doubleToString((-1971.5674528962022));
      Long long0 = new Long(0L);
      Boolean boolean0 = new Boolean("-1971.5674528962022");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject.valueToString(long0);
      String string0 = "getrotateLeft";
      jSONObject0.names();
      // Undeclared exception!
      try { 
        Long.divideUnsigned(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject(long0);
      String string0 = "[]";
      JSONObject jSONObject1 = jSONObject0.put("[]", (-2937L));
      JSONObject.getNames(jSONObject1);
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Long long0 = new Long((-1L));
      JSONObject.testValidity((Object) null);
      String[] stringArray0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(long0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-1971.5674528962022));
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "-1971.5674528962022";
      stringArray0[3] = "@'jjM;tsQ?^TA|'\"p";
      stringArray0[4] = "-1971.5674528962022";
      stringArray0[5] = "-1971.5674528962022";
      stringArray0[7] = "-1971.5674528962022";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getBoolean("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1326.1113448360043);
      assertEquals("1326.1113448360043", string0);
      
      Long long0 = new Long(2908L);
      Integer integer0 = new Integer(65);
      JSONObject.testValidity(integer0);
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.opt("1326.1113448360043");
      Byte byte0 = new Byte((byte)70);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-745L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      long long0 = (-2375L);
      try { 
        jSONObject0.getJSONObject("isparseBoolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isparseBoolean\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Short short0 = new Short((short) (-2550));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "] is not a number.";
      stringArray0[1] = "Expected a ',' or '}'";
      stringArray0[2] = "wai";
      stringArray0[3] = "F";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "wai";
      stringArray1[1] = "Expected a ',' or '}'";
      stringArray1[2] = "] is not a number.";
      stringArray1[3] = "] is not a number.";
      stringArray1[4] = "wai";
      stringArray1[5] = "wai";
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", (Collection) linkedList0);
      stringArray1[6] = "Expected a ',' or '}'";
      stringArray1[7] = "F";
      stringArray1[8] = "F";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray1);
      jSONObject0.toString((int) (short) (-2550));
      jSONObject1.toString();
      jSONObject2.toString((-1));
      jSONObject2.optDouble("java.lang.Float@00000000010", 489.3643595536582);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("Expected a ',' or '}'");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean(",:]}/\"[{;=#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject.doubleToString(Double.NaN);
      Long long0 = new Long(1520L);
      JSONObject.testValidity("null");
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "null";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      stringArray0[4] = "null";
      stringArray0[5] = "null";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("null", true);
      double double1 = jSONObject0.optDouble("null");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      jSONObject0.toString(0);
      jSONObject0.opt("{}");
      JSONObject jSONObject1 = jSONObject0.put("*F8tP]", (Object) null);
      jSONObject1.opt("");
      jSONObject1.toString();
      JSONObject jSONObject2 = jSONObject1.put("{}", 0);
      int int0 = jSONObject1.optInt("");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
      
      jSONObject2.names();
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Lf<g>1r]mKMD_xTp,", 2499.0);
      jSONObject1.optDouble("Lf<g>1r]mKMD_xTp,", 2499.0);
      String string0 = "";
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(0);
      jSONObject0.opt("{}");
      JSONObject jSONObject1 = jSONObject0.put("*F8tPW]", (Object) null);
      jSONObject0.opt("{}");
      String string0 = jSONObject0.toString();
      jSONObject1.put("{}", 5);
      Integer integer0 = new Integer(863);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      jSONObject0.opt((String) null);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-1971.5674528962022));
      Long long0 = new Long(0L);
      JSONObject.testValidity("NJ)$7oq-PL}U");
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, true);
      hashMap0.put(boolean0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "JSONArray[";
      jSONObject0.optInt("JSONArray[", 3165);
      jSONObject0.optDouble("\"\"");
      String string1 = "";
      Boolean boolean1 = Boolean.valueOf("");
      hashMap0.putIfAbsent(boolean1, (Boolean) null);
      jSONObject0.optJSONArray("JSONArray[");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      hashMap0.put("", "");
      String string1 = "2HbB2RT%LK";
      JSONObject jSONObject1 = jSONObject0.put("2HbB2RT%LK", (Object) null);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.append("", (Object) null);
      jSONObject1.put("", (Object) jSONObject2);
      try { 
        jSONObject2.get("java.lang.Long@0000000004.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@0000000004.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("");
      jSONObject0.toString(0);
      jSONObject0.opt("{}");
      JSONObject jSONObject1 = jSONObject0.put("*F8tPW]", (Object) null);
      jSONObject0.opt("{}");
      jSONObject0.toString();
      jSONObject1.put("{}", 5);
      int int0 = jSONObject0.optInt("equ");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Collection<Float> collection0 = hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\t";
      stringArray0[1] = "\t";
      stringArray0[2] = "\t";
      stringArray0[3] = "\t";
      stringArray0[4] = "\t";
      stringArray0[5] = "\t";
      jSONObject0.put("\t", 0);
      stringArray0[6] = "\t";
      stringArray0[7] = "\t";
      stringArray0[8] = "\t";
      JSONObject jSONObject1 = new JSONObject(collection0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(97);
      jSONObject1.write(stringWriter0);
      Float float0 = new Float(0.0);
      hashMap0.put(jSONObject1, float0);
      JSONObject jSONObject2 = jSONObject0.putOpt("\t", (Object) null);
      assertEquals(1, jSONObject0.length());
      
      try { 
        jSONObject2.getJSONArray("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      jSONObject0.toString(0);
      jSONObject0.opt("{}");
      JSONObject jSONObject1 = jSONObject0.put("*F8tP]", (Object) null);
      jSONObject0.optBoolean((String) null);
      jSONObject1.opt("");
      jSONObject1.toString();
      jSONObject1.put("{}", 0);
      int int0 = jSONObject1.optInt("");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t";
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "#?";
      try { 
        jSONObject0.getBoolean("#?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      stringArray0[2] = "1";
      stringArray0[3] = "1";
      stringArray0[4] = "1";
      JSONObject jSONObject0 = new JSONObject("1", stringArray0);
      jSONObject0.isNull("A JSONObject text must begin with '{'");
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("1", 2742L);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("isisNaN", (Collection) linkedList0);
      jSONObject1.optBoolean("1", true);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("[>IU?");
      assertNull(jSONObject2);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(62);
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optLong("#?");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "#?");
      stringWriter1.append('`');
      Double double0 = new Double((-1222.66206));
      Object object0 = JSONObject.NULL;
      String string0 = "A JSONObject text must begin with '{'";
      JSONTokener jSONTokener0 = new JSONTokener("A JSONObject text must begin with '{'");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of A JSONObject text must begin with '{'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1329.56);
      assertEquals("1329.56", string0);
      
      Long long0 = new Long(0L);
      JSONObject.testValidity(long0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optLong((String) null, (-2779L));
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      char char0 = '`';
      StringWriter stringWriter0 = new StringWriter();
      int int0 = (-256);
      try { 
        JSONObject.valueToString(double0, (-256), (-256));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("");
      jSONObject0.has("jO");
      jSONObject0.remove("JSONArray initial value should be a string or collection or array.");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put(" of ", (Collection) linkedList0);
      double double0 = new Integer(0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("JSONArray initial value should be a string or collection or array.", object0);
      jSONObject0.append("E!wsS4[yoUZK@%o", "@4Le6RnOuC.QoE");
      try { 
        jSONObject1.get("G69LIxd)(at");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G69LIxd)(at\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "81Zucc:+k%t/b*7";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.length();
      jSONObject0.toString();
      jSONObject0.put("", (long) 0);
      jSONObject0.isNull("0");
      JSONObject jSONObject1 = jSONObject0.put("18l", 1L);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList0);
      jSONObject2.optBoolean("0", true);
      jSONObject1.optBoolean("iK<z@Uz*e+h{aj2a", true);
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      jSONObject3.optJSONObject("Bad value fom toJSOString: ");
      assertEquals(2, jSONObject0.length());
      assertEquals(1, jSONObject3.length());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      jSONObject0.toString(0);
      jSONObject0.opt("{}");
      JSONObject jSONObject1 = jSONObject0.put("*F8tP]", (Object) null);
      jSONObject1.opt("");
      jSONObject1.toString();
      jSONObject1.put("{}", 0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      jSONObject0.put("{}", (Map) hashMap0);
      try { 
        jSONObject0.getDouble("getmin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getmin\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      hashMap0.put("", "");
      jSONObject0.toString();
      jSONObject0.has((String) null);
      String string0 = "(JJXWvy";
      jSONObject0.remove("(JJXWvy");
      jSONObject0.optDouble("islongBitsToDouble");
      String string1 = "K5~Y";
      JSONObject jSONObject1 = jSONObject0.append("K5~Y", "");
      JSONObject jSONObject2 = jSONObject1.put(": ", false);
      try { 
        jSONObject2.append((String) null, "K5~Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "81Zucc:+k%t/b*7";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.length();
      String string0 = jSONObject0.toString(0);
      jSONObject0.opt("");
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("X7',k-W@NR", object0);
      jSONObject0.opt("");
      String string1 = jSONObject1.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      JSONObject jSONObject2 = jSONObject0.put("*F8tP]", 0);
      int int0 = jSONObject2.optInt("{}");
      assertEquals(0, int0);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      jSONObject0.toString(0);
      jSONObject0.opt("");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.opt("");
      jSONObject1.toString();
      jSONObject1.put("{}", 0);
      int int0 = jSONObject1.optInt("");
      assertEquals(1, jSONObject1.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\t";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject1);
      jSONObject1.put("\"#X&LiT=G4h%RXL?&a", 1798.1787767657);
      jSONObject1.optBoolean("\t");
      try { 
        jSONObject1.getJSONArray("Ulkv ]~tQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ulkv ]~tQ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Boolean boolean0 = new Boolean("_");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_";
      stringArray0[1] = "_";
      stringArray0[2] = "_";
      String string0 = "IG;";
      stringArray0[3] = "IG;";
      stringArray0[4] = "_";
      stringArray0[5] = "_";
      try { 
        jSONObject0.getString("_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONObject0.optInt("");
      jSONObject0.has("jO");
      JSONObject jSONObject1 = jSONObject0.put("jO", 0L);
      jSONObject0.isNull(">k**Nw~5h7_<M@\"qT]m");
      JSONObject jSONObject2 = jSONObject0.put("{}", 1115L);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("", (Collection) linkedList0);
      jSONObject2.optBoolean("21Xm?CR", true);
      jSONObject1.optJSONObject("Bad value from toJSONString: ");
      assertEquals(3, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = "";
      String string1 = "'";
      jSONObject0.append("'", "'");
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("", 10);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getInt("\"4C.E;1HTvaczSP<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"4C.E;1HTvaczSP<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "81Zucc:+k%t/b*7";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.length();
      jSONObject0.toString();
      String string1 = "\\u";
      jSONObject0.has(string1);
      jSONObject0.remove("JSONArray initial value should be a string or collection or array.");
      String string2 = "@4Le6RnOuC.QoE";
      jSONObject0.optDouble(string1);
      jSONObject0.append("@4Le6RnOuC.QoE", "");
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Lf<g>1r]mKMD_xTp,", 2498.5802753443836);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      stringArray0[2] = "1";
      stringArray0[3] = "1";
      stringArray0[4] = "1";
      stringArray0[5] = "1";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("wheel.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wheel.json.JSONObject$1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      long long0 = 0L;
      Long long1 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long1);
      String string0 = "7SHj";
      String string1 = ",";
      jSONObject0.optString("7SHj", ",");
      String string2 = "";
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("k^.3");
      String string0 = null;
      String string1 = "JqX .nn#u#ma*xN4/";
      JSONObject jSONObject1 = jSONObject0.put("JqX .nn#u#ma*xN4/", (-378L));
      jSONObject1.putOpt("mjVz+s", jSONObject0);
      jSONObject0.remove("");
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "zW80:eR";
      JSONTokener jSONTokener0 = new JSONTokener("zW80:eR");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of zW80:eR
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getLong("?atmRc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?atmRc\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, true);
      hashMap0.put(boolean0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("JSONArray[", 3165);
      assertEquals(3165, int0);
      
      double double0 = jSONObject0.optDouble("\"\"");
      assertEquals(Double.NaN, double0, 0.01);
      
      Boolean boolean1 = Boolean.valueOf("");
      hashMap0.putIfAbsent(boolean1, (Boolean) null);
      jSONObject0.optJSONArray("JSONArray[");
      jSONObject0.has("JSONArray[");
      assertEquals(1, jSONObject0.length());
  }
}
