/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:43:31 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix.zero(3119, 3108, 3108);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-128));
      // Undeclared exception!
      try { 
        CCSMatrix.random((-128), (-128), (double) (-128), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[9][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.nonZeroIterator();
      Matrix matrix0 = cCSMatrix0.divide((-743.2));
      cCSMatrix0.iteratorOrNonZeroColumns();
      assertTrue(cCSMatrix0.equals((Object)matrix0));
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(9, cCSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      cCSMatrix0.toSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2158);
      // Undeclared exception!
      try { 
        CCSMatrix.random(2158, 2158, (double) 2158, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(3118);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("This will be supported in 0.6.0.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[14][9];
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("Sides of blocks are incompatible!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll((-1248.568427));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 238;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(238);
      cCSMatrix0.setAll((-1.0));
      cCSMatrix0.toSparseMatrix();
      cCSMatrix0.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      double[][] doubleArray0 = new double[8][4];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[10];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray0[0] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.euclideanNorm();
      cCSMatrix0.nonZeroIterator();
      cCSMatrix0.shuffle();
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 0, doubleArray0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(0, 0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-14);
      double[][] doubleArray1 = new double[9][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(2408, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2408
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3121);
      cCSMatrix0.getColumn(3121);
      int int0 = (-14);
      cCSMatrix0.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3131);
      cCSMatrix0.norm();
      int int0 = 3098;
      Integer integer0 = new Integer(int0);
      cCSMatrix0.nonZeroIterator();
      cCSMatrix0.transpose();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int int0 = 2186;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(2186, 2186, doubleArray0);
      cCSMatrix0.diagonalProduct();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int int1 = (-1396);
      CCSMatrix.zero(int0, int1);
      int int2 = (-2028);
      double double0 = (-2116.0);
      RowMajorSparseMatrix.diagonal(int2, double0);
      byte[] byteArray0 = new byte[0];
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[][] doubleArray0 = new double[14][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.max();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 3131;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3131);
      int int1 = 3098;
      cCSMatrix0.determinant();
      Integer integer0 = new Integer(int0);
      cCSMatrix0.minInColumn(int1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      double[][] doubleArray0 = new double[2][4];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.nonZeroAt(1, 1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3131);
      cCSMatrix0.toColumnMajorSparseMatrix();
      cCSMatrix0.maxInColumn(0);
      cCSMatrix0.min();
      cCSMatrix0.nonZeroAt(3131, 3102);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(28, 86, 4);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, sparseMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2393.13907587, (double)2, (double)2, 2393.13907587).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(5);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3131);
      cCSMatrix0.maxInColumn(0);
      cCSMatrix0.nonZeroIterator();
      double double0 = new Double(6);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumn(0, vectorAccumulator0);
      cCSMatrix0.minInColumn((-879));
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3131);
      cCSMatrix0.maxInColumn(7);
      cCSMatrix0.min();
      cCSMatrix0.copyOfShape(7, 3131);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[][] doubleArray0 = new double[14][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.copyOfShape(4, 0);
      cCSMatrix0.minInColumn(4);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[14][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.minInColumn(4);
      cCSMatrix0.nonZeroIteratorOfColumn(4);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.min();
      cCSMatrix0.setAll(0.0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cCSMatrix0.subtract((double) 0);
      Matrix matrix0 = cCSMatrix0.copyOfRows(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 17;
      matrix0.determinant();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2770);
      CCSMatrix cCSMatrix2 = new CCSMatrix(2187, 2770);
      byte[] byteArray0 = cCSMatrix1.toBinary();
      CCSMatrix.fromBinary(byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 1247;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1247);
      cCSMatrix0.toBinary();
      Matrix.zero((-1932735282), (-2021161079));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3131);
      cCSMatrix0.maxInColumn(0);
      cCSMatrix0.nonZeroIterator();
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copy();
      cCSMatrix0.iteratorOfRow(3131);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(2792, 2792, matrixFunction0);
      cCSMatrix1.nonZeroIterator();
      cCSMatrix0.divide(3131);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2);
      cCSMatrix1.removeFirstRow();
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.toRowVector();
      cCSMatrix0.nonZeroIterator();
      cCSMatrix0.shuffle();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix1.minInColumn(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 2;
      CCSMatrix.identity(2);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (-607.578023660769);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      CCSMatrix.from1DArray(2, 2, doubleArray0);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceTopLeft((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1][0..-1].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3131);
      CCSMatrix cCSMatrix1 = new CCSMatrix(16, 0, 0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(2027, 0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      ooPlaceMatricesAddition0.apply(columnMajorSparseMatrix0, rowMajorSparseMatrix0);
      cCSMatrix0.iterator();
      cCSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.nonZeroIterator();
      CCSMatrix cCSMatrix1 = new CCSMatrix(3128, 2);
      int[] intArray0 = new int[1];
      cCSMatrix1.select(intArray0, intArray0);
      cCSMatrix1.iteratorOrNonZeroColumns();
      cCSMatrix1.setAll(2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3131);
      int[] intArray0 = new int[3];
      intArray0[0] = 3098;
      intArray0[1] = 3098;
      intArray0[2] = 3131;
      cCSMatrix0.select(intArray0, intArray0);
      int int0 = 4;
      org.evosuite.runtime.Random.setNextRandom(int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2195);
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 4;
      doubleArray1[2] = (double) 2195;
      doubleArray1[3] = (double) 2195;
      doubleArray0[0] = doubleArray1;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      Matrix matrix0 = ooPlaceMatricesAddition0.apply(denseMatrix0, denseMatrix0);
      CCSMatrix.block(denseMatrix0, denseMatrix0, cCSMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[14][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.maxInColumn(7);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3131);
      cCSMatrix0.maxInColumn(0);
      cCSMatrix0.nonZeroIterator();
      SparseMatrix.identity(0);
      cCSMatrix0.minInColumn(4);
      cCSMatrix0.updateAt(9, 851, (MatrixFunction) null);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2195);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.nonZeroIterator();
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copy();
      cCSMatrix0.iteratorOfRow(4);
      double double0 = 3222.7119921716;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      OoPlaceMatricesAddition ooPlaceMatricesAddition1 = new OoPlaceMatricesAddition();
      CRSMatrix cRSMatrix0 = (CRSMatrix)RowMajorSparseMatrix.diagonal(6, (-909.0));
      ooPlaceMatricesAddition1.apply((ColumnMajorSparseMatrix) cCSMatrix1, (RowMajorSparseMatrix) cRSMatrix0);
      cCSMatrix1.iterator();
      int int0 = (-1657);
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal(int0, double0);
      cCSMatrix2.max();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3131);
      int[] intArray0 = new int[0];
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3131);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(1952, vectorFunction0);
      cCSMatrix0.minInColumn((-915));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator1).accumulate();
      cCSMatrix0.foldColumn(0, vectorAccumulator1);
      cCSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.foldColumn(3, vectorAccumulator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[][] doubleArray0 = new double[14][9];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      int int0 = 0;
      VectorAccumulator vectorAccumulator0 = null;
      // Undeclared exception!
      try { 
        cCSMatrix0.foldColumn(0, (VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(3254.074, 1750.04084980758, 3254.074, 1750.04084980758).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(2);
      cCSMatrix1.foldColumns(vectorAccumulator0);
      cCSMatrix1.max();
      cCSMatrix1.toBinary();
      cCSMatrix1.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3136);
      Integer integer0 = new Integer(3136);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3136, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, (double)3136, (double)3136).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(1217, vectorFunction0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-289.064898133), (-289.064898133), 1529.42839, 3.2278889606197545E-4).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.min();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(2, 2152);
      cCSMatrix1.copyOfRows(Integer.MAX_VALUE);
      cCSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3131);
      CCSMatrix cCSMatrix1 = new CCSMatrix(1, 3128);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 8;
      intArray0[2] = 1;
      intArray0[3] = 1;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3131);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)3131, 870.29608663, (double)0, 870.29608663, 1639.9281).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(0, vectorFunction0);
      int int0 = 6187;
      double double0 = 1.0;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(int0, double0);
      int int1 = (-482);
      cCSMatrix1.minInColumn(int1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[][] doubleArray0 = new double[14][9];
      CCSMatrix.from2DArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom(412);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(412, 1, (double) 1, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cCSMatrix0.removeColumn(412);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 3136;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3136);
      Integer integer0 = new Integer(3136);
      int int1 = 1211;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformRow(1211, vectorFunction0);
      double double0 = 1504.1351;
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      cCSMatrix0.iteratorOfColumn(int1);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)int0, double0, double0, (double)int0, (double)int0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(int1, vectorFunction1);
      int int2 = 3;
      cCSMatrix0.minInColumn(int2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, (double)2, (double)2, Double.NEGATIVE_INFINITY).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.minInColumn(1);
  }
}
