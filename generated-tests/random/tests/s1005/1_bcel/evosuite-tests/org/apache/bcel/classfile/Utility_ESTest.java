/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 10:41:43 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)66;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)66, true);
      MockFile mockFile0 = new MockFile("invokeStatic");
      MockFile mockFile1 = new MockFile(mockFile0, "impdep2");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "0:    lload_3\n1:    astore_0\n2:    return\n3:    l2i\n4:    impdep2\n5:    ior\n6:    nop\n7:    lstore_3\n");
      Utility.printArray(printStream0, (Object[]) constantArray0);
      Utility.clearBit((byte)66, 153);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)33, 233);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("Z$?cczp8U;Zoh");
      boolean boolean0 = true;
      Utility.compactClassName("goto_w", "org.apache.bcel.classfile.ExceptionTable", true);
      String string0 = "monitorexit";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Z$?cczp8U;Zoh", "monitorexit", "goto_w", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z$?cczp8U;Zoh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = ")9Ua`'K5:F?7";
      try { 
        Utility.typeOfSignature(")9Ua`'K5:F?7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )9Ua`'K5:F?7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      Utility.fillup("{java.lang.Object@2dc82043, java.lang.Object@759f192f, java.lang.Object@6f5a04cf}", (-1923), true, '(');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)69, (byte)82);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)82, (byte)39);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantInteger constantInteger0 = new ConstantInteger(87);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("l2d", string1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.isSet(608, 608);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantClass constantClass0 = new ConstantClass((byte) (-47));
      constantArray0[1] = (Constant) constantClass0;
      ConstantLong constantLong0 = new ConstantLong(485L);
      constantLong0.copy();
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.convertString("lxor");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("V;wEXI7l{AJeCT%QT");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, ":5Kr&", (Object[]) constantArray0);
      Utility.printArray(printWriter0, (Object[]) constantArray0);
      assertEquals(3, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)2;
      ConstantPool constantPool0 = null;
      int int0 = (-351);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-351), (int) (byte) (-79), true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-116);
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-73);
      byte byte1 = (byte)15;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)6;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-16), (int) (byte)6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.classOrInterface(1201);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-86);
      Constant[] constantArray0 = new Constant[4];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1201, (byte) (-86));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-119));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-106));
      constantArray0[2] = (Constant) constantDouble0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(817, (byte)123);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-852), 1201, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fneg
         // 1:    ladd
         // 2:    lshr
         // 3:    fastore
         // 4:    fcmpg
         // 5:    l2f
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-103);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-4382), (int) (byte)93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dastore
         // 1:    dup2_x1
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-101);
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1093, (int) (byte) (-101));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "RS07KFk";
      Utility.methodTypeToSignature("RS07KFk", stringArray0);
      Utility.methodSignatureToString("(LRS07KFk;)LRS07KFk;", "RS07KFk", "RS07KFk");
      Utility.printArray((Object[]) stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("&j2HS8|R", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `&j2HS8|R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-22);
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)73;
      byte byte1 = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-68);
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 43, 3575, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "=A$JFV4o7#";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=A$JFV4o7#");
      try { 
        Utility.typeOfSignature("=A$JFV4o7#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =A$JFV4o7#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      String string1 = Utility.classOrInterface((-44));
      assertEquals("interface", string1);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)8;
      byteArray1[1] = (byte)28;
      byteArray1[2] = (byte)77;
      byteArray1[3] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iload_2", string2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-55);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("8sn8_w$AZe2-,", "8sn8_w$AZe2-,", false);
      try { 
        Utility.typeOfSignature("8sn8_w$AZe2-,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8sn8_w$AZe2-,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format(673, 673, false, 'G');
      try { 
        Utility.typeOfSignature
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format(673, 0, false, 'G');
      try { 
        Utility.typeOfSignature("673");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 673
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "F<0rU#*czDzgIL";
      Utility.typeOfSignature("F<0rU#*czDzgIL");
      Utility.compactClassName("F<0rU#*czDzgIL", "F<0rU#*czDzgIL", false);
      Utility.replace(");?5TurI/;rFLhJ].vr", "LAk6MP[", "LAk6MP[");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PV$Aa>\"!V-&AGpZd");
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)13;
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes(");?5TurI/;rFLhJ].vr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: );?5TurI/;rFLhJ].vr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+M#ohRpPA,,d;mAQbo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M#ohRpPA,,d;mAQbo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)13;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-89));
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)93;
      byteArray1[1] = (byte)76;
      byteArray1[2] = (byte) (-127);
      byteArray1[3] = (byte)49;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)93;
      byteArray1[6] = (byte)95;
      byteArray1[7] = (byte)95;
      byteArray1[8] = (byte) (-114);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)95, (int) (byte)49, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-66);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-32), 129);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "0:    pop\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    arraylength\n";
      objectArray0[1] = (Object) (byte) (-14);
      objectArray0[2] = (Object) (byte) (-23);
      objectArray0[3] = (Object) (byte)87;
      objectArray0[4] = (Object) (byte) (-32);
      objectArray0[5] = (Object) (byte) (-14);
      objectArray0[6] = (Object) (byte) (-23);
      Object object0 = new Object();
      objectArray0[7] = object0;
      String string1 = Utility.printArray(objectArray0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.compactClassName("org.apache.bcel.classfile.Utility", "org.apache.bcel.classfile.Utility", false);
      Utility.compactClassName("org.apache.bcel.classfile.Utility", false);
      Utility.classOrInterface(36);
      Utility.accessToString(36, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte) (-47);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)71, 36);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)86, (int) (byte)71, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-12);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("iinc\t\t%72\t-30");
      Utility.compactClassName("new");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3359, (int) (byte) (-124));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "";
      Utility.fillup("", 2849, true, 'p');
      String string1 = "C<rMc{,:";
      Utility.methodSignatureReturnType("C<rMc{,:");
      Utility.setBit((-1736), 10);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, (-712));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.isJavaIdentifierPart('1');
      try { 
        Utility.typeOfSignature("EnqLZf@x7WSP[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EnqLZf@x7WSP[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.searchOpcode("KUQ~[");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)106;
      byte byte0 = (byte) (-79);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)1;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, (int) (byte) (-79));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(",I<`u", (String) null, "lload_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,I<`u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".A{`R6giq+d60z}{}e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .A{`R6giq+d60z}{}e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "char");
      Utility.getSignature("byte");
      Utility.isJavaIdentifierPart('-');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)55;
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(16);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantClass constantClass0 = new ConstantClass(49);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 49, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "* 7Y7os";
      try { 
        Utility.typeOfSignature("* 7Y7os");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  7Y7os
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, false);
      Utility.clearBit(2543, 194);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-78);
      byteArray0[7] = (byte) (-59);
      Utility.equals(byteArray0, byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1062, (byte)112);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 194, (int) (byte)77);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-88);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)67, 68);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 46, (int) (byte)67);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte)5;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 6, (-792), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte) (-32);
      byteArray0[8] = (byte) (-13);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("KypL+W>0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KypL+W>0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.classOrInterface(5413);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "class");
      byteArray0[0] = (byte) (-70);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("%,D<Xw c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %,D<Xw c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "?+/_s2Zv";
      try { 
        Utility.typeOfSignature("?+/_s2Zv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?+/_s2Zv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)2;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, 4, (int) (byte)94);
      String string0 = "\\r";
      String string1 = "java.lang.pIv;XU2C|+";
      String string2 = "wJ";
      boolean boolean0 = false;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)19, 20);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, (int) (byte)19, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.methodTypeToSignature(",bL;KX\"1)d0]Q", (String[]) null);
      try { 
        Utility.typeOfMethodSignature("()L,bL;KX\"1)d0]Q;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: d0]Q;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = ", low = ";
      boolean boolean0 = false;
      Utility.compactClassName("(`J-|xG4k9Z[ok;RLuS", ", low = ", false);
      Utility.accessToString(43);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-22);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 43, 19, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, 48, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "='.:&h>ywU-2#O;RJg";
      Utility.compactClassName("='.:&h>ywU-2#O;RJg");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-91);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-105), (int) (byte)49, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dload\t\t%46
         // 2:    dcmpl
         // 3:    if_icmpne\t\t#19508
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.clearBit((-1907), (-1907));
      Utility.getSignature("\t<");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-39);
      byte byte0 = (byte)15;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)64;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)15, (-2765), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-56);
      byteArray0[8] = (byte)5;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-3), (-3115));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2d
         // 1:    istore_3
         // 2:    ishr
         // 3:    swap
         // 4:    <illegal opcode>
         // 5:    dconst_0
         // 6:    nop
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5s0N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5s0N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)51;
      byte byte0 = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte)79;
      ConstantPool constantPool0 = null;
      int int0 = (-1852);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, (-1852));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      File file0 = MockFile.createTempFile("bastore", "bastore");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "bastore";
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) "bastore";
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) file0;
      objectArray0[5] = (Object) "bastore";
      objectArray0[6] = (Object) mockFileOutputStream0;
      objectArray0[7] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte) (-100);
      byteArray0[8] = (byte) (-30);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-46), (-1517));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fsub
         // 1:    fload_1
         // 2:    dload_2
         // 3:    ixor
         // 4:    irem
         // 5:    aconst_null
         // 6:    <illegal opcode>
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 534;
      Utility.accessToString(534);
      Utility.accessToString(534);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)34;
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)38;
      byte byte1 = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte2 = (byte)26;
      byteArray0[3] = (byte)26;
      byte byte3 = (byte)117;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-128);
      ConstantPool constantPool0 = null;
      int int1 = 1012;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1012, (-614), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char char0 = '\'';
      Utility.format((-1175), (-229), false, '\'');
      try { 
        Utility.typeOfSignature("-1175");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1175
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "&g\"";
      Utility.compactClassName("&g\"", true);
      try { 
        Utility.typeOfSignature("&g\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &g\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)80;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2584), 74, false);
      Utility.getSignature("0:    <illegal opcode>\n1:    istore_2\n2:    lastore\n");
      Utility.accessToString((int) (byte) (-31));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("L0:;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L0:;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)126;
      byteArray0[0] = (byte)126;
      byte byte1 = (byte)26;
      byteArray0[1] = (byte)26;
      byte byte2 = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte) (-31);
      ConstantPool constantPool0 = null;
      int int0 = (-1449916295);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1449916295), 93);
      String string0 = "\t(wide)";
      String string1 = "+n(CT*bt@#7OmVrXJ5q";
      boolean boolean0 = false;
      int int1 = 233;
      int int2 = (-86);
      CodeException[] codeExceptionArray0 = new CodeException[5];
      CodeException codeException0 = new CodeException((byte)30, 233, (byte)126, 93);
      codeExceptionArray0[0] = codeException0;
      int int3 = 10;
      CodeException codeException1 = new CodeException((-1802068275), (-1185), 10, 3109);
      codeExceptionArray0[1] = codeException1;
      CodeException codeException2 = new CodeException(codeException1);
      codeExceptionArray0[2] = codeException2;
      File file0 = MockFile.createTempFile("newarray", "long");
      MockFile mockFile0 = new MockFile(file0, "v*q3");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "0:    iand\n1:    iload_0\n2:    swap\n3:    lload_0\n4:    dstore\t\t%123\n6:    <illegal opcode>\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"0:    iand
         // 1:    iload_0
         // 2:    swap
         // 3:    lload_0
         // 4:    dstore\t\t%123
         // 6:    <illegal opcode>
         // \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.fillup("H'l%%OFi~", 933, false, '#');
      Utility.fillupl%%OFi~", 1594, false, ',');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriterl%%OFi~");
      PrintWriter printWriter0 = mockPrintWriter0.append('e');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Objectl%%OFi~";
      objectArray0[1] = (Object) "H'l%%OFi~";
      Utility.printArray(printWriter0, objectArray0);
      Utility.isJavaIdentifierPart('e');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-97);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (-1543), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "}tx|\"U-S`1dn2$";
      Utility.compactClassName("}tx|\"U-S`1dn2$");
      try { 
        Utility.decode("}tx|\"U-S`1dn2$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Utility.isSet((-2654), (-2654));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)91;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, 160);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-674), 2043, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      String string1 = Utility.accessToString(84, false);
      assertEquals("protected final volatile", string1);
      
      String string2 = Utility.compactClassName("1BXS", false);
      assertEquals("1BXS", string2);
      
      String string3 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)91, (-78));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(dataInputStream0);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantLong constantLong0 = new ConstantLong((byte)51);
      constantArray0[2] = (Constant) constantLong0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-13));
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string4 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("astore_2", string4);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)50;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(109, (byte)56);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2459), 5);
      assertEquals("0:    dload_3\n1:    fconst_0\n2:    bastore\n3:    dup\n4:    fstore\t\t%50\n", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)86;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)69, (int) (byte)50, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = Utility.decode("jsr_w", false);
      String string0 = "I4Cmy4)$o]C.Dwge2";
      Utility.typeOfSignature("I4Cmy4)$o]C.Dwge2");
      Utility.encode(byteArray1, false);
      Utility.format((byte)6, (byte)10, false, 'O');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "jsr_w";
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte)51;
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.typeOfMethodSignature("jsr_w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.getSignature("ireturn");
      assertEquals("Lireturn;", string0);
      
      short short0 = Utility.searchOpcode("ireturn");
      assertEquals((short)172, short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-111);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)69, 1);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref((byte)76, (short)172);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-1901), 35, true);
      assertEquals("0:    dreturn\n1:    astore_1\n2:    fstore_2\n3:    ladd\n4:    fload_2\n5:    i2b\n", string1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.format((-1878), (-1878), true, '^');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)94;
      Utility.toHexString(byteArray0);
      Utility.replace("7a 30 bb 5e", ";US0@(f`?Fg", "u\"l");
      Utility.compactClassName("wQ2*E;,Te[n", "byte", true);
      Utility.compactClassName("dreturn");
      Utility.fillup("WXB)t0a5NdsF* ,", 69, true, 'r');
      Utility.clearBit((byte)48, (byte)48);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1995340143), 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ishr
         // 1:    faload
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      short short0 = Utility.searchOpcode("yoToxNXCTwDay;gj0");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)125, 33);
      Constant constant0 = constantInvokeDynamic0.copy();
      constantArray0[0] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "\n\t\tthrows ";
      Utility.searchOpcode("\n\t\tthrows ");
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.printArray(objectArray0, true, false);
      Utility.getSignature("invokedynamic");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)16;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byteArray0[3] = (byte)0;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)18, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = ">";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "@BX\" !,v!O0iO,u";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("@BX\" !,v!O0iO,u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @BX\" !,v!O0iO,u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)16, 28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte) (-52);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("c$hZ;[;aV]LVoOrIe");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString((byte)43);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 73, (int) (byte)43, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 13694. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.compactClassName("if_icmpgt", "rJ ", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)29;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      String string0 = "j/0LybH{!,)(k55nl|0";
      ClassPath classPath1 = new ClassPath(classPath0, "j/0LybH{!,)(k55nl|0");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath1);
      classPathRepository0.findClass("if_icmpgt");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)53, (int) (byte)127, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!%,QI");
      Utility.isJavaIdentifierPart('~');
      Utility.setBit(62, 62);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-111);
      byteArray0[7] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals("goto_w\t\t#1813106067", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "native");
      String string0 = "-=C4_s";
      Utility.decode("-=C4_s", false);
      String string1 = "(B";
      Utility.getSignature("(B");
      Utility.setBit(128, (-958));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(B", "!j!{'/%X,)b8D<+", "'Ah,]XES32");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "u7W[pJ4b6I[{z(";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "u7W[pJ4b6I[{z(";
      stringArray0[1] = "u7W[pJ4b6I[{z(";
      stringArray0[2] = "u7W[pJ4b6I[{z(";
      stringArray0[3] = "u7W[pJ4b6I[{z(";
      stringArray0[4] = "u7W[pJ4b6I[{z(";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("u7W[pJ4b6I[{z(", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[pJ4b6I[{z(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-359), 6260);
      assertTrue(boolean0);
      
      String string0 = Utility.format((-2090), 7, true, '*');
      assertEquals("-2090**", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lstore_1", string1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-126);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 128, (int) (byte) (-38), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte) (-3);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)121, 196, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("94", string0);
      
      boolean boolean0 = Utility.isSet((byte) (-108), (byte) (-108));
      assertTrue(boolean0);
      
      String string1 = Utility.accessToString(183);
      assertEquals("public private protected final synchronized transient", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string2 = Utility.format(247, 56, true, '{');
      assertEquals("247{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{", string2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("XG0prr&SyL0IO~u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XG0prr&SyL0IO~u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.convertString("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)76;
      Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("@IXGVx8lV*_^<sR");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, 1800);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-107);
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)38;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "P";
      try { 
        Utility.typeOfSignature("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-115);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 151, 16, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('j');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)8;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2335), 124, false);
      assertEquals("0:    iload_1\n1:    iconst_5\n", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "L<";
      stringArray0[1] = "L<";
      stringArray0[2] = "L<";
      Utility.methodTypeToSignature("L<", stringArray0);
      Utility.compactClassName("L<", false);
      Utility.setBit(2700, (-3152));
      try { 
        Utility.methodSignatureReturnType("L<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      short short0 = Utility.searchOpcode("qxmtBfO9 :F");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)80;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "int");
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-122);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), (int) (byte) (-122), true);
      assertEquals("0:    land\n1:    lastore\n2:    nop\n3:    ldiv\n4:    dastore\n5:    i2f\n", string0);
      
      Utility.getSignature("0:    land\n1:    lastore\n2:    nop\n3:    ldiv\n4:    dastore\n5:    i2f\n");
      String string1 = Utility.classOrInterface((byte)127);
      assertEquals("class", string1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) "L0:;";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) (byte) (-122);
      objectArray0[4] = (Object) "class";
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{0, L0:;, null, -122, class}", string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{0, L0:;, null, -122, class}";
      String string3 = Utility.methodTypeToSignature("j<(^bRYQlY yej<", stringArray0);
      assertEquals("(L{0,;)Lj<(^bRYQlY;", string3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = Utility.format(1832, 1832, false, 'c');
      String string1 = Utility.fillup(string0, 1832, false, '8');
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string2 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("ifgt\t\t#31324", string2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)62;
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.codeToString(byteArray0, (ConstantPool) null, (-450), (int) (byte) (-104), true);
      Utility.isJavaIdentifierPart('V');
      Utility.compactClassName(".88/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("glIl");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "0:    land\n1:    dcmpg\n2:    if_icmple\t\t#-28864\n";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) (byte)62;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) ".88/";
      objectArray0[5] = (Object) (byte) (-104);
      PrintWriter printWriter0 = mockPrintWriter0.printf(".88.", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      Utility.printArray(objectArray0);
      String string0 = "89t@pf|I#";
      String string1 = ", ";
      String string2 = "Xl'\\6^2o%B6hI|2";
      boolean boolean0 = true;
      int int0 = 223;
      int int1 = 72;
      LocalVariable[] localVariableArray0 = new LocalVariable[3];
      LocalVariable localVariable0 = new LocalVariable(268, 268, 155, 894, 91, (ConstantPool) null);
      localVariableArray0[0] = localVariable0;
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      localVariableArray0[1] = localVariable1;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("S%.-:dPqLW@JK", "0:    land\n1:    dcmpg\n2:    if_icmple\t\t#-28864\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"0:    land
         // 1:    dcmpg
         // 2:    if_icmple\t\t#-28864
         // \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-45);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1329, 1991, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "Bc\"Fm4";
      Utility.signatureToString("Bc\"Fm4");
      Utility.accessToString(116, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)53;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "byte");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)68, 1090, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string0 = "TG/5b";
      Utility.typeOfSignature("TG/5b");
      Utility.accessToString((-1801724894));
      Utility.compactClassName("if:pdyyB5=");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      String string1 = "5ofW7\"GSJ4g 5(t";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("5ofW7\"GSJ4g 5(t", "5ofW7\"GSJ4g 5(t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"5ofW7\"GSJ4g 5(t\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = "QKc:-t?$a\"j";
      // Undeclared exception!
      try { 
        Utility.decode("QKc:-t?$a\"j", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"a\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "+Ak1vKS\\g";
      try { 
        Utility.typeOfSignature("+Ak1vKSg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ak1vKSg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "U2n.svm3V1jN}";
      try { 
        Utility.typeOfSignature("U2n.svm3V1jN}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U2n.svm3V1jN}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Utility.getSignature("C");
      boolean boolean0 = false;
      Utility.accessToString(1350, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1728532203), (-174));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ConstantLong constantLong0 = new ConstantLong(2057L);
      constantArray0[2] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("fcmpg", "C", "private protected volatile native abstract", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fcmpg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.convertString("\nAnnotation(s):\n");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      try { 
        Utility.methodSignatureArgumentTypes("\nAnnotation(s):\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         // Annotation(s):
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)51;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$a7$AG$da$983", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("goto\t\t#71", string1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "CTJD.yeN?QfC@D`J#";
      Utility.methodSignatureReturnType("CTJD.yeN?QfC@D`J#");
      String string1 = "\t";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("char", "\t");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \t
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-55);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("67 10 55 c9", string0);
      
      String string1 = Utility.methodSignatureReturnType("Tss;b:z|.391");
      assertEquals("ss", string1);
      
      String string2 = Utility.classOrInterface((byte)85);
      assertEquals("class", string2);
      
      Utility.compactClassName(", ");
      boolean boolean0 = Utility.isJavaIdentifierPart(',');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)26;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)26, (int) (byte) (-123), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-71);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lconst_1
         // 1:    astore_3
         // 2:    i2f
         // 3:    nop
         // 4:    ladd
         // 5:    <illegal opcode>
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "G/J;T80:\\!ko;IZ7";
      try { 
        Utility.methodSignatureReturnType("G/J;T80:!ko;IZ7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G/J;T80:!ko;IZ7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.setBit(122, 122);
      Utility.clearBit(67108986, 4561);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)76;
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((-1801.2375F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("?i:N7GP");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 166, 1930);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Q[f~tPW k";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q[f~tPW k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q[f~tPW k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "[=6u*";
      Utility.typeOfSignature("[=6u*");
      byte[] byteArray0 = new byte[9];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)13;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfMethodSignature("0d 0d 0d 0d 0d 96 0d 20 0d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0d 0d 0d 0d 0d 96 0d 20 0d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.signatureToString("Bc\"Fm4");
      Utility.accessToString(116, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)33;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "byte");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)68, 1090, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.searchOpcode("LXM2ha>`(1sbyUzc");
      String string0 = "<,E";
      Utility.compactClassName("LXM2ha>`(1sbyUzc", "<,E", true);
      Utility.accessToString((int) (short) (-1));
      Utility.convertString("LXM2ha>`(1sbyUzc");
      String string1 = " skipped";
      Utility.replace(" skipped", "public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", "LXM2ha>`(1sbyUzc");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)39;
      Utility.encode(byteArray0, true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "int";
      Utility.methodTypeToSignature("int", stringArray0);
      Utility.compactClassName(" skipped", false);
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (-2060), (int) (byte)39, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", "monitorexit", "void", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockFile mockFile0 = new MockFile("@", "@");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockFile0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@";
      stringArray0[1] = "_o>Zhm!heXoac";
      stringArray0[2] = "_o>Zhm!heXoac";
      stringArray0[3] = "_o>Zhm!heXoac";
      stringArray0[4] = "_o>Zhm!heXoac";
      String string0 = Utility.methodTypeToSignature("_o>Zhm!heXoac", stringArray0);
      assertEquals("(L@;L_o>Zhm!heXoac;L_o>Zhm!heXoac;L_o>Zhm!heXoac;L_o>Zhm!heXoac;)L_o>Zhm!heXoac;", string0);
      
      String string1 = Utility.classOrInterface(587);
      assertEquals("interface", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)123;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1567), (int) (byte)85);
      assertEquals("0:    iushr\n1:    dload_2\n2:    castore\n3:    <illegal opcode>\n4:    lshr\n", string2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isSet(6, (-924));
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)91;
      byteArray0[0] = (byte)91;
      byte byte1 = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)11;
      byte byte2 = (byte)118;
      byteArray0[3] = (byte)118;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2701, (int) (byte)91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("T_GQJ6", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T_GQJ6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte) (-97);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte)6);
      constantArray0[0] = (Constant) constantString0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-93));
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1, (int) (byte) (-97), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 1:    iconst_3
         // 2:    if_icmpgt\t\t#-27964
         // 5:    lstore_2
         // 6:    <illegal opcode>
         // 7:    fstore_3
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dup_x2", string0);
      
      int int0 = Utility.clearBit(86, 2233);
      assertEquals(86, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^Q?4B#T@GiQPez#9,");
      Utility.searchOpcode("^Q?4B#T@GiQPez#9,");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)12;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)84;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("Rr3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rr3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.classOrInterface((-243));
      Utility.isSet((-764), 840);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-52);
      byteArray0[7] = (byte)41;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-52), (-1));
      Utility.convertString("");
      String string0 = "A`]Sm/$)5,}";
      String string1 = "j^|`@;hO5<@,O4ju(";
      boolean boolean0 = false;
      int int0 = (-447);
      int int1 = (-471014288);
      MockFile mockFile0 = new MockFile("if_acmpeq", "");
      File file0 = MockFile.createTempFile("if_acmpeq", "R]mo=?^:D'?", (File) mockFile0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(file0, "o'D JC0[Ij4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"o'D JC0[Ij4\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      
      String string1 = Utility.accessToString((-28), false);
      assertEquals("protected synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dup2", string2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ze;";
      stringArray0[1] = "ze;";
      stringArray0[2] = "ze;";
      stringArray0[3] = "ze;";
      stringArray0[4] = "4OMH/wVg$v5";
      stringArray0[5] = "ze;";
      stringArray0[6] = "ze;";
      stringArray0[7] = "ze;";
      String string0 = Utility.methodTypeToSignature("ze;", stringArray0);
      assertEquals("(Lze;;Lze;;Lze;;Lze;;L4OMH/wVg$v5;Lze;;Lze;;Lze;;)Lze;;", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)16;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("7b 10", string1);
      
      String string2 = Utility.signatureToString("J~U", false);
      assertEquals("long", string2);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureReturnType("E-UN}>!G", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E-UN}>!G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.searchOpcode(":nbT/cH");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isSet((short) (-1), (-1472));
      Utility.compactClassName(":nbT/cH", true);
      Utility.format(10, 43, true, 'h');
      String string0 = "";
      Utility.convertString("");
      try { 
        Utility.typeOfSignature(":nbT/cH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :nbT/cH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)124;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 63, (int) (byte)53, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("$1_", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1_\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.format(40, 40, true, '?');
      Utility.compactClassName("40??????????????????????????????????????", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)62;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1109, 184);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)15;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)71, (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.printArray(objectArray0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("{java.lang.Object@2acb498a}");
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = 'H';
      charArray0[2] = 'M';
      charArray0[3] = '}';
      charArray0[4] = 'N';
      charArray0[5] = 'q';
      charArray0[6] = '';
      mockPrintStream0.print(charArray0);
      mockPrintStream0.println(0.0F);
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      try { 
        Utility.typeOfSignature("3KD<<])X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3KD<<])X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      byteSequence0.readUnsignedShort();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-535), (byte) (-108));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-108));
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantPool0.dump(dataOutputStream0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aastore", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("3b 94 53 c5", string1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H3DI/");
      try { 
        Utility.typeOfSignature("H3DI/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H3DI/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "Kc=N&kosiToBJh";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Kc=N&kosiToBJh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kc=N&kosiToBJh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte) (-88);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 169, 186, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isSet(43, 294);
      Utility.getSignature("void2~a;void2~a;");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte) (-75);
      byteArray0[8] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte)60;
      byteArray1[2] = (byte)49;
      byteArray1[3] = (byte)60;
      byteArray1[4] = (byte)81;
      byteArray1[5] = (byte)81;
      Utility.toHexString(byteArray1);
      Utility.equals(byteArray0, byteArray1);
      try { 
        Utility.methodSignatureArgumentTypes("0e 3c 31 3c 51 51", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0e 3c 31 3c 51 51
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, true);
      assertNotNull(string0);
      
      Utility.fillup("{java.lang.Object@63beaed2, java.lang.Object@65dd13b2, java.lang.Object@3733d006}", (-1923), true, '(');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)82;
      byteArray0[7] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)69, (byte)82);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)82, (byte)39);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantInteger constantInteger0 = new ConstantInteger(87);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dsub", string1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.compactClassName("W[tA; z@", "W[tA; z@", false);
      try { 
        Utility.typeOfSignature("W[tA; z@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W[tA; z@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)6;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, (int) (byte) (-62));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s+}=W8:fJ4");
      String string0 = "rG.e1d[*Qq$/";
      try { 
        Utility.decode("rG.e1d[*Qq$/", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-110);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)48;
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte) (-97);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-837), (-1437), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dload_2
         // 1:    i2c
         // 2:    nop
         // 3:    fstore_0
         // 4:    faload
         // 5:    nop
         // 6:    nop
         // 7:    fadd
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      byteSequence0.available();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.convertString("f2i");
      try { 
        Utility.typeOfMethodSignature("f2i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f2i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.typeOfSignature("DEJOy`Ij+DDc),Wn");
      String string0 = "lpF9cGz/:^\\S4xfFL'";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.replace("lpF9cGz/:^S4xfFL'", "V(Et+A[;&8G;4xHVS", "lreturn");
      Utility.setBit((byte)7, (byte)7);
      try { 
        Utility.typeOfMethodSignature("V(Et+A[;&8G;4xHVS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V(Et+A[;&8G;4xHVS
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "77IydGcHiiY";
      try { 
        Utility.typeOfSignature("77IydGcHiiY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 77IydGcHiiY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.format(73, 73, false, '\'');
      Utility.accessToString(73);
      String string0 = "`|{$9:A";
      Utility.searchOpcode("`|{$9:A");
      String string1 = "Unrecognized attribute type tag parsed: ";
      Utility.compactClassName("Unrecognized attribute type tag parsed: ", "Unrecognized attribute type tag parsed: ", false);
      try { 
        Utility.typeOfSignature("Y5$=>ly*W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y5$=>ly*W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)95;
      Utility.equals(byteArray0, byteArray0);
      Utility.methodSignatureReturnType("DQ(h 9WB", true);
      Utility.accessToString((-888), true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("static transient abstract strictfp synthetic annotation enum", "double", "vY2%mP<dQ^1&h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: static transient abstract strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload\t\t%149", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)88;
      byteArray0[8] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(466, (byte)6);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)59, 1564);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[3] = (Constant) constantFieldref1;
      ConstantLong constantLong0 = new ConstantLong(3635L);
      constantArray0[4] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.getSignature("Bc\"Fm4");
      Utility.accessToString(116, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)33;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-71), 1090, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_1
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-92);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 7, 1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.typeOfSignature("SyntheticRepository could not load ");
      Utility.replace("b}?(;y[VUk-Rnxwep", "\\", "\\");
      Utility.replace("SyntheticRepository could not load ", "\\", (String) null);
      try { 
        Utility.typeOfSignature("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("Pl[??#%", true);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)85;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)37;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 40, (int) (byte) (-128));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)10;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)54, (int) (byte)10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit(5023, 5023);
      Utility.getSignature("/n>up^LU*_y");
      try { 
        Utility.typeOfSignature("/n>up^LU*_y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /n>up^LU*_y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "9FE1L@S8{e#5$jo^{";
      try { 
        Utility.typeOfSignature("9FE1L@S8{e#5$jo^{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9FE1L@S8{e#5$jo^{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("V", "H9", "invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 77;
      int int1 = 35;
      Utility.clearBit(77, 35);
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null, true, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)74;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 70, 1701);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = Utility.decode("interface", false);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-737), 228);
      assertEquals("0:    lmul\n1:    fdiv\n2:    ineg\n3:    lsub\n4:    frem\n5:    fsub\n6:    ladd\n7:    dadd\n8:    lsub\n", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('Q');
      assertTrue(boolean0);
      
      Utility.compactClassName("SAME", false);
      Utility.setBit(213, 213);
      int int0 = Utility.setBit(231, (-737));
      assertEquals((-2147483417), int0);
      
      Utility.signatureToString("SAME", true);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "SAME";
      objectArray0[1] = (Object) "interface";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "interface";
      objectArray0[4] = (Object) "short";
      objectArray0[5] = (Object) "interface";
      objectArray0[6] = (Object) null;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string1);
      assertEquals("SAME, interface, null, interface, short, interface, null", string1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("M-R`,p", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M-R`,p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "R,Z~aNwg-";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("R,Z~aNwg-", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R,Z~aNwg-'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "|2=aI";
      stringArray0[1] = "|2=aI";
      stringArray0[2] = "|2=aI";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[3] = "|2=aI";
      stringArray0[4] = "|2=aI";
      stringArray0[5] = "|2=aI";
      Utility.methodTypeToSignature("|2=aI", stringArray0);
      Utility.methodSignatureArgumentTypes("(L|2=aI;L|2=aI;L|2=aI;L|2=aI;L|2=aI;L|2=aI;)L|2=aI;");
      try { 
        Utility.methodSignatureReturnType("|2=aI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `|2=aI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "double");
      Utility.fillup("double", 3498, true, '9');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)48;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(568, 103);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(322);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-91), (-145));
      assertEquals("0:    dconst_0\n1:    dneg\n2:    if_acmpeq\t\t#24114\n", string0);
      
      String string1 = Utility.convertString("double");
      assertEquals("double", string1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = 10;
      boolean boolean0 = true;
      char char0 = 'n';
      Utility.format(10, 10, true, 'n');
      Utility.methodTypeToSignature("10nnnnnnnn", (String[]) null);
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "float");
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)79;
      byteArray0[8] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, (int) (byte)78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w./7.~S61{X[~]");
      Utility.isJavaIdentifierPart('6');
      Utility.convertString("w./7.~S61{X[~]");
      Utility.compactClassName("", "w./7.~S61{X[~]", false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "w./7.~S61{X[~]";
      stringArray0[1] = "w./7.~S61{X[~]";
      Utility.methodTypeToSignature("putstatic", stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray((Object[]) stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("w./7.~S61{X[~]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `w./7.~S61{X[~]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.replace("F{M$w", "-<\"tW", "ifnonnull");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, (int) (byte)13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Tv}%c;[wywI");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)68;
      byte byte0 = (byte) (-45);
      byteArray0[2] = (byte) (-45);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      int int0 = (-760);
      int int1 = 0;
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (-760), 0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = "float";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "float");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-94);
      byte byte0 = (byte) (-45);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-99);
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.getSignature("YHhq6z2 bPt");
      Utility.accessToString(200);
      Utility.compactClassName("static volatile transient");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)0;
      Utility.encode(byteArray0, false);
      Utility.printArray((Object[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(95);
      constantArray0[1] = (Constant) constantMethodType2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      MockFile mockFile0 = new MockFile("YHhq6z2 bPt");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      constantMethodType2.dump(dataOutputStream0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "YHhq6z2 bPt", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid signature: ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)3;
      byte byte0 = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-30);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2558, 4, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",R^kS|Ka");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,R^kS|Ka
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-40);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char char0 = 'T';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.fillup("getstatic", (byte) (-40), false, 'T');
      ConstantPool constantPool0 = null;
      int int0 = 104;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-40), 104);
      try { 
        Utility.typeOfSignature("0:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.clearBit(7, 7);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)90;
      byteArray0[0] = (byte)90;
      byte byte1 = (byte)95;
      byteArray0[1] = (byte)95;
      byte[] byteArray1 = new byte[2];
      byte byte2 = (byte)15;
      byteArray1[0] = (byte)15;
      byte byte3 = (byte)110;
      byteArray1[1] = (byte)110;
      Utility.equals(byteArray0, byteArray1);
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      Utility.printArray(objectArray0, false, true);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("9)a Xc", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9)a Xc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "+O)}j9P\"kdO*";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      try { 
        Utility.typeOfSignature("+O)}j9P\"kdO*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O)}j9P\"kdO*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "1A(*iQO+#t";
      try { 
        Utility.typeOfSignature("1A(*iQO+#t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1A(*iQO+#t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-115);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 151, 16, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '{}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)82;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1149), (int) (byte)82, false);
      Utility.decode("Z", false);
      Utility.setBit((byte) (-124), (-2554));
      try { 
        Utility.methodSignatureArgumentTypes("Z", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.isJavaIdentifierPart('!');
      Utility.isSet(1900, 1900);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      Utility.encode(byteArray0, false);
      Utility.setBit(1900, 1589);
      Utility.compactClassName("java.lang.Object@69779d9e, java.lang.Object@30cdd560, java.lang.Object@2b494047, java.lang.Object@67240cdb, java.lang.Object@32eae6cc", true);
      Utility.isSet(13, 77);
      Utility.printArray(objectArray0);
      Utility.printArray(objectArray0);
      Constant[] constantArray0 = new Constant[3];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte) (-123);
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = null;
      try {
        constantFieldref0 = new ConstantFieldref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "O5*V]?0%4I4Q<[";
      // Undeclared exception!
      try { 
        Utility.signatureToString("O5*V]?0%4I4Q<[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O5*V]?0%4I4Q<['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "YX=``nF#c";
      String string0 = Utility.methodTypeToSignature(",4v#L@J@I8", stringArray0);
      assertEquals("(LYX=``nF#c;)L,4v#L@J@I8;", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aload\t\t%125", string1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "<illegal opcode>";
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)97;
      byteArray0[0] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("astore_0", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("sA#5<$?1C", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      int int0 = 83;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(129, 83);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 35
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte) (-26);
      byteArray0[8] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^)gWdhD9,zn#al?Y");
      String string0 = "LocalVariable";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("LocalVariable", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)91;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 20, (-181), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 19291. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)62;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), (int) (byte) (-49), false);
      assertEquals("0:    <illegal opcode>\n1:    ret\t\t%219\n3:    istore_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.searchOpcode("\r");
      Utility.accessToString((int) (short) (-1));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 26333. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.getSignature("B6eeQMze");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)40;
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("W+j:9$", true);
      Utility.replace("java.lang.|4%", "java.lang.|4%", "LB6eeQMze;");
      Utility.searchOpcode("LbgyZ6l&^];%0;V");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "LB6eeQMze;";
      objectArray0[1] = (Object) (byte) (-88);
      String string0 = Utility.printArray(objectArray0, true, true);
      Utility.signatureToString("Btfh7h,O2xK<%", true);
      String string1 = Utility.fillup("LB6eeQMze;", 8192, true, 'c');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodTypeToSignature("s,wqQPZ1hW", (String[]) null);
      Utility.replace("()Ls,wqQPZ1hW;", "()Ls,wqQPZ1hW;", "()Ls,wqQPZ1hW;");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "()Ls,wqQPZ1hW;");
      Utility.setBit(89, 47);
      Utility.methodSignatureToString("()Ls,wqQPZ1hW;", "address", "w");
      Utility.format(3, 100, true, 'g');
      Utility.setBit(2014, 32857);
      Utility.compactClassName("Invalid signature: `");
      try { 
        Utility.typeOfSignature("()Ls,wqQPZ1hW;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ()Ls,wqQPZ1hW;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("N2:mwMS43N&;kmJx", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N2:mwMS43N&;kmJx'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.isSet(91, (-1638829810));
      Utility.convertString("fg&jDWH{B?3F)\"/S_");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("impdep1", "yDK~", "fg&jDWH{B?3F)\"/S_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-535), (byte) (-108));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-108));
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.clearBit((-545), 108);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte) (-83));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte)97;
      byteArray0[8] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "2qX`S[u'l7\\";
      try { 
        Utility.typeOfSignature("2qX`S[u'l7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2qX`S[u'l7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "iV$2b";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("iV$2b", true);
      try { 
        Utility.decode("iV$2b", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?#a");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('9');
      Utility.convertString("q*iKRZ32@q'D[");
      Utility.convertString("Invalid IOCase name: ");
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Utility.signatureToString("V");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-58);
      byte byte0 = (byte)76;
      byteArray0[4] = (byte)76;
      byte byte1 = (byte) (-44);
      byteArray0[5] = (byte) (-44);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(480, 12);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = "+OhkaJco)nLde#";
      String string1 = null;
      boolean boolean0 = true;
      int int0 = 67;
      int int1 = 255;
      int int2 = 57;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-44);
      CodeException[] codeExceptionArray0 = new CodeException[5];
      CodeException codeException0 = null;
      try {
        codeException0 = new CodeException(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)111;
      byteArray0[0] = (byte)66;
      byteArray0[4] = (byte) (-26);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("ireturn");
      Utility.searchOpcode("ireturn");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)76;
      byte byte0 = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-111);
      Constant[] constantArray0 = new Constant[3];
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 1660, 1660);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.getSignature("}m3u3VSM2u_mQ}r-");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "invokevirtual");
      Utility.compactClassName("L}m3u3VSM2u_mQ}r-;", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byte byte0 = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 78, (int) (byte) (-78), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = Utility.signatureToString("FCQH,Dl]");
      assertEquals("float", string0);
      
      int int0 = Utility.clearBit(39, 1947);
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-48);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)68;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.convertString("org.apache.bcel.classfile.Code");
      Utility.convertString("org.apache.bcel.classfile.Code");
      Utility.accessToString((int) (byte)62);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[j,GIk~O,P_iT[`vgtn", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `j,GIk~O,P_iT[`vgtn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Utility.fillup("Qlw?x/,K3yz-IJOdAw$", (-1965), true, 'r');
      Utility.setBit(2448, (-1965));
      Utility.compactClassName(",Y{#", "Invalid signature: ", false);
      Utility.compactClassName("breakpoint", "class", false);
      try { 
        Utility.typeOfSignature("Qlw?x/,K3yz-IJOdAw$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Qlw?x/,K3yz-IJOdAw$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      Utility.toHexString(byteArray0);
      String string0 = "void2~a;";
      boolean boolean0 = true;
      Utility.compactClassName("void2~a;", "void2~a;", true);
      try { 
        Utility.typeOfMethodSignature(", npairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.typeOfSignature("C+TJr1.kD8S%a");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, (int) (byte)5, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.typeOfSignature("B!3`$j?#}nyL.+|jA");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "a'GG{X*5hG8";
      Utility.methodTypeToSignature("a'GG{X*5hG8", stringArray0);
      boolean boolean0 = true;
      Utility.printArray((Object[]) stringArray0, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)8;
      Utility.toHexString(byteArray0);
      Utility.toHexString(byteArray0);
      Utility.toHexString(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("'pO=O9ekow-q{\"{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `'pO=O9ekow-q{\"{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "breakpoint";
      Utility.convertString("breakpoint");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("breakpoint", "breakpoint");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // breakpoint
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "!hff|";
      try { 
        Utility.typeOfSignature("!hff|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: hff|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "Y-V2";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("Y-V2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y-V2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('i');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "\"";
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.typeOfSignature("L");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "areturn";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"", "L", "areturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Object[] objectArray0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.printArray((Object[]) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Utility.setBit(8192, 8192);
      assertEquals(8193, int0);
      
      String string0 = Utility.accessToString(8193);
      assertEquals("public annotation", string0);
      
      Utility.isJavaIdentifierPart('_');
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      Utility.methodSignatureReturnType("Limpdep1;V");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-15);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0);
      Utility.compactClassName("2~a;", "void", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)85;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.signatureToString("Z7,=dF:R@o/s=OT{");
      Utility.convertString("Z7,=dF:R@o/s=OT{");
      Utility.isSet((byte)106, (byte) (-104));
      Utility.setBit(27, 11);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.getSignature("\t");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureToString("B@sZ", "L;", "F_( yMhRPm^R@C.n", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: B@sZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Utility.signatureToString("I>*-w74{");
      Utility.compactClassName("int", "goto_w", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.accessToString(256, false);
      try { 
        Utility.typeOfMethodSignature("k7V]*~jBx&8!*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: k7V]*~jBx&8!*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = 2473;
      Utility.setBit((-3331), 2473);
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.classOrInterface(1015);
      Utility.convertString("interface");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-50);
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte)118;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -45
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.isJavaIdentifierPart('y');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ifnonnull", "ifnonnull", "ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-51);
      byteArray0[8] = (byte) (-15);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-738), (int) (byte)7, false);
      assertEquals("0:    iconst_4\n1:    istore_1\n2:    laload\n3:    fstore_0\n4:    jsr_w\t\t#1281150453\n", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "int";
      stringArray0[1] = "0:    iconst_4\n1:    istore_1\n2:    laload\n3:    fstore_0\n4:    jsr_w\t\t#1281150453\n";
      stringArray0[2] = "0:    iconst_4\n1:    istore_1\n2:    laload\n3:    fstore_0\n4:    jsr_w\t\t#1281150453\n";
      stringArray0[3] = "|X5gr+^3JIy8G{LU|";
      stringArray0[4] = "0:    iconst_4\n1:    istore_1\n2:    laload\n3:    fstore_0\n4:    jsr_w\t\t#1281150453\n";
      stringArray0[5] = "0:    iconst_4\n1:    istore_1\n2:    laload\n3:    fstore_0\n4:    jsr_w\t\t#1281150453\n";
      stringArray0[6] = "0:    iconst_4\n1:    istore_1\n2:    laload\n3:    fstore_0\n4:    jsr_w\t\t#1281150453\n";
      stringArray0[7] = "0:    iconst_4\n1:    istore_1\n2:    laload\n3:    fstore_0\n4:    jsr_w\t\t#1281150453\n";
      String string1 = Utility.methodTypeToSignature("0:    iconst_4\n1:    istore_1\n2:    laload\n3:    fstore_0\n4:    jsr_w\t\t#1281150453\n", stringArray0);
      assertEquals("(IL0:;L0:;L|X5gr+^3JIy8G{LU|;L0:;L0:;L0:;L0:;)L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.searchOpcode("lQ%lG-'#!^");
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|<0`W7D)xJI6w+v");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "|<0`W7D)xJI6w+v";
      objectArray0[1] = (Object) "|<0`W7D)xJI6w+v";
      objectArray0[2] = (Object) "|<0`W7D)xJI6w+v";
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) "|<0`W7D)xJI6w+v";
      objectArray0[5] = (Object) "|<0`W7D)xJI6w+v";
      PrintWriter printWriter0 = mockPrintWriter0.printf("dload", objectArray0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) "|<0`W7D)xJI6w+v";
      objectArray1[1] = (Object) "dload";
      objectArray1[2] = (Object) "dload";
      objectArray1[3] = (Object) "dload";
      objectArray1[4] = (Object) printWriter0;
      objectArray1[5] = (Object) printWriter0;
      Object object0 = new Object();
      objectArray1[6] = object0;
      Utility.printArray(printWriter0, objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)103;
      Utility.toHexString(byteArray0);
      Utility.format((byte) (-113), 13, true, 'v');
      String string0 = Utility.toHexString(byteArray0);
      Utility.classOrInterface((byte)103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "invokedynamic";
      boolean boolean0 = false;
      Utility.compactClassName("invokedynamic", false);
      String string1 = ";+mzzY.C}|S8iN{j";
      try { 
        Utility.typeOfSignature(";+mzzY.C}|S8iN{j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;+mzzY.C}|S8iN{j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Utility.methodSignatureReturnType("S|vFwHO;nIw");
      Utility.accessToString(78);
      Utility.compactClassName("short");
      Utility.isSet(78, 97);
      try { 
        Utility.typeOfMethodSignature("private protected static volatile");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private protected static volatile
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      Object object0 = new Object();
      objectArray0[8] = object0;
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NewObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NewObject
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "#Cb0!]y]|&Vi+Qz1IIU";
      Utility.convertString("#Cb0!]y]|&Vi+Qz1IIU");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = 992;
      boolean boolean0 = true;
      Utility.accessToString(992, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("#Cb0!]y]|&Vi+Qz1IIU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #Cb0!]y]|&Vi+Qz1IIU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      int int0 = Utility.setBit(36, 36);
      assertEquals(52, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart(' ');
      boolean boolean1 = Utility.isSet(57, 57);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("HbX", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HbX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.fillup("arraylength", (-2288), false, 'e');
      File file0 = MockFile.createTempFile("arraylength", "org.apache.bcel.classfile.ConstantDouble");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) file0;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "arraylength";
      objectArray0[3] = (Object) "arraylength";
      objectArray0[4] = (Object) "arraylength";
      objectArray0[5] = (Object) file0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "org.apache.bcel.classfile.ConstantDouble";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(287L, file0.length());
      
      String string0 = Utility.compactClassName("arraylength");
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.classOrInterface(4444);
      byte[] byteArray0 = null;
      Constant[] constantArray0 = new Constant[9];
      DataInput dataInput0 = null;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = null;
      try {
        constantInterfaceMethodref0 = new ConstantInterfaceMethodref((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantCP", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.clearBit((-143), 119);
      String string0 = "checkcast";
      // Undeclared exception!
      try { 
        Utility.signatureToString("checkcast");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `checkcast'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Deprecated";
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Deprecated", false);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-114);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray1[2] = (byte)117;
      byte byte0 = (byte)83;
      byteArray1[3] = (byte)83;
      byteArray1[4] = (byte)23;
      byteArray1[5] = (byte)79;
      Utility.toHexString(byteArray1);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("$l$8b$I$A$A$A$A$A$A$A", stringArray0);
      try { 
        Utility.methodSignatureReturnType("(UX*r)sL[=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `sL[='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = "W+j:9$";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("W+j:9$", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W+j:9$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((-610), 62);
      String string0 = "(UX*r)sL[=KR_";
      Utility.compactClassName("(UX*r)sL[=KR_");
      String string1 = "r";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(UX*r)sL[=KR_", "byte", "r", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UX*r)sL[=KR_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('5');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)4;
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      
      String string0 = Utility.accessToString((int) (byte)48);
      assertEquals("final synchronized", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte)90;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)90;
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{90, 0, 90}", string1);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t\t<");
      try { 
        Utility.methodSignatureReturnType("X4", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)67;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.getSignature("kjKa5;MC");
      // Undeclared exception!
      try { 
        Utility.signatureToString("vfWUK1y$W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `vfWUK1y$W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Utility.methodSignatureReturnType("V", false);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-73);
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-13);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-26);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      int int0 = Utility.setBit(121, 121);
      assertEquals(33554553, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "!eKcNk}*a+}F'UVt^";
      stringArray0[1] = ", high = ";
      stringArray0[2] = "!eKcNk}*a+}F'UVt^";
      stringArray0[3] = "!eKcNk}*a+}F'UVt^";
      String string0 = Utility.methodTypeToSignature("!eKcNk}*a+}F'UVt^", stringArray0);
      assertEquals("(L!eKcNk}*a+}F'UVt^;L,;L!eKcNk}*a+}F'UVt^;L!eKcNk}*a+}F'UVt^;)L!eKcNk}*a+}F'UVt^;", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = true;
      Utility.fillup("Qlw?x/,K3yz-IJOdAw$", (-1965), true, 'r');
      Utility.setBit(2448, (-1965));
      Utility.compactClassName(",Y{#", "Invalid signature: ", false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 2
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      Utility.accessToString(73);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Utility.replace(",XnjMFGP1`y!1(jq<", ",XnjMFGP1`y!1(jq<", " IDnt>6x|8M/N>4<9");
      Utility.compactClassName(" IDnt>6x|8M/N>4<9");
      Utility.convertString(",XnjMFGP1`y!1(jq<");
      MockFile mockFile0 = new MockFile("{iVhe2x7~.vUIYB:\"S");
      File file0 = MockFile.createTempFile(" IDnt>6x|8M.N>4<9", (String) null, (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "|0o?pIKNVW5");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // |0o?pIKNVW5
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "!gI5x";
      try { 
        Utility.typeOfMethodSignature("!gI5x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !gI5x
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)101;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.getSignature("j4qr[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)68;
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Utility.accessToString(83, true);
      int int0 = (-1);
      Utility.accessToString((-1));
      String string0 = "drem";
      try { 
        Utility.methodSignatureReturnType("drem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `drem'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Utility.fillup("1F26fBUwCm", 2755, true, '{');
      Utility.convertString("p0&,}}t,1^q*X%v");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-76);
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      Utility.encode(byteArray0, false);
      Utility.accessToString((int) (byte)47, false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      // Undeclared exception!
      try { 
        mockPrintWriter0.write("", 1656, 168);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = Utility.fillup("<", 92, false, 'w');
      assertEquals("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww<", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t<", "", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = "#\\-GVID]";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lload_3", "#-GVID]", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = Utility.compactClassName("byte");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Utility.accessToString(0, true);
      // Undeclared exception!
      try { 
        Utility.replace("", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("q|e1PT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: q|e1PT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "HD0$";
      boolean boolean0 = true;
      Utility.compactClassName("HD0$", "\nAttribute(s):\n", true);
      Utility.searchOpcode("9NCqxo^xCw!hk4hO");
      Utility.compactClassName("J/7c?qM:j");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%TQj$l");
      Utility.replace("qZaEcVk3~k1", "9NCqxo^xCw!hk4hO", "");
      boolean boolean1 = true;
      Utility.convertString("%TQj$l");
      try { 
        Utility.typeOfSignature("qZaEcVk3~k1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: qZaEcVk3~k1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)51;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$c4$a7G$da$983", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Utility.isSet(11, 11);
      boolean boolean0 = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.ConstantUtf8$CACHE_HOLDER");
      Utility.format(11, (-1018), true, 'q');
      Utility.convertString("11");
      try { 
        Utility.decode("iload_1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte) (-97);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-837), (-1437), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 17200. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "O2D5<W|\"U-M7R@J]";
      stringArray0[1] = "O2D5<W|\"U-M7R@J]";
      stringArray0[2] = "m{<4";
      stringArray0[3] = "O2D5<W|\"U-M7R@J]";
      stringArray0[4] = "O2D5<W|\"U-M7R@J]";
      stringArray0[5] = "O2D5<W|\"U-M7R@J]";
      stringArray0[6] = "O2D5<W|\"U-M7R@J]";
      stringArray0[7] = "O2D5<W|\"U-M7R@J]";
      stringArray0[8] = "FjQ2mdf [P.MG?5";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("O2D5<W|\"U-M7R@J]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[P.MG?5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Utility.getSignature("int");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.clearBit(1092, 51);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("I", "int", "int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Utility.isJavaIdentifierPart('H');
      String string0 = "u9|-/hIEXkkcymQzw";
      try { 
        Utility.methodSignatureReturnType("u9|-/hIEXkkcymQzw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `u9|-/hIEXkkcymQzw'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[1];
          byteArray0[0] = (byte) (-94);
          Utility.encode(byteArray0, true);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.GeneratedConstructorAccessor145.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-37);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokestatic");
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)16;
      Utility.toHexString(byteArray0);
      Utility.compactClassName("db 24 10", false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)36;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[1] = (Object) "db 24 10";
      objectArray0[2] = (Object) "invokestatic";
      objectArray0[3] = (Object) "db 24 10";
      objectArray0[4] = (Object) "db 24 10";
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.methodSignatureReturnType("&G':MOCNxT'5s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `&G':MOCNxT'5s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.fillup("l^nLN\"t$S^(da\"13+9", (-3696), true, 'v');
      try { 
        Utility.methodSignatureReturnType("Pz/w=-/KeO!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pz/w=-/KeO!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
