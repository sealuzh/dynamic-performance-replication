/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 03:36:51 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(795);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 795, "of~B5TzyFtER=/6T", "", (String) null, (Object) null);
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-133));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4, "_J@tE6EZS].I", "_J@tE6EZS].I", "", "_J@tE6EZS].I");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("OG=826Jt%?-wR>/", "OG=826Jt%?-wR>/", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, 2, "OG=826Jt%?-wR>/", "", "OG=826Jt%?-wR>/", mockFileInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(40);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "Deprecated", "$OAxH\"I+>", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      Attribute attribute0 = new Attribute("Deprecated");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2784);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3850), "nxpY&Z 0N7WF78:", "cFb,", "`x>hUl}>a'nz5o", "*'tyuy:4#F.II T6");
      fieldWriter0.visitAnnotation("cFb,", false);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1669));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-499), "", "", "", (Object) null);
      fieldWriter0.visitAnnotation("GW7=S~g(qP3", true);
      ByteVector byteVector0 = new ByteVector(1943);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      classWriter0.version = (-1568);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField((-1568), "MKSir}U%/\r/HNPyn", "MKSir}U%/\r/HNPyn", "MKSir}U%/\r/HNPyn", "MKSir}U%/\r/HNPyn");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2784);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3850), "nxpY&Z 0N7WF78:", "cFb,", "`x>hUl}>a'nz5o", "*'tyuy:4#F.II T6");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-133));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4, "_J@tE6EZS].I", "_J@tE6EZS].I", "", "_J@tE6EZS].I");
      fieldWriter0.visitAnnotation(":dBs[b{w#?\"B", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2784);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3850), "nxpY&Z 0N7WF78:", "cFb,", "`x>hUl}>a'nz5o", "*'tyuy:4#F.II T6");
      fieldWriter0.visitAnnotation("cFb,", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(795);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 795, "of~B5TzyFtER=/6T", "", (String) null, (Object) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(54, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(28);
      Object object0 = new Object();
      classWriter0.visitField(2, "", "Synthetic", "The list of names must not be null", "The list of names must not be null");
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 1, "Deprecated", "", "o", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@7b7d0e9
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2784);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3850), "nxpY&Z 0N7WF78:", "cFb,", "`x>hUl}>a'nz5o", "*'tyuy:4#F.II T6");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1218));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "", "", "", "");
      Attribute attribute0 = new Attribute("RuntimeVisibleAnnotations");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
