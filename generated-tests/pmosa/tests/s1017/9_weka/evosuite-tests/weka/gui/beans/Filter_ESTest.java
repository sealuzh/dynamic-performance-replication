/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:38:33 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.ImageCapabilities;
import java.awt.Rectangle;
import java.awt.event.ComponentListener;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyListener;
import java.awt.image.ImageObserver;
import java.beans.EventSetDescriptor;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.JViewport;
import javax.swing.border.EtchedBorder;
import javax.swing.plaf.basic.BasicPopupMenuSeparatorUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.FilteredAssociator;
import weka.classifiers.misc.InputMappedClassifier;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.CheckOptionHandler;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffSaver;
import weka.core.converters.C45Loader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.supervised.attribute.NominalToBinary;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.WekaTaskMonitor;
import weka.gui.beans.Appender;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.IncrementalClassifierEvaluator;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.Loader;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.addTestSetListener(classAssigner0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getTransferHandler();
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      rectangle0.setRect((-10.13), (-10.13), 0.0, 0.0);
      filter0.paintImmediately(rectangle0);
      filter0.getWidth();
      filter0.getWrappedAlgorithm();
      filter0.connectionNotification("4=VI}/C4", "4=VI}/C4");
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      BasicPopupMenuSeparatorUI basicPopupMenuSeparatorUI0 = new BasicPopupMenuSeparatorUI();
      basicPopupMenuSeparatorUI0.getMinimumSize(jViewport0);
      filter0.getSize((Dimension) null);
      filter0.setWrappedAlgorithm(nominalToBinary0);
      Loader loader0 = new Loader();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      trainTestSplitMaker0.getStructure("z");
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getNextInstance((Instances) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      filter0.addHierarchyListener((HierarchyListener) null);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, (int[]) null, (-921));
      binarySparseInstance0.dataset();
      instanceEvent0.setStructure((Instances) null);
      filter0.acceptInstance(instanceEvent0);
      Color color0 = Color.magenta;
      EtchedBorder etchedBorder0 = new EtchedBorder(color0, color0);
      substringReplacer0.setBorder(etchedBorder0);
      substringReplacer0.addHierarchyListener((HierarchyListener) null);
      filter0.useDefaultVisual();
      filter0.addInstanceListener(substringReplacer0);
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      filter0.disconnectionNotification("\tUse unpruned tree/rules", (Object) null);
      WekaTaskMonitor wekaTaskMonitor0 = new WekaTaskMonitor();
      weka.gui.LogPanel logPanel0 = null;
      try {
        logPanel0 = new weka.gui.LogPanel(wekaTaskMonitor0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      Discretize discretize0 = new Discretize();
      TestSetEvent testSetEvent0 = new TestSetEvent(discretize0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.eventGeneratable(" is not a");
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      serializedModelSaver0.getColorModel();
      serializedModelSaver0.firePropertyChange(" is not a", false, true);
      BeanVisual beanVisual0 = serializedModelSaver0.m_visual;
      filter0.setVisual(beanVisual0);
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      filter0.addDataSourceListener(dataVisualizer0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.addNotify();
      Classifier classifier0 = new Classifier();
      JComponent.getDefaultLocale();
      classifier0.getGraphicsConfiguration();
      filter0.addTrainingSetListener(classifier0);
      filter0.isBusy();
      filter0.addTestSetListener(classifier0);
      filter0.paint((Graphics) null);
      filter0.setCustomName("O ?q[69N~|[=E[ED");
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      substringLabeler0.paintComponents((Graphics) null);
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      instanceEvent0.setStatus(0);
      filter0.acceptInstance(instanceEvent0);
      filter0.removeTrainingSetListener(substringLabeler0);
      filter0.setCustomName("Z9!W8KS");
      filter0.isBusy();
      filter0.getFilter();
      boolean boolean0 = filter0.eventGeneratable("");
      assertEquals("Z9!W8KS", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      FocusListener focusListener0 = AWTEventMulticaster.add((FocusListener) defaultCaret0, (FocusListener) defaultCaret0);
      filter0.removeFocusListener(focusListener0);
      filter0.getCustomName();
      String string0 = "";
      filter0.connectionAllowed("");
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      filter0.addTrainingSetListener(substringLabeler0);
      String string1 = "Uzp;'=7s";
      // Undeclared exception!
      try { 
        filter0.performRequest("Uzp;'=7s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Uzp;'=7s not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tNumber of features to consider (<1=int(logM+1)).");
      filter0.setAutoscrolls(true);
      MultiFilter multiFilter0 = new MultiFilter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-53);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      filter0.disconnectionNotification("ERROR (See log for details.", multiFilter0);
      filter0.setFilter(multiFilter0);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getConnectedFormat();
      filter0.getFilter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.filters.Filter filter1 = filter0.getFilter();
      filter0.setFilter(filter1);
      filter0.removeConfigurationListener((ConfigurationListener) null);
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      Logger logger0 = classifierPerformanceEvaluator0.m_logger;
      filter0.setLog((Logger) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      filter0.setCustomName((String) null);
      filter0.eventGeneratable("fr#Pn/h");
      filter0.globalInfo();
      filter0.getVisual();
      filter0.getVisual();
      TextViewer textViewer0 = new TextViewer();
      filter0.addTestSetListener(textViewer0);
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      Class<Container> class1 = Container.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "fr#Pn/h";
      EventSetDescriptor eventSetDescriptor0 = null;
      try {
        eventSetDescriptor0 = new EventSetDescriptor(class0, "fr#Pn/h", class1, stringArray0, "<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", stringArray0[0], "weka/gui/beans/icons/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.beans.EventSetDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("@relation");
      assertFalse(boolean0);
      
      Saver saver0 = new Saver();
      filter0.removeTrainingSetListener(saver0);
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getConnectedFormat();
      DataSetEvent dataSetEvent0 = new DataSetEvent("@relation", (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.removeTestSetListener(crossValidationFoldMaker0);
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      Classifier classifier0 = new Classifier();
      filter0.removeInstanceListener(classifier0);
      Appender appender0 = new Appender();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(appender0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.Appender : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      filter0.addComponentListener((ComponentListener) null);
      filter0.setLog((Logger) null);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Integer.max((-1), (-1));
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(integer0, (Instances) null, (-1), (-1));
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent("AllFilter", (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.connectionAllowed("configuration");
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      boolean boolean1 = filter0.eventGeneratable("configuration");
      assertEquals("AllFilter", filter0.getCustomName());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("0WR+[>Q+s3");
      assertFalse(boolean0);
      
      Appender appender0 = new Appender();
      filter0.connectionNotification("G;.f}$R[`m=BOvCp)", "G;.f}$R[`m=BOvCp)");
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.removeDataSourceListener(appender0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(instanceStreamToBatchMaker0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("5Vu@g8s&v)AcdS", arrayList0, 632);
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("#+SsG\nM1Lp", "#+SsG\nM1Lp");
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.connectionNotification("#+SsG\nM1Lp", scatterPlotMatrix0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      Logger logger0 = substringReplacer0.m_log;
      filter0.setLog((Logger) null);
      Filter filter1 = new Filter();
      filter1.acceptDataSet((DataSetEvent) null);
      filter1.acceptDataSet((DataSetEvent) null);
      assertEquals("AllFilter", filter1.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      TestSetEvent testSetEvent0 = new TestSetEvent(textDirectoryLoader0, instances0, (-1953000349), (-1702));
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(textDirectoryLoader0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("mYw+WEU0", "mYw+WEU0");
      boolean boolean0 = filter0.eventGeneratable("mYw+WEU0");
      assertTrue(boolean0);
      
      filter0.acceptDataSet((DataSetEvent) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      filter0.connectionNotification("xMylC-0rGC_{T3D", incrementalClassifierEvaluator0);
      boolean boolean0 = filter0.eventGeneratable("xMylC-0rGC_{T3D");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      Instances instances0 = null;
      filter0.connectionNotification("ty}F>Fe`", "ty}F>Fe`");
      filter0.eventGeneratable("ty}F>Fe`");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      try { 
        inputMappedClassifier0.getModelHeader((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Random.setNextRandom(80);
      Filter filter0 = new Filter();
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      Locale locale0 = Locale.forLanguageTag("p*{w");
      ComponentOrientation.getOrientation(locale0);
      filter0.setComponentOrientation(componentOrientation0);
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      boolean boolean0 = filter0.connectionAllowed("X7");
      assertTrue(boolean0);
      
      Random.setNextRandom(80);
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      trainTestSplitMaker0.getRegisteredKeyStrokes();
      filter0.removeTrainingSetListener(trainTestSplitMaker0);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      instanceStreamToBatchMaker0.contains(20, (-15));
      filter0.addInstanceListener(instanceStreamToBatchMaker0);
      System.setCurrentTimeMillis((-2720L));
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.connectionNotification("Y_", sorter0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.addDataSourceListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getBounds((Rectangle) null);
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      filter0.getVisual();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.connectionNotification("weka/gui/beans/icons/", classAssigner0);
      filter0.eventGeneratable("weka/gui/beans/icons/");
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1240861885));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Filter filter0 = new Filter();
      filter0.setInputMap(1, (InputMap) null);
      Clusterer clusterer0 = new Clusterer();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      filter0.removeTrainingSetListener(clusterer0);
      Add add0 = new Add();
      filter0.setFilter(add0);
      filter0.connectionAllowed("Y*NJqq*");
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.setLog(logPanel0);
      Sorter sorter0 = new Sorter();
      ClassOrder classOrder0 = new ClassOrder();
      filter0.setFilter(classOrder0);
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("ClassOrder", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      textDirectoryLoader0.getStructure();
      Add add0 = new Add();
      filter0.setFilter(add0);
      filter0.connectionAllowed("@relation");
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      instanceEvent0.setStatus(1001);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Add add0 = new Add();
      filter0.setFilter(add0);
      filter0.connectionAllowed("@relation");
      PredictionAppender predictionAppender0 = new PredictionAppender();
      DataSetEvent dataSetEvent0 = new DataSetEvent(add0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Add add0 = new Add();
      filter0.setFilter(add0);
      filter0.connectionAllowed("@relation");
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instanceEvent0.setStructure(instances0);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      Add add0 = new Add();
      filter0.setFilter(add0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      instanceEvent0.setInstance(binarySparseInstance0);
      instanceEvent0.setStatus(3208);
      filter0.acceptInstance(instanceEvent0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      InstanceEvent instanceEvent0 = sorter1.m_ie;
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      InstanceEvent instanceEvent1 = sorter0.m_ie;
      instanceEvent1.setStructure(instances0);
      filter0.acceptInstance(instanceEvent1);
      assertEquals("MultiFilter", filter0.getCustomName());
  }
}
