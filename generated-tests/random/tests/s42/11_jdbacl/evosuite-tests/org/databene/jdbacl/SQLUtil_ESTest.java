/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 03:46:44 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index");
      String[] stringArray0 = new String[2];
      String[] stringArray1 = new String[7];
      SQLUtil.join((String) null, "U;>%]", stringArray0, "g[L[tiOIW-8ma~", (String) null, stringArray1);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("upgrade");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'upgrade' not found in table 'drop index'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.normalize("I&$*r", false);
      SQLUtil.substituteMarkers("-(4lni\u0003k", "I & $ * r", "I&$*r");
      NameSpec nameSpec0 = NameSpec.NEVER;
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 769, "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("callw#~f4", defaultDBTable0, 52, "CHECK ");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("callw#~f4, callw#~f4, callw#~f4, callw#~f4, callw#~f4, callw#~f4, callw#~f4, callw#~f4, callw#~f4", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter tablej1ts");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("[y:hz#?ete;d1[RKp", (DBTable) null, (-183673425), "beginNestedTransaction");
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("[y:hz#?ete;d1[RKp", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, "#(:", "ClassNotFoundException", stringArray0);
      assertEquals("left join #(: as ClassNotFoundException on null.null = ClassNotFoundException.null and null.null = ClassNotFoundException.null and null.null = ClassNotFoundException.null and null.null = ClassNotFoundException.null and null.null = ClassNotFoundException.null and null.null = ClassNotFoundException.null and null.null = ClassNotFoundException.null and null.null = ClassNotFoundException.null and null.null = ClassNotFoundException.null", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.leftJoin("", stringArray0, "Commit called: ", "", stringArray0);
      assertEquals("left join Commit called:  as  on .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.join((String) null, "gf26~88NdIV~t?g", stringArray0, (String) null, " NULL", stringArray0);
      assertEquals("null as  NULL on gf26~88NdIV~t?g.null =  NULL.null and gf26~88NdIV~t?g.null =  NULL.null and gf26~88NdIV~t?g.null =  NULL.null and gf26~88NdIV~t?g.null =  NULL.null", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",&Hh6", (DBSchema) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(",&Hh6", true, defaultDBTable0, "update");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("alter table", "THROTTLE", (String[]) null, "!bA1", "8A", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String[] stringArray1 = new String[6];
      // Undeclared exception!
      try { 
        SQLUtil.join("exec", "6dS)99es?JgTrtdL", stringArray0, "6dS)99es?JgTrtdL", "exec", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "J2G+";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "J2G+", false, stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "J2G+");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      long long0 = (-517L);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.isProcedureCall("exec");
      String[] stringArray0 = new String[7];
      stringArray0[6] = "6dS)99es?JgTrtdL";
      SQLUtil.join("exec", "6dS)99es?JgTrtdL", stringArray0, "6dS)99es?JgTrtdL", "exec", stringArray0);
      String string0 = "Kw";
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.isQuery("select intoselectand");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intoselectand");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("drop index");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.substituteMarkers("6\"l,", "6\"l,", (Object) null);
      SQLUtil.isProcedureCall("6\"l,");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("unmapped type ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.mutatesStructure("drop materialized viewj1ts");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("inner");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "execute";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" (", false, "execute", "execute");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("inner");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 1.0;
      SQLUtil.renderNumber(streamTokenizer0);
      DBSchema dBSchema0 = new DBSchema((String) null, (DBCatalog) null);
      assertEquals("schema", dBSchema0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.renderColumnListWithTableName(";{KHb:poZ$Gd!GGr", stringArray0);
      assertEquals(";{KHb:poZ$Gd!GGr.null, ;{KHb:poZ$Gd!GGr.null, ;{KHb:poZ$Gd!GGr.null, ;{KHb:poZ$Gd!GGr.null, ;{KHb:poZ$Gd!GGr.null, ;{KHb:poZ$Gd!GGr.null", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("sE'gH0uQSrF[", true);
      assertEquals("sE 'gH0uQSrF['", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "<k1-(Fo(dcsImhzH9\"'";
      String string1 = SQLUtil.normalize("<k1-(Fo(dcsImhzH9\"'", true);
      assertEquals("< k1 - (Fo (dcsImhzH9 \"'\"", string1);
      
      boolean boolean0 = SQLUtil.isDML(string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = SQLUtil.normalize("1o}fz--zeAw9l@", false);
      assertEquals("1o } fz -- zeAw9l @", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = false;
      SQLUtil.normalize("drop materialized viewrswzq/;u", false);
      String string0 = "Unknown constraint type: ";
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "I^O<Xhe");
      SQLUtil.normalize("deleteutt.:%/,,rtrl)jf[vw", true);
      EvoSuiteFile evoSuiteFile0 = null;
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("jyw'g`+{{");
      SQLUtil.normalize("left join s7v[ as create table9 on call.call = create table9.call and call.call = create table9.call", true);
      String string0 = "w(SruYP}j,Vq\"P Z";
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "alter tablej1ts");
      SQLUtil.typeAndName((DBObject) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("N7n2rLfR#");
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertNotNull(string0);
      assertEquals("container N7n2rLfR#", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ">k$<_n.s$s{-HTZX(%", false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index");
      String[] stringArray0 = new String[2];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop index", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[7];
      stringArray1[6] = "drop index";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, dBTable0, stringArray0, defaultDBTable0, stringArray1);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, "I,AP9+C", "executeBatch");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
      assertEquals("check constraint", dBCheckConstraint0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index");
      String[] stringArray0 = new String[2];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop index", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[7];
      stringArray1[6] = "drop index";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, dBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("upgrade");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'upgrade' not found in table 'drop index'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "q4{Qq";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("M]^i!'35N'");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("q4{Qq", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setName("rename");
      SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      String string1 = "rHEa75-yBBF+";
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("execute", false, "execute", "execute");
      SQLUtil.ownerDotComponent(dBCheckConstraint0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "inner");
      SQLUtil.addOptionalCondition("inner", stringBuilder0);
      assertEquals("inner or inner", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 625;
      StringBuilder stringBuilder0 = new StringBuilder(625);
      SQLUtil.addOptionalCondition("UWL#2MB!U/WT", stringBuilder0);
      assertEquals("UWL#2MB!U/WT", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLUtil.removeComments("!bA1");
      DBSchema dBSchema0 = new DBSchema("!bA1");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!bA1", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "!bA1", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      dBPrimaryKeyConstraint0.setDoc("MAX_LENGTH_INPLACE_LOB");
      SQLUtil.addRequiredCondition("THROTTLE", stringBuilder0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      System.setCurrentTimeMillis((-1093L));
      String string0 = ":aJTfSD =6";
      String string1 = "~o&3z^3{d+>enR<{";
      StringBuilder stringBuilder0 = new StringBuilder(1796);
      SQLUtil.addRequiredCondition(string0, stringBuilder0);
      assertEquals(":aJTfSD =6", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLUtil.isQuery("select into");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("left join alter table(, , , , , , , , ) as alter table(, , , , , , , , ) on alter table(, , , , , , , , ).alter table(, , , , , , , , ) = alter table(, , , , , , , , ).alter table(, , , , , , , , ) and alter table(, , , , , , , , ).alter table(, , , , , , , , ) = alter table(, , , , , , , , ).alter table(, , , , , , , , ) and alter table(, , , , , , , , ).alter table(, , , , , , , , ) = alter table(, , , , , , , , ).alter table(, , , , , , , , ) and alter table(, , , , , , , , ).alter table(, , , , , , , , ) = alter table(, , , , , , , , ).alter table(, , , , , , , , ) and alter table(, , , , , , , , ).alter table(, , , , , , , , ) = alter table(, , , , , , , , ).alter table(, , , , , , , , ) and alter table(, , , , , , , , ).alter table(, , , , , , , , ) = alter table(, , , , , , , , ).alter table(, , , , , , , , ) and alter table(, , , , , , , , ).alter table(, , , , , , , , ) = alter table(, , , , , , , , ).alter table(, , , , , , , , )");
      SQLUtil.mutatesDataOrStructure("exec");
      String string0 = null;
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tableupdate");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Character character0 = Character.valueOf('v');
      Character.isAlphabetic(46);
      SQLUtil.renderValue(character0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("FG)Wy+t0");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncateupdate", dBSchema0);
      defaultDBTable0.getIndexes();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncateupdate", defaultDBTable0, 477, "FG)Wy+t0");
      defaultDBColumn0.setDefaultValue(".");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("truncateupdate FG)WY+T0 DEFAULT . NULL", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(string0);
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[6] = "select intov9";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select intov9", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select intov9");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[6] = "select intov9";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ">k$<_n.s$s{-HTZX(%", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select intov9");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(122, "#(:");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("d_lt;wGi:@;", defaultDBTable0, dBDataType0, integer0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile("updateheuristic commit/rollback not supported", "BCtKpQr3WD*;2R03Z");
      mockFile0.setExecutable(false, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-3200), "execleft join alter table(, , , , , , , , ) as alter table(, , , , , , , , ) on alter table(, , , , , , , , ).alter table(, , , , , , , , ) = alter table(, , , , , , , , ).alter table(, , , , , , , , ) and alter table(, , , , , , , , ).alter table(, , , , , , , , ) = alter table(, , , , , , , , ).alter table(, , , , , , , , ) and alter table(, , , , , , , , ).alter table(, , , , , , , , ) = alter table(, , , , , , , , ).alter table(, , , , , , , , ) and alter table(, , , , , , , , ).alter table(, , , , , , , , ) = alter table(, , , , , , , , ).alter table(, , , , , , , , ) and alter table(, , , , , , , , ).alter table(, , , , , , , , ) = alter table(, , , , , , , , ).alter table(, , , , , , , , ) and alter table(, , , , , , , , ).alter table(, , , , , , , , ) = alter table(, , , , , , , , ).alter table(, , , , , , , , ) and alter table(, , , , , , , , ).alter table(, , , , , , , , ) = alter table(, , , , , , , , ).alter table(, , , , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "execute";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("execute");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "execute";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format:  (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBSchema dBSchema0 = new DBSchema("Y2#*-{PN)U_ia{");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_fGBr48eWxvbLR", dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("_fGBr48eWxvbLR", true, defaultDBTable0, "_fGBr48eWxvbLR");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT _fGBr48eWxvbLR CHECK _fGBr48eWxvbLR", string0);
      
      boolean boolean0 = SQLUtil.isDDL("Query did not return a result set.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(4334, "K{T}");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("42Y23", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop materialized viewjv2*l}pze5to", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "a;E", stringArray0);
      assertEquals(" as a;E on .null = a;E.null and .null = a;E.null and .null = a;E.null and .null = a;E.null and .null = a;E.null and .null = a;E.null and .null = a;E.null", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6\"l,");
      String string0 = SQLUtil.substituteMarkers("6\"l,", "6\"l,", (Object) null);
      assertEquals("null", string0);
      
      String string1 = SQLUtil.renderValue("delete");
      assertEquals("'delete'", string1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[4] = "y 3~(!";
      SQLUtil.leftJoin("y 3~(!", stringArray0, "y 3~(!", "y 3~(!", stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("getStalePlanCheckInterval");
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/");
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(";%(^Jr5Y00n!/}E", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ;%(^Jr5Y00n!/}E FOREIGN KEY (, , , , ) REFERENCES /(, , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "RsWZq/;U";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("getStalePlanCheckInterval");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "J2G+";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "J2G+", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      long long0 = (-517L);
  }
}
