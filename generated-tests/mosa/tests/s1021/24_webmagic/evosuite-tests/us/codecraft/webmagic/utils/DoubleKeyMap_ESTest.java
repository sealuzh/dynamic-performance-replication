/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:35:57 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(class1);
      Object object0 = new Object();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Object>(class0);
      Map<String, String> map0 = doubleKeyMap2.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(object0, map0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(class0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-3065));
      doubleKeyMap0.put(object0, integer0, object0);
      Integer integer1 = new Integer(0);
      doubleKeyMap0.remove(object0, integer1);
      HashMap<Object, Map<String, Integer>> hashMap0 = new HashMap<Object, Map<String, Integer>>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>(hashMap0, class0);
      Integer integer2 = doubleKeyMap1.get((Object) "fEKRWi_:TPw^A{S", "");
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(class0);
      HashMap<Object, Map<Object, Integer>> hashMap0 = new HashMap<Object, Map<Object, Integer>>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(hashMap0);
      Integer integer0 = new Integer(1809);
      doubleKeyMap1.remove((Object) integer0);
      doubleKeyMap1.get((Object) "", (Object) doubleKeyMap0);
      HashMap<Integer, Map<Integer, String>> hashMap1 = new HashMap<Integer, Map<Integer, String>>(950, 950);
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap2 = new DoubleKeyMap<Integer, Integer, String>(hashMap1);
      Integer integer1 = new Integer(950);
      doubleKeyMap2.remove(integer1);
      DoubleKeyMap<Map<Integer, Integer>, String, Object> doubleKeyMap3 = new DoubleKeyMap<Map<Integer, Integer>, String, Object>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap4 = new DoubleKeyMap<String, Object, Integer>(class0);
      Map<Integer, Integer> map0 = doubleKeyMap4.newMap();
      doubleKeyMap3.put(map0, "", (Object) integer0);
      Map<Integer, Integer> map1 = doubleKeyMap4.newMap();
      Object object0 = doubleKeyMap3.remove(map1, "");
      assertFalse(object0.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap1.put("us.codecraft.webmagic.utils.MultiKeyMapBase", object0);
      hashMap0.put("us.codecraft.webmagic.utils.MultiKeyMapBase", hashMap1);
      doubleKeyMap0.put("us.codecraft.webmagic.utils.MultiKeyMapBase", "", (Object) hashMap0);
      HashMap<Integer, Map<String, Integer>> hashMap2 = new HashMap<Integer, Map<String, Integer>>();
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Integer>(hashMap2);
      hashMap2.clone();
      doubleKeyMap1.remove((Integer) null, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap3 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap3.newMap();
      Map<String, Map<Object, String>> map0 = doubleKeyMap3.newMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(class0);
      Class<Map> class1 = Map.class;
      HashMap<Object, Map<String, Integer>> hashMap0 = new HashMap<Object, Map<String, Integer>>();
      DoubleKeyMap<String, String, String> doubleKeyMap1 = new DoubleKeyMap<String, String, String>();
      Map<String, Integer> map0 = doubleKeyMap1.newMap();
      hashMap0.put(class1, map0);
      DoubleKeyMap<Object, String, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, String, Integer>(hashMap0, class1);
      Integer integer0 = doubleKeyMap2.get((Object) class1, "[qq^d2j(q");
      assertNull(integer0);
  }
}
