/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:02:15 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassReader_ESTest extends ClassReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader("?6{4DJWx;OBTf");
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Class not found
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      classReader0.getClassName();
      // Undeclared exception!
      try { 
        classReader0.readLabel(387, (Label[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      ClassWriter classWriter0 = new ClassWriter(1);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      int int0 = 2007;
      classReader0.accept((ClassVisitor) classAdapter0, 2007);
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, (-188), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      classReader0.getClassName();
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(classReader0.b, 511, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 842
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      classReader0.getInterfaces();
      classReader0.getInterfaces();
      Attribute[] attributeArray0 = new Attribute[7];
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = attribute0.next;
      attributeArray0[0] = null;
      Attribute attribute2 = new Attribute("Y!]C|GZPqjQAo[");
      attributeArray0[1] = attribute2;
      Attribute attribute3 = new Attribute("Y!]C|GZPqjQAo[");
      attributeArray0[2] = attribute3;
      Attribute attribute4 = new Attribute("Y!]C|GZPqjQAo[");
      attributeArray0[3] = attribute4;
      Attribute attribute5 = attribute3.next;
      attributeArray0[4] = null;
      Attribute attribute6 = attribute2.next;
      attributeArray0[5] = null;
      Attribute attribute7 = attribute4.next;
      attributeArray0[6] = null;
      // Undeclared exception!
      try { 
        classReader0.accept((ClassVisitor) null, attributeArray0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      classReader0.getInterfaces();
      classReader0.getInterfaces();
      Attribute[] attributeArray0 = new Attribute[7];
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = attribute0.next;
      attributeArray0[0] = null;
      ClassWriter classWriter0 = new ClassWriter((-1957));
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 810);
      Attribute attribute2 = new Attribute("Y!]C|GZPqjQAo[");
      attributeArray0[1] = attribute2;
      Attribute attribute3 = new Attribute("Y!]C|GZPqjQAo[");
      attributeArray0[2] = attribute3;
      Attribute attribute4 = new Attribute("Y!]C|GZPqjQAo[");
      attributeArray0[3] = attribute4;
      Attribute attribute5 = attribute3.next;
      attributeArray0[4] = null;
      attribute0.next = attribute4;
      Attribute attribute6 = attribute2.next;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        classReader0.readConst(35, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 35
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 63);
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      Attribute[] attributeArray0 = new Attribute[1];
      Attribute attribute0 = new Attribute("LocalVariableTypeTable");
      classReader0.accept((ClassVisitor) classAdapter0, attributeArray0, 63);
      Label[] labelArray0 = new Label[0];
      // Undeclared exception!
      try { 
        classReader0.readLabel(381, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 381
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      
      ClassWriter classWriter0 = new ClassWriter(8);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classReader0.accept((ClassVisitor) classWriter0, 1);
      assertEquals(33, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertNotSame(classReader0, classReader1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      ClassReader classReader2 = new ClassReader(classReader1.b, 1531, 4);
      assertEquals(49, classReader1.getAccess());
      assertEquals(5, classReader2.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1671, classReader2.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader2);
      
      // Undeclared exception!
      try { 
        classReader2.getInterfaces();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      assertNotNull(classReader0);
      
      ClassReader classReader1 = new ClassReader(classReader0.b, 530, 4);
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(560, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      
      short short0 = classReader0.readShort(114);
      assertEquals(33, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertNotSame(classReader0, classReader1);
      assertEquals((short)29758, short0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      
      int int0 = classReader0.getAccess();
      assertEquals(33, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertNotSame(classReader0, classReader1);
      assertEquals(33, int0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = 'G';
      charArray0[2] = '4';
      charArray0[3] = '@';
      charArray0[4] = 'G';
      charArray0[5] = '!';
      // Undeclared exception!
      try { 
        classReader1.readClass((-1276), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(530, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader1);
      
      ClassWriter classWriter0 = new ClassWriter(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classReader1.accept((ClassVisitor) classWriter0, 1);
      assertEquals(49, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader1, classReader0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)12;
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(byteArray0, 2, (-1912));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(530, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      
      String string0 = classReader0.getClassName();
      assertEquals(33, classReader0.getAccess());
      assertEquals("org/apache/commons/io/filefilter/TrueFileFilter", string0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(530, classReader0.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = '7';
      charArray0[2] = 'd';
      charArray0[3] = '7';
      charArray0[4] = 'H';
      charArray0[5] = '6';
      charArray0[6] = '7';
      charArray0[7] = 'H';
      // Undeclared exception!
      try { 
        classReader0.readConst(1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(530, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter((-1902));
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      Item item0 = classWriter0.newFieldItem("tUd!J", "org.apache.commons.io.filefilter.TrueFileFilter", "RuntimeInvisibleParameterAnnotations");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(item0);
      
      FieldVisitor fieldVisitor0 = classWriter0.visitField(4, "org.apache.commons.io.filefilter.TrueFileFilter", "tUd!J", "", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(fieldVisitor0);
      
      String[] stringArray0 = classReader0.getInterfaces();
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(530, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        classReader0.getItem(4283);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4283
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(530, classReader0.header);
      assertNotNull(classReader0);
      
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader1);
      
      ClassWriter classWriter0 = new ClassWriter(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassReader classReader2 = null;
      try {
        classReader2 = new ClassReader(classReader1.b, 2, (-1912));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47629
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader0);
      
      ClassReader classReader1 = new ClassReader(classReader0.b);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader1);
      
      String string0 = classReader1.getClassName();
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertEquals("org/apache/commons/io/filefilter/TrueFileFilter", string0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(string0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      ClassWriter classWriter0 = new ClassWriter(classReader1, 131072);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classReader1.accept((ClassVisitor) classWriter0, 1);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      classReader1.accept((ClassVisitor) classWriter0, 1);
      assertEquals(33, classReader0.getAccess());
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader1, classReader0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader1.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      String string1 = classReader0.getSuperName();
      assertEquals(33, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(classReader0, classReader1);
      assertEquals("java/lang/Object", string1);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(string1);
      
      ClassReader classReader2 = new ClassReader("java/lang/Object");
      assertEquals(33, classReader2.getAccess());
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader2.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(classReader2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = '}';
      String[] stringArray0 = classReader2.getInterfaces();
      assertEquals(33, classReader2.getAccess());
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertNotSame(classReader2, classReader0);
      assertNotSame(classReader2, classReader1);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(927, classReader2.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertNotNull(stringArray0);
      
      short short0 = classReader0.readShort(392);
      assertEquals(33, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertFalse(classReader0.equals((Object)classReader2));
      assertNotSame(classReader0, classReader1);
      assertNotSame(classReader0, classReader2);
      assertEquals((short)29230, short0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(530, classReader0.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        classReader0.readConst(392, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 392
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          assertEquals(0, pipedInputStream0.available());
          assertNotNull(pipedInputStream0);
          
          ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
          assertEquals(49, classReader0.getAccess());
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1531, classReader0.header);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertNotNull(classReader0);
          
          ClassWriter classWriter0 = new ClassWriter(2);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          assertNotNull(classWriter0);
          
          classReader0.accept((ClassVisitor) classWriter0, 2);
          assertEquals(49, classReader0.getAccess());
          assertEquals(4, ClassReader.SKIP_FRAMES);
          assertEquals(1531, classReader0.header);
          assertEquals(8, ClassReader.EXPAND_FRAMES);
          assertEquals(2, ClassReader.SKIP_DEBUG);
          assertEquals(1, ClassReader.SKIP_CODE);
          assertEquals(1, ClassWriter.COMPUTE_MAXS);
          assertEquals(2, ClassWriter.COMPUTE_FRAMES);
          
          char[] charArray0 = new char[8];
          ClassReader classReader1 = null;
          try {
            classReader1 = new ClassReader(pipedInputStream0);
            fail("Expecting exception: IOException");
          
          } catch(Throwable e) {
             //
             // Pipe not connected
             //
             verifyException("java.io.PipedInputStream", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader0);
      
      ClassWriter classWriter0 = new ClassWriter(2);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classReader0.accept((ClassVisitor) classWriter0, (-36));
      assertEquals(49, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader0.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      char[] charArray0 = new char[8];
      ClassReader classReader1 = null;
      try {
        classReader1 = new ClassReader(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(530, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader0);
      
      ClassReader classReader1 = new ClassReader("org.apache.commons.io.IOCase");
      assertEquals(49, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader1);
      
      ClassWriter classWriter0 = new ClassWriter(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      classReader1.accept((ClassVisitor) classWriter0, 4);
      assertEquals(49, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader1, classReader0);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1531, classReader1.header);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      charArray0[5] = 'z';
      charArray0[6] = 'z';
      charArray0[7] = 'z';
      // Undeclared exception!
      try { 
        classReader1.readConst(2, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(530, classReader0.header);
      assertNotNull(classReader0);
      
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      
      ClassWriter classWriter0 = new ClassWriter(2);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertNotNull(classWriter0);
      
      ClassReader classReader2 = new ClassReader(classReader1.b);
      assertEquals(33, classReader1.getAccess());
      assertEquals(33, classReader2.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader2.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader2);
      
      classReader2.accept((ClassVisitor) classWriter0, (-1286));
      int int0 = (-3560);
      ClassReader classReader3 = new ClassReader(classReader0.b, classWriter0.COMPUTE_FRAMES, int0);
      int int1 = 4;
      classReader1.accept((ClassVisitor) classWriter0, int1);
      classReader1.getInterfaces();
      classReader3.getInterfaces();
      ClassReader classReader4 = new ClassReader(pipedInputStream0);
      classReader0.getInterfaces();
      classReader1.copyPool(classWriter0);
      classReader3.getInterfaces();
      ClassReader classReader5 = new ClassReader(pipedInputStream0);
      classReader5.getInterfaces();
      char char0 = '0';
      char char1 = '#';
      char[] charArray0 = new char[6];
      charArray0[0] = char0;
      charArray0[0] = char1;
      Attribute[] attributeArray0 = null;
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, classReader2.SKIP_FRAMES);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(530, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader0);
      
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      
      ClassWriter classWriter0 = new ClassWriter(480);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      ClassReader classReader2 = new ClassReader(classReader1.b);
      assertEquals(33, classReader1.getAccess());
      assertEquals(33, classReader2.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertFalse(classReader2.equals((Object)classReader1));
      assertFalse(classReader2.equals((Object)classReader0));
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8070, classReader2.header);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertNotNull(classReader2);
      
      classReader2.accept((ClassVisitor) classWriter0, 8);
      int int0 = 241;
      ClassReader classReader3 = new ClassReader(classReader0.b, classReader2.SKIP_FRAMES, int0);
      int int1 = 19;
      classReader3.accept((ClassVisitor) classWriter0, int1);
      classReader3.getInterfaces();
      classReader1.getInterfaces();
      ClassReader classReader4 = new ClassReader(pipedInputStream0);
      classReader1.getInterfaces();
      classReader2.copyPool(classWriter0);
      classReader2.getInterfaces();
      ClassReader classReader5 = new ClassReader(pipedInputStream0);
      classReader5.getInterfaces();
      int int2 = 144;
      char[] charArray0 = new char[0];
      classReader1.readConst(int2, charArray0);
      Locale.getISOLanguages();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(530, classReader0.header);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertNotNull(classReader0);
      
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader1.header);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertNotNull(classReader1);
      
      ClassWriter classWriter0 = new ClassWriter(480);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      classReader1.accept((ClassVisitor) classWriter0, 2);
      char[] charArray0 = new char[5];
      Label label0 = new Label();
      Label label1 = label0.next;
      classReader1.readUTF8(530, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.TrueFileFilter");
      assertEquals(33, classReader0.getAccess());
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(530, classReader0.header);
      assertNotNull(classReader0);
      
      ClassReader classReader1 = new ClassReader("wheel.asm.ClassReader");
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader1.header);
      assertNotNull(classReader1);
      
      ClassWriter classWriter0 = new ClassWriter(480);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      assertNotNull(classWriter0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      classReader0.accept((ClassVisitor) classWriter0, 8);
      assertEquals(33, classReader0.getAccess());
      assertFalse(classReader0.equals((Object)classReader1));
      assertNotSame(classReader0, classReader1);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(530, classReader0.header);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
      
      int int0 = classReader1.getAccess();
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader1, classReader0);
      assertEquals(33, int0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader1.header);
      
      short short0 = classReader1.readShort(91);
      assertEquals(33, classReader1.getAccess());
      assertFalse(classReader1.equals((Object)classReader0));
      assertNotSame(classReader1, classReader0);
      assertEquals((short)2560, short0);
      assertEquals(8, ClassReader.EXPAND_FRAMES);
      assertEquals(1, ClassReader.SKIP_CODE);
      assertEquals(2, ClassReader.SKIP_DEBUG);
      assertEquals(4, ClassReader.SKIP_FRAMES);
      assertEquals(8070, classReader1.header);
      
      classReader1.copyPool(classWriter0);
      Attribute attribute0 = new Attribute("(L");
      Frame frame0 = new Frame();
      Item item0 = classWriter0.newInteger((short)2560);
      ClassWriter classWriter1 = new ClassWriter(185);
      frame0.execute(1, 8, classWriter1, item0);
      Label label0 = frame0.owner;
      classReader1.getInterfaces();
      ClassReader classReader2 = new ClassReader(attribute0.type);
      classReader2.getInterfaces();
  }
}
