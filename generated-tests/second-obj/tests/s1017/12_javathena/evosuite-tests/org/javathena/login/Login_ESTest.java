/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:18:55 GMT 2018
 */

package org.javathena.login;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.channels.FileChannel;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromAdmin;
import org.javathena.login.parse.FromChar;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Login login0 = new Login();
      Login.setPASSWORDENC(10);
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      login0.do_initXML();
      int int0 = login0.check_ipmask(2107, "- to create new accounts with a limited time: time of creation %d second(s).");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Login login0 = new Login();
      login0.save_config_in_log();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      int int0 = login0.check_ipmask(2107, "Q");
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      Login.getPASSWORDENC();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Login.mmo_auth_initXML();
      Login.display_title();
      Login login0 = new Login();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      login0.getLog_fp();
      Login.mmo_auth_syncXML();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      login0.check_auth_sync();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      login0.check_ip(inetAddress0);
      Login.mmo_auth_syncXML();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      login_Timer_interval_check_auth_sync0.run();
      login0.getAuth_max();
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      login0.getOut();
      Login.display_title();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initXML();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  : Content is not allowed in prolog.
         //
         verifyException("com.thoughtworks.xstream.io.xml.DomDriver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Login login0 = new Login();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('v');
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/12_javathena/save/account.xml");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      Login.mmo_auth_syncXML();
      int int0 = Login.mmo_auth_initXML();
      assertEquals(0, int0);
      
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      login0.check_ip(inetAddress0);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("2@m.BzP%.qUJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Socket_data socket_data0 = null;
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      Login.getMd5Data(socket_data0);
      assertEquals("2345678910111213", socket_data0.getMd5key());
      assertEquals(0, socket_data0.getEof());
      
      int int0 = Login.getPASSWORDENC();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Login.getPASSWORDENC();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Login.version((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      int int0 = login0.check_ipmask(2107, "- to create new accounts with a limited time: time of creation %d second(s).");
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_initTXT();
      FromChar fromChar0 = new FromChar();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("conf/subnet_athena.conf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Login login0 = new Login();
      ACO aCO0 = ACO.STRSIZE;
      ConfigurationManagement.setAccess_order(aCO0);
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      assertEquals(0, login0.getAuth_max());
      
      Login.mmo_auth_initXML();
      int int0 = Login.mmo_auth_initXML();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IDBManagementLogin iDBManagementLogin0 = Login.getDbManagemtType();
      assertNull(iDBManagementLogin0);
      
      Login.display_title();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-43);
      Login.showTab(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)2, (byte)79, (byte)40, (byte)10, (byte) (-43)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "m!;\"N'{iq5";
      boolean boolean0 = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "m!;\"N'{iq5");
      assertFalse(boolean0);
      
      Login.login_log((String) null);
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      
      IDBManagementLogin iDBManagementLogin0 = Login.getDbManagemtType();
      assertNull(iDBManagementLogin0);
      
      login0.do_final();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      int int0 = login0.getAuth_num();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, int0);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      
      File file0 = login0.getLog_fp();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNull(file0);
      
      // Undeclared exception!
      try { 
        login0.parse_console("7fD");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login0);
      
      ACO aCO0 = ACO.STRSIZE;
      ConfigurationManagement.setAccess_order(aCO0);
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login_ConnectionListener0);
      
      login_ConnectionListener0.close();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      login_ConnectionListener0.run();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/12_javathena/save/account.xml");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      assertFalse(boolean0);
      
      int int0 = Login.mmo_auth_initXML();
      assertEquals(0, int0);
      
      int int1 = Login.mmo_auth_initXML();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertEquals("/192.168.1.42", inetAddress0.toString());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("192.168.1.42", inetAddress0.getHostAddress());
      assertNotNull(inetAddress0);
      
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, 0, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@92000a12
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      
      login0.setAuth_max(50);
      assertEquals(0, login0.getAuth_num());
      assertEquals(50, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      
      // Undeclared exception!
      try { 
        Login.codingKey((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      
      login0.do_initXML();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      
      int[] intArray0 = new int[6];
      intArray0[5] = 30;
      intArray0[1] = 100000000;
      intArray0[2] = 100000000;
      int int0 = login0.parse_console("c>");
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, int0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      
      InetAddress inetAddress0 = MockInetAddress.getByName("conf/subnet_athena.conf");
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertEquals("conf/subnet_athena.conf/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertNotNull(inetAddress0);
      
      int int1 = Login.getPASSWORDENC();
      assertFalse(int1 == int0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login0);
      
      int[] intArray0 = login0.getServer_fd();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(intArray0);
      
      byte[] byteArray0 = null;
      try { 
        MockInetAddress.getByAddress("conf/subnet_athena.conf", (byte[]) null);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(login0);
      
      login0.do_initTXT();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      
      UserManagement.addAccountIdCount();
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      MockSocket mockSocket0 = new MockSocket(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertNotNull(mockSocket0);
      
      FromClient fromClient0 = new FromClient();
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertEquals(30000, FromClient.VERSION);
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertNotNull(fromClient0);
      
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromClient0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertFalse(mockSocket0.isInputShutdown());
      assertFalse(mockSocket0.isBound());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertNull(socket_data0.getType());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertNull(socket_data0.getName());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertEquals(30000, FromClient.VERSION);
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertNotNull(socket_data0);
      
      Login login1 = null;
      // Undeclared exception!
      try { 
        login0.parse_admin(516, socket_data0, (Login) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('v');
      assertEquals("v", stringWriter0.toString());
      assertEquals("v", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, false);
      assertEquals("v", stringWriter0.toString());
      assertEquals("v", stringWriter1.toString());
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.format("conf/subnet_athena.conf", (Object[]) null);
      assertEquals("vconf/subnet_athena.conf", stringWriter0.toString());
      assertEquals("vconf/subnet_athena.conf", stringWriter1.toString());
      assertNotNull(printWriter0);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      login0.setOut(printWriter0);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals("vconf/subnet_athena.conf", stringWriter0.toString());
      assertEquals("vconf/subnet_athena.conf", stringWriter1.toString());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      Login.mmo_auth_syncXML();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      
      login0.do_initXML();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      
      Login.display_title();
      int[] intArray0 = new int[6];
      intArray0[5] = 30;
      intArray0[1] = 100000000;
      intArray0[5] = 100000000;
      int int0 = login0.parse_console("alive");
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, int0);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      
      // Undeclared exception!
      try { 
        login0.do_final();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login1);
      
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      assertFalse(login0.equals((Object)login1));
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login_ConnectionListener0);
      
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.save_config_in_log();
      assertFalse(login0.equals((Object)login1));
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotSame(login0, login1);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login2);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login2.new Timer_interval_check_auth_sync();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I5PYYX;5IU#MW{BU");
      assertFalse(boolean0);
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login1);
      
      Login.ConnectionListener login_ConnectionListener0 = login1.new ConnectionListener();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login_ConnectionListener0);
      
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      login1.save_config_in_log();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotSame(login1, login0);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login1));
      assertFalse(login2.equals((Object)login0));
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login2);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertFalse(login0.equals((Object)login2));
      assertFalse(login0.equals((Object)login1));
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login0);
      
      FromAdmin fromAdmin0 = new FromAdmin();
      assertNotNull(fromAdmin0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("warning_25", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login1);
      
      ConfigurationManagement.setAccess_denynum(10);
      int int0 = login0.parse_console("ON");
      assertFalse(login0.equals((Object)login1));
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, int0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotSame(login0, login1);
      
      login0.do_initXML();
      assertFalse(login0.equals((Object)login1));
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotSame(login0, login1);
      
      Login login2 = null;
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("ON", 30);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@7c054b0e
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      
      FromAdmin fromAdmin0 = new FromAdmin();
      assertNotNull(fromAdmin0);
      
      login0.do_initTXT();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login1);
      
      int int0 = login0.parse_console("ON");
      assertFalse(login0.equals((Object)login1));
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, int0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotSame(login0, login1);
      
      login0.do_initXML();
      assertFalse(login0.equals((Object)login1));
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotSame(login0, login1);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login1));
      assertFalse(login2.equals((Object)login0));
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login2);
      
      boolean boolean0 = login0.yesNoOnOffToBoolean("ON");
      assertFalse(login0.equals((Object)login1));
      assertFalse(login0.equals((Object)login2));
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertTrue(boolean0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotSame(login0, login1);
      assertNotSame(login0, login2);
      
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertNotNull(inetAddress0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)117;
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [117]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertNotNull(login0);
      
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      
      UserManagement.addAccountIdCount();
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login1);
      
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("conf/subnet_athena.conf", false);
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 47);
      assertNotNull(bufferedOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      assertNotNull(objectOutputStream0);
      
      bufferedOutputStream0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(objectOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertTrue(fileChannel0.isOpen());
      assertEquals(4L, fileChannel0.position());
      assertEquals(4L, fileChannel0.size());
      assertNotNull(fileChannel0);
      
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = new EvoSuiteLocalAddress("192.168.1.42", 6900);
      boolean boolean1 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, "conf/subnet_athena.conf");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      mockFileOutputStream0.flush();
      PrintWriter printWriter0 = mockPrintWriter0.append('5');
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      login0.setOut(printWriter0);
      assertFalse(login0.equals((Object)login1));
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertNotSame(login0, login1);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      int int0 = login0.parse_console("yMm>");
      assertFalse(login0.equals((Object)login1));
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, int0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertNotSame(login0, login1);
      
      InetAddress inetAddress0 = MockInetAddress.getByName("conf/subnet_athena.conf");
      assertFalse(inetAddress0.isLoopbackAddress());
      assertEquals("conf/subnet_athena.conf/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertNotNull(inetAddress0);
      
      int int1 = Login.mmo_auth_initTXT();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      byteArray0[1] = (byte) (-91);
      Auth_data auth_data0 = UserManagement.addUserTXT("yMm>", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'r');
      assertEquals("-", auth_data0.getEmail());
      assertEquals(0, auth_data0.getClientType());
      assertEquals(0L, auth_data0.getBan_until_time());
      assertEquals(2000000, (int)auth_data0.getAccount_id());
      assertEquals('r', auth_data0.getSex());
      assertEquals(0L, auth_data0.getConnect_until_time());
      assertEquals("conf/subnet_athena.conf", auth_data0.getPass());
      assertEquals(0, auth_data0.getLogincount());
      assertEquals(0, auth_data0.getState());
      assertEquals(0, auth_data0.getLogin_id2());
      assertEquals(0, auth_data0.getLogin_id1());
      assertEquals(0, auth_data0.getLevel());
      assertEquals(0, auth_data0.getDelflag());
      assertFalse(auth_data0.isResetLogincoun());
      assertEquals(0, auth_data0.getAccount_reg2_num());
      assertEquals(0, auth_data0.getVersion());
      assertNull(auth_data0.getLast_ip());
      assertEquals("yMm>", auth_data0.getUserid());
      assertEquals((-1), auth_data0.getCharserver());
      assertNotNull(auth_data0);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(login2);
      
      Login.ConnectionListener login_ConnectionListener0 = login2.new ConnectionListener();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(login_ConnectionListener0);
      
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      
      UserManagement.addAccountIdCount();
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("conf/subnet_athena.conf", false);
      assertNotNull(mockFileOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 47);
      assertNotNull(bufferedOutputStream0);
      
      int int0 = login1.parse_console("conf/subnet_athena.conf");
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, int0);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotSame(login1, login0);
      
      FromAdmin fromAdmin0 = new FromAdmin();
      assertNotNull(fromAdmin0);
      
      PrintWriter printWriter0 = login1.getOut();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(printWriter0);
      assertNotSame(login1, login0);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login2);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login2.new Timer_interval_check_auth_sync();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      
      int int1 = Calendar.DAY_OF_WEEK;
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      InetAddress inetAddress0 = MockInetAddress.getByName("info_2");
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertEquals("info_2/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertNotNull(inetAddress0);
      
      int int2 = Calendar.LONG_STANDALONE;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(32770, int2);
      
      Auth_data auth_data0 = UserManagement.addUserTXT("mt6", "info_2", "status", 'A');
      assertEquals(0, auth_data0.getAccount_reg2_num());
      assertEquals(0, auth_data0.getVersion());
      assertFalse(auth_data0.isResetLogincoun());
      assertEquals(0, auth_data0.getState());
      assertEquals(0, auth_data0.getLogin_id2());
      assertEquals(0, auth_data0.getDelflag());
      assertEquals(0, auth_data0.getLogin_id1());
      assertEquals('A', auth_data0.getSex());
      assertEquals(0, auth_data0.getLogincount());
      assertEquals(0, auth_data0.getLevel());
      assertEquals(0L, auth_data0.getConnect_until_time());
      assertEquals(0L, auth_data0.getBan_until_time());
      assertEquals(0, auth_data0.getClientType());
      assertEquals("-", auth_data0.getEmail());
      assertEquals("info_2", auth_data0.getPass());
      assertNull(auth_data0.getLast_ip());
      assertEquals("mt6", auth_data0.getUserid());
      assertEquals((-1), auth_data0.getCharserver());
      assertEquals(2000000, (int)auth_data0.getAccount_id());
      assertNotNull(auth_data0);
      
      Login.ConnectionListener login_ConnectionListener0 = login2.new ConnectionListener();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, login2.getAuth_max());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login_ConnectionListener0);
      
      Login login3 = new Login();
      assertFalse(login3.equals((Object)login0));
      assertFalse(login3.equals((Object)login1));
      assertFalse(login3.equals((Object)login2));
      assertEquals(0, login3.getAuth_max());
      assertEquals(0, login3.getAuth_num());
      assertEquals(2, login3.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login3);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync1 = login0.new Timer_interval_check_auth_sync();
      assertFalse(login0.equals((Object)login1));
      assertFalse(login0.equals((Object)login3));
      assertFalse(login0.equals((Object)login2));
      assertFalse(login_Timer_interval_check_auth_sync1.equals((Object)login_Timer_interval_check_auth_sync0));
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync1.scheduledExecutionTime());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login_Timer_interval_check_auth_sync1);
      
      Login.mmo_auth_syncTXT();
      FromAdmin fromAdmin1 = new FromAdmin();
      assertFalse(fromAdmin1.equals((Object)fromAdmin0));
      assertNotNull(fromAdmin1);
      
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login0);
      
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      
      ConfigurationManagement.setAccess_allownum((-1632781640));
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login1);
      
      int int0 = login0.parse_console("conf/subnet_athena.conf");
      assertFalse(login0.equals((Object)login1));
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, int0);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotSame(login0, login1);
      
      login0.do_initXML();
      assertFalse(login0.equals((Object)login1));
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotSame(login0, login1);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_max());
      assertEquals(0, login2.getAuth_num());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login2);
      
      int int1 = login2.parse_console("ct}");
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertTrue(int1 == int0);
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_max());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, int1);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotSame(login2, login0);
      assertNotSame(login2, login1);
      
      InetAddress inetAddress0 = MockInetAddress.getByName("conf/subnet_athena.conf");
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("conf/subnet_athena.conf/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertNotNull(inetAddress0);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login1.new Timer_interval_check_auth_sync();
      assertFalse(login1.equals((Object)login0));
      assertFalse(login1.equals((Object)login2));
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      
      MySQLConfig.setLogin_server_port(4095);
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync1 = login1.new Timer_interval_check_auth_sync();
      assertFalse(login1.equals((Object)login0));
      assertFalse(login1.equals((Object)login2));
      assertFalse(login_Timer_interval_check_auth_sync1.equals((Object)login_Timer_interval_check_auth_sync0));
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync1.scheduledExecutionTime());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login_Timer_interval_check_auth_sync1);
      
      login_Timer_interval_check_auth_sync1.run();
      assertFalse(login1.equals((Object)login0));
      assertFalse(login1.equals((Object)login2));
      assertFalse(login_Timer_interval_check_auth_sync1.equals((Object)login_Timer_interval_check_auth_sync0));
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync1.scheduledExecutionTime());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotSame(login1, login0);
      assertNotSame(login1, login2);
      assertNotSame(login_Timer_interval_check_auth_sync1, login_Timer_interval_check_auth_sync0);
      
      Login login3 = new Login();
      assertFalse(login3.equals((Object)login2));
      assertFalse(login3.equals((Object)login1));
      assertFalse(login3.equals((Object)login0));
      assertEquals(2, login3.getPASSWORDENC());
      assertEquals(0, login3.getAuth_max());
      assertEquals(0, login3.getAuth_num());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(login3);
      
      int int2 = Calendar.FRIDAY;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(6, int2);
      
      Login login4 = new Login();
      assertFalse(login4.equals((Object)login1));
      assertFalse(login4.equals((Object)login3));
      assertFalse(login4.equals((Object)login0));
      assertFalse(login4.equals((Object)login2));
      assertEquals(2, login4.getPASSWORDENC());
      assertEquals(0, login4.getAuth_max());
      assertEquals(0, login4.getAuth_num());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login4);
      
      login2.save_config_in_log();
      assertFalse(login2.equals((Object)login3));
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertFalse(login2.equals((Object)login4));
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_max());
      assertEquals(0, login2.getAuth_num());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotSame(login2, login3);
      assertNotSame(login2, login0);
      assertNotSame(login2, login1);
      assertNotSame(login2, login4);
      
      int int3 = login2.parse_console("status");
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(login2.equals((Object)login3));
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertFalse(login2.equals((Object)login4));
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_max());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0, int3);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotSame(login2, login3);
      assertNotSame(login2, login0);
      assertNotSame(login2, login1);
      assertNotSame(login2, login4);
      
      FromChar fromChar0 = new FromChar();
      assertEquals(10038, FromChar.WAN_UPDATE);
      assertEquals(10027, FromChar.ACCOUNT_TO_ONLINE);
      assertEquals(10021, FromChar.BAN_REQUEST);
      assertEquals(10039, FromChar.REQUEST_ALL_OFFLINE);
      assertEquals(10030, FromChar.REQUEST_ACCOUNT_REG2);
      assertEquals(10002, FromChar.ACCOUNT_AUTHENTIFY);
      assertEquals(10028, FromChar.ACCOUNT_TO_OFFLINE);
      assertEquals(10006, FromChar.REQUEST_ACCOUNT_DATA);
      assertEquals(10018, FromChar.CHANGE_AN_EMAIL);
      assertEquals(10004, FromChar.NUMBER_OF_USER);
      assertEquals(10005, FromChar.EMAIL_CREATION);
      assertEquals(10029, FromChar.ONLINE_ACCOUNT_LIST);
      assertEquals(10009, FromChar.PING_REQUEST);
      assertEquals(10026, FromChar.UNBAN);
      assertEquals(10020, FromChar.STATUS_CHANGE);
      assertEquals(10024, FromChar.ACCOUNT_REG2);
      assertEquals(10023, FromChar.CHANGE_SEX);
      assertEquals((-257), FromChar.END_OF_CONNECTION);
      assertNotNull(fromChar0);
      
      Socket_data socket_data0 = new Socket_data((Socket) null, fromChar0);
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getMaintenance());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getMd5key());
      assertNull(socket_data0.getName());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertNull(socket_data0.getType());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(10038, FromChar.WAN_UPDATE);
      assertEquals(10027, FromChar.ACCOUNT_TO_ONLINE);
      assertEquals(10021, FromChar.BAN_REQUEST);
      assertEquals(10039, FromChar.REQUEST_ALL_OFFLINE);
      assertEquals(10030, FromChar.REQUEST_ACCOUNT_REG2);
      assertEquals(10002, FromChar.ACCOUNT_AUTHENTIFY);
      assertEquals(10028, FromChar.ACCOUNT_TO_OFFLINE);
      assertEquals(10006, FromChar.REQUEST_ACCOUNT_DATA);
      assertEquals(10018, FromChar.CHANGE_AN_EMAIL);
      assertEquals(10004, FromChar.NUMBER_OF_USER);
      assertEquals(10005, FromChar.EMAIL_CREATION);
      assertEquals(10029, FromChar.ONLINE_ACCOUNT_LIST);
      assertEquals(10009, FromChar.PING_REQUEST);
      assertEquals(10026, FromChar.UNBAN);
      assertEquals(10020, FromChar.STATUS_CHANGE);
      assertEquals(10024, FromChar.ACCOUNT_REG2);
      assertEquals(10023, FromChar.CHANGE_SEX);
      assertEquals((-257), FromChar.END_OF_CONNECTION);
      assertNotNull(socket_data0);
      
      Login.mmo_auth_syncTXT();
      Login login5 = new Login();
      assertFalse(login5.equals((Object)login1));
      assertFalse(login5.equals((Object)login2));
      assertFalse(login5.equals((Object)login3));
      assertFalse(login5.equals((Object)login0));
      assertFalse(login5.equals((Object)login4));
      assertEquals(0, login5.getAuth_max());
      assertEquals(0, login5.getAuth_num());
      assertEquals(2, login5.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login5);
      
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isConnected());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isInputShutdown());
      assertNotNull(mockSocket0);
      
      FromAdmin fromAdmin0 = new FromAdmin();
      assertNotNull(fromAdmin0);
      
      MockSocket mockSocket1 = new MockSocket();
      assertFalse(mockSocket1.equals((Object)mockSocket0));
      assertFalse(mockSocket1.isBound());
      assertFalse(mockSocket1.isClosed());
      assertEquals("Socket[unconnected]", mockSocket1.toString());
      assertFalse(mockSocket1.isConnected());
      assertFalse(mockSocket1.isOutputShutdown());
      assertFalse(mockSocket1.isInputShutdown());
      assertNotNull(mockSocket1);
      
      int int0 = mockSocket1.getTrafficClass();
      assertFalse(mockSocket1.equals((Object)mockSocket0));
      assertFalse(mockSocket1.isBound());
      assertFalse(mockSocket1.isClosed());
      assertEquals("Socket[unconnected]", mockSocket1.toString());
      assertFalse(mockSocket1.isConnected());
      assertFalse(mockSocket1.isOutputShutdown());
      assertFalse(mockSocket1.isInputShutdown());
      assertEquals(0, int0);
      assertNotSame(mockSocket1, mockSocket0);
      
      UserManagement.addAccountIdCount((-91));
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login0);
      
      login0.do_initXML();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login1);
      
      int int1 = login1.parse_console("n}1Ra_dVt32spY*3x");
      assertFalse(login1.equals((Object)login0));
      assertTrue(int1 == int0);
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, int1);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotSame(login1, login0);
      
      InetAddress inetAddress0 = MockInetAddress.getByName("]6WFC%Y");
      assertEquals("]6WFC%Y/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertNotNull(inetAddress0);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login1.new Timer_interval_check_auth_sync();
      assertFalse(login1.equals((Object)login0));
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync1 = login1.new Timer_interval_check_auth_sync();
      assertFalse(login1.equals((Object)login0));
      assertFalse(login_Timer_interval_check_auth_sync1.equals((Object)login_Timer_interval_check_auth_sync0));
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync1.scheduledExecutionTime());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login_Timer_interval_check_auth_sync1);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login1));
      assertFalse(login2.equals((Object)login0));
      assertEquals(0, login2.getAuth_max());
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_num());
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login2);
      
      Login login3 = new Login();
      assertFalse(login3.equals((Object)login0));
      assertFalse(login3.equals((Object)login2));
      assertFalse(login3.equals((Object)login1));
      assertEquals(0, login3.getAuth_num());
      assertEquals(0, login3.getAuth_max());
      assertEquals(2, login3.getPASSWORDENC());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login3);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync2 = login3.new Timer_interval_check_auth_sync();
      assertFalse(login3.equals((Object)login0));
      assertFalse(login3.equals((Object)login2));
      assertFalse(login3.equals((Object)login1));
      assertFalse(login_Timer_interval_check_auth_sync2.equals((Object)login_Timer_interval_check_auth_sync0));
      assertFalse(login_Timer_interval_check_auth_sync2.equals((Object)login_Timer_interval_check_auth_sync1));
      assertEquals(0, login3.getAuth_num());
      assertEquals(0, login3.getAuth_max());
      assertEquals(2, login3.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync2.scheduledExecutionTime());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login_Timer_interval_check_auth_sync2);
      
      login_Timer_interval_check_auth_sync2.run();
      assertFalse(login3.equals((Object)login0));
      assertFalse(login3.equals((Object)login2));
      assertFalse(login3.equals((Object)login1));
      assertFalse(login_Timer_interval_check_auth_sync2.equals((Object)login_Timer_interval_check_auth_sync0));
      assertFalse(login_Timer_interval_check_auth_sync2.equals((Object)login_Timer_interval_check_auth_sync1));
      assertEquals(0, login3.getAuth_num());
      assertEquals(0, login3.getAuth_max());
      assertEquals(2, login3.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync2.scheduledExecutionTime());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotSame(login3, login0);
      assertNotSame(login3, login2);
      assertNotSame(login3, login1);
      assertNotSame(login_Timer_interval_check_auth_sync2, login_Timer_interval_check_auth_sync0);
      assertNotSame(login_Timer_interval_check_auth_sync2, login_Timer_interval_check_auth_sync1);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync3 = login0.new Timer_interval_check_auth_sync();
      assertFalse(login_Timer_interval_check_auth_sync3.equals((Object)login_Timer_interval_check_auth_sync2));
      assertFalse(login_Timer_interval_check_auth_sync3.equals((Object)login_Timer_interval_check_auth_sync1));
      assertFalse(login_Timer_interval_check_auth_sync3.equals((Object)login_Timer_interval_check_auth_sync0));
      assertFalse(login0.equals((Object)login1));
      assertFalse(login0.equals((Object)login2));
      assertFalse(login0.equals((Object)login3));
      assertEquals(0L, login_Timer_interval_check_auth_sync3.scheduledExecutionTime());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login_Timer_interval_check_auth_sync3);
      
      Login login4 = new Login();
      assertFalse(login4.equals((Object)login3));
      assertFalse(login4.equals((Object)login2));
      assertFalse(login4.equals((Object)login1));
      assertFalse(login4.equals((Object)login0));
      assertEquals(0, login4.getAuth_max());
      assertEquals(2, login4.getPASSWORDENC());
      assertEquals(0, login4.getAuth_num());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login4);
      
      // Undeclared exception!
      try { 
        login3.parse_console("shutdown");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login0);
      
      login0.do_initTXT();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      UserManagement.addAccountIdCount();
      login0.do_initTXT();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      UserManagement.addAccountIdCount(50);
      login0.do_initXML();
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login1);
      
      int int0 = login0.parse_console("ct}");
      assertFalse(login0.equals((Object)login1));
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, int0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotSame(login0, login1);
      
      InetAddress inetAddress0 = MockInetAddress.getByName("conf/subnet_athena.conf");
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertEquals("conf/subnet_athena.conf/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertNotNull(inetAddress0);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertFalse(login0.equals((Object)login1));
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync1 = login1.new Timer_interval_check_auth_sync();
      assertFalse(login1.equals((Object)login0));
      assertFalse(login_Timer_interval_check_auth_sync1.equals((Object)login_Timer_interval_check_auth_sync0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0L, login_Timer_interval_check_auth_sync1.scheduledExecutionTime());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login_Timer_interval_check_auth_sync1);
      
      Auth_data auth_data0 = UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "KZ=5TI4)N", 'U');
      assertEquals(0L, auth_data0.getConnect_until_time());
      assertEquals(0L, auth_data0.getBan_until_time());
      assertEquals(0, auth_data0.getClientType());
      assertEquals(2000000, (int)auth_data0.getAccount_id());
      assertNull(auth_data0.getLast_ip());
      assertEquals((-1), auth_data0.getCharserver());
      assertEquals("conf/subnet_athena.conf", auth_data0.getPass());
      assertEquals(0, auth_data0.getVersion());
      assertEquals(0, auth_data0.getLevel());
      assertEquals(0, auth_data0.getAccount_reg2_num());
      assertEquals(0, auth_data0.getLogin_id1());
      assertEquals("conf/subnet_athena.conf", auth_data0.getUserid());
      assertEquals(0, auth_data0.getLogincount());
      assertFalse(auth_data0.isResetLogincoun());
      assertEquals(0, auth_data0.getDelflag());
      assertEquals('U', auth_data0.getSex());
      assertEquals("-", auth_data0.getEmail());
      assertEquals(0, auth_data0.getState());
      assertEquals(0, auth_data0.getLogin_id2());
      assertNotNull(auth_data0);
      
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_max());
      assertEquals(0, login2.getAuth_num());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login2);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync2 = login2.new Timer_interval_check_auth_sync();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertFalse(login_Timer_interval_check_auth_sync2.equals((Object)login_Timer_interval_check_auth_sync1));
      assertFalse(login_Timer_interval_check_auth_sync2.equals((Object)login_Timer_interval_check_auth_sync0));
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_max());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0L, login_Timer_interval_check_auth_sync2.scheduledExecutionTime());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login_Timer_interval_check_auth_sync2);
      
      login_Timer_interval_check_auth_sync2.run();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertFalse(login_Timer_interval_check_auth_sync2.equals((Object)login_Timer_interval_check_auth_sync1));
      assertFalse(login_Timer_interval_check_auth_sync2.equals((Object)login_Timer_interval_check_auth_sync0));
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_max());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0L, login_Timer_interval_check_auth_sync2.scheduledExecutionTime());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotSame(login2, login0);
      assertNotSame(login2, login1);
      assertNotSame(login_Timer_interval_check_auth_sync2, login_Timer_interval_check_auth_sync1);
      assertNotSame(login_Timer_interval_check_auth_sync2, login_Timer_interval_check_auth_sync0);
      
      login_Timer_interval_check_auth_sync2.run();
      assertFalse(login2.equals((Object)login0));
      assertFalse(login2.equals((Object)login1));
      assertFalse(login_Timer_interval_check_auth_sync2.equals((Object)login_Timer_interval_check_auth_sync1));
      assertFalse(login_Timer_interval_check_auth_sync2.equals((Object)login_Timer_interval_check_auth_sync0));
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(0, login2.getAuth_max());
      assertEquals(0, login2.getAuth_num());
      assertEquals(0L, login_Timer_interval_check_auth_sync2.scheduledExecutionTime());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotSame(login2, login0);
      assertNotSame(login2, login1);
      assertNotSame(login_Timer_interval_check_auth_sync2, login_Timer_interval_check_auth_sync1);
      assertNotSame(login_Timer_interval_check_auth_sync2, login_Timer_interval_check_auth_sync0);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync3 = login1.new Timer_interval_check_auth_sync();
      assertFalse(login_Timer_interval_check_auth_sync3.equals((Object)login_Timer_interval_check_auth_sync2));
      assertFalse(login_Timer_interval_check_auth_sync3.equals((Object)login_Timer_interval_check_auth_sync0));
      assertFalse(login_Timer_interval_check_auth_sync3.equals((Object)login_Timer_interval_check_auth_sync1));
      assertFalse(login1.equals((Object)login2));
      assertFalse(login1.equals((Object)login0));
      assertEquals(0L, login_Timer_interval_check_auth_sync3.scheduledExecutionTime());
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_max());
      assertEquals(0, login1.getAuth_num());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login_Timer_interval_check_auth_sync3);
      
      Login login3 = new Login();
      assertFalse(login3.equals((Object)login1));
      assertFalse(login3.equals((Object)login0));
      assertFalse(login3.equals((Object)login2));
      assertEquals(0, login3.getAuth_max());
      assertEquals(0, login3.getAuth_num());
      assertEquals(2, login3.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login3);
      
      // Undeclared exception!
      try { 
        login0.parse_console("exit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Login login0 = new Login();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      login0.do_initXML();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      
      login0.do_initTXT();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      
      int int1 = Calendar.ERA;
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      FromAdmin fromAdmin0 = new FromAdmin();
      assertNotNull(fromAdmin0);
      
      PrintWriter printWriter0 = login0.getOut();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(printWriter0);
      
      int int2 = Calendar.LONG_STANDALONE;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(32770, int2);
      
      login0.save_config_in_log();
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      
      int int3 = login0.parse_console("wbTm");
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, int3);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      
      Login login1 = new Login();
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)59;
      Login login2 = new Login();
      assertFalse(login2.equals((Object)login1));
      assertFalse(login2.equals((Object)login0));
      assertEquals(0, login2.getAuth_max());
      assertEquals(0, login2.getAuth_num());
      assertEquals(2, login2.getPASSWORDENC());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertNotNull(login2);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      assertFalse(login0.equals((Object)login1));
      assertFalse(login0.equals((Object)login2));
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login_Timer_interval_check_auth_sync0);
      
      Login login3 = new Login();
      assertFalse(login3.equals((Object)login0));
      assertFalse(login3.equals((Object)login2));
      assertFalse(login3.equals((Object)login1));
      assertEquals(2, login3.getPASSWORDENC());
      assertEquals(0, login3.getAuth_num());
      assertEquals(0, login3.getAuth_max());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotNull(login3);
      
      login3.setAuth_max(50);
      assertFalse(login3.equals((Object)login0));
      assertFalse(login3.equals((Object)login2));
      assertFalse(login3.equals((Object)login1));
      assertEquals(2, login3.getPASSWORDENC());
      assertEquals(0, login3.getAuth_num());
      assertEquals(50, login3.getAuth_max());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotSame(login3, login0);
      assertNotSame(login3, login2);
      assertNotSame(login3, login1);
      
      int int4 = login3.parse_console("conf/subnet_athena.conf");
      assertFalse(login3.equals((Object)login0));
      assertFalse(login3.equals((Object)login2));
      assertFalse(login3.equals((Object)login1));
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertEquals(2, login3.getPASSWORDENC());
      assertEquals(0, login3.getAuth_num());
      assertEquals(50, login3.getAuth_max());
      assertEquals(0, int4);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertNotSame(login3, login0);
      assertNotSame(login3, login2);
      assertNotSame(login3, login1);
      
      InetAddress inetAddress0 = MockInetAddress.getByName("conf/subnet_athena.conf");
      assertFalse(inetAddress0.isMCGlobal());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("200.42.42.0", inetAddress0.getHostAddress());
      assertEquals("conf/subnet_athena.conf/200.42.42.0", inetAddress0.toString());
      assertFalse(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertNotNull(inetAddress0);
      
      int int5 = Login.mmo_auth_initTXT();
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertEquals(0, int5);
      
      FromAdmin fromAdmin1 = new FromAdmin();
      assertFalse(fromAdmin1.equals((Object)fromAdmin0));
      assertNotNull(fromAdmin1);
      
      Login.logUnknownPackets((Socket_data) null);
      Login login4 = new Login();
      assertFalse(login4.equals((Object)login1));
      assertFalse(login4.equals((Object)login2));
      assertFalse(login4.equals((Object)login3));
      assertFalse(login4.equals((Object)login0));
      assertEquals(2, login4.getPASSWORDENC());
      assertEquals(0, login4.getAuth_num());
      assertEquals(0, login4.getAuth_max());
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertNotNull(login4);
      
      Login login5 = new Login();
      assertFalse(login5.equals((Object)login4));
      assertFalse(login5.equals((Object)login0));
      assertFalse(login5.equals((Object)login2));
      assertFalse(login5.equals((Object)login1));
      assertFalse(login5.equals((Object)login3));
      assertEquals(0, login5.getAuth_max());
      assertEquals(0, login5.getAuth_num());
      assertEquals(2, login5.getPASSWORDENC());
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotNull(login5);
      
      boolean boolean0 = login5.yesNoOnOffToBoolean("OFF");
      assertFalse(login5.equals((Object)login4));
      assertFalse(login5.equals((Object)login0));
      assertFalse(login5.equals((Object)login2));
      assertFalse(login5.equals((Object)login1));
      assertFalse(login5.equals((Object)login3));
      assertEquals(0, login5.getAuth_max());
      assertEquals(0, login5.getAuth_num());
      assertEquals(2, login5.getPASSWORDENC());
      assertFalse(boolean0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertNotSame(login5, login4);
      assertNotSame(login5, login0);
      assertNotSame(login5, login2);
      assertNotSame(login5, login1);
      assertNotSame(login5, login3);
  }
}
