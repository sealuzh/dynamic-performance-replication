/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 15:49:44 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.Okio;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.logging.MockLogRecord;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Okio_ESTest extends Okio_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      try { 
        Okio.source((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pipe pipe0 = new Pipe(144L);
      Buffer buffer0 = pipe0.buffer;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-45);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString1);
      BufferedSource bufferedSource0 = Okio.buffer((Source) hashingSource0);
      assertNotNull(bufferedSource0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      try { 
        Okio.sink((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.source((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile(" text=");
      Sink sink0 = Okio.sink((File) mockFile0);
      assertNotNull(sink0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[0];
      int int0 = 0;
      sequenceInputStream0.read(byteArray0, 1, 0);
      sequenceInputStream0.close();
      Okio.source((InputStream) sequenceInputStream0);
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[1];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      Okio.source(path0, openOptionArray0);
      try { 
        Okio.sink((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("6HK5T3l@q5CR*", "timeout < 0: ");
      MockFile mockFile1 = new MockFile(mockFile0, "q(A96dc4q`2=2:6l'");
      mockFile1.toPath();
      AssertionError assertionError0 = new AssertionError(true);
      AssertionError assertionError1 = new AssertionError("okio.AsyncTimeout", assertionError0);
      assertionError1.fillInStackTrace();
      Okio.isAndroidGetsocknameError(assertionError1);
      Okio.blackhole();
      try { 
        MockURI.URI("DfFa6{bR", "timeout == null", "timeout < 0: ", "timeout == null");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: DfFa6{bR://timeout == nulltimeout%20%3C%200:%20#timeout%20==%20null
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Level level0 = Level.INFO;
      MockLogRecord mockLogRecord0 = new MockLogRecord(level0, "}2m%g8X*.");
      mockLogRecord0.setMillis(0L);
      mockLogRecord0.getThrown();
      AssertionError assertionError0 = new AssertionError("", (Throwable) null);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DSYNC;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.SPARSE;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.CREATE;
      StandardOpenOption standardOpenOption3 = StandardOpenOption.READ;
      MockFile mockFile0 = new MockFile("");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[4];
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      openOptionArray0[2] = (OpenOption) standardOpenOption1;
      openOptionArray0[3] = (OpenOption) standardOpenOption3;
      // Undeclared exception!
      try { 
        Okio.sink(path0, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // READ not allowed
         //
         verifyException("java.nio.file.spi.FileSystemProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("");
          Path path0 = mockFile0.toPath();
          OpenOption[] openOptionArray0 = new OpenOption[0];
          // Undeclared exception!
          try { 
            Okio.sink(path0, openOptionArray0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1556)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixChannelFactory.open(UnixChannelFactory.java:247)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:136)
             // sun.nio.fs.UnixChannelFactory.newFileChannel(UnixChannelFactory.java:148)
             // sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:212)
             // java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)
             // java.nio.file.Files.newOutputStream(Files.java:216)
             // okio.Okio.sink(Okio.java:193)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError(false);
      AssertionError assertionError1 = new AssertionError(true);
      AssertionError assertionError2 = new AssertionError((String) null, assertionError1);
      assertionError2.fillInStackTrace();
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError(true);
      MockFile mockFile0 = new MockFile((String) null, "l;e<e6{D+PvX<F+q");
      Sink sink0 = Okio.appendingSink(mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      realBufferedSink0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, true);
      assertionError0.printStackTrace((PrintWriter) mockPrintWriter0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-27);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      MockThrowable mockThrowable0 = new MockThrowable("l;e<e6{D+PvX<F+q");
      AssertionError assertionError1 = new AssertionError((String) null, mockThrowable0);
      AssertionError assertionError2 = new AssertionError();
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-3077L));
      Okio.appendingSink(mockFile0);
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[2];
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE;
      openOptionArray0[0] = (OpenOption) standardOpenOption0;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.SPARSE;
      openOptionArray0[1] = (OpenOption) standardOpenOption1;
      try { 
        Okio.source(path0, openOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError(true);
      MockFile mockFile0 = new MockFile((String) null, "l;e<e6{D+PvX<F+q");
      Sink sink0 = Okio.appendingSink(mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      mockFile0.getCanonicalPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, true);
      mockPrintWriter0.close();
      assertionError0.printStackTrace((PrintWriter) mockPrintWriter0);
      AssertionError assertionError1 = new AssertionError("okio.Okio", assertionError0);
      AssertionError assertionError2 = new AssertionError();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError(true);
      AssertionError assertionError1 = new AssertionError(true);
      Sink sink0 = Okio.blackhole();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, true);
      assertionError1.printStackTrace((PrintWriter) mockPrintWriter0);
      AssertionError assertionError2 = new AssertionError();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Okio.buffer(sink0);
      BufferedSink bufferedSink0 = Okio.buffer((Sink) realBufferedSink0);
      assertNotSame(realBufferedSink0, bufferedSink0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("in == null", "l;e<e6{D+PvX<F+q");
      Sink sink0 = Okio.appendingSink(mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      realBufferedSink0.toString();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      Source source0 = Okio.source((InputStream) mockFileInputStream0);
      realBufferedSink0.writeAll(source0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, true);
      AssertionError assertionError0 = new AssertionError(866L);
      assertionError0.printStackTrace((PrintWriter) mockPrintWriter0);
      realBufferedSink0.write(source0, 100L);
      mockFile0.getCanonicalPath();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(outputStream0, true);
      assertionError0.printStackTrace((PrintWriter) mockPrintWriter0);
      AssertionError assertionError1 = new AssertionError("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_scripts_adaptive/projects/25_okio/in == null/l;e<e6{D+PvX<F+q", assertionError0);
      AssertionError assertionError2 = new AssertionError();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Okio.isAndroidGetsocknameError(assertionError0);
      Okio.blackhole();
      Source source1 = Okio.source((File) mockFile0);
      assertFalse(source1.equals((Object)source0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("\n", "\n");
      Sink sink0 = Okio.appendingSink(mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      Source source0 = Okio.source((InputStream) mockFileInputStream0);
      realBufferedSink0.writeAll(source0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.timeout();
      boolean boolean0 = realBufferedSink1.closed;
      boolean boolean1 = realBufferedSink1.closed;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Sink sink1 = Okio.appendingSink(mockFile0);
      assertFalse(sink1.equals((Object)sink0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("timouM = nuJll");
      Sink sink0 = Okio.appendingSink(mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      realBufferedSink0.toString();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      Source source0 = Okio.source((InputStream) mockFileInputStream0);
      realBufferedSink0.writeAll(source0);
      mockFileInputStream0.read();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, true);
      AssertionError assertionError0 = new AssertionError(source0);
      assertionError0.printStackTrace((PrintWriter) mockPrintWriter0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(outputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("'");
      assertionError0.printStackTrace((PrintWriter) mockPrintWriter2);
      try { 
        MockURI.URI("buffer(sink(org.evosuite.runtime.mock.java.io.MockFileOutputStream@130606b))", "buffer(sink(org.evosuite.runtime.mock.java.io.MockFileOutputStream@130606b))", "\"Paend ", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: buffer(sink(org.evosuite.runtime.mock.java.io.MockFileOutputStream@130606b))://buffer(sink(org.evosuite.runtime.mock.java.io.MockFileOutputStream@130606b))%22Pae%7Fnd%20#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      realBufferedSink0.close();
      // Undeclared exception!
      try { 
        realBufferedSink0.write((byte[]) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }
}
