/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 19:21:28 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.CharArrayReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import java.util.UUID;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",j25\u0004LfT2JL0J -I", 1401);
      Feature feature0 = Feature.CustomMapDeserializer;
      jSONReaderScanner0.config(feature0, true);
      assertEquals(4195705, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Jol}.*x@H");
      jSONScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-92));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - J, info : pos 0, json : Jol}.*x@H
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'L');
      jSONReaderScanner0.scanString('n');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("STT)");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean('O');
      boolean boolean0 = jSONScanner0.isEnabled(113, 113);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V`qb(J*Z9", 32);
      char[] charArray0 = new char[1];
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(32, jSONScanner0.getFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 675);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/=N#6E");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SymbolTable symbolTable0 = new SymbolTable(1170);
      JSONScanner jSONScanner1 = new JSONScanner("/=N#6E", 961);
      // Undeclared exception!
      try { 
        jSONScanner1.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1485);
      jSONReaderScanner0.scanDate('K');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 1485, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rv.pWP77T", (-1077));
      jSONReaderScanner0.scanLong('#');
      jSONReaderScanner0.scanDate(']');
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.getLocale();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("s", 78);
      int int0 = jSONReaderScanner0.scanType("Hl");
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(78, jSONReaderScanner0.getFeatures());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Jol}.*x@H");
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      jSONScanner0.isEOF();
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#n5-{WY2iI0lGw8");
      jSONScanner0.getCurrent();
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[2] = '+';
      charArray0[3] = '#';
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".class");
      jSONScanner0.nextToken(0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".class");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(".class");
      jSONReaderScanner1.scanNumber();
      int int0 = jSONScanner0.intValue();
      assertEquals(25, jSONScanner0.token());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!l&", (-2223));
      jSONReaderScanner0.close();
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.getTimeZone();
      assertEquals((-2223), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rv.pWP77T", (-1077));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      jSONReaderScanner0.scanLong('#');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nuHl");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nuHl");
      SymbolTable symbolTable0 = new SymbolTable(116);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N)DKL\";:", 57344);
      jSONReaderScanner0.skipWhitespace();
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("N)DKL\";:", 103);
      char[] charArray0 = new char[0];
      jSONReaderScanner1.scanFieldBigInteger(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("A6DQ");
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!l&");
      jSONReaderScanner0.subString(0, 0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.scanDouble('U');
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("!l&", 19);
      jSONReaderScanner1.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[1] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      String string0 = jSONReaderScanner0.scanString('u');
      assertNull(string0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 604);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      int[] intArray0 = jSONReaderScanner1.scanFieldIntArray(charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(intArray0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(1, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(10, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 19, 604);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'(', '('}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertEquals(604, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertNull(string0);
      assertArrayEquals(new char[] {'(', '('}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertEquals(604, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - (, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = ",j25\\4LfT2JL0J -I";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",j25\u0004LfT2JL0J -I", 1401);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('.');
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertEquals('\u0004', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u0004
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("undefined", 0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('u', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      jSONScanner1.setLocale(locale0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('u', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0, jSONScanner1.matchStat);
      
      long long0 = jSONScanner0.scanLong('{');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(686);
      assertNotNull(symbolTable0);
      
      boolean boolean0 = jSONScanner0.isEOF();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(boolean0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanIdent();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(23, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteMapNullValue");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(19);
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('r', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('r', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V`qb(J*Z9", 33);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(33, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('V', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(33);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(33, jSONScanner0.getFeatures());
      assertEquals('`', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanInt('\\');
      assertEquals(0, int0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(33, jSONScanner0.getFeatures());
      assertEquals('`', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int1 = jSONScanner0.intValue();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(33, jSONScanner0.getFeatures());
      assertEquals('`', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tzw@o!sCFF8?\"SK");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. t
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Jol}.*x@H");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('J', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.setTimeZone((TimeZone) null);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('J', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.resetStringPosition();
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('J', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon((-92));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - J, info : pos 0, json : Jol}.*x@H
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONScanner jSONScanner0 = new JSONScanner("<z", 1595);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(1595, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('<', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken((-466));
      assertEquals(1, jSONScanner0.token());
      assertEquals(1595, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('z', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanInt('W');
      assertEquals(0, int0);
      assertEquals(1, jSONScanner0.token());
      assertEquals(1595, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('z', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertNull(bigInteger0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, jSONScanner0.token());
      assertEquals(1595, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('z', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.ZoneId");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      SymbolTable symbolTable0 = new SymbolTable(43);
      assertNotNull(symbolTable0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('R');
      assertNull(bigDecimal0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(pipedReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Pipe not connected
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SBXYdO");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('v');
      assertNull(uUID0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('!');
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse false", 3367);
      assertNotNull(jSONReaderScanner0);
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(3367, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Feature feature0 = Feature.CustomMapDeserializer;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",j25\u0004LfT2JL0J -I", 1401);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("illegal.char", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      jSONScanner0.setLocale(locale0);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, jSONScanner0.matchStat);
      
      long long0 = jSONScanner0.scanLong('x');
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("illegal.char");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('i', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat);
      
      String string0 = jSONScanner1.tokenName();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(string0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals("Unknown", string0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('i', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      char[] charArray0 = new char[21];
      charArray0[9] = 'c';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'c');
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 91, 1659);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(1659, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      String string0 = jSONReaderScanner0.scanString('c');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(string0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(bigDecimal0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      charArray0[3] = 'L';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1485);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', 'L', '\u0000'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('W', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("tz{M");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('t', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = Calendar.WEEK_OF_YEAR;
      assertEquals(3, int0);
      
      jSONScanner0.np = 18;
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('t', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('t', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('t', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.close();
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('t', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[7];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TODO", 1485);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1485, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('L');
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1485, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("UseISO8601DateFormat");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('U', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      Date date0 = jSONReaderScanner1.scanFieldDate(charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(date0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('U', jSONReaderScanner1.getCurrent());
      assertEquals((-2), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanIdent();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(1485, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("{cYt+#7gtkJs");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('{', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(1040);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(12, jSONScanner0.token());
      assertEquals('c', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanInt('L');
      assertEquals(0, int0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(12, jSONScanner0.token());
      assertEquals('c', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("type not match. ", 40);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("true");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.token());
      assertEquals('t', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner1.setToken(0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.token());
      assertEquals('t', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONScanner0.nextToken(0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(6, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner1.intValue();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, int0);
      assertEquals(0, jSONScanner1.token());
      assertEquals('t', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat);
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNull(intArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertArrayEquals(new char[] {'@', '\u0000'}, charArray0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(6, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 675);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("!l&", 0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('!', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.close();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('!', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner0.skipWhitespace();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(bigDecimal0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[0] = '(';
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 604, 604);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertEquals(604, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertEquals(604, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ';';
      charArray1[1] = '7';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 604, 772);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {';', '7'}, charArray1);
      assertEquals(772, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNull(floatArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {';', '7'}, charArray1);
      assertEquals(772, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ", (-610));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-610), jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-610), jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nul");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('X');
      assertNull(bigDecimal0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('X');
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 675);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('L');
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      Date date0 = jSONReaderScanner1.scanFieldDate(charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(date0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals((-2), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner0.scanIdent();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner1.nextToken();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(9, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals((-2), jSONReaderScanner1.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("sydo");
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken((-1));
      assertEquals('y', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanInt('L');
      assertEquals(0, int0);
      assertEquals('y', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".class");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('.', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(9999);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(25, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".class");
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanNumber();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONScanner0.nextToken(8);
      assertEquals(1, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(1, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("\":+`Ae*", 512);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(512, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      long long0 = jSONScanner0.scanLong('_');
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(512, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = (Object) "\":+`Ae*";
      SymbolTable symbolTable0 = new SymbolTable(1961);
      assertNotNull(symbolTable0);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('_');
      assertNull(bigDecimal0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(512, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      
      char char0 = jSONScanner0.charAt(116);
      assertEquals('\u001A', char0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(512, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(664);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '@';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('L');
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.close();
      assertArrayEquals(new char[] {'\u0000', '@', '\u0000'}, charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40, 40);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float[][] floatArray0 = jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1239, 1575);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(1575, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('p');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner1.scanIdent();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(1575, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.nextToken();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(20, jSONReaderScanner1.token());
      assertEquals(1575, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40, 40);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("0\"Qp~IS(s$h@", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('D');
      assertNull(bigDecimal0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONReaderScanner0.scanIdent();
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextIdent();
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      String string0 = jSONReaderScanner0.scanString('D');
      assertNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal1 = new BigDecimal((-1));
      assertNotNull(bigDecimal1);
      assertEquals((short) (-1), bigDecimal1.shortValue());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 604, 47);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('j');
      assertFalse(boolean0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('&');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      String string0 = "illegal.char";
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 604, 47);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('j');
      assertFalse(boolean0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('&');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(10, jSONReaderScanner0.token());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 51068);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("entlwwP", 51068);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(51068, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanIdent();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(51068, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.nextToken();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertTrue(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(20, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(51068, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[0] = '(';
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('h');
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanIdent();
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(23, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[20];
      char char0 = 'c';
      charArray0[9] = 'c';
      charArray0[1] = 'l';
      charArray0[19] = '+';
      charArray0[3] = 'K';
      charArray0[0] = 'x';
      charArray0[5] = '+';
      charArray0[6] = '`';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1, 1);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('x', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47, 47);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('F');
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertEquals(3, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1485);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('W', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Date date0 = jSONReaderScanner0.scanDate('W');
      assertNull(date0);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('W', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",j25\u0004LfT2JL0J -I", 1401);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Date date0 = jSONReaderScanner0.scanDate('<');
      assertNull(date0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ,, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(",j25\u0004LfT2JL0J -I", (-1728));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-1728), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = 'w';
      charArray0[3] = '\\';
      int int0 = 39;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, (-525));
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', 'w', '\u0000', '\\', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-525), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'\u0000', 'w', '\u0000', '\\', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-525), jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[2] = '(';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V`qb(J*Z9", 32);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('V', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(32, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals('`', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(32, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(32);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'C');
      assertNull(string0);
      assertEquals('`', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(32, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1266);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanType("");
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-2), int0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      StringReader stringReader0 = new StringReader("tyCpe not match. ");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 39);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(39, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('t', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanIdent();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(39, jSONReaderScanner1.getFeatures());
      assertEquals(' ', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(18, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "GS(d|";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("GS(d|");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('G', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[1];
      double double0 = jSONReaderScanner0.scanDouble(':');
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('G', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      charArray0[0] = ':';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 675);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = "!l&";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!l&", 31);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(31, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0L, long0);
      assertEquals(31, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - !, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "new";
      int int0 = 88;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 88);
      assertNotNull(jSONReaderScanner0);
      assertEquals(88, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('y');
      assertNull(uUID0);
      assertEquals(88, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      char[] charArray0 = null;
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((char[]) null, 83, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[0];
      char char0 = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      float float0 = jSONReaderScanner0.scanFieldFloat(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.locale = locale0;
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", jSONReaderScanner0.locale.getISO3Language());
      assertEquals("ja", jSONReaderScanner0.locale.getLanguage());
      assertEquals("", jSONReaderScanner0.locale.getISO3Country());
      assertEquals("", jSONReaderScanner0.locale.getVariant());
      assertEquals("ja", jSONReaderScanner0.locale.toString());
      assertEquals("", jSONReaderScanner0.locale.getCountry());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V`qb(J*Z9", 32);
      assertNotNull(jSONScanner0);
      assertEquals('V', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(32, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      assertEquals('V', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(32, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('`', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(32, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)93;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6)");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("c*?a(Sp%$NG]mdA");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.JSONLexerBase");
      assertNotNull(jSONReaderScanner0);
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.calendar = null;
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('L');
      assertNull(uUID0);
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("invalid comment");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('i', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      int int0 = jSONReaderScanner1.scanInt('L');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals('i', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.nextToken();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(1, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = 'Y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1266);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', 'Y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      int int0 = jSONReaderScanner0.scanInt('H');
      assertArrayEquals(new char[] {'\u0000', 'Y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(59);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7,@Z6Ki?5l{NWB", 31);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(31, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('7', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "equals");
      assertFalse(boolean0);
      
      MockDate mockDate0 = new MockDate(31, 31, 31, 'b', 31, 'b');
      assertNotNull(mockDate0);
      assertEquals("Mon Sep 04 02:32:38 GMT 1933", mockDate0.toString());
      
      jSONReaderScanner0.scanIdent();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(31, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(31, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals('@', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36, 36);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("\":+`Ae*", 36);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(36, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      char char0 = '_';
      long long0 = jSONScanner0.scanLong('_');
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('\"', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(36, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int0 = 44;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\":+`Ae*");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      jSONScanner0.copyTo(jSONReaderScanner0.matchStat, int0, charArray0);
      int int1 = 121;
      jSONScanner0.indexOf(char0, int1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("V`qbv5*Z9", 32);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(32, jSONScanner0.getFeatures());
      assertEquals('V', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("V`qbv5*Z9", (-798));
      assertNotNull(jSONReaderScanner0);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('V', jSONReaderScanner0.getCurrent());
      assertEquals((-798), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('>');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('V', jSONReaderScanner0.getCurrent());
      assertEquals((-798), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = 'Y';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1266);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', 'Y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertArrayEquals(new char[] {'\u0000', 'Y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertNull(string0);
      assertArrayEquals(new char[] {'\u0000', 'Y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      jSONReaderScanner0.scanStringArray(linkedList0, 'Y');
      assertArrayEquals(new char[] {'\u0000', 'Y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('Y');
      assertArrayEquals(new char[] {'\u0000', 'Y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-2593), 1266);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 675);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(391, 675);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Calendar calendar0 = jSONReaderScanner0.getCalendar();
      assertFalse(charArray0.equals((Object)charArray1));
      assertNull(calendar0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("w");
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('w', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Calendar calendar0 = jSONScanner0.getCalendar();
      assertNull(calendar0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('w', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string0 = jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertNotNull(string0);
      assertEquals("w", string0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      long long1 = jSONScanner0.longValue();
      assertFalse(long1 == long0);
      assertEquals(71L, long1);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string1 = jSONScanner0.stringDefaultValue();
      assertNull(string1);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[20];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 1, 123);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('\u0000', jSONScanner0.getCurrent());
      assertEquals(123, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string0 = JSONLexerBase.readString(charArray0, 1);
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 47);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('F');
      assertNull(uUID0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")8ozKCuy'zV7}Z-JX}|");
      assertNotNull(jSONScanner0);
      assertEquals(')', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.sp = 437;
      assertEquals(')', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      
      SymbolTable symbolTable0 = new SymbolTable(437);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : )pos 0, json : )8ozKCuy'zV7}Z-JX}|
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[17];
      charArray0[1] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 604, 47);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("UW", 47);
      assertNotNull(jSONScanner0);
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(47, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('2');
      assertNull(bigDecimal0);
      assertEquals('U', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(47, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.isEnabled((-1), 16384);
      assertTrue(boolean0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g0", 36);
      assertNotNull(jSONReaderScanner0);
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("]pOpYB`W&");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(']', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.skipWhitespace();
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(']', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken((-832));
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('p', jSONScanner0.getCurrent());
      assertEquals(15, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
      
      int int1 = jSONScanner0.intValue();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('p', jSONScanner0.getCurrent());
      assertEquals(15, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.indexOf('\u0000', (-832));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -832
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[3];
      SymbolTable symbolTable0 = new SymbolTable(2284);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner("set");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("tXo*>n?')3kKk^\"hbv", 59);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(59, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean(' ');
      assertFalse(boolean0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(59, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("AutoCloseSource", 2284);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('A', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(2284, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("lrv(Kk?A^A$=T}3x73g");
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'A';
      charArray0[2] = '1';
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertNull(collection0);
      assertArrayEquals(new char[] {'W', 'A', '1'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(">piFD7u5S]_MZ6):WGw", 22);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('>', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(22, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.pos = 22;
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('>', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(22, jSONScanner0.getFeatures());
      assertEquals(22, jSONScanner0.pos());
      
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('>', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(22, jSONScanner0.getFeatures());
      assertEquals(22, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean1 = jSONScanner0.scanBoolean('F');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('>', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(22, jSONScanner0.getFeatures());
      assertEquals(22, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanIdent();
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(']', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(22, jSONScanner0.getFeatures());
      assertEquals(22, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">piFD7u5S]_MZ6):WGw", 22);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(22, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('>', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(209941395L, long0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(']', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(22, jSONScanner0.getFeatures());
      assertEquals(22, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("EOF", 9);
      assertNotNull(jSONScanner0);
      assertEquals('E', jSONScanner0.getCurrent());
      assertEquals(9, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(34);
      assertEquals(1, jSONScanner0.token());
      assertEquals(9, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('O', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str.lit");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(1, jSONScanner0.token());
      assertEquals(9, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('O', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("G");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('G', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83, 83);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(83, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextToken(2215);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(83, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNull(date0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(83, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6kN)UM/N");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('?');
      assertEquals(6L, long0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      jSONReaderScanner1.close();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('?');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",j25", '1');
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = '1';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",j25");
      assertFalse(boolean0);
      
      double double0 = jSONReaderScanner0.scanDouble('M');
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNull(date0);
      assertArrayEquals(new char[] {'1', '1', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      charArray0[4] = '1';
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertArrayEquals(new char[] {'1', '1', '\u0000', '\u0000', '1'}, charArray0);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, '1', 3953);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'1', '1', '\u0000', '\u0000', '1'}, charArray0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(3953, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      boolean boolean1 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'1', '1', '\u0000', '\u0000', '1'}, charArray0);
      assertFalse(boolean1);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner1.indexOf('\u0000', 3953);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'1', '1', '\u0000', '\u0000', '1'}, charArray0);
      assertEquals(3953, int0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(3953, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('1', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      char char0 = jSONReaderScanner0.next();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('j', char0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      Date date1 = jSONReaderScanner0.scanDate('u');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(date1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.close();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(49, jSONReaderScanner0.getFeatures());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanDecimal('H');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("TODO");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      double double0 = jSONScanner0.scanFieldDouble(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      
      char char0 = 'k';
      // Undeclared exception!
      try { 
        jSONScanner0.addSymbol((-493), 78, 40, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse new", 8);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('e', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(8, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[26];
      charArray0[0] = '^';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '^';
      charArray0[4] = '^';
      charArray0[5] = '^';
      charArray0[6] = '^';
      charArray0[7] = '^';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse new");
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('^');
      assertFalse(boolean0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("YOm6'C6j=to6f-w");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('Y', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanIdent();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals('\'', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1451);
      assertNotNull(symbolTable0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("illegal");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      Enum<?> enum0 = jSONScanner0.scanEnum(class0, symbolTable0, '\\');
      assertNull(enum0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      
      boolean boolean1 = jSONScanner0.scanBoolean('\\');
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("I");
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.skipWhitespace();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".");
      assertFalse(boolean0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNull(date0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("gDN<y'/'~gi@DTh");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertNotNull(jSONReaderScanner0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".");
      assertFalse(boolean0);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNull(date0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("P}g>-y.XH5", 468);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('P', jSONScanner0.getCurrent());
      assertEquals(468, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertNull(intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('P', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(468, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
      
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      assertEquals((-922337203685477580L), long0);
      
      String string0 = jSONScanner0.info();
      assertNotNull(string0);
      assertEquals("pos 0, json : P}g>-y.XH5", string0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('P', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(468, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-[}x^)aXTV");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('-', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(9999);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-[}x^)aXTV");
      assertNotNull(jSONReaderScanner0);
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-[}x^)aXTV", 9999);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(9999, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.setToken(0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(9999, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanNumber();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('[', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(9999, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(2, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONScanner0.nextToken(8);
      assertEquals(14, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('}', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("}G7hm|,1g0](&", (-2587));
      assertNotNull(jSONScanner0);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('}', jSONScanner0.getCurrent());
      assertEquals((-2587), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(906);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbolWithSeperator(symbolTable0, '_');
      assertNull(string0);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('}', jSONScanner0.getCurrent());
      assertEquals((-2587), jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      
      BigDecimal bigDecimal0 = new BigDecimal(114);
      assertNotNull(bigDecimal0);
      assertEquals((byte)114, bigDecimal0.byteValue());
      assertEquals((short)114, bigDecimal0.shortValue());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("+{", 1949);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1949, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("illegal.char");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('i', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      
      boolean boolean0 = jSONScanner1.scanBoolean('j');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(boolean0);
      assertEquals('i', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 224);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1949, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('{', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.nextTokenWithColon(46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TODO");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      Date date0 = jSONScanner0.scanDate('a');
      assertNull(date0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(82);
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanInt('j');
      assertEquals(0, int0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int1 = jSONScanner0.intValue();
      assertFalse(int1 == int0);
      assertEquals(39331, int1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1451);
      assertNotNull(symbolTable0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("H");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('H', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1359);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1451);
      assertNotNull(symbolTable0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'c';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 1359);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jmo&`X66Cwi|[?$");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = 'q';
      charArray0[2] = 'g';
      charArray0[3] = 'm';
      charArray0[4] = 'C';
      charArray0[5] = 'g';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, (-1766));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertArrayEquals(new char[] {'M', 'q', 'g', 'm', 'C', 'g'}, charArray0);
      assertEquals(0, jSONScanner1.token());
      assertEquals((-1766), jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner1.nextToken((-1766));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {'M', 'q', 'g', 'm', 'C', 'g'}, charArray0);
      assertEquals((-1766), jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(20, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e^uq:");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONScanner1.scanInt('m');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {'M', 'q', 'g', 'm', 'C', 'g'}, charArray0);
      assertEquals(0, int0);
      assertEquals((-1766), jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(20, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.matchStat);
      
      int int1 = jSONScanner1.intValue();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertTrue(int1 == int0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {'M', 'q', 'g', 'm', 'C', 'g'}, charArray0);
      assertEquals(0, int1);
      assertEquals((-1766), jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(20, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ibm,gal");
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xIux62B29H/7#(");
      assertFalse(boolean0);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('\\');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("ibm,gal");
      assertNotNull(jSONScanner0);
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      SymbolTable symbolTable1 = new SymbolTable(970);
      assertFalse(symbolTable1.equals((Object)symbolTable0));
      assertNotNull(symbolTable1);
      
      BigDecimal bigDecimal0 = new BigDecimal((-744L));
      assertNotNull(bigDecimal0);
      assertEquals((byte)24, bigDecimal0.byteValue());
      assertEquals((short) (-744), bigDecimal0.shortValue());
      
      boolean boolean2 = jSONScanner0.isEOF();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("false", 0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('f', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner1.scanIdent();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(7, jSONScanner1.token());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")8ozKCuy,zV7}Z-JX}|");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(')', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.pos());
      assertEquals(')', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken((-992));
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('8', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(11, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertEquals(2, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('o', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONScanner jSONScanner1 = new JSONScanner("hnBq9!m");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals('h', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      
      UUID uUID0 = jSONScanner1.scanUUID('&');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(uUID0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals('h', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",j25\u0004LfT2JL0J -I", 1401);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<^W6c-'k^Sc_K\f6eM");
      assertFalse(boolean0);
      
      long long0 = jSONReaderScanner0.scanLong('.');
      assertEquals(0L, long0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Date date0 = jSONReaderScanner0.scanDate('<');
      assertNull(date0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanIdent();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('\u0004', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(5, jSONReaderScanner0.pos());
      assertEquals('f', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextIdent();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(5, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("illegal");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal");
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean1 = jSONReaderScanner0.isEnabled((-3202), (-1722395240));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 675);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      UUID uUID0 = jSONReaderScanner0.scanFieldUUID(charArray0);
      assertNull(uUID0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('v');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(391, 675);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xIux62B29H/7#(");
      assertFalse(boolean0);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(18, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char char0 = '\\';
      boolean boolean1 = jSONReaderScanner0.scanBoolean('\\');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(18, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("illegal");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[20];
      charArray0[4] = '[';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, '\\');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      charArray0[3] = 'L';
      JSONScanner jSONScanner0 = new JSONScanner("set");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("set", 39);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(39, jSONReaderScanner0.getFeatures());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'W', '\u0000', '\u0000', 'L', '\u0000'}, charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("set", 39);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('s', jSONReaderScanner1.getCurrent());
      assertEquals(39, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.nextToken();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('e', jSONReaderScanner1.getCurrent());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(39, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      boolean boolean0 = jSONScanner0.isEnabled(0, 0);
      assertFalse(boolean0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("TODO");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('R');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('j');
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNull(date0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanIdent();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Date date1 = jSONScanner0.scanDate('k');
      assertNull(date1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.nextToken((-361));
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanInt('k');
      assertEquals(0, int0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      
      boolean boolean2 = jSONScanner0.isRef();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#n5-{WY2iI0lGw8");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken();
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      char char0 = jSONScanner0.getCurrent();
      assertEquals('n', char0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#n5-{WY2iI0lGw8", 116);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('#', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(116, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SBXYdO");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("SBXYdO");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(22);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONReaderScanner0.scanNumber();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('t');
      assertNull(uUID0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      boolean boolean1 = jSONScanner0.isRef();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 47, 47);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'A', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanNumber();
      assertArrayEquals(new char[] {'A', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertNotNull(timeZone0);
      assertArrayEquals(new char[] {'A', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('G');
      assertArrayEquals(new char[] {'A', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0L, long0);
      assertEquals('A', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("false", (-1));
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      long long1 = jSONScanner0.longValue();
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertEquals(0, jSONScanner0.token());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      Feature feature0 = Feature.SupportArrayToBean;
      jSONScanner0.config(feature0, true);
      assertEquals(0, jSONScanner0.token());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.getFeatures());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g0", 36);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[1];
      char char0 = 'g';
      charArray0[0] = 'g';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertFalse(boolean0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertEquals(0L, long0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-832), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!l&", (-2223));
      assertNotNull(jSONReaderScanner0);
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2223), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0L, long0);
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2223), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.close();
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2223), jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      char char0 = 'a';
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[5];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1485, 1485);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1485, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.skipWhitespace();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1485, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("Cj{+)Jknt~rm", 9);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(9, jSONScanner0.getFeatures());
      assertEquals('C', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0L, long0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1485, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      long long1 = jSONScanner0.scanLong('$');
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(9, jSONScanner0.getFeatures());
      assertEquals('C', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(16, 676, (-1));
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=16,MONTH=676,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      jSONScanner0.nextToken(16);
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(9, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanInt('7');
      assertEquals(0, int0);
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(9, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Ec5U<rP26P6", (-1725629740));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('E', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1725629740), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNotNull(jSONReaderScanner0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(130);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40, 40);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("0\"Qp~IS(s$h@", (-3072));
      assertNotNull(jSONScanner0);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals((-3072), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('D');
      assertNull(bigDecimal0);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-3072), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      
      BigDecimal bigDecimal1 = new BigDecimal(40);
      assertNotNull(bigDecimal1);
      assertEquals((byte)40, bigDecimal1.byteValue());
      assertEquals((short)40, bigDecimal1.shortValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("0\"Qp~IS(s$h@");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('0', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.nextToken();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      float float0 = jSONReaderScanner1.scanFloat('1');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0.0F, float0, 0.01F);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{$Xvn*i<");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("mV1yJ2,<z*U");
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('m', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      float float1 = jSONReaderScanner1.scanFloat('{');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertEquals(float1, float0, 0.01F);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertEquals(0.0F, float1, 0.01F);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = jSONScanner0.pos();
      assertEquals(0, int0);
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-3072), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.doubleValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("WriteNonStringValueAsString");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.setToken(13);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(13, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("W.g*X_zBE", 89);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.token());
      assertEquals(89, jSONScanner1.getFeatures());
      assertEquals('W', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      
      BigDecimal bigDecimal0 = jSONScanner1.scanDecimal('*');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(bigDecimal0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(89, jSONScanner1.getFeatures());
      assertEquals('W', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-1), jSONScanner1.matchStat);
      
      BigDecimal bigDecimal1 = new BigDecimal(89);
      assertNotNull(bigDecimal1);
      assertEquals((short)89, bigDecimal1.shortValue());
      assertEquals((byte)89, bigDecimal1.byteValue());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteNonStringValueAsString");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('W', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean1 = jSONScanner1.scanBoolean('*');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertFalse(boolean1);
      assertEquals(0, jSONScanner1.token());
      assertEquals(89, jSONScanner1.getFeatures());
      assertEquals('W', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-1), jSONScanner1.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("new");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanIdent();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('\u001A', jSONReaderScanner1.getCurrent());
      assertEquals(9, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      int int0 = jSONScanner1.intValue();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, int0);
      assertEquals(0, jSONScanner1.token());
      assertEquals(89, jSONScanner1.getFeatures());
      assertEquals('W', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-1), jSONScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\u0000');
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(0, int0);
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, (-2));
      assertFalse(charArray0.equals((Object)charArray1));
      assertNotNull(jSONScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONScanner0.token());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int1 = jSONScanner0.indexOf('\u0000', 0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(int1 == int0);
      assertNotSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int1);
      assertEquals(0, jSONScanner0.token());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal");
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('n');
      assertFalse(boolean0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("PMO", (-1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals('P', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.nextToken();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('M', jSONReaderScanner1.getCurrent());
      assertEquals(1, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      int int0 = jSONReaderScanner1.matchStat();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, int0);
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals('M', jSONReaderScanner1.getCurrent());
      assertEquals(1, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45, 45);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("w");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<Object> class0 = Object.class;
      Collection<String> collection0 = jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertNull(collection0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanStringArray((Collection<String>) null, 'q');
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('Q');
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNull(date0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanIdent();
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(18, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Date date1 = jSONScanner0.scanDate('Q');
      assertNull(date1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(1265);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanInt('m');
      assertEquals(0, int0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int1 = jSONScanner0.intValue();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("/=N#6E");
      assertNotNull(jSONScanner0);
      assertEquals('/', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/=N#6E");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-1843987232));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed str", (-1796124879));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1796124879), jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1796124879), jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("\":\"");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      Date date0 = jSONReaderScanner0.scanDate('C');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(date0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1796124879), jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner1.scanIdent();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(':', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.nextToken();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(1, jSONReaderScanner1.pos());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(17, jSONReaderScanner1.token());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      int int0 = jSONReaderScanner0.scanType("unclosed str");
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1796124879), jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.setToken(57);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1796124879), jSONReaderScanner0.getFeatures());
      assertEquals(57, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 675);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('L');
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "N2dZ");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("not match ", 'L');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(76, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("not match ", 10);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      assertEquals('n', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(10, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      float float0 = jSONReaderScanner1.scanFloat('L');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertEquals(0.0F, float0, 0.01F);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(76, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 19, 604);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'(', '\u0000'}, charArray0);
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(604, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("SBXYdO");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      Calendar calendar0 = jSONScanner0.getCalendar();
      assertNull(calendar0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('S', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string0 = jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      assertNotNull(string0);
      assertEquals("SBXYdO", string0);
      assertEquals(18, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertNull(intArray0);
      assertArrayEquals(new char[] {'(', '\u0000'}, charArray0);
      assertEquals(18, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(35L, long0);
      assertEquals(18, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      
      double double0 = jSONScanner0.scanDouble('E');
      assertEquals(0.0, double0, 0.01);
      assertEquals(18, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNull(date0);
      assertArrayEquals(new char[] {'(', '\u0000'}, charArray0);
      assertEquals('(', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(604, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("SBXYdO");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('S', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(3);
      assertEquals(18, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!l&");
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanNumber();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID(':');
      assertNull(uUID0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(35, int0);
      assertEquals(18, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", 75);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals(75, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("illegal.char", 1478);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(1478, jSONScanner0.getFeatures());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      jSONScanner0.setLocale(locale0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(1478, jSONScanner0.getFeatures());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, jSONScanner0.matchStat);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      jSONReaderScanner0.scanIdent();
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(75, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(21, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      String string0 = jSONReaderScanner0.scanString('u');
      assertNull(string0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(75, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(21, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      int[] intArray0 = jSONReaderScanner0.scanFieldIntArray(charArray0);
      assertNull(intArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(75, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(21, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(75, jSONReaderScanner0.getFeatures());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("scan true error");
      assertNotNull(stringReader0);
      
      stringReader0.mark(6);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SymbolTable symbolTable0 = new SymbolTable(69);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner("Qi9}hhp{#YsgU", 69);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(69, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.pos = 7;
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(69, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(7, jSONScanner0.pos());
      assertEquals('Q', jSONScanner0.getCurrent());
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(69, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(7, jSONScanner0.pos());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int1 = jSONScanner0.getFeatures();
      assertFalse(int1 == int0);
      assertEquals(69, int1);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(69, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(7, jSONScanner0.pos());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[8];
      JSONScanner jSONScanner0 = new JSONScanner("B4xz;y]Li^OkAz-|R");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      Collection<String> collection0 = jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertNull(collection0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanStringArray((Collection<String>) null, 'E');
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('B', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("B4xz;y]Li^OkAz-|R");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      Date date0 = jSONReaderScanner0.scanDate('F');
      assertNull(date0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanIdent();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(';', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(24, jSONReaderScanner0.token());
      assertEquals(4, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('y', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("..");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 1838);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1838, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('E');
      assertEquals(0.0, double0, 0.01);
      assertEquals(1838, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('F');
      assertNull(bigDecimal0);
      assertEquals(1838, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      assertNotNull(jSONScanner0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(1451);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("*dXu5!{Fmv", 1451);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('*', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(1451, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner0.scanNumber();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-373));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      assertNotNull(jSONReaderScanner0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      int int0 = jSONReaderScanner0.scanType(", ");
      assertEquals((-2), int0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", ");
      assertFalse(boolean0);
      
      long long0 = jSONReaderScanner0.scanLong('c');
      assertEquals(0L, long0);
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 11);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      Date date0 = jSONReaderScanner1.scanDate('*');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(date0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[20];
      charArray0[0] = 'c';
      charArray0[1] = 'l';
      charArray0[19] = '+';
      JSONScanner jSONScanner0 = new JSONScanner("new", 3);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(3, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray0);
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(3, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('l');
      assertEquals(0L, long0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      int int0 = Calendar.WEEK_OF_YEAR;
      assertEquals(3, int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONScanner jSONScanner1 = new JSONScanner("new", (-1842141918));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1842141918), jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      
      float[][] floatArray1 = jSONScanner1.scanFieldFloatArray2(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(floatArray1);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1842141918), jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat);
      
      jSONScanner1.np = 97;
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1842141918), jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals('n', jSONScanner1.getCurrent());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("@sl", (-268));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-268), jSONReaderScanner1.getFeatures());
      assertEquals('@', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      long long1 = jSONScanner1.longValue();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertTrue(long1 == long0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0L, long1);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1842141918), jSONScanner1.getFeatures());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertEquals('n', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null", (-2629));
      assertNotNull(jSONScanner0);
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2629), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanIdent();
      assertEquals(8, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-2629), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 57);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(57, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(69560L, long0);
      assertEquals(8, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals("", jSONScanner0.stringDefaultValue());
      assertEquals((-2629), jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6kN)UM/N");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('k');
      assertEquals(6.0, double0, 0.01);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertEquals(3, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(3, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("invalid comment");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals('i', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      char char0 = jSONReaderScanner1.next();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('n', char0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("invalid comment", 3);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('i', jSONScanner0.getCurrent());
      assertEquals(3, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.subString(3, 388);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jmo&`X66Cwi|[?$", 51068);
      assertNotNull(jSONScanner0);
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(51068, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      jSONScanner0.nextToken(4);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.token());
      assertEquals('m', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(51068, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("jmo&`X66Cwi|[?$", (-1620492513));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals('j', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals((-1620492513), jSONScanner1.getFeatures());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner0.setToken((-1620492513));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('m', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1620492513), jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(51068, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-!QhiXK__W[f%jF{", 47);
      assertNotNull(jSONReaderScanner0);
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('n');
      assertFalse(boolean0);
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean1 = hashSet0.add((String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      jSONReaderScanner0.scanStringArray(hashSet0, ':');
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('|');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(47, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(50, (-849));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -849
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '9');
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'9', '9', '\u0000', '9', '9'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("p", 0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('p', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      
      jSONReaderScanner1.scanStringArray(set0, '9');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('p', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('E');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'9', '9', '\u0000', '9', '9'}, charArray0);
      assertEquals(99.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'9', '9', '\u0000', '9', '9'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("GMT", timeZone0.getID());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6kN)UM/N");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      
      jSONReaderScanner0.scanStringArray(set0, ':');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('|');
      assertEquals(6.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("p");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('p', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.setTimeZone(timeZone0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('p', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("p");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('p', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.numberString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nul");
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('X');
      assertNull(bigDecimal0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = "nul";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nul");
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('^');
      assertNull(bigDecimal0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      JSONScanner jSONScanner0 = new JSONScanner("nul", 108);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(108, jSONScanner0.getFeatures());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.compatibleWithFieldName");
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('f', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-361));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = '1';
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JSONScanner jSONScanner0 = new JSONScanner("f");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('f', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("gl0z", 36);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONReaderScanner0.nextTokenWithChar('g');
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('0', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("scan true error");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan true error", 'A');
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(65, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(65, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('A');
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(65, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("scan true error", 19);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(19, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('s', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      char char0 = jSONScanner0.next();
      assertEquals('c', char0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(19, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(149);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(19, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals('a', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "scan true error");
      assertFalse(boolean0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(19, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals('a', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat);
      
      int int1 = Calendar.WEEK_OF_YEAR;
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(19, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals('a', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(3);
      assertNotNull(symbolTable0);
      
      String string0 = jSONReaderScanner0.scanSymbol(symbolTable0, 'n');
      assertNotNull(string0);
      assertEquals("ca", string0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(4, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(65, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      boolean boolean2 = JSONLexerBase.isWhitespace('n');
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DisableFieldSmartMatch");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNotNull(jSONReaderScanner0);
      assertEquals('D', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("WriteMapNullValue");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('r', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(3, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("WriteMapNullValue", 128);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals('W', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(128, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      int int0 = Calendar.OCTOBER;
      assertEquals(9, int0);
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotNull(byteArray0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(3, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('i', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".class");
      assertNotNull(jSONScanner0);
      assertEquals('.', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(25, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".class");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(".class", 0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('.', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanNumber();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(3, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONScanner0.nextToken(8);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('l', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONReaderScanner1.token();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(3, int0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(3, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      char[] charArray0 = new char[3];
      SymbolTable symbolTable0 = new SymbolTable(2284);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      String string0 = jSONScanner0.tokenName();
      assertNotNull(string0);
      assertEquals("Unknown", string0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uJlX-f2Qd,V)");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",C");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, int0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('C');
      assertNull(bigDecimal0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('c');
      assertEquals(0.0, double0, 0.01);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONScanner0.nextToken(110);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(16, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uJlX-f2Qd,V)");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char char0 = jSONScanner0.charAt(55232);
      assertEquals('\u001A', char0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(16, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean2 = jSONScanner0.matchField(charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean2);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(16, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", ");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("am]i8j <3oa`e GW=oW");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('a', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      char char0 = jSONReaderScanner0.next();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(' ', char0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner1.close();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('a', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(", ", 0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(',', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      jSONReaderScanner2.skipWhitespace();
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(',', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      int int0 = jSONReaderScanner2.scanType("?Jx");
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(',', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      System.setCurrentTimeMillis((-3089L));
      String string0 = jSONReaderScanner0.scanString('3');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(string0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '8';
      charArray0[1] = 'H';
      charArray0[2] = 'Q';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      charArray0[3] = '+';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2686);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'8', 'H', 'Q', '+'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('>');
      assertArrayEquals(new char[] {'8', 'H', 'Q', '+'}, charArray0);
      assertEquals(8.0, double0, 0.01);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      char char0 = jSONReaderScanner0.charAt(2686);
      assertArrayEquals(new char[] {'8', 'H', 'Q', '+'}, charArray0);
      assertEquals('\u0000', char0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('8', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6kN)UM/N");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('?');
      assertEquals(6L, long0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      Date date0 = jSONReaderScanner0.scanDate('?');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(date0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner1.scanIdent();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(stringReader0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('\u0000', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      String string0 = jSONReaderScanner1.scanString('?');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertNull(string0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      String string1 = jSONReaderScanner1.numberString();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertNotNull(string1);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertEquals("\u0000", string1);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      String string2 = jSONReaderScanner0.stringVal();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertEquals("", string2);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 161);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'1', '1', '1', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Date date0 = jSONReaderScanner0.scanDate('E');
      assertNull(date0);
      assertArrayEquals(new char[] {'1', '1', '1', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      StringReader stringReader0 = new StringReader("SYdO");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.close();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.resetStringPosition();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('S', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {'1', '1', '1', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('1', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSONScanner jSONScanner0 = new JSONScanner("ER2SetMej");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('E', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(15);
      assertEquals(1, jSONScanner0.token());
      assertEquals('R', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.resetStringPosition();
      assertEquals(1, jSONScanner0.token());
      assertEquals('R', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(boolean0);
      assertEquals(1, jSONScanner0.token());
      assertEquals('R', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(1628);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - R, info : pos 1, json : ER2SetMej
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40, 40);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("0\"Qp~IS(s$h@", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('D');
      assertNull(bigDecimal0);
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, (-3744));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-3744), jSONScanner1.getFeatures());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner1.nextToken(15);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals((-3744), jSONScanner1.getFeatures());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(20, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      
      int int0 = jSONScanner1.scanInt('0');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int0);
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-3744), jSONScanner1.getFeatures());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(20, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat);
      
      int int1 = jSONScanner1.scanFieldInt(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertTrue(int1 == int0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int1);
      assertEquals(0, jSONScanner1.pos());
      assertTrue(jSONScanner1.isEOF());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals((-3744), jSONScanner1.getFeatures());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(20, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("WriteNonStringValueAsString");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.setToken(13);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(13, jSONScanner0.token());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("l$");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong(',');
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Date date0 = jSONReaderScanner0.scanDate(',');
      assertNull(date0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      String string0 = jSONReaderScanner0.scanString('&');
      assertNull(string0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {',', ',', ',', ','}, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",F");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",F");
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner(", ");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(',', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner0.nextToken(1485);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(16, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("", 0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanNumber();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONScanner0.nextToken(0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(20, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanInt('+');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, int0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(20, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = 'W';
      int int1 = jSONScanner0.scanFieldInt(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(int1 == int0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertArrayEquals(new char[] {'+', 'W'}, charArray0);
      assertEquals(0, int1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(20, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner0 = new JSONScanner("!l&");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('!', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(3);
      assertEquals('l', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!l&");
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID(':');
      assertNull(uUID0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      assertEquals('l', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('l', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-[}x^)aXTV");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(9999);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-[}x^)aXTV");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-[}x^)aXTV", 9999);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(9999, jSONReaderScanner1.getFeatures());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.skipWhitespace();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(9999, jSONReaderScanner1.getFeatures());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.setToken(0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(9999, jSONReaderScanner1.getFeatures());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanNumber();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('[', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(9999, jSONReaderScanner1.getFeatures());
      assertEquals(2, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'L';
      charArray0[1] = 'O';
      charArray0[2] = '[';
      charArray0[3] = '/';
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'L', 'O', '[', '/'}, charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals(2, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("-[}x^)aXTV", (-2));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals('-', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals((-2), jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45, 45);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("w");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      float[] floatArray0 = jSONScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 45, 45);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(45, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('r');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(39);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertNotNull(string0);
      assertEquals("w", string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("w");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals('w', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat);
      
      double double1 = jSONScanner0.scanFieldDouble(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double1, 0.01);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("java.awt.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",j25", 604);
      assertNotNull(jSONReaderScanner0);
      assertEquals(604, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = '1';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",j25");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(",j25");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(',', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("tring");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(40);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("dBMa.6uKg");
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('d', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('L');
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('d', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '}');
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('d', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('B', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("dBMa.6uKg", (-1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('d', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner0.scanNumber();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('M', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("com.alibaba.fastjson.parser.JSONLexerBase");
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('c', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      UUID uUID0 = jSONReaderScanner2.scanUUID('L');
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNull(uUID0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('c', jSONReaderScanner2.getCurrent());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals((-1), jSONReaderScanner2.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("dBMa.6uKg");
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('d', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('d', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("invalid comment");
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertNotNull(jSONReaderScanner3);
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals('i', jSONReaderScanner3.getCurrent());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat);
      
      jSONReaderScanner3.nextToken();
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(1, jSONReaderScanner3.token());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('n', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45, 45);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("6QD,B6JMP");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("6QD,B6JMP", 45);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('6', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(45, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('y');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Date date0 = jSONReaderScanner1.scanFieldDate(charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(date0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('6', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(45, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner0.scanIdent();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(45, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Date date1 = jSONScanner0.scanDate('I');
      assertNull(date1);
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('6', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.nextToken((-2050));
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanInt('m');
      assertEquals(0, int0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int1 = jSONScanner0.intValue();
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(2, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('Q', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed.str.lit", 1969);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1969, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1969, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('.', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      
      Locale locale2 = locale0.stripExtensions();
      assertNotNull(locale2);
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale2, locale1);
      assertSame(locale2, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("en", locale2.getLanguage());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("CA", locale2.getCountry());
      assertEquals("en_CA", locale2.toString());
      
      Set<String> set0 = locale2.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale2, locale1);
      assertSame(locale2, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("en", locale2.getLanguage());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("CA", locale2.getCountry());
      assertEquals("en_CA", locale2.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      jSONScanner0.setLocale(locale1);
      assertSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1969, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('.', jSONScanner0.getCurrent());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str.lit", 391);
      assertNotNull(jSONReaderScanner0);
      assertEquals(391, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1969, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('.', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("unclosed.str.lit", (-2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(757770282L, long0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1969, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('.', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONReaderScanner1.lexError("unclosed.str.lit", (Object[]) null);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('u', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(1, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals((-2), jSONReaderScanner1.getFeatures());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      long long1 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(long1 == long0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0L, long1);
      assertEquals(391, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 287, 287);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'E'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertEquals(287, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('%');
      assertNull(bigDecimal0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONReaderScanner0.resetStringPosition();
      assertArrayEquals(new char[] {'E'}, charArray0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertEquals(287, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(287);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertNotNull(string0);
      assertEquals("new", string0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40, 40);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("0\"Qp~IS(s$h@", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('D');
      assertNull(bigDecimal0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      
      BigDecimal bigDecimal1 = new BigDecimal(593);
      assertNotNull(bigDecimal1);
      assertEquals((byte)81, bigDecimal1.byteValue());
      assertEquals((short)593, bigDecimal1.shortValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("0\"Qp~IS(s$h@");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('0', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean('c');
      assertFalse(boolean0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("]");
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(']', jSONReaderScanner2.getCurrent());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner1.nextIdent();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanString('D');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("true", 26);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('t', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(26, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat);
      
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean1 = jSONScanner0.scanBoolean('F');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertTrue(boolean1);
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner1.scanIdent();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(6, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(26, jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", 26);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('t', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(26, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONScanner0.longValue();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0L, long0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 40, 40);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("0\"Qp~IS(s$h@", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      char char0 = 'D';
      BigDecimal bigDecimal0 = jSONScanner0.scanDecimal('D');
      assertNull(bigDecimal0);
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals('0', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      
      BigDecimal bigDecimal1 = new BigDecimal(593);
      assertNotNull(bigDecimal1);
      assertEquals((short)593, bigDecimal1.shortValue());
      assertEquals((byte)81, bigDecimal1.byteValue());
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("0\"Qp~IS(s$h@");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals('0', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("0\"Qp~IS(s$h@", 0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals('0', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("true");
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner3);
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('t', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat);
      
      jSONReaderScanner1.scanNumber();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(2, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner(">v", 26);
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertNotNull(jSONReaderScanner4);
      assertEquals(0, jSONReaderScanner4.pos());
      assertEquals(26, jSONReaderScanner4.getFeatures());
      assertFalse(jSONReaderScanner4.isEOF());
      assertEquals(0, jSONReaderScanner4.matchStat());
      assertNull(jSONReaderScanner4.stringDefaultValue());
      assertEquals('>', jSONReaderScanner4.getCurrent());
      assertEquals(0, jSONReaderScanner4.token());
      assertEquals(0, jSONReaderScanner4.matchStat);
      
      jSONReaderScanner1.scanNumber();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner4));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner4);
      assertEquals('\"', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(2, jSONReaderScanner1.token());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanUUID('D');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jmo&`X66Cwi|[?$", 51068);
      assertNotNull(jSONScanner0);
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(51068, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(51068, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en_CA", locale1.toString());
      assertEquals("CA", locale1.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertSame(locale0, locale1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      jSONScanner0.setLocale(locale0);
      assertSame(locale0, locale1);
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(51068, jSONScanner0.getFeatures());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jSONScanner0.scanIdent();
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(18, jSONScanner0.token());
      assertEquals('&', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(51068, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSONScanner jSONScanner1 = new JSONScanner("|+<t]>B31p3I9");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals('|', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner0.nextToken(4);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(3, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertEquals('`', jSONScanner0.getCurrent());
      assertEquals(51068, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner1.scanInt('k');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, int0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals('|', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Ht9pN~WsQ{iWT7b)");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('H', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(3691);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbol(symbolTable0);
      assertNotNull(string0);
      assertEquals("Ht9pN", string0);
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('~', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("Q\",~g{D/P0sHd$Nkft");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals('Q', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("s}L`", 3691);
      assertNotNull(jSONReaderScanner0);
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(3691, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanIdent();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(3691, jSONReaderScanner0.getFeatures());
      assertEquals('}', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(13, jSONReaderScanner0.token());
      assertEquals(3691, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('L', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner2 = new JSONScanner("Ht9pN");
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals('H', jSONScanner2.getCurrent());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      
      jSONScanner2.nextToken(0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertFalse(jSONScanner2.isEOF());
      assertEquals('t', jSONScanner2.getCurrent());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.pos());
      assertEquals(1, jSONScanner2.token());
      assertEquals(989, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      
      int int0 = jSONScanner1.scanInt('R');
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner2);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, int0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-1), jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals('Q', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals((-1), jSONScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("-jY#");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&%SN;^mxx38[_4hnW|");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-jY#", 0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, int0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      double double0 = jSONReaderScanner0.scanDouble('C');
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-jY#");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jSONScanner0.nextToken(39);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = Calendar.WEEK_OF_YEAR;
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      float float0 = jSONReaderScanner0.scanFloat('C');
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean3 = linkedHashSet0.add("uJlX-f2Qd,V)");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      jSONReaderScanner0.scanStringArray(linkedHashSet0, 'C');
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("i,V[o\"]53nTQY", 123);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.token());
      assertEquals('i', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(123, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      
      String string0 = jSONScanner1.scanSymbolUnQuoted((SymbolTable) null);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(string0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals("i", string0);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(',', jSONScanner1.getCurrent());
      assertEquals(123, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(18, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      
      int[] intArray0 = jSONScanner1.scanFieldIntArray(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(intArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(',', jSONScanner1.getCurrent());
      assertEquals(123, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(18, jSONScanner1.token());
      assertEquals((-2), jSONScanner1.matchStat);
      
      jSONScanner1.nextToken(34);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(16, jSONScanner1.token());
      assertEquals('V', jSONScanner1.getCurrent());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals(123, jSONScanner1.getFeatures());
      assertEquals(1, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals((-2), jSONScanner1.matchStat);
      
      int int2 = jSONScanner0.scanInt('C');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, int2);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[3] = '9';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '9');
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'9', '9', '\u0000', '9', '\u0000'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '9';
      int int0 = jSONReaderScanner0.scanFieldInt(charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'9', '9', '\u0000', '9', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'9'}, charArray1);
      assertEquals(0, int0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSONScanner jSONScanner0 = new JSONScanner("<Aq{F/LrXz{=s@.|");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('<', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals('A', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("<Aq{F/LrXz{=s@.|", '\u0000');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('<', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner0.setToken(0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('A', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WLE&zN");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('W', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, int0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('W', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('s');
      assertNull(bigDecimal0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('W', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1, 125);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(125, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      double double0 = jSONReaderScanner1.scanDouble('X');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0, double0, 0.01);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('\u0000', jSONReaderScanner1.getCurrent());
      assertTrue(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(125, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanFieldStringArray(charArray0, 125, (SymbolTable) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G[z\"G&hB~,}!n_");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"n\"a'aWEyG");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble(';');
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("G[z\"G&hB~,}!n_", (-1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('G', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"n\"a'aWEyG");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Date date0 = jSONReaderScanner1.scanDate(';');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(date0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('G', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      char[] charArray0 = new char[10];
      JSONScanner jSONScanner0 = new JSONScanner("[XZlx6eN", 6);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(6, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(6);
      assertEquals(14, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('X', jSONScanner0.getCurrent());
      assertEquals(6, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("S}b7");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("com.alibaba.fastjson.parser.JSONLexerBase", 1);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(1, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanNumber();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(1, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("S}b7", 1304);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(1304, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals('S', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      jSONReaderScanner2.nextToken();
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals('}', jSONReaderScanner2.getCurrent());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(1304, jSONReaderScanner2.getFeatures());
      assertEquals(18, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("S}b7");
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner3);
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('S', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals(0, jSONReaderScanner3.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner3.scanFieldDecimal(charArray0);
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertNull(bigDecimal0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner3, jSONReaderScanner1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals((-2), jSONReaderScanner3.matchStat());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.token());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals('S', jSONReaderScanner3.getCurrent());
      assertEquals(0, jSONReaderScanner3.pos());
      assertEquals((-2), jSONReaderScanner3.matchStat);
      
      Date date0 = jSONReaderScanner1.scanFieldDate(charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(date0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals(2, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(1, jSONReaderScanner1.getFeatures());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-2), jSONReaderScanner1.matchStat());
      assertEquals((-2), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BigDecimal bigDecimal0 = new BigDecimal(38);
      assertNotNull(bigDecimal0);
      assertEquals((short)38, bigDecimal0.shortValue());
      assertEquals((byte)38, bigDecimal0.byteValue());
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("W TI$j4h8O(");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('W', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('f', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextIdent();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('$', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("4vs#.a=JM5UZB9h@a>");
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      assertEquals('4', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      String string0 = jSONReaderScanner2.scanString('p');
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNull(string0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals('4', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals((-1), jSONReaderScanner2.matchStat);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringReader stringReader0 = new StringReader("scan true error");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan true error", 'A');
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(65, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      int int0 = jSONReaderScanner0.scanFieldInt(charArray0);
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertEquals(0, int0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(65, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      double double0 = jSONReaderScanner0.scanDouble('A');
      assertEquals(0.0, double0, 0.01);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(65, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("scan true error", 19);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('s', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(19, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      char char0 = jSONScanner0.next();
      assertEquals('c', char0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(19, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(149);
      assertEquals('a', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(19, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "scan true error");
      assertFalse(boolean0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals('a', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(19, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      
      int int1 = Calendar.WEEK_OF_YEAR;
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertEquals('a', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(19, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'`'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(65, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g0", 36);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      boolean boolean0 = jSONReaderScanner0.scanBoolean('>');
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      boolean boolean1 = jSONReaderScanner0.scanBoolean('|');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNull(date0);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0);
      assertNotNull(inputStreamReader0);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(inputStreamReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Stream closed
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "!l&";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!l&");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('!', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanIdent();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('&', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('&', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("!l&", 9);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(9, jSONScanner0.getFeatures());
      assertEquals('!', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("illegal");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals('i', jSONScanner1.getCurrent());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.token());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      
      int int0 = (-5520);
      jSONScanner0.nextToken(9);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('l', jSONScanner0.getCurrent());
      assertEquals(9, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((String) null, 110);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("WriteNullBooleanAsFalse");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('W', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43, 14);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(14, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('*');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(14, jSONReaderScanner0.getFeatures());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONScanner0.scanIdent();
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      Date date0 = jSONScanner0.scanDate('\\');
      assertNull(date0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(18, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(14);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("VA", 1980);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('V', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(1980, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals('A', jSONScanner0.getCurrent());
      assertEquals(1980, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertEquals("en", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      
      Locale locale2 = locale0.stripExtensions();
      assertNotNull(locale2);
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale2.toString());
      assertEquals("CA", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("en", locale2.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      jSONScanner0.setLocale(locale1);
      assertSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals('A', jSONScanner0.getCurrent());
      assertEquals(1980, jSONScanner0.getFeatures());
      assertEquals("en", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertEquals("en_CA", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("VA", 391);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(391, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('V', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray1 = jSONReaderScanner0.sub_chars(95, 95);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(391, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('V', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(95);
      assertNotNull(symbolTable0);
      
      String string0 = jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertNotNull(string0);
      assertEquals("VA", string0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(1980, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(397L, long0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(18, jSONScanner0.token());
      assertEquals(1980, jSONScanner0.getFeatures());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jmo&`X66Cwi|[?$", 51068);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(51068, jSONScanner0.getFeatures());
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("jmo&`X66Cwi|[?$");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals('j', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = 'q';
      charArray0[2] = 'g';
      charArray0[3] = 'm';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 107);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'M', 'q', 'g', 'm', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('M', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = jSONReaderScanner0.scanBoolean('g');
      assertArrayEquals(new char[] {'M', 'q', 'g', 'm', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('M', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Date date0 = jSONReaderScanner0.scanFieldDate(charArray0);
      assertNull(date0);
      assertArrayEquals(new char[] {'M', 'q', 'g', 'm', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('M', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanIdent();
      assertArrayEquals(new char[] {'M', 'q', 'g', 'm', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Date date1 = jSONScanner1.scanDate('S');
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(date1);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals('j', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals((-1), jSONScanner1.matchStat);
      
      jSONScanner0.nextToken(11);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(1, jSONScanner0.token());
      assertEquals(51068, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('m', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanInt('%');
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, int0);
      assertEquals(1, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(51068, jSONScanner0.getFeatures());
      assertEquals('m', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int1 = jSONScanner0.intValue();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertTrue(int1 == int0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, int1);
      assertEquals(1, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(51068, jSONScanner0.getFeatures());
      assertEquals('m', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      int int0 = jSONReaderScanner0.scanType(", ");
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner(", ", 0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(',', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNull(intArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      
      String string0 = jSONReaderScanner0.scanString('c');
      assertNull(string0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      float[][] floatArray0 = jSONScanner1.scanFieldFloatArray2(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNull(floatArray0);
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(jSONScanner1.stringDefaultValue());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.getFeatures());
      assertEquals(',', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals((-2), jSONScanner1.matchStat());
      assertEquals((-2), jSONScanner1.matchStat);
      
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Feature feature0 = Feature.DisableASM;
      boolean boolean1 = jSONScanner0.isEnabled(feature0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(boolean1);
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nul");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanDecimal('X');
      assertNull(bigDecimal0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      String string0 = jSONReaderScanner0.scanString('X');
      assertNull(string0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("$f<*7Ruy]");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('$', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      Date date0 = jSONScanner0.scanFieldDate(charArray0);
      assertNull(date0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('$', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EOF", 0);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanType("false");
      assertEquals((-2), int0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanNumber();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('O', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("false", (-228));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals((-228), jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('f', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner1.nextToken((-2));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(7, jSONScanner1.token());
      assertEquals((-228), jSONScanner1.getFeatures());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.pos());
      assertEquals("", jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      
      JSONScanner jSONScanner2 = new JSONScanner("false", 0);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertNotNull(jSONScanner2);
      assertFalse(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.pos());
      assertEquals('f', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.token());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.matchStat);
      
      String string0 = jSONScanner0.scanFieldString(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNull(string0);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.setToken(1244);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(1244, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-[}x^)aXTV");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(9999);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-[}x^)aXTV");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-[}x^)aXTV", 9999);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertEquals(9999, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanNumber();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(2, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('[', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(9999, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("true", 50);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.pos());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals('t', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.token());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(50, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      jSONReaderScanner2.nextToken();
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner2.pos());
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertTrue(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('\u001A', jSONReaderScanner2.getCurrent());
      assertEquals(6, jSONReaderScanner2.token());
      assertEquals(50, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      JSONReaderScanner jSONReaderScanner3 = new JSONReaderScanner("true");
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner3.equals((Object)jSONReaderScanner2));
      assertNotNull(jSONReaderScanner3);
      assertEquals(0, jSONReaderScanner3.pos());
      assertFalse(jSONReaderScanner3.isEOF());
      assertEquals('t', jSONReaderScanner3.getCurrent());
      assertEquals(989, jSONReaderScanner3.getFeatures());
      assertEquals(0, jSONReaderScanner3.matchStat());
      assertNull(jSONReaderScanner3.stringDefaultValue());
      assertEquals(0, jSONReaderScanner3.token());
      assertEquals(0, jSONReaderScanner3.matchStat);
      
      JSONReaderScanner jSONReaderScanner4 = new JSONReaderScanner("`UeR(o40ZgV:bkKP", (-3980));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner4.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner4);
      assertEquals(0, jSONReaderScanner4.pos());
      assertFalse(jSONReaderScanner4.isEOF());
      assertEquals('`', jSONReaderScanner4.getCurrent());
      assertEquals(0, jSONReaderScanner4.token());
      assertEquals("", jSONReaderScanner4.stringDefaultValue());
      assertEquals((-3980), jSONReaderScanner4.getFeatures());
      assertEquals(0, jSONReaderScanner4.matchStat());
      assertEquals(0, jSONReaderScanner4.matchStat);
      
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner3));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner4));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertNotNull(timeZone0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner3);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner4);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner2.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("jmo&`X66Cwi|[?$", 51068);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(51068, jSONScanner0.getFeatures());
      assertEquals('j', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("jmo&`X66Cwi|[?$");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.pos());
      assertEquals('j', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = 'q';
      charArray0[2] = 'g';
      charArray0[3] = 'm';
      charArray0[4] = 'C';
      charArray0[5] = 'g';
      JSONScanner jSONScanner2 = new JSONScanner(charArray0, 0, (-1766));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner2);
      assertArrayEquals(new char[] {'M', 'q', 'g', 'm', 'C', 'g'}, charArray0);
      assertEquals(0, jSONScanner2.token());
      assertEquals((-1766), jSONScanner2.getFeatures());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.pos());
      assertEquals("", jSONScanner2.stringDefaultValue());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      
      jSONScanner2.nextToken((-1766));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertArrayEquals(new char[] {'M', 'q', 'g', 'm', 'C', 'g'}, charArray0);
      assertEquals((-1766), jSONScanner2.getFeatures());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.pos());
      assertEquals("", jSONScanner2.stringDefaultValue());
      assertEquals(20, jSONScanner2.token());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("e^uq:");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONScanner1.scanIdent();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertFalse(jSONScanner1.equals((Object)jSONScanner2));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertNotSame(jSONScanner1, jSONScanner2);
      assertEquals(18, jSONScanner1.token());
      assertEquals('&', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      UUID uUID0 = jSONReaderScanner0.scanUUID('C');
      assertNull(uUID0);
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('^', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      int int0 = jSONScanner2.intValue();
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner2, jSONScanner1);
      assertNotSame(jSONScanner2, jSONScanner0);
      assertArrayEquals(new char[] {'M', 'q', 'g', 'm', 'C', 'g'}, charArray0);
      assertEquals(0, int0);
      assertEquals((-1766), jSONScanner2.getFeatures());
      assertTrue(jSONScanner2.isEOF());
      assertEquals(0, jSONScanner2.pos());
      assertEquals("", jSONScanner2.stringDefaultValue());
      assertEquals(20, jSONScanner2.token());
      assertEquals('\u001A', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(0, jSONScanner2.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONScanner2.scanString();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nul");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner0.scanType("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONReaderScanner0.lexError("^8sc}v%_m", (Object[]) null);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("nul");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(".class", 0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('.', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      
      jSONReaderScanner1.scanStringArray(set0, 'H');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('.', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.getFeatures());
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('c');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = 'c';
      charArray0[6] = 'c';
      float float0 = jSONReaderScanner0.scanFloat('c');
      assertEquals(0.0F, float0, 0.01F);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[3];
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      char char0 = jSONScanner0.next();
      assertEquals('n', char0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      Collection<String> collection0 = jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertNull(collection0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanStringArray((Collection<String>) null, 'E');
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("undefined");
      assertNotNull(jSONReaderScanner0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('u', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-3189), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      int int0 = jSONReaderScanner0.scanType(", ");
      assertEquals((-2), int0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanNumber();
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jSONReaderScanner0.lexError("null", (Object[]) null);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner(", ");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(',', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null", 9999);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(9999, jSONReaderScanner1.getFeatures());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      
      jSONReaderScanner1.scanStringArray(set0, 'c');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(9999, jSONReaderScanner1.getFeatures());
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner1.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = 'Y';
      charArray0[2] = '>';
      charArray0[3] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, (-525));
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'F', 'Y', '>', '\\', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-525), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'F', 'Y', '>', '\\', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-525), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner(",uV?I`e/!F!5ic", 39);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(39, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner(",uV?I`e/!F!5ic");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(',', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      
      char char0 = jSONScanner1.next();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals('u', char0);
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals('u', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.pos());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      
      JSONScanner jSONScanner2 = new JSONScanner(",uV?I`e/!F!5ic", 39);
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertNotNull(jSONScanner2);
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(',', jSONScanner2.getCurrent());
      assertEquals(39, jSONScanner2.getFeatures());
      assertEquals(0, jSONScanner2.token());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat);
      
      jSONScanner2.nextToken((-320));
      assertFalse(jSONScanner2.equals((Object)jSONScanner0));
      assertFalse(jSONScanner2.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner2, jSONScanner0);
      assertNotSame(jSONScanner2, jSONScanner1);
      assertEquals(0, jSONScanner2.matchStat());
      assertEquals(39, jSONScanner2.getFeatures());
      assertEquals(16, jSONScanner2.token());
      assertEquals('u', jSONScanner2.getCurrent());
      assertEquals(0, jSONScanner2.pos());
      assertFalse(jSONScanner2.isEOF());
      assertNull(jSONScanner2.stringDefaultValue());
      assertEquals(0, jSONScanner2.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",ULOEfG");
      assertFalse(boolean0);
      
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertArrayEquals(new char[] {'F', 'Y', '>', '\\', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(39, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      
      int int0 = Calendar.WEEK_OF_YEAR;
      assertEquals(3, int0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      float[][] floatArray1 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner2));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNull(floatArray1);
      assertNotSame(jSONScanner0, jSONScanner2);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertArrayEquals(new char[] {'F', 'Y', '>', '\\', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(39, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(39);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, 'J');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = "nul";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("nul");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("nul", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      char char0 = 'p';
      UUID uUID0 = jSONScanner0.scanUUID('p');
      assertNull(uUID0);
      assertEquals(0, jSONScanner0.token());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-1), (-316));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(',', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'r';
      BigDecimal bigDecimal0 = jSONScanner0.scanFieldDecimal(charArray0);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'r', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(',', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-2), jSONScanner0.matchStat);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      JSONScanner jSONScanner1 = new JSONScanner("null");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('n', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner1.skipWhitespace();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals('n', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner1.nextToken((-1159));
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(8, jSONScanner1.token());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
      
      int int1 = Calendar.OCTOBER;
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.TypeReference", 12);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(12, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = ']';
      UUID uUID0 = jSONScanner0.scanUUID('i');
      assertNull(uUID0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(12, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.pos = 12;
      assertFalse(jSONScanner0.isEOF());
      assertEquals(12, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(12, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      
      charArray0[2] = '?';
      charArray0[3] = '|';
      JSONScanner jSONScanner1 = new JSONScanner("com.alibaba.fastjson.TypeReference");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertFalse(jSONScanner1.isEOF());
      assertEquals('c', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner0.skipWhitespace();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(12, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(12, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(12);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(jSONScanner0.isEOF());
      assertEquals('o', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
      assertEquals(12, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6)", (-1720367624));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-1720367624), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      jSONReaderScanner0.setToken(191);
      assertEquals(191, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals((-1720367624), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(2798);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner(" c", 48);
      assertNotNull(jSONScanner0);
      assertEquals(48, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("EF", 0);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('E', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("!b@GV?9P`'[T8");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals('!', jSONScanner1.getCurrent());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner0.skipWhitespace();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(123);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(23, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // undefined
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = JSONLexerBase.isWhitespace('\r');
      assertTrue(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("errgor parse fase", 3367);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('e', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(3367, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Feature feature0 = Feature.CustomMapDeserializer;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = 'Y';
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals('T', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(46);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(22, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertArrayEquals(new char[] {'F', 'Y'}, charArray0);
      assertFalse(boolean0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(22, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(46);
      assertNotNull(symbolTable0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 7, json : TreeSet
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6)", (-1720367624));
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1720367624), jSONReaderScanner0.getFeatures());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = '\'';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertArrayEquals(new char[] {'0', '\''}, charArray0);
      assertFalse(boolean0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1720367624), jSONReaderScanner0.getFeatures());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertNull(string0);
      assertArrayEquals(new char[] {'0', '\''}, charArray0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1720367624), jSONReaderScanner0.getFeatures());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(127);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(22, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
      
      int int1 = jSONScanner0.intValue();
      assertFalse(int1 == int0);
      assertEquals(43183, int1);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(22, jSONScanner0.token());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanFieldLong(charArray0);
      assertArrayEquals(new char[] {'0', '\''}, charArray0);
      assertEquals(0L, long0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1720367624), jSONReaderScanner0.getFeatures());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      JSONScanner jSONScanner0 = new JSONScanner("]d<s:", 36);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(']', jSONScanner0.getCurrent());
      assertEquals(36, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      char char0 = jSONScanner0.next();
      assertEquals('d', char0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('d', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(36, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(149);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('<', jSONScanner0.getCurrent());
      assertEquals(36, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]d<s:");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("g0");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('g', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat);
      
      float float0 = jSONScanner1.scanFieldFloat(charArray0);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-1), jSONScanner1.matchStat());
      assertEquals(989, jSONScanner1.getFeatures());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals('g', jSONScanner1.getCurrent());
      assertEquals((-1), jSONScanner1.matchStat);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
      
      int int1 = jSONScanner0.intValue();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(int1 == int0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(0, int1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(1, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('<', jSONScanner0.getCurrent());
      assertEquals(36, jSONScanner0.getFeatures());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("-[}x^)aXTV");
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('-', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(9999);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(2, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('[', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-[}x^)aXTV");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-[}x^)aXTV", 9999);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(9999, jSONReaderScanner1.getFeatures());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("-[}x^)aXTV", 848);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(848, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertFalse(jSONScanner1.isEOF());
      assertEquals('-', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.token());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      
      jSONScanner0.nextToken((-25));
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals(14, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('}', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-[}x^)aXTV");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(14, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('}', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.pos());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int0 = Calendar.WEEK_OF_YEAR;
      assertEquals(3, int0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNull(floatArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(14, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('}', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.pos());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = 'Y';
      charArray0[2] = '>';
      charArray0[3] = '\\';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39, (-525));
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'F', 'Y', '>', '\\', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-525), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      float[] floatArray0 = jSONReaderScanner0.scanFieldFloatArray(charArray0);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'F', 'Y', '>', '\\', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-525), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals('F', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner(",uV?I`e/!F!5ic", 39);
      assertNotNull(jSONScanner0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(39, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner(",uV?I`e/!F!5ic");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(',', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      
      char char0 = jSONScanner0.next();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertEquals('u', char0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('u', jSONScanner0.getCurrent());
      assertEquals(39, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONReaderScanner0.scanNumber();
      assertArrayEquals(new char[] {'F', 'Y', '>', '\\', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals('Y', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(3, jSONReaderScanner0.token());
      assertEquals((-525), jSONReaderScanner0.getFeatures());
      assertEquals("", jSONReaderScanner0.stringDefaultValue());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONScanner0.nextToken(39);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(39, jSONScanner0.getFeatures());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      int int0 = jSONScanner1.intValue();
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotSame(jSONScanner1, jSONScanner0);
      assertEquals(0, int0);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(',', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat);
      
      int[] intArray0 = jSONScanner0.scanFieldIntArray(charArray0);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNull(intArray0);
      assertNotSame(jSONScanner0, jSONScanner1);
      assertArrayEquals(new char[] {'F', 'Y', '>', '\\', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(jSONScanner0.stringDefaultValue());
      assertFalse(jSONScanner0.isEOF());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals(18, jSONScanner0.token());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(39, jSONScanner0.getFeatures());
      assertEquals('?', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      char[] charArray0 = new char[2];
      char char0 = '+';
      charArray0[0] = '+';
      char char1 = 'p';
      charArray0[1] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1717);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'+', 'p'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) jSONReaderScanner0;
      objectArray0[3] = (Object) null;
      jSONReaderScanner0.lexError((String) null, objectArray0);
      assertArrayEquals(new char[] {'+', 'p'}, charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('+', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol((SymbolTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : +
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g0", 40);
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[1];
      jSONReaderScanner0.close();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      charArray0[0] = 'g';
      jSONReaderScanner0.setToken(191);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(191, jSONReaderScanner0.token());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanNumber();
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('g', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(40, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("g0");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('g', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      float[][] floatArray0 = jSONScanner0.scanFieldFloatArray2(charArray0);
      assertNull(floatArray0);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('g', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("g0", 40);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('g', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(40, jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('g', jSONScanner0.getCurrent());
      assertEquals((-2), jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("g0");
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('g', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner2.scanFieldDecimal(charArray0);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNull(bigDecimal0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertEquals('g', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals((-1), jSONReaderScanner2.matchStat);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("N)DKL\";:", 57344);
      assertNotNull(jSONReaderScanner0);
      assertEquals(57344, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.skipWhitespace();
      assertEquals(57344, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      assertEquals(1.0, double0, 0.01);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("N)DKL\";:", 103);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(103, jSONReaderScanner1.getFeatures());
      assertEquals('N', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      char[] charArray0 = new char[0];
      BigInteger bigInteger0 = jSONReaderScanner1.scanFieldBigInteger(charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(bigInteger0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(103, jSONReaderScanner1.getFeatures());
      assertEquals('N', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.nextToken();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(103, jSONReaderScanner1.getFeatures());
      assertEquals(18, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(')', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner0.nextIdent();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals(57344, jSONReaderScanner0.getFeatures());
      assertEquals(')', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      String string0 = jSONReaderScanner1.scanString('a');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(string0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(103, jSONReaderScanner1.getFeatures());
      assertEquals(18, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(')', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.pos());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[", 36);
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(36, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      JSONScanner jSONScanner0 = new JSONScanner("L", 0);
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('L', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      char char0 = jSONScanner0.next();
      assertEquals('\u001A', char0);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(36);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.sp = 36;
      assertTrue(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.getFeatures());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[");
      assertFalse(boolean0);
      
      JSONScanner jSONScanner1 = new JSONScanner("");
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(989, jSONScanner1.getFeatures());
      assertEquals('\u001A', jSONScanner1.getCurrent());
      assertEquals(0, jSONScanner1.matchStat());
      assertTrue(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.token());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.matchStat);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '\u001A';
      charArray1[1] = 'q';
      charArray1[2] = 'g';
      charArray1[3] = 'g';
      float float0 = jSONScanner0.scanFieldFloat(charArray1);
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'\u001A', 'q', 'g', 'g'}, charArray1);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(jSONScanner0.isEOF());
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.getFeatures());
      assertEquals((-2), jSONScanner0.matchStat());
      assertEquals((-2), jSONScanner0.matchStat);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
      
      // Undeclared exception!
      try { 
        jSONScanner0.intValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[", 28);
      assertNotNull(jSONReaderScanner0);
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(28, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(28, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("PI_OO|{Od=7t%Y", (-1));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('P', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      String string0 = jSONReaderScanner1.scanFieldString(charArray0);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(string0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('P', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      Date date0 = jSONReaderScanner1.scanDate('m');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(date0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('P', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanIdent();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals('_', jSONReaderScanner1.getCurrent());
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner1.getFeatures());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("Mw@5");
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('M', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.skipWhitespace();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals('M', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken((-1));
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("IgnoreAutoType", (-1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-1), jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals('I', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean1 = hashSet0.add("PI_OO|{Od=7t%Y");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      jSONReaderScanner0.scanStringArray(hashSet0, 'I');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(28, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner2.scanFloat('R');
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals((-1), jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals('I', jSONReaderScanner2.getCurrent());
      assertEquals((-1), jSONReaderScanner2.matchStat);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals('w', jSONScanner0.getCurrent());
      assertEquals(1, jSONScanner0.token());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONReaderScanner2.close();
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals((-1), jSONReaderScanner2.getFeatures());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals("", jSONReaderScanner2.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner2.matchStat());
      assertEquals('I', jSONReaderScanner2.getCurrent());
      assertEquals((-1), jSONReaderScanner2.matchStat);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-[}x^)aXTV");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-[}x^)aXTV", 9999);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(9999, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.skipWhitespace();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('-', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(9999, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = 'R';
      charArray0[2] = '\\';
      charArray0[3] = '4';
      charArray0[4] = '*';
      charArray0[5] = 'm';
      charArray0[6] = '3';
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("5>~8lB");
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotNull(jSONReaderScanner2);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('5', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      Date date0 = jSONReaderScanner0.scanDate('m');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(date0);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('-', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner1.scanIdent();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('[', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(9999, jSONReaderScanner1.getFeatures());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner2));
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner2);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('[', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      int int0 = jSONReaderScanner2.scanType("@nGD2WT!,Nt");
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner2, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner2, jSONReaderScanner1);
      assertEquals((-2), int0);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals(989, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals('5', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("5>~8lB", 59);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('5', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(59, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean('m');
      assertFalse(boolean0);
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('5', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(59, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 102);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'q', 'q'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('q', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("\u0000Y");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('\u0000', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(18);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(1, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(1, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, 19, (-439));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("true");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("true", 26);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertEquals(0, jSONScanner1.pos());
      assertEquals(26, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.token());
      assertEquals('t', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.matchStat);
      
      boolean boolean0 = jSONScanner0.isRef();
      assertFalse(jSONScanner0.equals((Object)jSONScanner1));
      assertNotSame(jSONScanner0, jSONScanner1);
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('t', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = 'J';
      charArray0[2] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 79, 6);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'', 'J', '4'}, charArray0);
      assertEquals(6, jSONReaderScanner0.getFeatures());
      assertEquals('', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextToken();
      assertArrayEquals(new char[] {'', 'J', '4'}, charArray0);
      assertEquals(6, jSONReaderScanner0.getFeatures());
      assertEquals(1, jSONReaderScanner0.pos());
      assertEquals(1, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('4', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextIdent();
      assertArrayEquals(new char[] {'', 'J', '4'}, charArray0);
      assertEquals(6, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      String string0 = jSONReaderScanner0.scanString('4');
      assertNull(string0);
      assertArrayEquals(new char[] {'', 'J', '4'}, charArray0);
      assertEquals(6, jSONReaderScanner0.getFeatures());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(2, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(2, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[0] = '+';
      charArray0[11] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5>~8lB");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Date date0 = jSONReaderScanner0.scanDate('4');
      assertNull(date0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("illegal.char", 19);
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('i', jSONReaderScanner1.getCurrent());
      assertEquals(19, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      BigDecimal bigDecimal0 = jSONReaderScanner1.scanDecimal('p');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(bigDecimal0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals('i', jSONReaderScanner1.getCurrent());
      assertEquals(19, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.scanIdent();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals('.', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(18, jSONReaderScanner1.token());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(19, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.nextToken();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(7, jSONReaderScanner1.pos());
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(25, jSONReaderScanner1.token());
      assertEquals(19, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      int int0 = jSONReaderScanner0.scanType("!K=rkF]<pG\u0004[{");
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals((-2), int0);
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('5', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner(" t5T1^Z;@% ", 0);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean('*');
      assertFalse(boolean0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(' ', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      
      boolean boolean1 = jSONReaderScanner1.isEOF();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertFalse(boolean1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(7, jSONReaderScanner1.pos());
      assertEquals('c', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(25, jSONReaderScanner1.token());
      assertEquals(19, jSONReaderScanner1.getFeatures());
      assertEquals((-1), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.TypeReference");
      assertNotNull(jSONReaderScanner0);
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("..", (-1164));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1164), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('.', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.skipWhitespace();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1164), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('.', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      jSONReaderScanner0.setToken(12);
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertEquals(12, jSONReaderScanner0.token());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('c', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.TypeReference", 465);
      assertNotNull(jSONScanner0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(465, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = '-';
      charArray0[2] = '|';
      charArray0[3] = '&';
      charArray0[4] = 'i';
      jSONReaderScanner1.scanNumber();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1164), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(3, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('.', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      charArray0[5] = 'e';
      jSONScanner0.sbuf = charArray0;
      assertFalse(jSONScanner0.isEOF());
      assertEquals(465, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("InitStringFieldAsEmpty", 10);
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner1));
      assertFalse(jSONReaderScanner2.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner2);
      assertNull(jSONReaderScanner2.stringDefaultValue());
      assertEquals(0, jSONReaderScanner2.token());
      assertEquals(10, jSONReaderScanner2.getFeatures());
      assertFalse(jSONReaderScanner2.isEOF());
      assertEquals(0, jSONReaderScanner2.pos());
      assertEquals(0, jSONReaderScanner2.matchStat());
      assertEquals('I', jSONReaderScanner2.getCurrent());
      assertEquals(0, jSONReaderScanner2.matchStat);
      
      Calendar calendar0 = jSONReaderScanner1.getCalendar();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner2));
      assertNull(calendar0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner2);
      assertEquals("", jSONReaderScanner1.stringDefaultValue());
      assertEquals((-1164), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(3, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('.', jSONReaderScanner1.getCurrent());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertFalse(jSONScanner0.isEOF());
      assertEquals(465, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TODO");
      assertNotNull(jSONScanner0);
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = '&';
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[2] = '&';
      Date date0 = jSONScanner0.scanDate('4');
      assertNull(date0);
      assertEquals('T', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(2);
      assertEquals(18, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int0 = jSONScanner0.scanInt('&');
      assertEquals(0, int0);
      assertEquals(18, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
      
      int int1 = jSONScanner0.intValue();
      assertFalse(int1 == int0);
      assertEquals(39331, int1);
      assertEquals(18, jSONScanner0.token());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".class");
      assertNotNull(jSONScanner0);
      assertEquals('.', jSONScanner0.getCurrent());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken(9999);
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals('c', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(25, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".class");
      assertNotNull(jSONReaderScanner0);
      assertEquals('.', jSONReaderScanner0.getCurrent());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SymbolTable symbolTable0 = new SymbolTable(281);
      assertNotNull(symbolTable0);
      
      String string0 = symbolTable0.addSymbol("\"j>%sU?TR6R1.Oahsk'", 0, 0, (-6138), false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      JSONScanner jSONScanner1 = new JSONScanner("\"j>%sU?TR6R1.Oahsk'", 9999);
      assertFalse(jSONScanner1.equals((Object)jSONScanner0));
      assertNotNull(jSONScanner1);
      assertNull(jSONScanner1.stringDefaultValue());
      assertEquals(9999, jSONScanner1.getFeatures());
      assertEquals(0, jSONScanner1.matchStat());
      assertEquals(0, jSONScanner1.pos());
      assertEquals(0, jSONScanner1.token());
      assertEquals('\"', jSONScanner1.getCurrent());
      assertFalse(jSONScanner1.isEOF());
      assertEquals(0, jSONScanner1.matchStat);
      
      // Undeclared exception!
      try { 
        jSONScanner1.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 68, 411);
      assertNotNull(jSONReaderScanner0);
      assertArrayEquals(new char[] {'9', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(411, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('s');
      assertArrayEquals(new char[] {'9', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9L, long0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(411, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals('9', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      char char0 = '(';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('(');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6)", (-1720367624));
      assertNotNull(jSONReaderScanner0);
      assertEquals((-1720367624), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      jSONReaderScanner0.scanStringArray(hashSet0, 'U');
      assertEquals((-1720367624), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      float float0 = jSONReaderScanner0.scanFloat('U');
      assertEquals(6.0F, float0, 0.01F);
      assertEquals((-1720367624), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(99999999);
      assertNotNull(symbolTable0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[5] = '3';
      charArray0[6] = 'U';
      boolean boolean0 = jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertArrayEquals(new char[] {'U', '3', '3', '\u0000', '\u0000', '3', 'U', '\u0000'}, charArray0);
      assertFalse(boolean0);
      assertEquals((-1720367624), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      String string0 = jSONReaderScanner0.scanFieldString(charArray0);
      assertNull(string0);
      assertArrayEquals(new char[] {'U', '3', '3', '\u0000', '\u0000', '3', 'U', '\u0000'}, charArray0);
      assertEquals((-1720367624), jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals('6', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("null");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.skipWhitespace();
      assertEquals(0, jSONScanner0.matchStat());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals('n', jSONScanner0.getCurrent());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.nextToken((-22));
      assertEquals('\u001A', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertTrue(jSONScanner0.isEOF());
      assertEquals(8, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.pos());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null", (-1720367624));
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertEquals('n', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.pos());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals((-1720367624), jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(3, set0.size());
      
      HashSet<String> hashSet1 = new HashSet<String>();
      assertTrue(hashSet1.equals((Object)hashSet0));
      assertNotNull(hashSet1);
      assertTrue(hashSet1.isEmpty());
      assertEquals(0, hashSet1.size());
      
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanStringArray(hashSet1, '\u0000');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StringReader stringReader0 = new StringReader("scan true error");
      assertNotNull(stringReader0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan true error", 'A');
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(65, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('s', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.pos());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner0 = new JSONScanner("rp4woyg6r");
      assertNotNull(jSONScanner0);
      assertEquals('r', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Enum<?> enum0 = jSONScanner0.scanEnum(class0, (SymbolTable) null, 'A');
      assertNull(enum0);
      assertEquals('r', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals((-1), jSONScanner0.matchStat());
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals((-1), jSONScanner0.matchStat);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'c';
      charArray0[1] = 'A';
      charArray0[2] = '\\';
      charArray0[3] = 'A';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",j5\u0004LfT2J0J -I", 1401);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      String string0 = "<^W6c-'k^Sc_K\\f6eM";
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<^W6c-'k^Sc_K\f6eM");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      jSONReaderScanner0.lexError((String) null, (Object[]) null);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      int int0 = 45;
      SymbolTable symbolTable0 = new SymbolTable(45);
      assertNotNull(symbolTable0);
      
      String string1 = jSONReaderScanner0.scanSymbol(symbolTable0);
      assertNull(string1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Date date0 = jSONReaderScanner0.scanDate('1');
      assertNull(date0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      String string2 = jSONReaderScanner0.stringVal();
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      jSONReaderScanner0.scanStringArray(linkedList0, '1');
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      BigDecimal bigDecimal0 = jSONReaderScanner0.scanFieldDecimal(charArray0);
      assertNull(bigDecimal0);
      assertArrayEquals(new char[] {'1', '1', '1', '1'}, charArray0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(16, jSONReaderScanner0.token());
      assertEquals(1401, jSONReaderScanner0.getFeatures());
      assertEquals(0, jSONReaderScanner0.pos());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('j', jSONReaderScanner0.getCurrent());
      assertEquals((-2), jSONReaderScanner0.matchStat());
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("G[z\"G&hB~,}!n_");
      assertNotNull(jSONScanner0);
      assertEquals(0, jSONScanner0.pos());
      assertEquals('G', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.hasSpecial = false;
      assertEquals(0, jSONScanner0.pos());
      assertEquals('G', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.token());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(989, jSONScanner0.getFeatures());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(0, jSONScanner0.matchStat());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "G[z\"G&hB~,}!n_");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\"n\"a'aWEyG");
      assertNotNull(jSONReaderScanner0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Date date0 = jSONReaderScanner0.scanDate('d');
      assertNull(date0);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals('\"', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.nextIdent();
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(4, jSONReaderScanner0.token());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      Date date1 = jSONReaderScanner0.scanDate('`');
      assertNull(date1);
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(4, jSONReaderScanner0.token());
      assertEquals('a', jSONReaderScanner0.getCurrent());
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1485);
      assertNotNull(symbolTable0);
      
      JSONScanner jSONScanner0 = new JSONScanner(", ");
      assertNotNull(jSONScanner0);
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
      assertFalse(jSONScanner0.isEOF());
      assertEquals(0, jSONScanner0.token());
      assertNull(jSONScanner0.stringDefaultValue());
      assertEquals(',', jSONScanner0.getCurrent());
      assertEquals(0, jSONScanner0.matchStat());
      assertEquals(0, jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      assertNotNull(jSONReaderScanner0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      int int0 = jSONReaderScanner0.scanType(", ");
      assertEquals((-2), int0);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals(0, jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EOF error");
      assertFalse(boolean0);
      
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("java.awt.");
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotNull(jSONReaderScanner1);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals(0, jSONReaderScanner1.matchStat());
      assertEquals('j', jSONReaderScanner1.getCurrent());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals(0, jSONReaderScanner1.matchStat);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      Date date0 = jSONReaderScanner1.scanDate('S');
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNull(date0);
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(0, jSONReaderScanner1.token());
      assertEquals('j', jSONReaderScanner1.getCurrent());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      jSONReaderScanner1.nextIdent();
      assertFalse(jSONReaderScanner1.equals((Object)jSONReaderScanner0));
      assertNotSame(jSONReaderScanner1, jSONReaderScanner0);
      assertEquals('.', jSONReaderScanner1.getCurrent());
      assertNull(jSONReaderScanner1.stringDefaultValue());
      assertEquals(989, jSONReaderScanner1.getFeatures());
      assertEquals(0, jSONReaderScanner1.pos());
      assertEquals(18, jSONReaderScanner1.token());
      assertEquals((-1), jSONReaderScanner1.matchStat());
      assertFalse(jSONReaderScanner1.isEOF());
      assertEquals((-1), jSONReaderScanner1.matchStat);
      
      Date date1 = jSONReaderScanner0.scanDate('d');
      assertFalse(jSONReaderScanner0.equals((Object)jSONReaderScanner1));
      assertNull(date1);
      assertNotSame(jSONReaderScanner0, jSONReaderScanner1);
      assertNull(jSONReaderScanner0.stringDefaultValue());
      assertEquals(0, jSONReaderScanner0.pos());
      assertEquals(0, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals((-1), jSONReaderScanner0.matchStat());
      assertEquals(0, jSONReaderScanner0.token());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }
}
