/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 11:56:58 GMT 2019
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.CollectionCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.Line2D;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.Clock;
import java.time.Period;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoChronology;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.Comparator;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.ToDoubleFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class0 = Short.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = new Stack<FieldInfo>();
      TypeUtils.getClass((Type) class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<Rectangle> class1 = Rectangle.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) null, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "matchedCount");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      MockThread mockThread2 = new MockThread();
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      classLoader0.clearAssertionStatus();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("J", (ClassLoader) aSMClassLoader0, true);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.getCollectionItemClass(class0);
      Class<Character> class1 = Character.TYPE;
      TypeUtils.getRawClass(class1);
      TypeUtils.decapitalize("can not cast to Date, value : ");
      Class<Dimension> class2 = Dimension.class;
      TypeUtils.getParserFeatures(class2);
      TypeUtils.isGenericParamType(class0);
      Float float0 = new Float((float) 0);
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(dateFormatSymbols0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils.loadClass("Modifiers");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.loadClass("Modifiers");
      TypeUtils.decapitalize("Modifiers");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("Modifiers", hashtable0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TypeUtils.loadClass("Modifiers");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.loadClass("Modifiers");
      TypeUtils.decapitalize("Modifiers");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("Modifiers", hashtable0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLIntegrityConstraintViolationException0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "HOUR0_FIELD";
      TypeUtils.loadClass("HOUR0_FIELD");
      String string1 = "yyyy/MM/dd HH:mm:ss";
      StackTraceElement stackTraceElement0 = new StackTraceElement("HOUR0_FIELD", "yyyy/MM/dd HH:mm:ss", "yyyy/MM/dd HH:mm:ss", 19);
      String string2 = "B";
      String string3 = "9~KMjt";
      StackTraceElement stackTraceElement1 = new StackTraceElement("9~KMjt", "yyyy/MM/dd HH:mm:ss", "9~KMjt", 28);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.getAnnotation((Class<?>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Float> class0 = Float.class;
      SerializeConfig serializeConfig0 = new SerializeConfig(14);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      String[] stringArray0 = new String[6];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[3] = "ZEQ(s>f6[&";
      stringArray0[4] = "@type";
      stringArray0[5] = "yyyy-MM-dd HH:mm:ss";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[1] = (SerializeFilter) pascalNameFilter0;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[2] = (SerializeFilter) pascalNameFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[3] = (SerializeFilter) simplePropertyPreFilter1;
      SimplePropertyPreFilter simplePropertyPreFilter2 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[4] = (SerializeFilter) simplePropertyPreFilter2;
      SimplePropertyPreFilter simplePropertyPreFilter3 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[5] = (SerializeFilter) simplePropertyPreFilter3;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullListAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.MapSortField;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[5] = serializerFeature5;
      JSON.toJSONString((Object) jSONObject0, serializeConfig0, serializeFilterArray0, serializerFeatureArray0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<StackTraceElementDeserializer> class1 = StackTraceElementDeserializer.class;
      parserConfig0.createJavaBeanDeserializer(class1, class0);
      parserConfig0.getDeserializer((Type) class0);
      Float float0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedHashSet<Throwable> linkedHashSet0 = new LinkedHashSet<Throwable>();
      ParserConfig parserConfig0 = new ParserConfig(true);
      LinkedHashMap<SQLRecoverableException, NoSuchMethodException> linkedHashMap0 = new LinkedHashMap<SQLRecoverableException, NoSuchMethodException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getSerializeFeatures(class0);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("l&ANTm&]n4W@^Cg_0[:", "9EY3vw-yj$");
      hashtable0.put("l&ANTm&]n4W@^Cg_0[:", "l&ANTm&]n4W@^Cg_0[:");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("weeqj.x");
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.isPath(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "$yE nvj9<<pG5$)PnYN";
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.compute("$yE nvj9<<pG5$)PnYN", biFunction0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      hashMap0.clear();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0, true);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      // Undeclared exception!
      try { 
        concurrentHashMap0.reduceKeys(0L, (Function<? super String, ? extends StackTraceElementDeserializer>) null, (BiFunction<? super StackTraceElementDeserializer, ? super StackTraceElementDeserializer, ? extends StackTraceElementDeserializer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.decapitalize("w1 L_&AyM!Z_e?l4,5");
      Integer integer0 = new Integer((-12473307));
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("w1 L_&AyM!Z_e?l4,5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : w1 L_&AyM!Z_e?l4,5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Float> class0 = Float.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("com.alibaba.fastjson.JSONPObject", "com.alibaba.fastjson.JSONPObject");
      hashtable0.put("ay*:+B[A", "hQ'CxQ/Dbo8 w");
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      classLoader0.setDefaultAssertionStatus(false);
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      parserConfig0.compatibleWithJavaBean = true;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, true, false);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      parserConfig0.getDeserializer((Type) javaBeanInfo0.clazz);
      charArray0[1] = '2';
      charArray0[2] = ':';
      charArray0[3] = 'O';
      charArray0[4] = 'W';
      charArray0[5] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      javaBeanDeserializer0.createInstance(defaultJSONParser0, (Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(javaBeanDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer@9d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, false);
      TypeUtils.decapitalize("getTimeZone");
      TypeUtils.getRawClass(class1);
      TypeUtils.getParserFeatures(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "getTimeZone", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<SimpleDateFormat> class1 = SimpleDateFormat.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<DecimalFormat> class3 = DecimalFormat.class;
      TypeUtils.buildBeanInfo((Class<?>) class3, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      TypeUtils.decapitalize("getgetClass");
      Class<?> class4 = TypeUtils.getRawClass(class2);
      Class<TimeDeserializer> class5 = TimeDeserializer.class;
      TypeUtils.getParserFeatures(class5);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class4, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.SimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "cause";
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      identityHashMap0.values();
      identityHashMap0.put("ies2R!t6z BA+NH_,", "*-M_PqE?");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      identityHashMap0.put("gettoPattern", "ies2R!t6z BA+NH_,");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      Integer integer0 = new Integer((-2956));
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {ies2R!t6z BA+NH_,=*-M_PqE?, gettoPattern=ies2R!t6z BA+NH_,}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TypeUtils.loadClass("^?p,jCh8f");
      TypeUtils.getKoltinConstructorParameters((Class) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>(79);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      identityHashMap1.remove((Object) dateFormatSymbols0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      identityHashMap1.put("yyyyMMddHHmmssSSSZ", "getgetCause");
      java.util.IdentityHashMap<String, String> identityHashMap2 = new java.util.IdentityHashMap<String, String>();
      dateFormatSymbols0.setLocalPatternChars("serialVersionUID");
      identityHashMap2.put("yyyyMMddHHmmssSSSZ", "T}LyzI$");
      Float float0 = new Float(Float.POSITIVE_INFINITY);
      Float float1 = new Float((double) 79);
      TypeUtils.castToTimestamp(float1);
      TypeUtils.toLocale("getgetCause");
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException((String) null, "T}LyzI$", 1175, intArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(batchUpdateException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.unwrapOptional(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class1 = TypeUtils.loadClass("", (ClassLoader) aSMClassLoader0, false);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedHashSet<Throwable> linkedHashSet0 = new LinkedHashSet<Throwable>();
      ParserConfig parserConfig0 = new ParserConfig(true);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(C)F");
      AtomicInteger atomicInteger0 = new AtomicInteger((-1934176825));
      TypeUtils.castToInt(atomicInteger0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      ConcurrentHashMap<Double, String> concurrentHashMap0 = null;
      try {
        concurrentHashMap0 = new ConcurrentHashMap<Double, String>((-1135281595), 2589.8098F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      TypeUtils.getCollectionItemClass(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0, true);
      Class<Character> class2 = Character.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Character
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedHashSet<Throwable> linkedHashSet0 = new LinkedHashSet<Throwable>();
      ParserConfig parserConfig0 = new ParserConfig(true);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("ies2R!t6z BA+NH_,", "*-M_PqE?");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      ParserConfig parserConfig1 = new ParserConfig();
      ParserConfig parserConfig2 = ParserConfig.global;
      Class<BufferCapabilities> class2 = BufferCapabilities.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig2, class2);
      TypeUtils.getCollectionItemClass(class1);
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class0;
      Class<Double> class3 = Double.TYPE;
      typeArray0[3] = (Type) class3;
      typeArray0[4] = (Type) class2;
      typeArray0[5] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, class3);
      ParserConfig parserConfig3 = new ParserConfig(true);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("*-M_PqE?", (String) null, 46);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTimeoutException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class org.evosuite.runtime.mock.java.util.MockGregorianCalendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TypeUtils.loadClass((String) null);
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isGenericParamType((Type) null);
      Type type0 = TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class com.alibaba.fastjson.parser.deserializer.TimeDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.text.DecimalFormatSymbols@1073a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TypeUtils.fnv1a_64("^/i");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, Field> hashMap1 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("^/i", hashMap0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Class<Byte> class0 = Byte.TYPE;
      ClassLoader.getSystemClassLoader();
      TypeUtils.isProxy(class0);
      Long long0 = new Long((-4407498900588407335L));
      TypeUtils.castToDouble((Object) null);
      TypeUtils.isNumber("siz");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      String string0 = TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedHashSet<Throwable> linkedHashSet0 = new LinkedHashSet<Throwable>();
      ParserConfig parserConfig0 = new ParserConfig(true);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("ies2R!t6z BA+NH_,", "*-M_PqE?");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      Integer integer0 = new Integer((-2956));
      Class<SQLException> class1 = SQLException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "cause", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      TypeUtils.toLocale("andIncrement");
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      treeMap0.replace("StF][aO", "t_@$");
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("scanFieldFloatArray2");
      Class<Rectangle> class0 = Rectangle.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.merge(">L", "", biFunction0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      Class<MessageFormat> class1 = MessageFormat.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      TypeUtils.loadClass("scanFieldFloatArray2");
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.isHibernateInitialized("");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>(2347);
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<TimeUnit> class1 = TimeUnit.class;
      Class<RuntimeException> class2 = RuntimeException.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("-9223372036854775808", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("sp", class2, class1, class2, (Field) null, 1, (-2147483647), (-300));
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      BeanContext beanContext1 = new BeanContext(class3, fieldInfo0);
      beanContext0.getField();
      beanContext1.getField();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("9=d7lk/[7bxE", hashMap0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Insets insets0 = new Insets(2147483645, (-3229), (-250964063), (-2147483647));
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(insets0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      TypeUtils.isGenericParamType(class0);
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedHashSet<Throwable> linkedHashSet0 = new LinkedHashSet<Throwable>();
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<BigInteger> class1 = BigInteger.class;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, false);
      TypeUtils.decapitalize("fastjson.parser.deny");
      TypeUtils.getRawClass(class0);
      TypeUtils.getParserFeatures(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      Class<Long> class2 = Long.TYPE;
      ParserConfig parserConfig2 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig1, (Type) class2, parserConfig2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.parser.ParserConfig@e5
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      Thread thread0 = MockThread.currentThread();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, ";05z)A2LIJ[Y}gm=");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader.getSystemClassLoader();
      mockThread0.setContextClassLoader(classLoader0);
      MockThread.dumpStack();
      TypeUtils.unwrapOptional(class0);
      TypeUtils.getClassFromMapping("getCurrencySymbol");
      Class<Locale> class2 = Locale.class;
      Locale locale0 = TypeUtils.castToJavaBean((Object) ";05z)A2LIJ[Y}gm=", class2);
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class0 = Short.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      TypeUtils.getClass((Type) class0);
      Class<DecimalFormat> class1 = DecimalFormat.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "NZ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "NZ");
      Class<Byte> class0 = Byte.TYPE;
      Type type0 = TypeUtils.unwrapOptional(class0);
      Type type1 = TypeUtils.getCollectionItemType(type0);
      TypeUtils.castToTimestamp((Object) null);
      TypeUtils.isProxy(class0);
      TypeUtils.unwrapOptional(class0);
      TypeUtils.getClassFromMapping("syntax error, expect {, actual ");
      Class<?> class1 = TypeUtils.getClass(type1);
      TypeUtils.isKotlin(class1);
      Class<Jdk8DateCodec> class2 = Jdk8DateCodec.class;
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "java.util.HashMap";
      TypeUtils.loadClass("java.util.HashMap");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jSONType0).toString();
      StackTraceElement stackTraceElement0 = new StackTraceElement("b", "b", "b", (-1846192210));
      LinkedHashMap<SQLRecoverableException, NoSuchMethodException> linkedHashMap0 = new LinkedHashMap<SQLRecoverableException, NoSuchMethodException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(jSONType0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      TypeUtils.getSerializeFeatures(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      Class<TimeZone> class1 = TimeZone.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      IllegalThreadStateException illegalThreadStateException1 = new IllegalThreadStateException();
      byte[] byteArray0 = TypeUtils.castToBytes("_t ");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class0 = Short.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      TypeUtils.getClass((Type) class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.castToDouble((Object) null);
      Class<?> class1 = TypeUtils.getClassFromMapping("<o5gD}[E");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      String string0 = TypeUtils.castToString(mockDateFormat0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.loadClass("org.springframework.cglib.proxy.Factory");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("/1X%gKDm,G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : /1X%gKDm,G
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      String string0 = "to";
      TypeUtils.decapitalize("to");
      String string1 = "Ljava.util.concurrent.ConcurrentSkipListSet";
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("to");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("F", "Ljava.util.concurrent.ConcurrentSkipListSet", (String) null, 1479);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string2 = "java/lang/Short";
      illegalAccessError0.getStackTrace();
      StackTraceElement stackTraceElement1 = new StackTraceElement("Ljava.awt.Rectangle", "java/lang/Short", "it", 1479);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = null;
      try {
        stackTraceElement2 = new StackTraceElement((String) null, "java.awt.Rectangle", "java.awt.Rectangle", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TypeUtils.loadClass("java.util.HashMap");
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.decapitalize("java.util.HashMap");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      String string0 = "Ljava.util.concurrent.ConcurrentSkipListMap";
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Byte byte0 = new Byte((byte)48);
      Class<SQLException> class1 = SQLException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) byte0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Byte byte0 = new Byte((byte)48);
      Class<SQLException> class1 = SQLException.class;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      ParserConfig parserConfig1 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("java.util.HashMap");
      Class<IllegalMonitorStateException> class1 = IllegalMonitorStateException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.remove((Object) class0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      identityHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListMap", "{h[oFYbk&6?V");
      String string0 = "TR(mkJ0,;1]";
      identityHashMap0.put("java.util.HashMap", "TR(mkJ0,;1]");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<RenderingHints> class2 = RenderingHints.class;
      TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      Float float0 = new Float((-2206.0F));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("TR(mkJ0,;1]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : TR(mkJ0,;1]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      TypeUtils.isPath(class0);
      Class<MessageFormat> class1 = MessageFormat.class;
      TypeUtils.getSerializeFeatures(class1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ParserConfig.getGlobalInstance();
      String string0 = "Lorg.springframework.util.LinkedMultiValueMap";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fastjson.parser.autoTypeAccept");
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'd';
      charArray0[2] = 'k';
      charArray0[3] = 'g';
      charArray0[4] = 'M';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 12);
      jSONReaderScanner1.getTimeZone();
      Class<Double> class2 = Double.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) parserConfig0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.ParserConfig@3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<Byte> class0 = Byte.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader2 = classLoader1.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      Class<?> class1 = TypeUtils.loadClass("fastjson.parser.autoTypeSupport", classLoader2, false);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      TypeUtils.isKotlin(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.util.UUID
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("java.util.HashMap");
      Class<IllegalMonitorStateException> class1 = IllegalMonitorStateException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.remove((Object) class0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      identityHashMap0.put("{h[oFYbk&6?V", "getgetCause");
      identityHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListMap", "{h[oFYbk&6?V");
      identityHashMap0.put("java.util.HashMap", "TR(mkJ0,;1]");
      Float float0 = new Float((-4438.5F));
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedHashSet<Throwable> linkedHashSet0 = new LinkedHashSet<Throwable>();
      Class<InternalError> class0 = InternalError.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      TypeUtils.getClass((Type) class0);
      Method method0 = null;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("printStackTrace", hashtable0);
      int int0 = 27;
      int int1 = 1015;
      Class<InternalError> class1 = InternalError.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.text.DecimalFormatSymbols@1073a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("#?Ng>/COg", treeMap0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      FieldInfo fieldInfo0 = new FieldInfo("#?Ng>/COg", class1, class1, (Type) null, (Field) null, 1428, 46, (-2195));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<Annotation> class2 = Annotation.class;
      beanContext0.getAnnation(class2);
      TypeUtils.castToBigDecimal((Object) null);
      TypeUtils.getParserFeatures(class2);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError((String) null);
      Class<JobAttributes> class3 = JobAttributes.class;
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) noSuchFieldError0, class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.JobAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put((String) null, "yyyy-MM-dd HH:mm:ss");
      linkedHashMap0.put((String) null, (String) null);
      linkedHashMap0.keySet();
      linkedHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListSet", "Ljava.util.concurrent.ConcurrentSkipListSet");
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      Class<Annotation> class0 = Annotation.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap1, propertyNamingStrategy0, true);
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TypeUtils.loadClass("java.util.HashMap");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<BigInteger> class0 = BigInteger.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedHashSet<Throwable> linkedHashSet0 = new LinkedHashSet<Throwable>();
      Class<InternalError> class0 = InternalError.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      String string0 = null;
      linkedHashMap0.put((String) null, (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      TypeUtils.getClass((Type) class0);
      Method method0 = null;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("printStackTrace", hashtable0);
      int int0 = 27;
      int int1 = 1015;
      Class<InternalError> class1 = InternalError.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<UUID> class0 = UUID.class;
      TypeUtils.isKotlin(class0);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      TypeUtils.castToTimestamp((Object) null);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(numberFormatException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      Hashtable<Short, Jdk8DateCodec> hashtable0 = new Hashtable<Short, Jdk8DateCodec>();
      assertTrue(hashtable0.isEmpty());
      
      TypeUtils.castToInt((Object) null);
      Collection collection0 = TypeUtils.createCollection(class0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+o.:|");
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.getGenericParamType(class0);
      TypeUtils.unwrapOptional((Type) null);
      Class<?> class1 = TypeUtils.getClassFromMapping("");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Class<?> class2 = TypeUtils.getRawClass(class1);
      ClassLoader.getSystemClassLoader();
      TypeUtils.isProxy(class2);
      TypeUtils.fnv1a_64("java.awt.Color");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      TypeUtils.getSerializeFeatures(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      TypeUtils.decapitalize("M+i-W");
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      Properties properties0 = new Properties();
      Class<DecimalFormat> class2 = DecimalFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class1, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.getGenericParamType(class0);
      TypeUtils.unwrapOptional(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[", (ClassLoader) aSMClassLoader0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("org.springframework.security.core.userdetails.User", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. org.springframework.security.core.userdetails.User
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      TypeUtils.isGenericParamType(class0);
      TypeUtils.isProxy(class0);
      TypeUtils.getClassFromMapping("");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) linkedHashMap0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "SOUX9sO ~M,v a#d");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      TypeUtils.loadClass("SOUX9sO ~M,v a#d", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      JSONObject jSONObject0 = new JSONObject();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      DecimalFormat decimalFormat0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TypeUtils.decapitalize("a=nTu !w");
      Class<Double> class0 = Double.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "a=nTu !w";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer((SerializeConfig) null);
      StackTraceElement stackTraceElement0 = new StackTraceElement("a=nTu !w", "a=nTu !w", "a=nTu !w", 1630);
      simplePropertyPreFilter0.apply(jSONSerializer0, stackTraceElement0, "gF%wVs\"sBBg4ZR^(");
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      String string0 = "<RnuYqJ{B";
      TypeUtils.loadClass("<RnuYqJ{B");
      Class<IllegalStateException> class2 = IllegalStateException.class;
      Class<MessageFormat> class3 = MessageFormat.class;
      FieldInfo fieldInfo0 = new FieldInfo("Q", class2, class3, (Type) null, (Field) null, (-1815), 0, 885);
      BeanContext beanContext0 = new BeanContext((Class<?>) null, fieldInfo0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("Q", "a=nTu !w");
      identityHashMap0.put("Q", "M]bbvn[");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<RenderingHints> class4 = RenderingHints.class;
      Class<Locale> class5 = Locale.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class5, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      Float float0 = new Float((float) 885);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.awt.RenderingHints
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Point> class0 = Point.class;
      Class<NumberFormat> class1 = NumberFormat.class;
      TypeUtils.isKotlin(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.unwrapOptional(class0);
      ClassLoader.getSystemClassLoader();
      Class<Date> class1 = Date.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, true);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
      Class<?> class2 = javaBeanSerializer0.getType();
      JavaBeanInfo.build((Class<?>) class1, (Type) class2, propertyNamingStrategy0, false, false);
      Float float0 = new Float((float) 0);
      TypeUtils.decapitalize("-GT* kxzja}nrS");
      TypeUtils.getCollectionItemClass(class2);
      Properties properties0 = new Properties();
      Class<DecimalFormat> class3 = DecimalFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) float0, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      TypeUtils.isGenericParamType(class0);
      TypeUtils.isProxy(class0);
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TypeUtils.loadClass("HOUR0_FIELD");
      TypeUtils.decapitalize("HOUR0_FIELD");
      Class<Point> class0 = Point.class;
      Class<NumberFormat> class1 = NumberFormat.class;
      TypeUtils.isKotlin(class1);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class2);
      TypeUtils.getClassFromMapping("HOUR0_FIELD");
      TypeUtils.fnv1a_64("HOUR0_FIELD");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Short> class0 = Short.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      TypeUtils.getClass((Type) class0);
      Class<IllegalMonitorStateException> class1 = IllegalMonitorStateException.class;
      String string0 = "Q[ Y|xp";
      Method method0 = null;
      String string1 = "";
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", concurrentHashMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Byte> class1 = Byte.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      ClassLoader.getSystemClassLoader();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      assertTrue(hashtable0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      TypeUtils.isKotlin(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("OA&`fs", "J8m-$7V").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.decapitalize("kotlin.ranges.CharRange");
      TypeUtils.getRawClass(class1);
      Class<ImageCapabilities> class2 = ImageCapabilities.class;
      TypeUtils.getParserFeatures(class2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      InternalError internalError0 = new InternalError("fastjson.parser.deny", negativeArraySizeException0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) internalError0, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : J8m-$7V
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      Class<TimeUnit> class1 = TimeUnit.class;
      TypeUtils.isPath(class1);
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.getClassFromMapping("javax.persistence.OneToMany");
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("javax.persistence.OneToMany");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'j'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.isPath(class0);
      TypeUtils.getParserFeatures(class0);
      TypeUtils.getClassFromMapping("scanFieldFloatArray2");
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Locale locale0 = TypeUtils.toLocale("NULL");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      locale0.getScript();
      ParserConfig.getFieldFromCache("]%", hashtable0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<Short> class0 = Short.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/4RDW8r,");
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      TypeUtils.computeGetters(class1, (Map<String, String>) null, true);
      TypeUtils.castToSqlTime((Object) null);
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("java.util.HashMap");
      Class<IllegalMonitorStateException> class1 = IllegalMonitorStateException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Class<SQLTransientConnectionException> class2 = SQLTransientConnectionException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.remove((Object) class0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      identityHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListMap", "{h[oFYbk&6?V");
      identityHashMap0.put("java.util.HashMap", "TR(mkJ0,;1]");
      identityHashMap0.put((String) null, (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      Integer integer0 = new Integer(62);
      TypeUtils.castToLong(integer0);
      TypeUtils.isHibernateInitialized((Object) null);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>(18);
      ParserConfig.getFieldFromCache("v64@/{6'<`x0BiA!", weakHashMap0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.isPath(class0);
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.isGenericParamType(class1);
      TypeUtils.isProxy(class0);
      Class<?> class2 = TypeUtils.getClassFromMapping("scanFieldFloatArray2");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+o.:|");
      Class<Byte> class0 = Byte.TYPE;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      TypeUtils.decapitalize("can not cast to char, value : ");
      Class<?> class1 = TypeUtils.getRawClass(class0);
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      TypeUtils.getParserFeatures(class2);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      String string0 = TypeUtils.cast((Object) null, (Type) class1, parserConfig0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TypeUtils.decapitalize("a=nTu !w");
      Class<Double> class0 = Double.class;
      TypeUtils.fnv1a_64_lower("tx~^TQ#,`Y");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.fnv1a_64("serialVersionUID");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("[byte", "cause");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<EnumDeserializer> class1 = EnumDeserializer.class;
      String string0 = "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer";
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, "com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<Short> class0 = Short.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      TypeUtils.getClass((Type) class0);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TypeUtils.getCollectionItemClass((Type) null);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("X1 dU&h", sQLTimeoutException0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException1 = new SQLInvalidAuthorizationSpecException(sQLInvalidAuthorizationSpecException0);
      TypeUtils.castToBigDecimal((Object) null);
      Class<ClassLoader> class0 = ClassLoader.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)104;
      byteArray0[8] = (byte)28;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashMap0);
      System.setCurrentTimeMillis((-3296L));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TypeUtils.getCollectionItemClass((Type) null);
      StackTraceElement stackTraceElement0 = new StackTraceElement("l.b8", "Y[@]p3+'", "?UYwMGeS6^G-L", 126);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "l.b8";
      stringArray0[1] = "gF%wVs\"sBBg4ZR^(";
      stringArray0[2] = "Y[@]p3+'";
      stringArray0[3] = "gF%wVs\"sBBg4ZR^(";
      stringArray0[4] = "gF%wVs\"sBBg4ZR^(";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      simplePropertyPreFilter0.apply(jSONSerializer0, "gF%wVs\"sBBg4ZR^(", "?UYwMGeS6^G-L");
      simplePropertyPreFilter0.getClazz();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<Exception> class0 = Exception.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Class<SQLException> class1 = SQLException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "gF%wVs\"sBBg4ZR^(", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("(CLjava/lang/String;D)V", weakHashMap0);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "SOUX9sO ~M,v a#d");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.text.MockDateFormat@5399bf34
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Point point0 = new Point((-1122), 78);
      // Undeclared exception!
      try { 
        TypeUtils.isProxy((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.util.ReflectionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "can not cast to byte, value : ";
      TypeUtils.getClassFromMapping("can not cast to byte, value : ");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("can not cast to byte, value : ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TypeUtils.toLocale("Ljava.awt.Font");
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      Class<Insets> class2 = Insets.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("Ljava.awt.Font", hashtable0);
      FieldInfo fieldInfo0 = new FieldInfo("~Uh*<(JU*", class0, class2, class2, (Field) null, 41, 33, (-2822));
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TypeUtils.decapitalize("a=nTu !w");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      String string0 = "<Rnu2qJ{B";
      TypeUtils.loadClass("<Rnu2qJ{B");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.isProxy(class1);
      TypeUtils.fnv1a_64("getshortValue");
      TypeUtils.castToDouble((Object) null);
      TypeUtils.isNumber("double");
      TypeUtils.getClassFromMapping("double");
      TypeUtils.castToLong((Object) null);
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("java.util.HashMap");
      Class<IllegalMonitorStateException> class1 = IllegalMonitorStateException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.remove((Object) class0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      identityHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListMap", "{h[oFYbk&6?V");
      identityHashMap0.put("java.util.HashMap", "TR(mkJ0,;1]");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<RenderingHints> class2 = RenderingHints.class;
      TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      Float float0 = new Float((-2206.0F));
      TypeUtils.decapitalize((String) null);
      Class<?> class3 = TypeUtils.getCollectionItemClass(class2);
      assertFalse(class3.isPrimitive());
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class3);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("d,M#ME6PsXM^M_jfI");
      TypeUtils.fnv1a_64("Ljava.awt.Font");
      Float float0 = new Float((-1728.7F));
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(propertyProcessableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("scanFieldFloatArray2");
      Class<Rectangle> class0 = Rectangle.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.merge(">L", "", biFunction0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      Class<MessageFormat> class1 = MessageFormat.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      TypeUtils.loadClass("scanFieldFloatArray2");
      TypeUtils typeUtils0 = new TypeUtils();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("34V2dz%.b", "", 62);
      SQLDataException sQLDataException0 = new SQLDataException(">L", "gzip,base64", 62, sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("34V2dz%.b", sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "?vaT!ip", (-1929), sQLRecoverableException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(serializeBeanInfo0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.serializer.SerializeBeanInfo@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedHashSet<Throwable> linkedHashSet0 = new LinkedHashSet<Throwable>();
      Class<SQLException> class0 = SQLException.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) linkedHashSet0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      HttpCookie httpCookie0 = new HttpCookie("toS", "notifyAll");
      identityHashMap0.remove((Object) httpCookie0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      identityHashMap0.put("notifyAll", "toS");
      identityHashMap0.put("a$c", "kiws)p_@|2");
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      identityHashMap1.put("{h[oFYbk&6?V", "TR(mkJ0,;1]");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = new ArrayList<FieldInfo>();
      Integer integer0 = new Integer(472);
      TypeUtils.castToLong((Object) null);
      boolean boolean0 = TypeUtils.isNumber("notifyAll");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("qgI", hashtable0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null);
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "qgI", (-1L));
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      Class<?> class1 = TypeUtils.loadClass((String) null, classLoader0, false);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(propertyProcessableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      TypeUtils.getCollectionItemClass(class0);
      Class<SQLDataException> class1 = SQLDataException.class;
      TypeUtils.isPath(class1);
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(decimalFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.text.DecimalFormat@674dc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) throwableDeserializer0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      TypeUtils.isKotlin(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("scanFieldFloatArray2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : scanFieldFloatArray2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("java.util.HashMap");
      Class<IllegalMonitorStateException> class1 = IllegalMonitorStateException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.remove((Object) class0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      String string0 = "9~KMjt";
      int int0 = 2235;
      StackTraceElement stackTraceElement0 = new StackTraceElement("java.util.HashMap", "java.util.HashMap", (String) null, 2235);
      Class<InternalError> class2 = InternalError.class;
      Class<Annotation> class3 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class3);
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      boolean boolean1 = TypeUtils.isProxy(class0);
      assertTrue(boolean1 == boolean0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "isclone");
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("getgetClass", "q?>oqUV:^~eDg", "yyyy/MM/dd HH:mm:ss", 28);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      AtomicInteger atomicInteger0 = new AtomicInteger(28);
      TypeUtils.castToFloat(atomicInteger0);
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "'8tAW(vdf~,.VGtZ'";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("'8tAW(vdf~,.VGtZ'", classLoader0, false);
      TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.castToTimestamp((Object) null);
      LinkedHashMap<java.sql.Date, IllegalAccessError> linkedHashMap0 = new LinkedHashMap<java.sql.Date, IllegalAccessError>();
      classLoader0.setDefaultAssertionStatus(false);
      TypeUtils.castToString(linkedHashMap0);
      TypeUtils.castToDate((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(linkedHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.ut\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      System.setCurrentTimeMillis(349L);
      String string0 = "syntax error, expect {, actual ";
      TypeUtils.isNumber("syntax error, expect {, actual ");
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      Field[] fieldArray0 = new Field[2];
      String string1 = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, (String) null, fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      boolean boolean0 = false;
      Class<Double> class1 = Double.class;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, false);
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      LinkedHashMap<String, String> linkedHashMap0 = null;
      try {
        linkedHashMap0 = new LinkedHashMap<String, String>((Map<? extends String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TypeUtils.isNumber("Ljava.awt.Font");
      TypeUtils.castToString("Ljava.awt.Font");
      Class<Point> class0 = Point.class;
      TypeUtils.isKotlin(class0);
      Class<HttpCookie> class1 = HttpCookie.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      TypeUtils.getClassFromMapping("java.lang.String@0000000001");
      String string0 = "(>SoS[w(0";
      TypeUtils.fnv1a_64("(>SoS[w(0");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<Float> class0 = Float.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("(CLjava/lang/String;D)V", weakHashMap0);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<MockDate> class0 = MockDate.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      BitSet bitSet0 = new BitSet(1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      ParserConfig parserConfig1 = new ParserConfig(true);
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '(';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 80);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig1);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (int) '(';
      intArray0[2] = (int) '(';
      PageAttributes pageAttributes0 = new PageAttributes();
      PageAttributes pageAttributes1 = new PageAttributes(pageAttributes0);
      defaultJSONParser0.setContext((ParseContext) null, (Object) pageAttributes1, (Object) parserConfig0);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (int) '(';
      intArray0[6] = 1;
      intArray0[7] = 0;
      intArray0[8] = 1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) batchUpdateException0, (Object) hashMap0);
      Type type0 = parseContext0.type;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jSONType0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<MessageFormat> class0 = MessageFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
      String string0 = null;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      String string1 = "J";
      int int0 = (-3345);
      StackTraceElement stackTraceElement0 = null;
      try {
        stackTraceElement0 = new StackTraceElement("J", (String) null, (String) null, (-3345));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertEquals("java.lang.IllegalThreadStateException", illegalThreadStateException0.toString());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      TypeUtils.isKotlin(class0);
      Class<BreakIterator> class1 = BreakIterator.class;
      TypeUtils.getParserFeatures(class1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "o";
      hashMap0.clear();
      hashMap0.put("o", "o");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(hashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("getExponentSeparator");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(noSuchMethodError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.NoSuchMethodError: getExponentSeparator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      TypeUtils.getCollectionItemClass(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<AtomicInteger> class1 = AtomicInteger.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0, true);
      InterruptedException interruptedException0 = new InterruptedException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(interruptedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InterruptedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("^!9o");
      TypeUtils.isHibernateInitialized("^!9o");
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.getGenericParamType(class0);
      TypeUtils.castToLong((Object) null);
      TypeUtils.castToString(class0);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("^!9o", treeMap0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("):*", " awz3~N^+x9");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, sQLTimeoutException0);
      DataTruncation dataTruncation0 = new DataTruncation((-1384), true, true, 861, (-1384), sQLFeatureNotSupportedException0);
      dataTruncation0.getNextWarning();
      TypeUtils.castToChar((Object) null);
      TypeUtils.castToSqlDate((Object) null);
      ParserConfig parserConfig0 = null;
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser("toString", (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("O.O] Fw", "O.O] Fw", (-2013611351));
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(sQLNonTransientConnectionException0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      MockThread mockThread0 = new MockThread("mnYU;iEk4fZY4e8&");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLFeatureNotSupportedException0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("can not cast to float, value : ", "yyyy/MM/dd HH:mm:ss", "yyyy/MM/dd HH:mm:ss", 28);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo.build((Class<?>) class1, (Type) class1, propertyNamingStrategy0, true, false);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "write javaBean error, fastjson version 1.2.46");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig();
      CollectionCodec collectionCodec0 = new CollectionCodec();
      TypeUtils.loadClass("java.sql.BatchUpdateException", (ClassLoader) aSMDeserializerFactory0.classLoader, true);
      System.setCurrentTimeMillis(0);
      Properties properties0 = new Properties();
      Class<NoSuchMethodException> class2 = NoSuchMethodException.class;
      TypeUtils.cast((Object) properties0, class2, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.ParserConfig@a1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class2);
      Class<NumberFormat> class3 = NumberFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class2, class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.NumberFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "SOUX9sO ~M,v a#d");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      Class<Float> class0 = Float.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("8s0g1\"_`mnm2}\"As+|", weakHashMap0);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) null, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      String string0 = "/1X%gKDm,G";
      TypeUtils.loadClass("org.springframework.cglib.proxy.Factory");
      // Undeclared exception!
      try { 
        TypeUtils.isPath((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("getgetClass", "q?>oqUV:^~eDg", "yyyy/MM/dd HH:mm:ss", 28);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("Ljava.awt.Color", "[rN3&ds=X|-U");
      identityHashMap0.put("VLcwI79dEgKh?)", ".6z[}y$?SKv_jG");
      identityHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListMap", ".6z[}y$?SKv_jG");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<RenderingHints> class1 = RenderingHints.class;
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<Throwable, Byte> hashMap1 = new HashMap<Throwable, Byte>();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      hashtable0.remove((Object) hashMap1, (Object) rectangle0);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      Float float0 = new Float(1941.0F);
      TypeUtils.decapitalize("B");
      TypeUtils.getCollectionItemClass(class1);
      WeakHashMap<Byte, SQLNonTransientException> weakHashMap0 = new WeakHashMap<Byte, SQLNonTransientException>();
      Class<DecimalFormat> class3 = DecimalFormat.class;
      DecimalFormat decimalFormat0 = TypeUtils.castToJavaBean((Object) weakHashMap0, class3);
      assertEquals("-", decimalFormat0.getNegativePrefix());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("getgetClass", "q?>oqV:^~eDg", "yyyy/MM/dd HH:mm:ss", 28);
      TypeUtils.decapitalize("getgetErrorCode");
      TypeUtils.getRawClass(class0);
      ClassLoader.getSystemClassLoader();
      Class<MockDateFormat> class1 = MockDateFormat.class;
      TypeUtils.isProxy(class1);
      TypeUtils.getClassFromMapping("to");
      Double double0 = new Double((-38.110399978));
      TypeUtils.isNumber("nRH-sqnC ']|4b");
      TypeUtils.loadClass((String) null);
      WeakHashMap<NumberFormat, Integer> weakHashMap0 = new WeakHashMap<NumberFormat, Integer>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(weakHashMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.loadClass("org.springframework.cglib.proxy.Factory");
      TypeUtils.decapitalize("CIzsAb&ez!`v9~%^[$N");
      Properties properties0 = new Properties();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      DecimalFormat decimalFormat0 = TypeUtils.castToJavaBean((Object) null, class0);
      assertNull(decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      StackTraceElement stackTraceElement0 = new StackTraceElement("(C)Ljava/lang/Character;", "(C)Ljava/lang/Character;", "(C)Ljava/lang/Character;", 2714);
      TypeUtils.decapitalize("error");
      Class<AtomicInteger> class0 = AtomicInteger.class;
      TypeUtils.isProxy(class0);
      TypeUtils.getClassFromMapping("getgetErrorCode");
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, true);
      TypeUtils.decapitalize("getTimeZone");
      TypeUtils.getRawClass(class1);
      TypeUtils.getParserFeatures(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, (Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("serialVersionUID").when(genericArrayType1).toString();
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      TypeUtils.getClass(type1);
      ClassLoader.getSystemClassLoader();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(linkedHashSet0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TypeUtils.toLocale("]}}h9d_aT^=!`Cj~$J");
      Integer integer0 = new Integer((-950));
      TypeUtils.castToLong(integer0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      boolean boolean0 = false;
      TypeUtils.loadClass("javax.xml.datatype.XMLGregorianCalendar", (ClassLoader) aSMClassLoader0, false);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(noSuchFieldError0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "SOUX9sO ~M,v a#d");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, true, false);
      Float float0 = new Float((float) 0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("fastjson.parser.deny", "fastjson.parser.deny");
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) hashtable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NumberFormatException numberFormatException0 = new NumberFormatException();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      java.util.IdentityHashMap<NoSuchMethodException, JSONPDeserializer> identityHashMap0 = new java.util.IdentityHashMap<NoSuchMethodException, JSONPDeserializer>();
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, ":false", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("getSize", "methodName");
      identityHashMap0.put("]}}h9d_aT^=!`Cj~$J", "char");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<SQLDataException> class0 = SQLDataException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap1, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      Float float0 = new Float(0.0F);
      TypeUtils.decapitalize("getSize");
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      Class<Long> class1 = Long.TYPE;
      JSONType jSONType1 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class1, jSONType1, (Map<String, String>) hashMap1, (Map<String, Field>) hashMap0, false, propertyNamingStrategy1);
      Integer integer0 = new Integer((-2956));
      Class<SQLException> class2 = SQLException.class;
      Class<SQLException> class3 = SQLException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class2, class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      java.util.IdentityHashMap<StackOverflowError, NoClassDefFoundError> identityHashMap0 = new java.util.IdentityHashMap<StackOverflowError, NoClassDefFoundError>();
      StackOverflowError stackOverflowError0 = new StackOverflowError("Ljava.util.concurrent.ConcurrentSkipListSet");
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      identityHashMap0.put(stackOverflowError0, noClassDefFoundError0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<Dimension> class0 = Dimension.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashMap0, (Map<String, Field>) null, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<IllegalStateException> class1 = IllegalStateException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      TypeUtils.getClass((Type) class1);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      TypeUtils.castToBigDecimal((Object) null);
      Locale locale0 = TypeUtils.toLocale("getMetaClass");
      Locale.getISOLanguages();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : getmetaclass
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TypeUtils.getClassFromMapping("can not cast to byte, value : ");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("Wu.`73ZZMJ", hashtable0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Byte byte0 = new Byte((byte)20);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) byte0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      java.util.IdentityHashMap<StackOverflowError, NoClassDefFoundError> identityHashMap0 = new java.util.IdentityHashMap<StackOverflowError, NoClassDefFoundError>();
      TypeUtils.isHibernateInitialized(identityHashMap0);
      TypeUtils typeUtils0 = new TypeUtils();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("}@V>+i< pTA8", "T]", "s&x I`@&", 2202);
      stackTraceElementArray0[0] = stackTraceElement0;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.merge("T]", "", biFunction0);
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      TypeUtils.loadClass("}@V>+i< pTA8");
      TypeUtils typeUtils1 = new TypeUtils();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(sQLTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      Class<Character> class0 = Character.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stackOverflowError0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.StackOverflowError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = ParserConfig.DENYS;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put((String) null, ".6z[}y$?SKv_jG");
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<Throwable, Byte> hashMap0 = new HashMap<Throwable, Byte>();
      hashtable0.remove((Object) "vK]qu*PQ)-D", (Object) class0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float((-497.49F));
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 0);
      parserConfig0.initJavaBeanDeserializers(classArray0);
      Class<SQLTransientException> class1 = SQLTransientException.class;
      TypeUtils.cast((Object) hashtable0, class1, parserConfig0);
      TypeUtils.getCollectionItemType(class1);
      Class<RenderingHints> class2 = RenderingHints.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.RenderingHints
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TypeUtils.isNumber("Ljava.awt.Font");
      TypeUtils.decapitalize("Ljava.awt.Font");
      Class<Point> class0 = Point.class;
      TypeUtils.isKotlin(class0);
      Class<HttpCookie> class1 = HttpCookie.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      TypeUtils.getClassFromMapping("ljava.awt.Font");
      TypeUtils.getClassFromMapping("[D");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.net.HttpCookie
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.getClassFromMapping("getExponentSeparator");
      TypeUtils.castToFloat((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : class org.evosuite.runtime.mock.java.util.MockGregorianCalendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TypeUtils.loadClass("java.util.HashMap");
      LinkedHashMap<SQLRecoverableException, NoSuchMethodException> linkedHashMap0 = new LinkedHashMap<SQLRecoverableException, NoSuchMethodException>();
      assertTrue(linkedHashMap0.isEmpty());
      
      TypeUtils.decapitalize("java.util.HashMap");
      Class<?> class0 = TypeUtils.getClassFromMapping("java.util.HashMap");
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TypeUtils.loadClass("Modifiers");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("Modifiers");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Modifiers
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "[J");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, true, true);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      aSMDeserializerFactory1.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      TypeUtils.loadClass("java.lang.OutOfMemoryError", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<Float> class0 = Float.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      assertNull(illegalThreadStateException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Double> class1 = Double.class;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, false);
      TypeUtils.decapitalize(")");
      TypeUtils.getRawClass(class0);
      ClassLoader.getSystemClassLoader();
      Class<Locale> class2 = Locale.class;
      TypeUtils.isProxy(class2);
      TypeUtils.fnv1a_64("");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      int int0 = 28;
      StackTraceElement stackTraceElement0 = new StackTraceElement("getgetClass", "q?>oqV:^~eDg", "yyyy/MM/dd HH:mm:ss", 28);
      TypeUtils.decapitalize("getgetErrorCode");
      Class<MockDateFormat> class1 = MockDateFormat.class;
      TypeUtils.isProxy(class1);
      int int1 = 2531;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(2531, 2531);
      Class<StackTraceElement> class2 = StackTraceElement.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) hashMap0, class2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Declaring class is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("L>Y{Iq,jj5xa9$", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. L>Y{Iq,jj5xa9$
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Class<Short> class0 = Short.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      JavaBeanInfo.build((Class<?>) class0, (Type) class1, propertyNamingStrategy0, false, true);
      Float float0 = new Float((float) 0);
      TypeUtils.getCollectionItemClass(class0);
      Properties properties0 = new Properties();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((String) null, "java.lang.Short");
      Class<DecimalFormat> class2 = DecimalFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLTimeoutException0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("*-M_PqE?", "WEDNESDAY");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<ClassLoader> class1 = ClassLoader.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      Integer integer0 = new Integer(62);
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      TypeUtils.castToLong((Object) null);
      TypeUtils.isNumber("WEDNESDAY");
      WeakHashMap<OptionalCodec, SQLSyntaxErrorException> weakHashMap1 = new WeakHashMap<OptionalCodec, SQLSyntaxErrorException>();
      Class<ClassLoader> class2 = ClassLoader.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) list0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.ClassLoader
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TypeUtils.getClassFromMapping("Ljava.util.concurrent.ConcurrentSkipListSet");
      TypeUtils.unwrapOptional((Type) null);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Function<Object, JSONObject> function0 = (Function<Object, JSONObject>) mock(Function.class, new ViolatedAssumptionAnswer());
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("Ljava.util.concurrent.ConcurrentSkipListSet");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : Ljava.util
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "dlRxb2fG %JU)'&R04";
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread("dlRxb2fG %JU)'&R04");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      MockThread.interrupted();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThread.dumpStack();
      mockThread0.getStackTrace();
      MockThread mockThread2 = new MockThread(mockThread1, "qzstC}[@JWd$/hF");
      ClassLoader classLoader0 = mockThread2.getContextClassLoader();
      classLoader0.setClassAssertionStatus("qzstC}[@JWd$/hF", true);
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("dlRxb2fG %JU)'&R04", classLoader0, false);
      TypeUtils.unwrapOptional((Type) null);
      mockThread2.setContextClassLoader(classLoader0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qzstC}[@JWd$/hF");
      Class<StackOverflowError> class0 = StackOverflowError.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, (Map<String, String>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, false);
      TypeUtils.decapitalize("getTimeZone");
      StringCharacterIterator stringCharacterIterator0 = null;
      try {
        stringCharacterIterator0 = new StringCharacterIterator("<i6~[S=}s", 91, 91, (-32537631));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid substring range
         //
         verifyException("java.text.StringCharacterIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TypeUtils.loadClass("Modifiers");
      TypeUtils.getKoltinConstructorParameters((Class) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Hashtable<DataTruncation, InternalError> hashtable0 = new Hashtable<DataTruncation, InternalError>(91, 91);
      identityHashMap0.remove((Object) hashtable0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      identityHashMap0.put("+V", "Modifiers");
      identityHashMap0.put((String) null, "getgetCause");
      identityHashMap0.put("getgetComponentType", "(CLjava/lang/String;Ljava/lang/String;)V");
      Float float0 = new Float(0.0F);
      LinkedHashSet<Double> linkedHashSet0 = new LinkedHashSet<Double>();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TypeUtils.isNumber("y:{Yj7=dm@W_}m0k");
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("DM5/H33mC/yywBYO2");
      assertEquals((-6880938047603168976L), long0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = new Long(127L);
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      Date date0 = TypeUtils.castToDate(long0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      java.util.IdentityHashMap<StackOverflowError, NoClassDefFoundError> identityHashMap0 = new java.util.IdentityHashMap<StackOverflowError, NoClassDefFoundError>();
      StackOverflowError stackOverflowError0 = new StackOverflowError("Ljava.util.concurrent.ConcurrentSkipListSet");
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      identityHashMap0.put(stackOverflowError0, noClassDefFoundError0);
      TypeUtils.isHibernateInitialized(identityHashMap0);
      TypeUtils typeUtils0 = new TypeUtils();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.decapitalize(";");
      String string0 = "<i6~[S=}s";
      int int0 = 98;
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+o.:|");
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.getGenericParamType(class0);
      TypeUtils.unwrapOptional((Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class1 = TypeUtils.loadClass("", (ClassLoader) aSMClassLoader0, false);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<JobAttributes> class1 = JobAttributes.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("tx~^TQ#,`Y");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("8m.<wB5q", "org.springframework.util.LinkedMultiValueMap");
      identityHashMap0.put("6YmOK(MHXy1EEF|", "6YmOK(MHXy1EEF|");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<RenderingHints> class0 = RenderingHints.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      Float float0 = new Float((float) (-2475078184247546742L));
      TypeUtils.decapitalize("L");
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class2);
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) class2;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class2;
      typeArray0[3] = (Type) class2;
      Class<?> class3 = TypeUtils.getCollectionItemClass(typeArray0[3]);
      typeArray0[4] = (Type) class3;
      typeArray0[5] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], class2);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) throwableDeserializer0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      java.util.IdentityHashMap<StackOverflowError, NoClassDefFoundError> identityHashMap0 = new java.util.IdentityHashMap<StackOverflowError, NoClassDefFoundError>();
      TypeUtils.isHibernateInitialized(identityHashMap0);
      TypeUtils typeUtils0 = new TypeUtils();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      TypeUtils.decapitalize(";");
      StringCharacterIterator stringCharacterIterator0 = null;
      try {
        stringCharacterIterator0 = new StringCharacterIterator("<i6~[S=}s", 77, 91, 91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid substring range
         //
         verifyException("java.text.StringCharacterIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TypeUtils.getCollectionItemClass((Type) null);
      Hashtable<Short, Jdk8DateCodec> hashtable0 = new Hashtable<Short, Jdk8DateCodec>();
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      java.util.IdentityHashMap<Long, Long> identityHashMap0 = new java.util.IdentityHashMap<Long, Long>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.decapitalize("java.lang.Class");
      Hashtable<Short, Jdk8DateCodec> hashtable0 = new Hashtable<Short, Jdk8DateCodec>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("java.lang.Class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.Class
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Class<LinkageError> class1 = LinkageError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class1, (Map<String, String>) null, false, propertyNamingStrategy0);
      TypeUtils.getClass((Type) class0);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(27, "can not cast to JSONObject.", (-214748364), 101, 980, 47, 39, (-1979), (-1733176309), 50);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -214748364
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TypeUtils.loadClass("java.util.HashMap");
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      TypeUtils.decapitalize("java.util.HashMap");
      StringCharacterIterator stringCharacterIterator0 = null;
      try {
        stringCharacterIterator0 = new StringCharacterIterator("<i6~[S=}s", 91, 91, 1085);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid substring range
         //
         verifyException("java.text.StringCharacterIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      java.util.IdentityHashMap<StackOverflowError, NoClassDefFoundError> identityHashMap0 = new java.util.IdentityHashMap<StackOverflowError, NoClassDefFoundError>();
      TypeUtils.isHibernateInitialized(identityHashMap0);
      TypeUtils typeUtils0 = new TypeUtils();
      String string0 = "`@%]h&a5y0$yt\\3d";
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("}@V>+i< pTA8", "T]", "s&x I`@&", 2202);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("s&x I`@&", "can not cast to Date, value : ", "`@%]h&a5y0$yt\u0003d", 2212);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("Q8H1yYeQb'rTx", "org.springframework.security.web.savedrequest.DefaultSavedRequest", "Ljava.util.concurrent.ConcurrentSkipListMap", 2202);
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("s&x I`@&", "Z9{y]C0Q,&4[@Y~7", "Z9{y]C0Q,&4[@Y~7", (-912));
      stackTraceElementArray0[3] = stackTraceElement3;
      mockIllegalAccessException0.setStackTrace(stackTraceElementArray0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockIllegalAccessException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TypeUtils.getCollectionItemClass((Type) null);
      Hashtable<Short, Jdk8DateCodec> hashtable0 = new Hashtable<Short, Jdk8DateCodec>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      int int0 = 28;
      StackTraceElement stackTraceElement0 = new StackTraceElement("getgetClass", "q?>oqV:^~eDg", "yyyy/MM/dd HH:mm:ss", 28);
      TypeUtils.decapitalize("yyyy/MM/dd HH:mm:ss");
      Class<MockDateFormat> class1 = MockDateFormat.class;
      TypeUtils.isProxy(class1);
      int int1 = 2531;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(2531, 2531);
      Class<StackTraceElement> class2 = StackTraceElement.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) hashMap0, class2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Declaring class is null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("java.util.HashMap");
      assertNotNull(class0);
      
      Class<IllegalMonitorStateException> class1 = IllegalMonitorStateException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Class<SQLTransientConnectionException> class2 = SQLTransientConnectionException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.remove((Object) class0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      identityHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListMap", "{h[oFYbk&6?V");
      identityHashMap0.put("java.util.HashMap", "TR(mkJ0,;1]");
      identityHashMap0.put((String) null, (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) weakHashMap0, true, propertyNamingStrategy0);
      Integer integer0 = new Integer(62);
      TypeUtils.castToLong(integer0);
      boolean boolean0 = TypeUtils.isNumber("Wd @v~mp$Eg:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      String string0 = "E8oi\\}^)<gP";
      Field[] fieldArray0 = new Field[2];
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, "[", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      String string0 = "InitStringFieldAsEmpty";
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0, "I[oLq}`zlx9{sz3");
      MockThread mockThread1 = new MockThread(mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Thread[] threadArray0 = new Thread[9];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = (Thread) mockThread1;
      threadArray0[2] = thread0;
      threadArray0[3] = (Thread) mockThread1;
      threadArray0[4] = thread0;
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread2 = new MockThread(threadGroup0, threadArray0[1], "InitStringFieldAsEmpty", 693L);
      threadArray0[5] = (Thread) mockThread2;
      threadArray0[6] = (Thread) mockThread0;
      threadArray0[7] = (Thread) mockThread0;
      threadArray0[8] = (Thread) mockThread0;
      MockThread.enumerate(threadArray0);
      Class<IndexOutOfBoundsException> class2 = IndexOutOfBoundsException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class2, (Type) class0, propertyNamingStrategy0);
      try { 
        aSMDeserializerFactory0.createJavaBeanDeserializer((ParserConfig) null, javaBeanInfo0);
        fail("Expecting exception: InvocationTargetException");
      
      } catch(InvocationTargetException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("java.util.HashMap");
      LinkedHashMap<SQLRecoverableException, NoSuchMethodException> linkedHashMap0 = new LinkedHashMap<SQLRecoverableException, NoSuchMethodException>();
      TypeUtils.isKotlin(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.util.HashMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("getgetClass", "q?>oqV:^~eDg", "yyyy/MM/dd HH:mm:ss", 28);
      StackTraceElement stackTraceElement1 = new StackTraceElement("q?>oqV:^~eDg", "B", "9~KMjt", 2235);
      LinkedHashMap<SQLRecoverableException, NoSuchMethodException> linkedHashMap0 = new LinkedHashMap<SQLRecoverableException, NoSuchMethodException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("9~KMjt");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9~KMjt\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Class<Float> class0 = Float.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      TypeUtils.getClass((Type) class0);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      Hashtable<DecimalFormatSymbols, Float> hashtable0 = new Hashtable<DecimalFormatSymbols, Float>();
      Locale locale0 = new Locale("S", "has", "S");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      Float float0 = new Float((-3012.4F));
      hashtable0.put(decimalFormatSymbols0, float0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(hashtable0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Double> class1 = Double.class;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, false);
      TypeUtils.decapitalize(")");
      TypeUtils.getRawClass(class0);
      ClassLoader.getSystemClassLoader();
      Class<Locale> class2 = Locale.class;
      TypeUtils.isProxy(class2);
      TypeUtils.getClassFromMapping(")");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      TypeUtils.decapitalize((String) null);
      Hashtable<Short, Jdk8DateCodec> hashtable0 = new Hashtable<Short, Jdk8DateCodec>();
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.castToChar((Object) null);
      long long0 = TypeUtils.fnv1a_64_lower("}HX3BwD");
      assertEquals(4221551911679388842L, long0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("d,M#ME6PsXM^M_jfI");
      TypeUtils.fnv1a_64("Ljava.awt.Font");
      Float float0 = new Float((-1728.7F));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -1728.7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      TypeUtils.toLocale("]}}h9d_aT^=!`Cj~$J");
      Class<Object> class0 = Object.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      TypeUtils.isKotlin(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      parserConfig0.checkAutoType((String) null, class0);
      TypeUtils.getRawClass(class1);
      Class<MockSimpleDateFormat> class2 = MockSimpleDateFormat.class;
      TypeUtils.isKotlin(class2);
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      TypeUtils.getSerializeFeatures(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      StackOverflowError stackOverflowError0 = new StackOverflowError("+t");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(stackOverflowError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.StackOverflowError: +t
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      BitSet bitSet0 = new BitSet(1);
      Class<DecimalFormat> class1 = DecimalFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) bitSet0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Float float0 = new Float((-1728.7F));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -1728.7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ParserConfig.getGlobalInstance();
      TypeUtils.decapitalize("m(");
      NumberFormatException numberFormatException0 = new NumberFormatException();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<HttpCookie> class0 = HttpCookie.class;
      TypeUtils.getParserFeatures(class0);
      String string0 = "/1X%gKDm,G";
      String string1 = "org.springframework.cglib.proxy.Factory";
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("org.springframework.cglib.proxy.Factory");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.springframework.cglib.proxy.Factory\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      TypeUtils.isGenericParamType(class0);
      Thread thread0 = MockThread.currentThread();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, ";05z)A2LIJ[Y}gm=");
      MockThread.reset();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader.getSystemClassLoader();
      mockThread0.setContextClassLoader(classLoader0);
      MockThread.dumpStack();
      TypeUtils.unwrapOptional(class0);
      TypeUtils.getClassFromMapping("getCurrencySymbol");
      Class<Locale> class1 = Locale.class;
      TypeUtils.castToJavaBean((Object) ";05z)A2LIJ[Y}gm=", class1);
      Class<StackTraceElement> class2 = StackTraceElement.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class2, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Short short0 = new Short((short)95);
      TypeUtils.castToFloat(short0);
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      TypeUtils.getParserFeatures(class1);
      TypeUtils.isGenericParamType(class0);
      TypeUtils.getClassFromMapping("");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class com.alibaba.fastjson.parser.deserializer.TimeDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.fnv1a_64_lower("d,M#ME6PsXM^M_jfI");
      TypeUtils.fnv1a_64("Ljava.awt.Font");
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put((String) null, (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      Integer integer0 = new Integer((-2956));
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, " K7:Q=.0x.");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      TypeUtils.decapitalize("a=nTu !w");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.loadClass("<RnuYqJ{B");
      Field[] fieldArray0 = new Field[3];
      Class<IllegalStateException> class0 = IllegalStateException.class;
      Class<MessageFormat> class1 = MessageFormat.class;
      FieldInfo fieldInfo0 = new FieldInfo("Q", class0, class1, (Type) null, (Field) null, (-1815), 0, 885);
      BeanContext beanContext0 = new BeanContext((Class<?>) null, fieldInfo0);
      beanContext0.getField();
      fieldArray0[0] = null;
      beanContext0.getField();
      fieldArray0[1] = null;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("a=nTu !w", hashMap0);
      fieldArray0[2] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField((Class<?>) null, (String) null, fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      String string0 = "can not cast to float, value : ";
      FileSystemHandling.shouldAllThrowIOExceptions();
      DataTruncation dataTruncation0 = new DataTruncation((-3432), true, true, 2138, 2138);
      BreakIterator.getLineInstance();
      Class<Character> class1 = Character.TYPE;
      TypeUtils.getCollectionItemClass(class1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$&{OQ=Z60(5o|z{*");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("$&{OQ=Z60(5o|z{*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"$&{OQ=Z60(5o|z{*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      Byte byte0 = new Byte((byte) (-85));
      ParserConfig parserConfig0 = new ParserConfig(false);
      LinkedHashMap<SQLException, MockDate> linkedHashMap0 = new LinkedHashMap<SQLException, MockDate>();
      assertEquals(0, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      TypeUtils.isKotlin(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("yyyy-MM-dd HH:mm:ss", "");
      linkedHashMap0.put((String) null, (String) null);
      linkedHashMap0.put((String) null, "KR=");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      linkedHashMap0.compute("yyyy-MM-dd HH:mm:ss", biFunction0);
      linkedHashMap0.computeIfAbsent("com.alibaba.fastjson.JSONArray", function0);
      linkedHashMap0.put("get", "Lorg.springframework.util.LinkedMultiValueMap");
      String string0 = null;
      linkedHashMap0.put("],==,,", (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      TypeUtils.getCollectionItemType(class0);
      Integer.getInteger("com.alibaba.fastjson.serializer.AppendableSerializer");
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "SOUX9sO ~M,v a#d");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("SOUX9sO ~M,v a#d", (ClassLoader) aSMClassLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.fnv1a_64("SUPPRESSED_SENTINEL");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.castToBytes("SUPPRESSED_SENTINEL");
      Class<Timestamp> class0 = Timestamp.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "SUPPRESSED_SENTINEL", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : SUPPRESSED_SENTINEL
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(illegalThreadStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("scanFieldFloatArray2");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.merge(">L", "", biFunction0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("Ljava.awt.Color", "e;");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      Integer integer0 = new Integer(91);
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : SnakeCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<Point>[] classArray0 = (Class<Point>[]) Array.newInstance(Class.class, 5);
      Class<Point> class0 = Point.class;
      classArray0[0] = class0;
      Class<Point> class1 = Point.class;
      classArray0[1] = class1;
      Class<Point> class2 = Point.class;
      classArray0[2] = class2;
      Class<Point> class3 = Point.class;
      classArray0[3] = class3;
      Class<Point> class4 = Point.class;
      classArray0[4] = class4;
      // Undeclared exception!
      try { 
        parserConfig0.initJavaBeanDeserializers(classArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm deserializer error, java.awt.Point
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("L>Y{Iq,jj5xa9$", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. L>Y{Iq,jj5xa9$
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      MockThread mockThread0 = new MockThread("getclone");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("getclone", classLoader0, false);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertEquals("class java.lang.Object", class0.toString());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.getSerializeFeatures(class0);
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      TypeUtils.isKotlin(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0, true);
      Class<Character> class2 = Character.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) type0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<TimeUnit> class1 = TimeUnit.class;
      FieldInfo fieldInfo0 = new FieldInfo("can not cast to float, value : ", class1, class0, class0, (Field) null, 1, 2147483618, 1);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put((String) null, "vK]qu*PQ)-D");
      identityHashMap0.put((String) null, ".6z[}y$?SKv_jG");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<RenderingHints> class2 = RenderingHints.class;
      Class<SQLIntegrityConstraintViolationException> class3 = SQLIntegrityConstraintViolationException.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      HashMap<Throwable, Byte> hashMap1 = new HashMap<Throwable, Byte>();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      line2D_Double0.getBounds();
      hashtable0.remove((Object) "vK]qu*PQ)-D", (Object) class3);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      Class<Dimension> class4 = Dimension.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class4, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      Float float0 = new Float((-497.49F));
      TypeUtils.decapitalize((String) null);
      TypeUtils.getCollectionItemClass(class2);
      WeakHashMap<Byte, SQLNonTransientException> weakHashMap0 = new WeakHashMap<Byte, SQLNonTransientException>();
      Class<DecimalFormat> class5 = DecimalFormat.class;
      DecimalFormat decimalFormat0 = TypeUtils.castToJavaBean((Object) null, class5);
      assertNull(decimalFormat0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn("oracle.sql.DATE").when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap1, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.deny", weakHashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Class<Annotation> class1 = Annotation.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, map0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      Integer integer0 = new Integer((-1));
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      // Undeclared exception!
      try { 
        Currency.getInstance("fastjson.parser.autoTypeAccept");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Currency", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      ConcurrentHashMap<MessageFormat, NumberDeserializer> concurrentHashMap0 = new ConcurrentHashMap<MessageFormat, NumberDeserializer>();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(concurrentHashMap0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      TypeUtils.decapitalize("a=nTu !w");
      Class<Double> class0 = Double.class;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "a=nTu !w";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer((SerializeConfig) null);
      Hashtable<Short, Jdk8DateCodec> hashtable0 = new Hashtable<Short, Jdk8DateCodec>();
      TypeUtils.castToSqlTime((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.Double
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Double> class1 = Double.class;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0, false);
      TypeUtils.decapitalize(")");
      Class<?> class2 = TypeUtils.getRawClass(class0);
      Class<Jdk8DateCodec> class3 = Jdk8DateCodec.class;
      TypeUtils.getParserFeatures(class3);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<InstantiationException> class4 = InstantiationException.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class4, (Type) class3, propertyNamingStrategy0);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      Point point0 = new Point((-4128), 4);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) point0, (Type) class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      NumberFormatException numberFormatException0 = new NumberFormatException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(numberFormatException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("can not cast to float, value : ", "yyyy/MM/dd HH:mm:ss", "yyyy/MM/dd HH:mm:ss", 28);
      StackTraceElement stackTraceElement1 = new StackTraceElement("9~KMjt", "9~KMjt", "B", 162);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Period period0 = Period.ofYears(506);
      IsoChronology isoChronology0 = period0.getChronology();
      Clock clock0 = MockClock.systemUTC();
      isoChronology0.dateNow(clock0);
      Hashtable<Short, Jdk8DateCodec> hashtable0 = new Hashtable<Short, Jdk8DateCodec>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<?> class0 = TypeUtils.loadClass("rl:(4Ng^", classLoader1, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.decapitalize("M{pU_=+Z j@I1-0*m");
      TypeUtils.getRawClass(type0);
      Class<JobAttributes> class1 = JobAttributes.class;
      TypeUtils.getParserFeatures(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn((Type) null).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      Class<IndexOutOfBoundsException> class2 = IndexOutOfBoundsException.class;
      TypeUtils.getSerializeFeatures(class2);
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("M{pU_=+Z j@I1-0*m");
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) outOfMemoryError0, (ParameterizedType) null, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TypeUtils.fnv1a_64("aDvDGRF3mP(L");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      TypeUtils.decapitalize("can not cast to byte, value : ");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("can not cast to byte, value : ", hashtable0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      TypeUtils.castToBigDecimal((Object) null);
      byte[] byteArray0 = TypeUtils.castToBytes("can not cast to byte, value : ");
      assertEquals(20, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.loadClass("HOUR0_FIELD");
      Class<MessageFormat> class1 = MessageFormat.class;
      Class<SecurityException> class2 = SecurityException.class;
      FieldInfo fieldInfo0 = new FieldInfo("YEAR_FIELD", class0, class2, class1, (Field) null, 28, 0, 0);
      Class<BigInteger> class3 = BigInteger.class;
      BeanContext beanContext0 = new BeanContext(class3, fieldInfo0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put((String) null, "M^;11m&{");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGetters((Class<?>) class3, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      Integer integer0 = new Integer((-141));
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("7rUp|*FUjLjl");
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      String string0 = "kotlin.jvm.internal.DefaultConstructorMarker";
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, "kotlin.jvm.internal.DefaultConstructorMarker", fieldArray0);
      Class<SQLClientInfoException> class2 = SQLClientInfoException.class;
      TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo("getUnicodeLocaleAttributes", (Method) null, (Field) null, class2, class0, 149, 149, 149, (JSONField) null, (JSONField) null, "getUnicodeLocaleAttributes");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("getSize", "methodName");
      identityHashMap0.put("]}}h9d_aT^=!`Cj~$J", "char");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<RenderingHints> class0 = RenderingHints.class;
      Class<SQLDataException> class1 = SQLDataException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Float float0 = new Float(0.0F);
      TypeUtils.decapitalize("getSize");
      TypeUtils.getCollectionItemClass(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class2);
      TypeUtils.getCollectionItemClass(class2);
      Type[] typeArray0 = new Type[15];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      ParserConfig parserConfig1 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "6YmOK(MHXy1EEF|", (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unsupport type class java.awt.RenderingHints
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("kWS");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("jsonpath error, path ", "jE*8t");
      linkedHashMap0.keySet();
      linkedHashMap0.put("org.apache.ibatis.javassist.util.proxy.ProxyObject", "UVtYCkGkO<8jN8>5g}");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("KR=").when(biFunction0).apply(any() , any());
      linkedHashMap0.compute("KR=", biFunction0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.nio.file.Path");
      jSONReaderScanner0.getTimeZone();
      Class<Byte> class0 = Byte.TYPE;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Lorg.springframework.util.LinkedMultiValueMap", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Lorg.springframework.util.LinkedMultiValueMap\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      TypeUtils.isGenericParamType(class0);
      TypeUtils.isProxy(class0);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      mockNullPointerException0.getStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(mockNullPointerException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.evos\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.decapitalize("to");
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("to");
      TypeUtils.unwrapOptional(class0);
      Class<?> class1 = TypeUtils.getClassFromMapping("to");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("0o1d!J", "TR(mkJ0,;1].000000000");
      identityHashMap0.put("TR(mkJ0,;1].000000000", "q{pC/*?U-YhK");
      identityHashMap0.put("J`*", "TR(mkJ0,;1]");
      Float float0 = new Float((-2206.0F));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3274), (-3274), (-3274));
      TypeUtils.castToTimestamp(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = 11;
      Random.setNextRandom(11);
      Class<DataTruncation> class0 = DataTruncation.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.loadClass("HNfb4;bdSi|");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, (Map<String, String>) null, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      MockFile mockFile0 = new MockFile("cg+*^n)/L)\"kLn^B*a", "-1BOJO&`l~'R");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      char[] charArray0 = new char[6];
      mockFile0.setWritable(false, false);
      charArray0[0] = 'X';
      charArray0[1] = '-';
      charArray0[2] = 'o';
      charArray0[3] = '4';
      mockPrintStream0.println('D');
      mockPrintStream0.print(4036.6206194804367);
      charArray0[4] = 'K';
      charArray0[5] = 'L';
      mockPrintStream0.println(charArray0);
      illegalThreadStateException0.printStackTrace((PrintStream) mockPrintStream0);
      illegalThreadStateException0.printStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(illegalThreadStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.isProxy(class0);
      Class<?> class1 = TypeUtils.getClassFromMapping("org.springframework.security.authentication.UsernamePasswordAuthenticationToken");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      TypeUtils.isKotlin(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("yyyy-MM-dd HH:mm:ss", "");
      linkedHashMap0.put((String) null, (String) null);
      linkedHashMap0.put((String) null, (String) null);
      TypeUtils.castToSqlDate((Object) null);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(numberFormatException0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = '4';
      charArray0[2] = '(';
      charArray0[3] = 'A';
      charArray0[4] = 'D';
      charArray0[5] = '_';
      BigDecimal bigDecimal0 = null;
      try {
        bigDecimal0 = new BigDecimal(charArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.checkAutoType((String) null, class0);
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      TypeUtils.decapitalize("can not cast to Date, value : ");
      TypeUtils.decapitalize("can not cast to Date, value : ");
      TypeUtils.getRawClass(class1);
      ClassLoader.getSystemClassLoader();
      Class<Short> class2 = Short.class;
      parserConfig0.getDeserializer((Type) null);
      TypeUtils.isProxy(class2);
      TypeUtils.fnv1a_64("");
      Insets insets0 = new Insets(608, 5, (-112), (-345));
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.awt.Insets[top=608,left=5,bottom=-112,right=-345]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Thread thread0 = MockThread.currentThread();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, ";05z)A2LIJ[Y}gm=");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      mockThread0.setContextClassLoader(classLoader0);
      MockThread.dumpStack();
      TypeUtils.getClassFromMapping("getCurrencySymbol");
      Class<Locale> class1 = Locale.class;
      Locale locale0 = TypeUtils.castToJavaBean((Object) ";05z)A2LIJ[Y}gm=", class1);
      assertEquals(";05z)a2lij[y}gm=", locale0.toString());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(1398);
      Double double0 = new Double(1906.82);
      TypeUtils.castToLong(double0);
      Boolean boolean0 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<IllegalStateException> class1 = IllegalStateException.class;
      Class<TimeUnit> class2 = TimeUnit.class;
      FieldInfo fieldInfo0 = new FieldInfo("can not cast to float, value : ", class2, class0, class0, (Field) null, 1, (-2147483647), 1);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      Class<NoSuchMethodException> class3 = NoSuchMethodException.class;
      BeanContext beanContext1 = new BeanContext(class3, fieldInfo0);
      beanContext1.getField();
      beanContext1.getField();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("can not cast to float, value : ", hashMap0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<SQLRecoverableException, NoSuchMethodException> linkedHashMap0 = new LinkedHashMap<SQLRecoverableException, NoSuchMethodException>();
      TypeUtils.castToShort((Object) null);
      TypeUtils.toLocale("can not cast to float, value : ");
      TypeUtils.castToByte((Object) null);
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      TypeUtils.getClassFromMapping("Ljava.util.concurrent.ConcurrentSkipListSet");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Ljava.util.concurrent.ConcurrentSkipListSet", "net.sf.cglib.proxy.Factory");
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("net.sf.cglib.proxy.Factory", sQLFeatureNotSupportedException0);
      TypeUtils.castToString((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMDeserializerFactory0.classLoader.getParent();
      MockThread mockThread0 = new MockThread((ThreadGroup) null, (Runnable) null, "Ljava.util.concurrent.ConcurrentSkipListSet");
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0, "gettoString", (-1728L));
      MockThread mockThread2 = new MockThread(mockThread1);
      ClassLoader classLoader1 = mockThread2.getContextClassLoader();
      TypeUtils.loadClass((String) null, classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
      TypeUtils.decapitalize(")");
      TypeUtils.getRawClass(class0);
      ClassLoader.getSystemClassLoader();
      boolean boolean0 = TypeUtils.isProxy(class1);
      TypeUtils.getClassFromMapping("gettoPattern");
      Double double0 = new Double(0.0);
      boolean boolean1 = TypeUtils.isHibernateInitialized((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, (String) null);
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("R$mY>\"j[/4Uhd", sQLFeatureNotSupportedException0);
      TypeUtils.castToString(typeNotPresentException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass((String) null, classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      java.util.IdentityHashMap<StackOverflowError, NoClassDefFoundError> identityHashMap0 = new java.util.IdentityHashMap<StackOverflowError, NoClassDefFoundError>();
      StackOverflowError stackOverflowError0 = new StackOverflowError("Ljava.util.concurrent.ConcurrentSkipListSet");
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      identityHashMap0.put(stackOverflowError0, noClassDefFoundError0);
      TypeUtils.isHibernateInitialized(identityHashMap0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      MockThread mockThread0 = new MockThread("mnYU;iEk4fZY4e8&");
      MockThread mockThread1 = new MockThread("]@myAif.n]9{[Vf*B@");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Ljava.util.concurrent.ConcurrentSkipListSet", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("getSize", "methodName");
      identityHashMap0.put("]}}h9d_aT^=!`Cj~$J", "char");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<RenderingHints> class0 = RenderingHints.class;
      Class<SQLDataException> class1 = SQLDataException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) hashMap1, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      Float float0 = new Float(0.0F);
      TypeUtils.decapitalize("getSize");
      TypeUtils.getCollectionItemClass(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<MockGregorianCalendar> class2 = MockGregorianCalendar.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class2);
      TypeUtils.getCollectionItemClass(class2);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      ParserConfig parserConfig1 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "6YmOK(MHXy1EEF|", (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // unsupport type class java.awt.RenderingHints
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.MapDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-2956));
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      WeakHashMap<OptionalCodec, SQLSyntaxErrorException> weakHashMap0 = new WeakHashMap<OptionalCodec, SQLSyntaxErrorException>();
      Integer integer1 = new Integer(874);
      BigDecimal bigDecimal0 = new BigDecimal((-974L));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(bigDecimal0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -974
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "cause";
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      identityHashMap0.values();
      identityHashMap0.put("ies2R!t6z BA+NH_,", "*-M_PqE?");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      Field[] fieldArray0 = new Field[0];
      identityHashMap0.put("", "oracle.sql.TIMESTAMP");
      Field field0 = TypeUtils.getField(class0, "cause", fieldArray0);
      weakHashMap0.put("gettoPattern", field0);
      identityHashMap0.put("gettoPattern", "ies2R!t6z BA+NH_,");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {gettoPattern=private java.lang.Throwable java.lang.Throwable.cause}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      TypeUtils.getCollectionItemClass((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      TypeUtils.toLocale("]}}h9d_aT^=!`Cj~$J");
      Integer integer0 = new Integer((-950));
      TypeUtils.castToLong(integer0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("X+uDl+Z(Y(x+ 'jt%d,", "]}}h9d_aT^=!`Cj~$J", 2611);
      SQLDataException sQLDataException0 = new SQLDataException("Dv^=", "t", 4328, sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("java.nio.file.Paths", sQLNonTransientConnectionException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Dv^=", "java.nio.file.Paths", (-1285), sQLRecoverableException0);
      Point point0 = new Point(62, 78);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Point[x=62,y=78]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "can not cast to : ";
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("can not cast to : ");
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(noClassDefFoundError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.NoClassDefFoundError: can not cast to : 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("kWS");
      Float float0 = new Float(0.0F);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("kWS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : kWS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      ConcurrentHashMap<MessageFormat, NumberDeserializer> concurrentHashMap0 = new ConcurrentHashMap<MessageFormat, NumberDeserializer>();
      Locale locale0 = Locale.CHINA;
      MessageFormat messageFormat0 = new MessageFormat("getMetaClass", locale0);
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      concurrentHashMap0.put(messageFormat0, numberDeserializer0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(concurrentHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      java.util.IdentityHashMap<ThrowableDeserializer, SimpleDateFormat> identityHashMap0 = new java.util.IdentityHashMap<ThrowableDeserializer, SimpleDateFormat>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.isGenericParamType(class0);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      identityHashMap0.put(throwableDeserializer0, mockSimpleDateFormat0);
      identityHashMap0.values();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@e=org.evosuite.runtime.mock.java.text.MockSimpleDateFormat@a9427c06}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      TypeUtils.getClassFromMapping("j");
      ConcurrentHashMap<SQLDataException, SimpleTimeZone> concurrentHashMap0 = new ConcurrentHashMap<SQLDataException, SimpleTimeZone>();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      LinkedHashSet<Throwable> linkedHashSet0 = new LinkedHashSet<Throwable>();
      ParserConfig.getGlobalInstance();
      String string0 = "cause";
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(linkedHashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      TypeUtils.getSerializeFeatures(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Float float0 = new Float(3190.6F);
      TypeUtils.decapitalize("getSize");
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<HttpCookie> class2 = HttpCookie.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class2);
      TypeUtils.getCollectionItemClass(class2);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class1;
      typeArray0[2] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      ParserConfig parserConfig1 = new ParserConfig(true);
      ChoiceFormat choiceFormat0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertNull(choiceFormat0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "can not cast to byte, value : ";
      TypeUtils.getClassFromMapping("can not cast to byte, value : ");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, map0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.isProxy(class0);
      TypeUtils.getClassFromMapping("org.springframework.security.authentication.UsernamePasswordAuthenticationToken");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("org.springframework.security.authentication.UsernamePasswordAuthenticationToken");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.springframework.security.authentication.UsernamePasswordAuthenticationToken\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      TypeUtils.decapitalize(";");
      StringCharacterIterator stringCharacterIterator0 = null;
      try {
        stringCharacterIterator0 = new StringCharacterIterator("<i6~[S=}s", 77, 91, 91);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid substring range
         //
         verifyException("java.text.StringCharacterIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      Class<MockDate> class0 = MockDate.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      BitSet bitSet0 = new BitSet(1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      Class<DecimalFormat> class1 = DecimalFormat.class;
      DecimalFormat decimalFormat0 = TypeUtils.castToJavaBean((Object) identityHashMap0, class1);
      assertEquals(3, decimalFormat0.getGroupingSize());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+o.:|");
      Class<Byte> class0 = Byte.TYPE;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      Class<NoClassDefFoundError> class1 = NoClassDefFoundError.class;
      boolean boolean1 = TypeUtils.isProxy(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      LinkedHashSet<Throwable> linkedHashSet0 = new LinkedHashSet<Throwable>();
      LinkedHashMap<SQLRecoverableException, NoSuchMethodException> linkedHashMap0 = new LinkedHashMap<SQLRecoverableException, NoSuchMethodException>();
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      StackTraceElement stackTraceElement0 = new StackTraceElement("9VYDo7 \"CP7S/cO8,", "9VYDo7 \"CP7S/cO8,", "org.springframework.security.web.csrf.DefaultCsrfToken", 37);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("9VYDo7 \"CP7S/cO8,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9VYDo7 \"CP7S/cO8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      java.util.IdentityHashMap<StackOverflowError, NoClassDefFoundError> identityHashMap0 = new java.util.IdentityHashMap<StackOverflowError, NoClassDefFoundError>();
      StackOverflowError stackOverflowError0 = new StackOverflowError("Ljava.util.concurrent.ConcurrentSkipListSet");
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      identityHashMap0.put(stackOverflowError0, noClassDefFoundError0);
      TypeUtils.isHibernateInitialized(identityHashMap0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(noClassDefFoundError0);
      MockThread mockThread0 = new MockThread("mnYU;iEk4fZY4e8&");
      TypeUtils.getClassFromMapping("L^Ik@:/A");
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListSet", (ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      TypeUtils.loadClass((String) null);
      TypeUtils.decapitalize("SECOND_MASK");
      TypeUtils.castToSqlDate((Object) null);
      NumberFormatException numberFormatException0 = new NumberFormatException();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      java.util.IdentityHashMap<NoSuchMethodException, JSONPDeserializer> identityHashMap0 = new java.util.IdentityHashMap<NoSuchMethodException, JSONPDeserializer>();
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(dateFormatSymbols0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("[B");
      Class<IllegalMonitorStateException> class1 = IllegalMonitorStateException.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.remove((Object) class0);
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      identityHashMap0.put("Ljava.util.concurrent.ConcurrentSkipListMap", "{h[oFYbk&6?V");
      identityHashMap0.put("[B", "TR(mkJ0,;1]");
      identityHashMap0.put((String) null, (String) null);
      Integer integer0 = new Integer(62);
      TypeUtils.castToLong(integer0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("[B", (String) null, 62);
      SQLDataException sQLDataException0 = new SQLDataException("Dv^=", "java.nio.file.Paths", 62, sQLNonTransientConnectionException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("Dv^=", sQLDataException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("Ljava.util.concurrent.ConcurrentSkipListMap", "{h[oFYbk&6?V", (-1795297870), sQLRecoverableException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(sQLTransactionRollbackException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLTransactionRollbackException: Ljava.util.concurrent.ConcurrentSkipListMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      String string0 = "to";
      TypeUtils.decapitalize("to");
      String string1 = "Ljava.util.concurrent.ConcurrentSkipListSet";
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("to");
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("F", "Ljava.util.concurrent.ConcurrentSkipListSet", (String) null, 1479);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string2 = "java/lang/Short";
      illegalAccessError0.getStackTrace();
      StackTraceElement stackTraceElement1 = new StackTraceElement("Ljava.awt.Rectangle", "java/lang/Short", "it", 1479);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = null;
      try {
        stackTraceElement2 = new StackTraceElement((String) null, "java.awt.Rectangle", "java.awt.Rectangle", 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Declaring class is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.toLocale("fastjson.parser.autoTypeSupport");
      Class<Object> class0 = Object.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, (PropertyNamingStrategy) null);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Short> class0 = Short.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      TypeUtils.getClass((Type) class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<Rectangle> class1 = Rectangle.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) null, (Map<String, Field>) identityHashMap0, false, propertyNamingStrategy0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : [empty, height, width, x, y, centerX, centerY, maxX, maxY, minX, minY, size, location, bounds, bounds2D, frame]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      String string0 = "/1X%gKDm,G";
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      // Undeclared exception!
      try { 
        concurrentHashMap0.put(")UAzBJcni]}x*<|[", (Field) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      TypeUtils.decapitalize("a=nTu !w");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.loadClass("<Rnu2qJ{B");
      Field[] fieldArray0 = new Field[3];
      Class<IllegalStateException> class0 = IllegalStateException.class;
      Class<MessageFormat> class1 = MessageFormat.class;
      FieldInfo fieldInfo0 = new FieldInfo("Q", class0, class1, (Type) null, (Field) null, (-1815), 0, 885);
      BeanContext beanContext0 = new BeanContext((Class<?>) null, fieldInfo0);
      beanContext0.getField();
      fieldArray0[0] = null;
      beanContext0.getField();
      fieldArray0[1] = null;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("a=nTu !w", hashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<SimpleTimeZone> class2 = SimpleTimeZone.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      Integer integer0 = new Integer(17);
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("<Rnu2qJ{B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : <Rnu2qJ{B
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Class<Short> class0 = Short.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      JavaBeanInfo.build((Class<?>) class0, (Type) class1, propertyNamingStrategy0, false, true);
      Float float0 = new Float((float) 0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.fnv1a_64("nextException");
      Class<SQLWarning> class0 = SQLWarning.class;
      ToDoubleFunction<LinkageError> toDoubleFunction0 = (ToDoubleFunction<LinkageError>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("language");
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("language", "Ljava.util.concurrent.ConcurrentSkipListMap", outOfMemoryError0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("language", "language", 52, sQLInvalidAuthorizationSpecException0);
      outOfMemoryError0.addSuppressed(sQLNonTransientConnectionException0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      noSuchFieldError0.getSuppressed();
      outOfMemoryError0.initCause(noSuchFieldError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(outOfMemoryError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.OutOfMemoryError: language
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      java.util.IdentityHashMap<ThrowableDeserializer, SimpleDateFormat> identityHashMap0 = new java.util.IdentityHashMap<ThrowableDeserializer, SimpleDateFormat>();
      identityHashMap0.values();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      TypeUtils.getParserFeatures(class1);
      TypeUtils.isGenericParamType(class0);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      Integer integer0 = new Integer(0);
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      TypeUtils.castToLong(integer0);
      TypeUtils.isNumber("l");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      TypeUtils.getClassFromMapping("j");
      TypeUtils.castToShort((Object) null);
      MockThread mockThread0 = new MockThread("@?d`lF7Ucy)8");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("@?d`lF7Ucy)8", (ClassLoader) aSMClassLoader0);
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      TypeUtils.getCollectionItemClass((Type) null);
      Hashtable<Short, Jdk8DateCodec> hashtable0 = new Hashtable<Short, Jdk8DateCodec>();
      java.util.IdentityHashMap<ClassLoader, Byte> identityHashMap0 = new java.util.IdentityHashMap<ClassLoader, Byte>();
      Boolean boolean0 = Boolean.FALSE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.getSerializeFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Class<InternalError> class0 = InternalError.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("jsonpath error, path ", (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      TypeUtils.getParserFeatures(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass("jsonpath error, path ", classLoader1);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      // Undeclared exception!
      try { 
        treeMap0.put((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("tx~^TQ#,`Y");
      TypeUtils.fnv1a_64("serialVersionUID");
      LinkedHashMap<SQLRecoverableException, NoSuchMethodException> linkedHashMap0 = new LinkedHashMap<SQLRecoverableException, NoSuchMethodException>();
      assertEquals(0, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.fnv1a_64("nextException");
      Class<SQLWarning> class0 = SQLWarning.class;
      Collator collator0 = Collator.getInstance();
      Function<Object, VerifyError> function0 = (Function<Object, VerifyError>) mock(Function.class, new ViolatedAssumptionAnswer());
      ToDoubleFunction<LinkageError> toDoubleFunction0 = (ToDoubleFunction<LinkageError>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<LinkageError> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super LinkageError>) toDoubleFunction0);
      collator0.thenComparing((Function<? super Object, ? extends VerifyError>) function0, (Comparator<? super VerifyError>) comparator0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(collator0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) comparator0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLWarning
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<JobAttributes> class0 = JobAttributes.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.getGenericParamType(type0);
      String string0 = "java.";
      TypeUtils.fnv1a_64("java.");
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(sQLClientInfoException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.SQLClientInfoException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Class<Short> class0 = Short.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      Hashtable<Short, Jdk8DateCodec> hashtable0 = new Hashtable<Short, Jdk8DateCodec>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class2);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      linkedHashMap0.compute("MjZ8FmZUKtH", biFunction0);
      linkedHashMap0.clear();
      Class<SQLNonTransientConnectionException> class3 = SQLNonTransientConnectionException.class;
      TypeUtils.castToBigInteger((Object) null);
      Class<SQLException> class4 = SQLException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class3, class4, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      identityHashMap0.values();
      identityHashMap0.put("ies2R!t6z BA+NH_,", "*-M_PqE?");
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      identityHashMap0.put("gettoPattern", "ies2R!t6z BA+NH_,");
      Integer integer0 = new Integer((-2956));
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {ies2R!t6z BA+NH_,=*-M_PqE?, gettoPattern=ies2R!t6z BA+NH_,}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<IllegalStateException> class1 = IllegalStateException.class;
      Class<TimeUnit> class2 = TimeUnit.class;
      FieldInfo fieldInfo0 = new FieldInfo("can not cast to float, value : ", class2, class0, class0, (Field) null, (-24), (-2147483647), (-24));
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      Class<NoSuchMethodException> class3 = NoSuchMethodException.class;
      BeanContext beanContext1 = new BeanContext(class3, fieldInfo0);
      beanContext1.getField();
      beanContext1.getField();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("can not cast to float, value : ", hashMap0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.getClassFromMapping("java/lang/Float");
      Type type0 = TypeUtils.getGenericParamType(class2);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.Enum
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      TypeUtils.loadClass((String) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.loadClass("Modifiers");
      TypeUtils.decapitalize("Modifiers");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("Modifiers", hashtable0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "modifiers", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      TypeUtils.decapitalize("a=nTu !w");
      Class<Double> class0 = Double.class;
      TypeUtils.fnv1a_64_lower("tx~^TQ#,`Y");
      TypeUtils.fnv1a_64("serialVersionUID");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("[byte", "cause");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      weakHashMap0.put("EMPTY_THROWABLE_ARRAY", (Field) null);
      Integer integer0 = new Integer(390);
      weakHashMap0.getOrDefault(integer0, (Field) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) weakHashMap0, false, propertyNamingStrategy0);
      Integer integer1 = new Integer((-2956));
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      TypeUtils.castToLong((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Class<OptionalCodec> class0 = OptionalCodec.class;
      TypeUtils.isKotlin(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("yyyy-MM-dd HH:mm:ss", "");
      linkedHashMap0.put((String) null, (String) null);
      linkedHashMap0.keySet();
      linkedHashMap0.put((String) null, "KR=");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap1 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      TypeUtils.decapitalize((String) null);
      boolean boolean0 = TypeUtils.isNumber("/Q\"EUw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.decapitalize("to");
      IllegalAccessError illegalAccessError0 = new IllegalAccessError("to");
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      ClassLoader classLoader2 = classLoader1.getParent();
      TypeUtils.loadClass("to", classLoader2);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>(2120640102, 2120640102);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      TypeUtils.getClassFromMapping("Ljava.util.concurrent.ConcurrentSkipListSet");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ljava.util.concurrent.ConcurrentSkipListSet");
      TypeUtils.unwrapOptional((Type) null);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("Ljava.util.concurrent.ConcurrentSkipListSet");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : Ljava.util
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      TypeUtils.getCollectionItemClass((Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      Class<Float> class0 = Float.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Byte byte0 = new Byte((byte) (-71));
      Class<SQLException> class1 = SQLException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) classLoader0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      StackTraceElement stackTraceElement0 = new StackTraceElement("can not cast to float, value : ", "yyyy/MM/dd HH:mm:ss", "yyyy/MM/dd HH:mm:ss", 28);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("$&{OQ=Z60(5o|z{*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"$&{OQ=Z60(5o|z{*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      String string0 = "getgetClass";
      StackTraceElement stackTraceElement0 = new StackTraceElement("getgetClass", "q?>oqV:^~eDg", "yyyy/MM/dd HH:mm:ss", 28);
      StackTraceElement stackTraceElement1 = new StackTraceElement("q?>oqV:^~eDg", "B", "9~KMjt", 2235);
      String string1 = "Q8H1yYeQb'rTx";
      String string2 = "org.springframework.security.web.savedrequest.DefaultSavedRequest";
      StackTraceElement stackTraceElement2 = new StackTraceElement("Ljava.util.concurrent.ConcurrentSkipListMap", "v\"P0j:dzcB<ux\u0007Qja", "yyyy/MM/dd HH:mm:ss", 43);
      StackTraceElement stackTraceElement3 = new StackTraceElement("Ljava.util.concurrent.ConcurrentSkipListMap", "v\"P0j:dzcB<ux\u0007Qja", "IgnoreAutoType", 28);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("IgnoreAutoType");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"IgnoreAutoType\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      StackTraceElement stackTraceElement0 = new StackTraceElement("com.alibaba.fastjson.JSONPath", "com.alibaba.fastjson.JSONPath", "com.alibaba.fastjson.JSONPath", 1708);
      String string0 = "$&{OQ=Z60(5o|z{*";
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("$&{OQ=Z60(5o|z{*");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable: $&{OQ=Z60(5o|z{*
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      String string0 = "";
      TypeUtils.loadClass("");
      TypeUtils.decapitalize(" m%-Fx6\"_`L-!\\Ee?s");
      TypeUtils.decapitalize(" m%-Fx6\"_`L-!\\Ee?s");
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      String string0 = "bounds2D";
      linkedHashMap0.put("bounds2D", "bounds2D");
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass((String) null, classLoader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      classLoader0.setDefaultAssertionStatus(true);
      Class<NoSuchFieldError> class1 = NoSuchFieldError.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) null, propertyNamingStrategy0, true, false);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.cast((Object) null, class1, parserConfig1);
      ParserConfig parserConfig2 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      // Undeclared exception!
      try { 
        parserConfig1.createFieldDeserializer(parserConfig2, javaBeanInfo0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      TypeUtils.fnv1a_64("^/i");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<Properties> class0 = Properties.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.decapitalize("u=2?fV&%C,0");
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.getParserFeatures(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "u=2?fV&%C,0", (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Properties
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "SOUX9sO ~M,v a#d");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, true, true);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      TypeUtils.loadClass("SOUX9sO ~M,v a#d", (ClassLoader) aSMClassLoader0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(aSMClassLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.util.ASMClassLoader@398c43ab
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ParserConfig parserConfig0 = new ParserConfig(false);
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("b^^", "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) weakHashMap0, true, (PropertyNamingStrategy) null);
      Integer integer0 = new Integer((-214748364));
      Class<SQLException> class1 = SQLException.class;
      ParserConfig parserConfig1 = new ParserConfig((ASMDeserializerFactory) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "*-M_PqE?", class1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Character> class2 = Character.class;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      TypeUtils.decapitalize("[o-XT");
      TypeUtils.getRawClass(class2);
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      Class<TimeDeserializer> class1 = TimeDeserializer.class;
      TypeUtils.getParserFeatures(class1);
      TypeUtils.isGenericParamType(class0);
      TypeUtils.isProxy(class0);
      Class<?> class2 = TypeUtils.getClassFromMapping("");
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("O.O] Fw");
      TypeUtils.decapitalize(";");
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor((Constructor[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      TypeUtils.getSerializeFeatures(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Lorg.springframework.util.LinkedMultiValueMap");
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeZone0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("getExponentSeparator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : getExponentSeparator
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Rectangle> class1 = Rectangle.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class1, propertyNamingStrategy0, false, true);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      TypeUtils.loadClass("d1W@,hz:{E[", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      Locale locale0 = TypeUtils.toLocale("NULL");
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols(locale0);
      decimalFormatSymbols0.getCurrency();
      Double double0 = new Double((-1469.1617896047912));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -1469.1617896047912
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getCollectionItemType(class0);
      TypeUtils.loadClass((String) null);
      TypeUtils.decapitalize((String) null);
      TypeUtils.decapitalize("get");
      Integer integer0 = new Integer(6);
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      TypeUtils.castToLong((Object) null);
      WeakHashMap<OptionalCodec, SQLSyntaxErrorException> weakHashMap0 = new WeakHashMap<OptionalCodec, SQLSyntaxErrorException>();
      Integer integer1 = new Integer((-1974049217));
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(integer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -1974049217
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      TypeUtils.isPath(class0);
      TypeUtils.isGenericParamType(class0);
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      TypeUtils.isPath(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class org.evosuite.runtime.mock.java.util.MockGregorianCalendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("getgetClass", "q?>oqUV:^~eDg", "yyyy/MM/dd HH:mm:ss", 28);
      String string0 = "B";
      StackTraceElement stackTraceElement1 = new StackTraceElement("q?>oqUV:^~eDg", "B", "9~KMjt", 2235);
      Class<ParameterizedTypeImpl> class1 = ParameterizedTypeImpl.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      TypeUtils.getClassFromMapping("getgetClass");
      TypeUtils.fnv1a_64("<,9IpAF(!=Z&F\"i]b<");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("q?>oqUV:^~eDg");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "Ljava.awt.Font";
      stringArray0[0] = "Ljava.awt.Font";
      String string1 = "73iK6!r#w<fHl>A+$Y";
      stringArray0[1] = "73iK6!r#w<fHl>A+$Y";
      stringArray0[2] = "w@n6865a`Se=~?=R";
      stringArray0[3] = "java.awt.Font";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils.castToBytes("Ljava.awt.Font");
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      String string2 = "_";
      Field[] fieldArray0 = new Field[6];
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("_", hashMap0);
      fieldArray0[0] = null;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("d,M#ME6PsXM^M_jfI");
      assertEquals(3637384378132683675L, long0);
      
      long long1 = new Long(9099098402058593651L);
      Float float0 = new Float((-1728.7F));
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>(hashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      TypeUtils.toLocale("]}}h9d_aT^=!`Cj~$J");
      Integer integer0 = new Integer((-950));
      TypeUtils.castToLong(integer0);
      String string0 = "t";
      Point point0 = new Point((-950), 78);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Point[x=-950,y=78]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = "HOUR0_FIELD";
      TypeUtils.loadClass("HOUR0_FIELD");
      TypeUtils.decapitalize("HOUR0_FIELD");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("HOUR0_FIELD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : HOUR0_FIELD
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+o.:|");
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.getGenericParamType(class0);
      TypeUtils.unwrapOptional((Type) null);
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("error parse null");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : error pars
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClass(type0);
      VerifyError verifyError0 = new VerifyError("parseInt error, field : ");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(verifyError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.VerifyError: parseInt error, field : 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Class<SQLDataException> class0 = SQLDataException.class;
      TypeUtils.isPath(class0);
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      TypeUtils.castToInt((Object) null);
      ParserConfig.getFieldFromCache("xAj<ce]sjYuI./c\"4K/", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("MZe{k/IIfs1", class0, class0, class0, (Field) null, 90, 90, 90);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Class<DataTruncation> class0 = DataTruncation.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class2);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, true);
      TypeUtils.decapitalize("Ljava/lang/Object;Ljava/lang/String;");
      Class<?> class3 = TypeUtils.getRawClass(class0);
      assertFalse(class3.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TypeUtils.fnv1a_64("^/i");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Class<Properties> class0 = Properties.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.isProxy(class0);
      TypeUtils.getClassFromMapping("H9D%");
      Class class1 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertFalse(class1.isEnum());
  }
}
