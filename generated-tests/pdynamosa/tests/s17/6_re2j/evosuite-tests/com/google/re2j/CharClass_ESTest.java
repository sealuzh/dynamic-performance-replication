/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 03:46:43 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 153;
      intArray0[1] = (-2061);
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {153, (-2061)}, intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.appendLiteral(1114111, 8209);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {153, (-2061)}, intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 153);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      intArray0[1] = 0;
      intArray0[2] = (-3860);
      intArray0[3] = 3299;
      intArray0[4] = (-1096);
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertArrayEquals(new int[] {4, 0, (-3860), 3299, (-1096)}, intArray0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(5, intArray0.length);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(4, (-3615));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange(3299, 1003);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1003;
      intArray1[1] = (-3615);
      intArray1[2] = (-1096);
      intArray1[3] = 3299;
      intArray1[4] = (-1096);
      // Undeclared exception!
      try { 
        charClass2.appendFoldedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {4, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      
      int[][] intArray1 = new int[8][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 4;
      intArray2[1] = 4;
      intArray2[2] = 4;
      intArray2[3] = 4;
      intArray2[4] = 4;
      intArray2[5] = 4;
      intArray1[3] = intArray2;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass1 = charClass0.appendFoldedRange(4, 284);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertArrayEquals(new int[] {4, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass1);
      assertEquals(5, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray2));
      
      intArray1[7] = intArray0;
      CharClass charClass2 = charClass0.appendTableWithSign(intArray1, 4);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {4, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass2);
      assertEquals(5, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 92;
      intArray0[2] = 93;
      intArray0[3] = 120545;
      intArray0[4] = 0;
      intArray0[5] = (-298);
      intArray0[6] = 1114111;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {2, 92, 93, 120545, 0, (-298), 1114111}, intArray0);
      assertNotNull(charClass0);
      assertEquals(7, intArray0.length);
      
      int[][] intArray1 = new int[9][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 93;
      intArray2[1] = 120545;
      intArray2[2] = 93;
      intArray2[3] = 2;
      intArray2[4] = 1114111;
      intArray2[5] = (-298);
      intArray1[7] = intArray2;
      intArray1[8] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {2, 92, 93, 120545, 0, (-298), 1114111}, intArray0);
      assertNotNull(charClass1);
      assertEquals(7, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {2, 92, 93, 120545, 0, (-298), 1114111}, intArray0);
      assertArrayEquals(new int[] {93, 120545, 93, 2, 1114111, (-298)}, intArray2);
      assertNotNull(charClass2);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray2.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      
      // Undeclared exception!
      charClass2.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(746, 2349);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int int0 = 10712;
      CharClass charClass3 = charClass1.appendLiteral(1157, 2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      int[] intArray0 = new int[6];
      int int1 = 2;
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2349;
      intArray0[3] = 10712;
      intArray0[4] = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      charClass1.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 65;
      intArray0[1] = 1789;
      intArray0[2] = (-1);
      intArray0[3] = (-85);
      int int0 = (-1232);
      intArray0[4] = (-1232);
      intArray0[5] = (-4274);
      intArray0[6] = 1046;
      intArray0[7] = 1206;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {65, 1789, (-1), (-85), (-1232), (-4274), 1046, 1206}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 64, (-4273), 1045, 1207, 1114111, 1046, 1206}, intArray0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-4273), 1045, 1207, 1114111, 1207, 1114111, 1046, 1206}, intArray0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1206;
      intArray1[1] = 1206;
      intArray1[2] = (-1232);
      intArray1[3] = (-1);
      intArray1[4] = (-85);
      // Undeclared exception!
      try { 
        charClass2.appendFoldedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = charClass0.toArray();
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[9][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-865), 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 605;
      intArray1[1] = (-865);
      intArray1[2] = 0;
      intArray1[3] = (-865);
      intArray1[4] = (-865);
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      String string0 = CharClass.charClassToString(intArray1, (-233));
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {605, (-865), 0, (-865), (-865), 0, 0, 0}, intArray1);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(8, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      CharClass charClass2 = charClass0.cleanClass();
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      CharClass charClass3 = charClass2.cleanClass();
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      int[] intArray2 = charClass3.toArray();
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-865), 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      int[] intArray3 = charClass1.toArray();
      assertNotSame(intArray3, intArray1);
      assertSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertArrayEquals(new int[] {(-865), 0}, intArray3);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray3);
      assertEquals(2, intArray3.length);
      assertEquals(0, intArray0.length);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 950;
      intArray0[0] = 950;
      int int1 = 0;
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {950, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[3][4];
      int[] intArray1 = new int[4];
      intArray1[0] = 1905;
      intArray1[1] = 91;
      intArray1[2] = (-1300);
      intArray1[3] = 24;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 91;
      intArray2[1] = 1905;
      intArray2[2] = 1905;
      intArray2[3] = 1905;
      intArray2[4] = 1905;
      intArray2[5] = 91;
      intArray2[6] = 91;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = (-1300);
      intArray3[1] = 1905;
      intArray3[2] = 91;
      intArray3[3] = 24;
      intArray3[4] = (-1300);
      intArray3[5] = 1905;
      intArray3[6] = 91;
      intArray3[7] = 91;
      intArray3[8] = 91;
      intArray0[2] = intArray3;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertEquals(3, intArray0.length);
      
      CharClass charClass2 = charClass0.appendLiteral((-3651), (-3651));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1360;
      intArray0[3] = 2475;
      intArray0[4] = 4;
      intArray0[5] = (-2378);
      intArray0[6] = 0;
      intArray0[7] = 12283;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 0, 1360, 2475, 4, (-2378), 0, 12283}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      int int0 = 0;
      CharClass charClass1 = charClass0.appendLiteral(0, 4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {0, 0, 1360, 2475, 4, (-2378), 0, 12283}, intArray0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {0, 12283, 0, 0, 4, (-2378), 1360, 2475}, intArray0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      
      CharClass charClass3 = charClass2.appendRange(916, (-2039));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertArrayEquals(new int[] {0, 12283, 916, (-2039), 4, (-2378), 1360, 2475}, intArray0);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      
      int[][] intArray1 = new int[0][1];
      CharClass charClass4 = charClass0.appendTableWithSign(intArray1, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertArrayEquals(new int[] {0, 12283, 916, (-2039), 4, (-2378), 1360, 2475}, intArray0);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      
      CharClass charClass5 = charClass3.appendNegatedClass(intArray0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertArrayEquals(new int[] {(-2038), 1114111, (-2377), 1359, 4, (-2378), 1360, 2475}, intArray0);
      assertNotNull(charClass5);
      assertEquals(8, intArray0.length);
      
      CharClass charClass6 = charClass5.appendRange(0, 4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertArrayEquals(new int[] {(-2038), 1114111, (-2377), 1359, 4, (-2378), 1360, 2475}, intArray0);
      assertNotNull(charClass6);
      assertEquals(8, intArray0.length);
      
      CharClass charClass7 = charClass1.negateClass();
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertArrayEquals(new int[] {1360, 1114111, (-2377), 1359, 4, (-2378), 1360, 2475}, intArray0);
      assertNotNull(charClass7);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2011;
      intArray0[1] = (-712);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {2011, (-712)}, intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {2011, (-712)}, intArray0);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      
      CharClass charClass3 = charClass2.appendRange(10176, 2011);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {2011, (-712)}, intArray0);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      
      CharClass charClass4 = charClass3.appendRange((-469), 10176);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {2011, (-712)}, intArray0);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[4][9];
      intArray1[0] = null;
      intArray1[1] = null;
      intArray1[2] = null;
      intArray1[3] = null;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-66);
      intArray0[1] = 0;
      intArray0[2] = 4404;
      intArray0[3] = (-972);
      intArray0[4] = 1840;
      int int0 = (-2655);
      intArray0[5] = (-2655);
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 4404);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 4;
      intArray0[0] = 4;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {4, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      
      int[][] intArray1 = new int[4][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 4;
      intArray2[1] = 4;
      intArray2[2] = 4;
      intArray2[3] = 4;
      intArray2[4] = 4;
      intArray2[5] = 120545;
      intArray2[6] = 4;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertArrayEquals(new int[] {4, 0, 0, 0, 3}, intArray0);
      assertNotNull(charClass1);
      assertEquals(5, intArray0.length);
      assertEquals(4, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3003;
      intArray0[1] = 66639;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 1723;
      intArray0[0] = 1723;
      intArray0[1] = 64;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {1723, 64}, intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      
      CharClass charClass1 = charClass0.appendRange(1723, 64);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1723, 64}, intArray0);
      assertNotNull(charClass1);
      assertEquals(2, intArray0.length);
      
      CharClass charClass2 = charClass1.appendLiteral(9141, 1723);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {1723, 64}, intArray0);
      assertNotNull(charClass2);
      assertEquals(2, intArray0.length);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {1723, 64}, intArray0);
      assertNotNull(charClass3);
      assertEquals(2, intArray0.length);
      
      int[][] intArray1 = new int[7][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass4 = charClass3.appendRange(1723, 64);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertArrayEquals(new int[] {1723, 64}, intArray0);
      assertNotNull(charClass4);
      assertEquals(2, intArray0.length);
      
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        CharClass.charClassToString((int[]) null, 2358);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass0);
      assertEquals(0, intArray0.length);
      
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass1);
      assertEquals(0, intArray0.length);
      
      CharClass charClass2 = charClass1.appendFoldedRange((-2275), (-2275));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass2);
      assertEquals(0, intArray0.length);
      
      CharClass charClass3 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      
      CharClass charClass4 = charClass1.appendLiteral((-2275), (-2275));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass4);
      assertEquals(0, intArray0.length);
      
      CharClass charClass5 = charClass0.cleanClass();
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(charClass5);
      assertEquals(0, intArray0.length);
      
      int[][] intArray1 = new int[9][8];
      intArray1[0] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, (-2275));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(12343, 12343);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[3][8];
      int[] intArray1 = new int[1];
      intArray1[0] = 12343;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 12343;
      intArray2[1] = 12343;
      intArray2[2] = 12343;
      intArray2[3] = 12343;
      intArray2[4] = 12343;
      intArray2[5] = 12343;
      intArray2[6] = 12343;
      intArray2[7] = (-1);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-1);
      intArray3[1] = (-1);
      intArray3[2] = (-1);
      intArray0[2] = intArray3;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray0, 8259);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-2105), 66639);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = charClass0.toArray();
      assertSame(charClass0, charClass1);
      assertArrayEquals(new int[] {(-2105), 66639}, intArray0);
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-97);
      intArray0[1] = 0;
      intArray0[2] = 6051;
      intArray0[3] = 0;
      String string0 = CharClass.charClassToString(intArray0, (-255));
      assertArrayEquals(new int[] {(-97), 0, 6051, 0}, intArray0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-97), 0, 6051, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(4, intArray0.length);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {(-97), 0, 1, 1114111}, intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {(-97), 0, 1, 1114111}, intArray0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      
      CharClass charClass3 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {(-97), 0, (-97), 1114111}, intArray0);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      
      CharClass charClass4 = charClass0.appendFoldedClass(intArray0);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertArrayEquals(new int[] {(-97), 0, (-97), 1114111}, intArray0);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, 2990);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertArrayEquals(new int[] {(-97), 0, (-97), 1114111}, intArray0);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      
      String string1 = CharClass.charClassToString(intArray0, (-3303));
      assertArrayEquals(new int[] {(-97), 0, (-97), 1114111}, intArray0);
      assertNotNull(string1);
      assertEquals("[]", string1);
      assertEquals(4, intArray0.length);
      assertTrue(string1.equals((Object)string0));
      
      int[] intArray1 = charClass2.toArray();
      assertSame(intArray0, intArray1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-97), 0, (-97), 1114111}, intArray0);
      assertArrayEquals(new int[] {(-97), 0, (-97), 1114111}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray1, 927);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 65;
      intArray0[0] = 65;
      intArray0[1] = 1789;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 120528;
      intArray0[1] = 1830;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {120528, 1830}, intArray0);
      assertNotNull(charClass0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1830;
      int int0 = (-506);
      intArray1[1] = (-506);
      intArray1[2] = 1830;
      intArray1[3] = 120528;
      intArray1[4] = 120528;
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 65;
      intArray0[1] = 1789;
      intArray0[2] = (-1);
      intArray0[3] = (-85);
      int int0 = (-1232);
      intArray0[4] = (-1232);
      intArray0[0] = (-4274);
      intArray0[6] = 1789;
      intArray0[7] = 1206;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {(-4274), 1789, (-1), (-85), (-1232), 0, 1789, 1206}, intArray0);
      assertNotNull(charClass0);
      assertEquals(8, intArray0.length);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {1, 1788, 1207, 1114111, (-1232), 0, 1789, 1206}, intArray0);
      assertNotNull(charClass1);
      assertEquals(8, intArray0.length);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertArrayEquals(new int[] {1, 1114111, 1207, 1114111, (-1232), 0, 1789, 1206}, intArray0);
      assertNotNull(charClass2);
      assertEquals(8, intArray0.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1206;
      intArray1[1] = 1206;
      intArray1[2] = (-1232);
      intArray1[3] = (-1);
      intArray1[4] = (-85);
      CharClass charClass3 = charClass0.appendLiteral((-85), (-85));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertArrayEquals(new int[] {1, 1114111, (-85), (-85), (-1232), 0, 1789, 1206}, intArray0);
      assertNotNull(charClass3);
      assertEquals(8, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      CharClass charClass4 = charClass0.appendClassWithSign(intArray0, (-4274));
      assertNotSame(intArray0, intArray1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertArrayEquals(new int[] {0, 1114111, (-85), (-85), (-1232), 0, 1789, 1206}, intArray0);
      assertNotNull(charClass4);
      assertEquals(8, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      
      // Undeclared exception!
      try { 
        charClass2.appendFoldedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2504;
      int int0 = 437;
      intArray0[1] = 437;
      intArray0[2] = 1445;
      intArray0[3] = 2404;
      intArray0[4] = (-571);
      intArray0[5] = 1931;
      intArray0[6] = 354;
      intArray0[7] = (-2045);
      intArray0[8] = 655360;
      String string0 = CharClass.charClassToString(intArray0, (-1882));
      assertArrayEquals(new int[] {2504, 437, 1445, 2404, (-571), 1931, 354, (-2045), 655360}, intArray0);
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(9, intArray0.length);
      
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(66639, 2504);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray1 = new int[4][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass2);
      assertEquals(4, intArray1.length);
      
      CharClass charClass3 = charClass2.appendRange((-2223), 2504);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertNotNull(charClass3);
      assertEquals(4, intArray1.length);
      
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotNull(charClass4);
      assertEquals(4, intArray1.length);
      
      // Undeclared exception!
      try { 
        charClass4.appendClassWithSign(intArray0, 354);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      intArray0[1] = 3874;
      intArray0[2] = 4;
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[][] intArray0 = new int[0][1];
      int[] intArray1 = new int[9];
      intArray1[0] = 2475;
      intArray1[1] = 65025;
      intArray1[2] = 0;
      intArray1[3] = 4930;
      intArray1[4] = 2475;
      intArray1[5] = 1559;
      intArray1[6] = 0;
      intArray1[7] = 12283;
      intArray1[8] = 916;
      CharClass charClass0 = new CharClass(intArray1);
      assertArrayEquals(new int[] {2475, 65025, 0, 4930, 2475, 1559, 0, 12283, 916}, intArray1);
      assertNotNull(charClass0);
      assertEquals(9, intArray1.length);
      
      CharClass charClass1 = charClass0.appendLiteral(204, 2475);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {2475, 65025, 0, 4930, 2475, 1559, 0, 12283, 916}, intArray1);
      assertNotNull(charClass1);
      assertEquals(9, intArray1.length);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertArrayEquals(new int[] {2475, 65025, 0, 4930, 2475, 1559, 0, 12283, 916}, intArray1);
      assertNotNull(charClass2);
      assertEquals(9, intArray1.length);
      
      CharClass charClass3 = charClass0.appendNegatedTable(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertArrayEquals(new int[] {2475, 65025, 0, 4930, 2475, 1559, 0, 12283, 916}, intArray1);
      assertNotNull(charClass3);
      assertEquals(0, intArray0.length);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(65, 65);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 8624;
      int int0 = (-1400);
      intArray0[1] = (-1400);
      intArray0[2] = 0;
      intArray0[3] = 2;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {8624, (-1400), 0, 2}, intArray0);
      assertNotNull(charClass1);
      assertEquals(4, intArray0.length);
      
      CharClass charClass2 = new CharClass(intArray0);
      assertArrayEquals(new int[] {8624, (-1400), 0, 2}, intArray0);
      assertNotNull(charClass2);
      assertEquals(4, intArray0.length);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      
      CharClass charClass3 = charClass2.negateClass();
      assertNotSame(charClass2, charClass1);
      assertNotSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotSame(charClass3, charClass1);
      assertArrayEquals(new int[] {0, 8623, (-1399), (-1)}, intArray0);
      assertNotNull(charClass3);
      assertEquals(4, intArray0.length);
      assertFalse(charClass2.equals((Object)charClass1));
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass0));
      assertFalse(charClass3.equals((Object)charClass1));
      
      CharClass charClass4 = charClass1.cleanClass();
      assertNotSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertNotSame(charClass0, charClass2);
      assertNotSame(charClass1, charClass2);
      assertNotSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertNotSame(charClass4, charClass2);
      assertArrayEquals(new int[] {0, 8623, (-1399), (-1)}, intArray0);
      assertNotNull(charClass4);
      assertEquals(4, intArray0.length);
      assertFalse(charClass0.equals((Object)charClass3));
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass3));
      assertFalse(charClass4.equals((Object)charClass2));
      
      CharClass charClass5 = new CharClass(intArray0);
      assertArrayEquals(new int[] {0, 8623, (-1399), (-1)}, intArray0);
      assertNotNull(charClass5);
      assertEquals(4, intArray0.length);
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass4));
      
      CharClass charClass6 = charClass5.cleanClass();
      assertNotSame(charClass5, charClass2);
      assertNotSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertNotSame(charClass5, charClass0);
      assertNotSame(charClass5, charClass1);
      assertNotSame(charClass5, charClass4);
      assertNotSame(charClass6, charClass0);
      assertNotSame(charClass6, charClass1);
      assertNotSame(charClass6, charClass3);
      assertNotSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertNotSame(charClass6, charClass2);
      assertArrayEquals(new int[] {(-1399), 8623, 0, 8623}, intArray0);
      assertNotNull(charClass6);
      assertEquals(4, intArray0.length);
      assertFalse(charClass5.equals((Object)charClass2));
      assertFalse(charClass5.equals((Object)charClass3));
      assertFalse(charClass5.equals((Object)charClass0));
      assertFalse(charClass5.equals((Object)charClass1));
      assertFalse(charClass5.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass0));
      assertFalse(charClass6.equals((Object)charClass1));
      assertFalse(charClass6.equals((Object)charClass3));
      assertFalse(charClass6.equals((Object)charClass4));
      assertFalse(charClass6.equals((Object)charClass2));
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 119974);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      CharClass charClass0 = new CharClass(intArray0);
      assertArrayEquals(new int[] {4, 0, 0, 0, 0}, intArray0);
      assertNotNull(charClass0);
      assertEquals(5, intArray0.length);
      
      int[][] intArray1 = new int[7][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2432;
      intArray2[1] = 4;
      intArray2[2] = 4;
      intArray2[3] = 4;
      intArray2[4] = 4;
      intArray2[5] = 4;
      intArray2[6] = 4;
      intArray2[7] = 4;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertArrayEquals(new int[] {4, 0, 0, 0, 1114111}, intArray0);
      assertNotNull(charClass1);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
      
      CharClass charClass2 = charClass0.appendNegatedClass(intArray2);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {4, 0, 0, 0, 1114111}, intArray0);
      assertArrayEquals(new int[] {2432, 4, 4, 4, 4, 4, 4, 4}, intArray2);
      assertNotNull(charClass2);
      assertEquals(5, intArray0.length);
      assertEquals(8, intArray2.length);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass3 = charClass0.appendTable(intArray1);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertArrayEquals(new int[] {4, 0, 0, 0, 1114111}, intArray0);
      assertNotNull(charClass3);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray2));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 11088;
      intArray0[1] = 3542;
      intArray0[2] = (-1677);
      intArray0[3] = 2277;
      intArray0[4] = 251;
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      charClass1.cleanClass();
      int int0 = 891;
      int[][] intArray0 = new int[5][2];
      int[] intArray1 = new int[4];
      intArray1[0] = 891;
      intArray1[1] = 48;
      intArray1[2] = 891;
      intArray1[3] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 891;
      intArray2[4] = 891;
      intArray2[5] = 48;
      intArray2[6] = 0;
      intArray2[7] = (-1296);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      intArray3[0] = 891;
      intArray3[1] = 0;
      intArray3[2] = 48;
      intArray3[3] = 0;
      intArray3[4] = 0;
      intArray3[5] = 0;
      intArray3[6] = 0;
      intArray3[7] = (-1296);
      intArray3[8] = (-1296);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      intArray4[0] = (-1296);
      intArray4[1] = 0;
      intArray4[2] = (-1296);
      intArray4[3] = (-1296);
      intArray4[4] = 48;
      intArray4[5] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[9];
      intArray5[0] = 891;
      intArray5[1] = 48;
      intArray5[2] = 19;
      intArray5[3] = 0;
      intArray5[4] = 891;
      intArray5[5] = 0;
      intArray5[6] = 0;
      intArray5[7] = 48;
      intArray5[8] = 66640;
      intArray0[4] = intArray5;
      // Undeclared exception!
      charClass1.appendTableWithSign(intArray0, (-830));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[0] = 8624;
      intArray0[1] = (-1400);
      intArray0[2] = 0;
      intArray0[3] = 2;
      CharClass charClass1 = charClass0.appendClass(intArray0);
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[5][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, (-104));
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1723;
      intArray0[1] = 64;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      charClass1.cleanClass();
      charClass0.appendRange(64, 64);
      CharClass charClass2 = charClass0.appendRange(120343, (-1185));
      assertSame(charClass2, charClass1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-97);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int0 = (-255);
      CharClass.charClassToString(intArray0, (-255));
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      charClass1.appendNegatedClass(intArray0);
      charClass0.appendFoldedClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, (-655));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      CharClass charClass2 = charClass1.cleanClass();
      charClass2.appendLiteral(0, 10712);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      CharClass charClass3 = charClass2.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[7][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendRange(0, 0);
      int[] intArray0 = charClass0.toArray();
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-3458));
      CharClass charClass2 = charClass1.negateClass();
      int[][] intArray1 = new int[8][7];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[5];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = null;
      CharClass charClass0 = null;
      try {
        charClass0 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendLiteral(1122, 1122);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 1122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 65046;
      int int0 = (-569);
      intArray0[1] = (-569);
      int int1 = 68102;
      intArray0[2] = 68102;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[5][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[1];
      int int0 = (-4997);
      intArray0[0] = (-4997);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, (-4997));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 2962;
      intArray0[1] = 2277;
      intArray0[2] = 484;
      intArray0[3] = 2257;
      intArray0[4] = 2477;
      intArray0[5] = (-3783);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      int[][] intArray1 = new int[3][6];
      intArray1[0] = intArray0;
      charClass0.toString();
      intArray1[1] = intArray0;
      charClass0.toString();
      intArray1[2] = intArray0;
      CharClass charClass2 = charClass0.appendTable(intArray1);
      charClass2.toString();
      charClass0.toArray();
      charClass1.appendNegatedTable(intArray1);
      charClass1.negateClass();
      assertArrayEquals(new int[] {484, 2257, 2477, (-3783), 2962, 2277}, intArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[7][5];
      int[] intArray1 = new int[6];
      intArray1[0] = 4734;
      intArray1[1] = 568;
      intArray1[2] = 324;
      intArray1[3] = 2240;
      intArray1[4] = 1944;
      intArray1[5] = 4081;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 324;
      intArray2[1] = 4081;
      intArray2[2] = 1;
      intArray2[3] = 1944;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 324;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      intArray4[0] = 4734;
      intArray4[1] = 4081;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      intArray5[0] = 4081;
      intArray5[1] = 1;
      intArray5[2] = 4734;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      intArray6[0] = 1;
      intArray6[1] = 1944;
      intArray6[2] = 324;
      intArray6[3] = 2240;
      intArray6[4] = 1944;
      intArray6[5] = 324;
      intArray6[6] = 568;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      intArray7[0] = (-1779);
      intArray7[1] = 568;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass0.appendTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, 2240);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[0][5];
      CharClass charClass1 = charClass0.appendNegatedTable(intArray0);
      CharClass charClass2 = charClass1.appendFoldedRange(0, 0);
      CharClass charClass3 = charClass2.cleanClass();
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      CharClass charClass4 = charClass3.appendClassWithSign(intArray1, 0);
      charClass4.appendTable(intArray0);
      charClass0.appendTableWithSign(intArray0, 0);
      CharClass charClass5 = charClass2.appendFoldedRange(1188, (-4942));
      assertSame(charClass5, charClass2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[2];
      int int0 = 2011;
      CharClass charClass1 = charClass0.appendFoldedRange((-2466), 1446);
      charClass1.cleanClass();
      charClass1.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass0.negateClass();
      int[][] intArray1 = new int[9][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClass(intArray0);
      CharClass charClass2 = charClass1.appendFoldedRange((-2275), (-2275));
      charClass0.appendNegatedClass(intArray0);
      charClass1.appendLiteral((-1), (-1));
      charClass0.cleanClass();
      int[][] intArray1 = new int[9][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(65856, 65856);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = (-455);
      CharClass charClass1 = charClass0.appendLiteral((-455), 0);
      int[][] intArray0 = new int[1][1];
      int[] intArray1 = new int[2];
      intArray1[0] = (-455);
      intArray1[1] = 0;
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray0, 1518);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-97);
      intArray0[1] = 0;
      intArray0[2] = 6051;
      intArray0[3] = 0;
      CharClass.charClassToString(intArray0, (-255));
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendRange(6051, (-5037));
      int[][] intArray1 = new int[3][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass2 = charClass1.appendTable(intArray1);
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      CharClass charClass4 = charClass2.appendNegatedClass(intArray0);
      CharClass charClass5 = charClass1.appendClassWithSign(intArray0, (-2));
      charClass3.appendLiteral(3404, 93);
      charClass5.appendRange(426, 0);
      CharClass charClass6 = charClass4.appendFoldedRange(720, (-2));
      assertSame(charClass1, charClass6);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][4];
      charClass0.appendNegatedTable(intArray1);
      CharClass charClass1 = charClass0.appendLiteral(0, (-3837));
      int[] intArray2 = new int[6];
      intArray2[0] = (-3837);
      intArray2[1] = (-3837);
      intArray2[2] = 0;
      CharClass.charClassToString(intArray0, 0);
      intArray2[3] = (-3837);
      intArray2[4] = (-3837);
      intArray2[5] = 0;
      CharClass charClass2 = charClass1.appendClassWithSign(intArray2, (-3837));
      charClass2.appendLiteral(0, 91);
      int[] intArray3 = new int[3];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 91;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedClass(intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1360;
      intArray0[3] = 0;
      intArray0[4] = 4;
      intArray0[5] = (-2378);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      CharClass charClass3 = charClass2.appendRange(0, 0);
      CharClass charClass4 = charClass3.cleanClass();
      CharClass charClass5 = charClass4.appendLiteral((-2058), (-2807));
      charClass5.cleanClass();
      assertArrayEquals(new int[] {0, 0, 1360, 0, 4, (-2378), 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 695;
      intArray0[1] = (-1);
      int int0 = 0;
      intArray0[2] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      // Undeclared exception!
      try { 
        charClass1.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      CharClass charClass2 = charClass0.appendClassWithSign(intArray0, 4);
      charClass2.appendFoldedClass(intArray0);
      CharClass charClass3 = charClass1.appendClassWithSign(intArray0, 4);
      int[][] intArray1 = new int[5][8];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[8];
      intArray2[0] = 4;
      intArray2[1] = 4;
      intArray2[2] = 4;
      intArray2[3] = 4;
      intArray2[4] = 4;
      charClass0.toString();
      intArray2[5] = 0;
      intArray2[6] = 4;
      intArray2[7] = 4;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
