/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 06 06:54:14 GMT 2019
 */

package org.apache.commons.imaging.formats.tiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import org.apache.commons.imaging.formats.tiff.TiffElement;
import org.apache.commons.imaging.formats.tiff.TiffField;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeAscii;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeDouble;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeFloat;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeLong;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeRational;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffField_ESTest extends TiffField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      TiffField tiffField0 = new TiffField((byte)46, 1034, fieldTypeByte0.SHORT, 160, (-16L), byteArray0, byteOrder0, 1);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(320, tiffField0.getBytesLength());
      assertEquals(46, tiffField0.getTag());
      assertEquals(11776, int0);
      assertEquals(1034, tiffField0.getDirectoryType());
      assertEquals((-16), tiffField0.getOffset());
      assertEquals(1, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-1804), 101, fieldTypeFloat0, 1L, 0L, byteArray0, byteOrder0, (byte)1);
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals(101, tiffField0.getDirectoryType());
      assertEquals((-1804), tiffField0.getTag());
      assertEquals(1, tiffField0.getSortHint());
      assertTrue(boolean0);
      assertEquals(0, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(28, (-2341), fieldTypeRational0.FLOAT, (-1025L), 30, byteArray0, byteOrder0, 50713);
      String string0 = tiffField0.toString();
      assertEquals(50713, tiffField0.getSortHint());
      assertEquals((-2341), tiffField0.getDirectoryType());
      assertEquals("28 (0x1c: GPSAreaInformation): Invalid value: GPS text field not encoded as bytes. (-1025 Float)", string0);
      assertEquals(30, tiffField0.getOffset());
      assertEquals(28, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField((-2883), 50, fieldTypeLong0, (byte)2, (-18624L), byteArray0, byteOrder0, (byte)50);
      String string0 = tiffField0.getValueDescription();
      assertEquals(50, tiffField0.getSortHint());
      assertEquals(50, tiffField0.getDirectoryType());
      assertNotNull(string0);
      assertEquals((-2883), tiffField0.getTag());
      assertEquals((-18624), tiffField0.getOffset());
      assertEquals(8, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = new FieldTypeLong(21, (String) null);
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(44, 44, fieldTypeLong0, 44, 44, byteArray0, byteOrder0, (-683));
      tiffField0.getValue();
      assertEquals(176, tiffField0.getBytesLength());
      assertEquals(44, tiffField0.getTag());
      assertEquals(44, tiffField0.getDirectoryType());
      assertEquals((-683), tiffField0.getSortHint());
      assertEquals(44, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(28, (-855), fieldTypeRational0.UNDEFINED, 1421L, 1421L, byteArray0, byteOrder0, (-855));
      TagInfo tagInfo0 = tiffField0.getTagInfo();
      assertEquals((-855), tiffField0.getSortHint());
      assertEquals(1421, tiffField0.getOffset());
      assertEquals(28, tiffField0.getTag());
      assertEquals(28, tagInfo0.tag);
      assertEquals((-855), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(400, 400, fieldTypeRational0, 400, 400, byteArray0, byteOrder0, (-2025));
      TagInfo tagInfo0 = tiffField0.getTagInfo();
      assertEquals(400, tiffField0.getTag());
      assertEquals(400, tiffField0.getOffset());
      assertEquals(400, tiffField0.getDirectoryType());
      assertEquals(400, tagInfo0.tag);
      assertEquals((-2025), tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.SBYTE;
      byte[] byteArray0 = new byte[6];
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeByte0, 0, 0, byteArray0, (ByteOrder) null, 1);
      int int0 = tiffField0.getTag();
      assertEquals(0, int0);
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-1119), (-1119), fieldTypeShort0, 1477L, (-1119), byteArray0, byteOrder0, 0);
      int int0 = tiffField0.getTag();
      assertEquals((-1119), tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-1119), int0);
      assertEquals((-1119), tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeAscii fieldTypeAscii0 = new FieldTypeAscii((byte)26, (String) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)26;
      TiffField tiffField0 = new TiffField((byte)26, (byte)26, fieldTypeAscii0, (byte)26, (byte)26, byteArray0, byteOrder0, 206);
      String string0 = tiffField0.getStringValue();
      assertEquals(206, tiffField0.getSortHint());
      assertEquals(26, tiffField0.getDirectoryType());
      assertEquals(26, tiffField0.getTag());
      assertEquals(26, tiffField0.getBytesLength());
      assertNotNull(string0);
      assertEquals(26, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(256, 0, fieldTypeRational0.IFD, (-3252L), 256, byteArray0, byteOrder0, 0);
      int int0 = tiffField0.getSortHint();
      assertEquals(256, tiffField0.getTag());
      assertEquals(256, tiffField0.getOffset());
      assertEquals(0, int0);
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[7];
      TiffField tiffField0 = new TiffField((-742), (byte) (-110), fieldTypeByte0, 1L, (byte) (-42), byteArray0, byteOrder0, (byte) (-110));
      int int0 = tiffField0.getSortHint();
      assertEquals((-742), tiffField0.getTag());
      assertEquals((-110), int0);
      assertEquals((-42), tiffField0.getOffset());
      assertEquals((-110), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-4936), 0, fieldTypeByte0, 0, 0, byteArray0, byteOrder0, 2201);
      tiffField0.getOffset();
      assertEquals((-4936), tiffField0.getTag());
      assertEquals(2201, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1, 0, fieldTypeByte0, 0L, 4L, byteArray0, byteOrder0, (byte)63);
      int int0 = tiffField0.getOffset();
      assertEquals(4, int0);
      assertEquals(63, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)26;
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeByte0, 1, (byte)26, byteArray0, byteOrder0, (byte)26);
      tiffField0.getIntValueOrArraySum();
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getTag());
      assertEquals(26, tiffField0.getOffset());
      assertEquals(1, tiffField0.getBytesLength());
      assertEquals(26, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byteArray0[4] = (byte) (-32);
      TiffField tiffField0 = new TiffField(174, 174, fieldTypeRational0, 174, 174, byteArray0, byteOrder0, 65535);
      int int0 = tiffField0.getIntValueOrArraySum();
      assertEquals(174, tiffField0.getTag());
      assertEquals(1392, tiffField0.getBytesLength());
      assertEquals((-3), int0);
      assertEquals(174, tiffField0.getDirectoryType());
      assertEquals(65535, tiffField0.getSortHint());
      assertEquals(174, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeDouble fieldTypeDouble0 = new FieldTypeDouble((-1), "");
      TiffField tiffField0 = new TiffField(924, (-2293), fieldTypeDouble0, 1, 2146833092, byteArray0, byteOrder0, 41729);
      tiffField0.getIntValue();
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals(41729, tiffField0.getSortHint());
      assertEquals(924, tiffField0.getTag());
      assertEquals((-2293), tiffField0.getDirectoryType());
      assertEquals(2146833092, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      TiffField tiffField0 = new TiffField(334, 449, fieldTypeShort0, 1L, 564L, byteArray0, byteOrder0, (byte)45);
      tiffField0.getIntValue();
      assertEquals(564, tiffField0.getOffset());
      assertEquals(334, tiffField0.getTag());
      assertEquals(45, tiffField0.getSortHint());
      assertEquals(449, tiffField0.getDirectoryType());
      assertEquals(2, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-110);
      TiffField tiffField0 = new TiffField((-742), (byte) (-110), fieldTypeByte0, 1L, (byte) (-42), byteArray0, byteOrder0, (byte) (-110));
      tiffField0.getIntValue();
      assertEquals((-742), tiffField0.getTag());
      assertEquals((-110), tiffField0.getDirectoryType());
      assertEquals((-110), tiffField0.getSortHint());
      assertEquals((-42), tiffField0.getOffset());
      assertEquals(1, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FieldTypeLong fieldTypeLong0 = new FieldTypeLong(21, (String) null);
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(44, 44, fieldTypeLong0, 44, 44, byteArray0, byteOrder0, (-683));
      tiffField0.getFieldTypeName();
      assertEquals((-683), tiffField0.getSortHint());
      assertEquals(44, tiffField0.getTag());
      assertEquals(44, tiffField0.getOffset());
      assertEquals(44, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(12, 12, fieldTypeRational0, 12, 12, byteArray0, byteOrder0, 12);
      tiffField0.getFieldTypeName();
      assertEquals(12, tiffField0.getSortHint());
      assertEquals(12, tiffField0.getTag());
      assertEquals(12, tiffField0.getOffset());
      assertEquals(12, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[36];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeLong fieldTypeLong0 = new FieldTypeLong(1910, "");
      TiffField tiffField0 = new TiffField(1910, 50946, fieldTypeLong0, 1910, 50946, byteArray0, byteOrder0, 7);
      tiffField0.getFieldTypeName();
      assertEquals(50946, tiffField0.getOffset());
      assertEquals(7, tiffField0.getSortHint());
      assertEquals(1910, tiffField0.getTag());
      assertEquals(50946, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[4];
      TiffField tiffField0 = new TiffField(457, 0, (FieldType) null, 336L, 2671L, byteArray0, byteOrder0, 1232);
      tiffField0.getFieldType();
      assertEquals(457, tiffField0.getTag());
      assertEquals(2671, tiffField0.getOffset());
      assertEquals(1232, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeRational fieldTypeRational0 = new FieldTypeRational((byte)0, "");
      TiffField tiffField0 = new TiffField((-29), (byte) (-32), fieldTypeRational0, (byte)1, 1854L, byteArray0, byteOrder0, (byte) (-7));
      tiffField0.getFieldType();
      assertEquals((-7), tiffField0.getSortHint());
      assertEquals((-29), tiffField0.getTag());
      assertEquals(1854, tiffField0.getOffset());
      assertEquals((-32), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = new FieldTypeFloat((-1782), "|oO&q}}kk10.");
      TiffField tiffField0 = new TiffField((-2768), (-1782), fieldTypeFloat0, (-1252L), 255L, byteArray0, byteOrder0, 1);
      tiffField0.getFieldType();
      assertEquals((-2768), tiffField0.getTag());
      assertEquals(255, tiffField0.getOffset());
      assertEquals((-1782), tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[7];
      TiffField tiffField0 = new TiffField(50, (-5), fieldTypeByte0, 1L, (byte)0, byteArray0, byteOrder0, 2146537203);
      tiffField0.getDoubleValue();
      assertEquals(2146537203, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getOffset());
      assertEquals((-5), tiffField0.getDirectoryType());
      assertEquals(50, tiffField0.getTag());
      assertEquals(1, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffField tiffField0 = new TiffField(2145937583, (byte) (-43), fieldTypeRational0, 1L, 2145937583, byteArray0, byteOrder0, (byte)111);
      tiffField0.getDoubleValue();
      assertEquals((-43), tiffField0.getDirectoryType());
      assertEquals(2145937583, tiffField0.getTag());
      assertEquals(2145937583, tiffField0.getOffset());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals(111, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-42);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((byte)1, (byte)1, fieldTypeRational0, (byte)1, (byte) (-32), byteArray0, byteOrder0, 2582);
      assertEquals(1L, tiffField0.getCount());
      
      tiffField0.getDoubleValue();
      assertEquals((-32), tiffField0.getOffset());
      assertEquals(8, tiffField0.getBytesLength());
      assertEquals(2582, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[6];
      TiffField tiffField0 = new TiffField(1696, 1424, fieldTypeRational0, 1696, (-2511), byteArray0, (ByteOrder) null, 1696);
      int int0 = tiffField0.getDirectoryType();
      assertEquals(1424, int0);
      assertEquals((-2511), tiffField0.getOffset());
      assertEquals(1696, tiffField0.getTag());
      assertEquals(1696, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[3];
      TiffField tiffField0 = new TiffField(3195, (byte) (-110), ((FieldType) ((org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType) fieldTypeByte0).SHORT.IFD).RATIONAL, (-336L), (byte)46, byteArray0, byteOrder0, 160);
      int int0 = tiffField0.getDirectoryType();
      assertEquals((-110), int0);
      assertEquals(3195, tiffField0.getTag());
      assertEquals(46, tiffField0.getOffset());
      assertEquals(160, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[7];
      TiffField tiffField0 = new TiffField(50, (byte)0, fieldTypeByte0.SSHORT, (byte)0, (byte)0, byteArray0, byteOrder0, (-2147369059));
      tiffField0.getCount();
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals((-2147369059), tiffField0.getSortHint());
      assertEquals(50, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(174, 174, fieldTypeRational0, 174, 174, byteArray0, byteOrder0, 65535);
      long long0 = tiffField0.getCount();
      assertEquals(174, tiffField0.getOffset());
      assertEquals(174, tiffField0.getTag());
      assertEquals(65535, tiffField0.getSortHint());
      assertEquals(174, tiffField0.getDirectoryType());
      assertEquals(174L, long0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-4936), 42016, fieldTypeByte0, 0, 42016, byteArray0, byteOrder0, 2201);
      int int0 = tiffField0.getBytesLength();
      assertEquals((-4936), tiffField0.getTag());
      assertEquals(42016, tiffField0.getOffset());
      assertEquals(2201, tiffField0.getSortHint());
      assertEquals(42016, tiffField0.getDirectoryType());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField(387, (-2342), fieldTypeRational0, (-2342), 100L, byteArray0, (ByteOrder) null, (-2342));
      int int0 = tiffField0.getBytesLength();
      assertEquals(100, tiffField0.getOffset());
      assertEquals((-18736), int0);
      assertEquals((-2342), tiffField0.getSortHint());
      assertEquals(387, tiffField0.getTag());
      assertEquals((-2342), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[9];
      TiffField tiffField0 = new TiffField(1715, 41991, ((FieldType) ((org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType) fieldTypeByte0).DOUBLE).SSHORT, 608L, 1L, byteArray0, (ByteOrder) null, (byte)0);
      tiffField0.getByteOrder();
      assertEquals(1, tiffField0.getOffset());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(1715, tiffField0.getTag());
      assertEquals(41991, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField((-1), 2147239975, fieldTypeLong0, 21480L, 5487L, byteArray0, byteOrder0, 2147239975);
      tiffField0.getByteArrayValue();
      assertEquals(85920, tiffField0.getBytesLength());
      assertEquals(2147239975, tiffField0.getDirectoryType());
      assertEquals(2147239975, tiffField0.getSortHint());
      assertEquals(5487, tiffField0.getOffset());
      assertEquals((-1), tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[9];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(289, (-1873), fieldTypeRational0, (byte)0, (byte) (-32), byteArray0, byteOrder0, (byte)111);
      byte[] byteArray1 = tiffField0.getByteArrayValue();
      assertEquals((-32), tiffField0.getOffset());
      assertEquals(111, tiffField0.getSortHint());
      assertEquals(0, byteArray1.length);
      assertEquals(289, tiffField0.getTag());
      assertEquals((-1873), tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(2146945296, 1159, fieldTypeByte0, (-2993L), 2146945296, byteArray0, byteOrder0, (-1425));
      MockFile mockFile0 = new MockFile(")");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) mockPrintWriter0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(11, 11, fieldTypeRational0, 11, 11, (byte[]) null, byteOrder0, 11);
      // Undeclared exception!
      try { 
        tiffField0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField((-7), (-7), fieldTypeRational0, (-7), (-7), byteArray0, byteOrder0, (-7));
      // Undeclared exception!
      try { 
        tiffField0.toString();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((byte) (-32), (byte) (-32), (FieldType) null, 2808L, 2808L, byteArray0, byteOrder0, (byte)63);
      // Undeclared exception!
      try { 
        tiffField0.isLocalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(4656, 4656, fieldTypeRational0, 4656, 4656, (byte[]) null, byteOrder0, 4656);
      // Undeclared exception!
      try { 
        tiffField0.getValueDescription();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[202];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TiffField tiffField0 = new TiffField((-876), (-876), fieldTypeDouble0, (-876), (-876), byteArray0, byteOrder0, (-876));
      // Undeclared exception!
      try { 
        tiffField0.getValueDescription();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeRational0, 1, 1, byteArray0, byteOrder0, 2594);
      // Undeclared exception!
      try { 
        tiffField0.getValueDescription();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[11];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(28, (-1369), fieldTypeRational0, (-1369), (-1369), byteArray0, byteOrder0, (-1369));
      try { 
        tiffField0.getValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // GPS text field not encoded as bytes.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfoGpsText", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[4];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-619), (-619), fieldTypeRational0, (-619), (-619), byteArray0, byteOrder0, (-619));
      // Undeclared exception!
      try { 
        tiffField0.getValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(896, 1, fieldTypeRational0, 1, (-132L), byteArray0, byteOrder0, 896);
      // Undeclared exception!
      try { 
        tiffField0.getValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(5, 5, fieldTypeRational0, 5, 5, (byte[]) null, byteOrder0, 5);
      // Undeclared exception!
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-15), (-15), fieldTypeRational0, (-15), (-15), byteArray0, byteOrder0, (-15));
      // Undeclared exception!
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeRational0, 1, 1, byteArray0, byteOrder0, 1);
      // Undeclared exception!
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(14, 14, (FieldType) null, 14, 14, byteArray0, byteOrder0, 14);
      // Undeclared exception!
      try { 
        tiffField0.getOversizeValueElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeRational0, 13, 13, (byte[]) null, byteOrder0, 13);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-4), (-4), fieldTypeRational0, (-4), (-4), byteArray0, byteOrder0, (-4));
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[1];
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeRational0, 1, 13, byteArray0, byteOrder0, 13);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(40093, 2257, fieldTypeRational0, 0L, 4L, byteArray0, byteOrder0, 40093);
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Text field not encoded as bytes.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfoXpString", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(636, 636, fieldTypeShort0, 636, 636, (byte[]) null, byteOrder0, 636);
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[10];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-854), (-854), fieldTypeRational0, (-854), (-854), byteArray0, byteOrder0, (-854));
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeRational0, 1, 1, byteArray0, byteOrder0, 1);
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[20];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeRational0, 1, 1, byteArray0, byteOrder0, 13);
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(42, 42, fieldTypeShort0, 42, 42, (byte[]) null, byteOrder0, 42);
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-18), (-18), fieldTypeRational0, (-18), (-18), byteArray0, byteOrder0, (-18));
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeRational0, 1, 1, byteArray0, byteOrder0, 1);
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[11];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(28, (-1369), fieldTypeRational0, (-1369), (-1369), byteArray0, byteOrder0, (-1369));
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // GPS text field not encoded as bytes.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfoGpsText", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(435, 435, (FieldType) null, 435, 435, byteArray0, byteOrder0, 435);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.taginfos.TagInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-5), (-5), fieldTypeRational0, (-5), (-5), byteArray0, byteOrder0, (-5));
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeRational0, 1, 1, byteArray0, byteOrder0, 1);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(4676, 4676, fieldTypeRational0, 4676, 4676, (byte[]) null, byteOrder0, 4676);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-30), (-30), fieldTypeRational0, (-30), (-30), byteArray0, byteOrder0, (-30));
      // Undeclared exception!
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeRational0, 1, 1, byteArray0, byteOrder0, 1);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField(46, 46, fieldTypeLong0, (-12592L), (-12592L), byteArray0, byteOrder0, 46);
      // Undeclared exception!
      try { 
        tiffField0.getByteArrayValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[20];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 1134, fieldTypeRational0, (-2240L), 0, byteArray0, byteOrder0, 0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("V@Y");
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) mockPrintWriter0, "V@Y");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField(693, 693, fieldTypeRational0, 1L, 1L, byteArray0, byteOrder0, 129);
      MockFile mockFile0 = new MockFile("*8>}\"^eV$1ta98'", "{");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) mockPrintWriter0, "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[20];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-78), (-78), fieldTypeShort0, (-78), 65535, byteArray0, byteOrder0, 65535);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField(66, 66, fieldTypeRational0, 1L, 66, byteArray0, byteOrder0, 66);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField((-7), (-7), fieldTypeRational0, (-7), (-7), byteArray0, byteOrder0, (-7));
      // Undeclared exception!
      try { 
        tiffField0.dump();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(34754, 34754, fieldTypeShort0, 1L, 34754, byteArray0, byteOrder0, 34754);
      // Undeclared exception!
      try { 
        tiffField0.dump();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[3];
      TiffField tiffField0 = new TiffField((-1737), 3127, fieldTypeRational0, 629L, 1444L, byteArray0, byteOrder0, 50726);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(0, 8, fieldTypeByte0.IFD, 2182L, 0, byteArray0, byteOrder0, 8);
      boolean boolean0 = tiffField0.isLocalValue();
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getOffset());
      assertFalse(boolean0);
      assertEquals(8, tiffField0.getDirectoryType());
      assertEquals(8, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[2];
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeByte0, 1, (byte)26, byteArray0, byteOrder0, (byte)26);
      tiffField0.getByteOrder();
      assertEquals(26, tiffField0.getOffset());
      assertEquals(1, tiffField0.getTag());
      assertEquals(26, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(103, (-2273), fieldTypeShort0, 103, 103, (byte[]) null, byteOrder0, 103);
      // Undeclared exception!
      try { 
        tiffField0.getByteArrayValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[3];
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeByte0, 0, 718L, byteArray0, (ByteOrder) null, (byte) (-2));
      tiffField0.getFieldType();
      assertEquals((-2), tiffField0.getSortHint());
      assertEquals(718, tiffField0.getOffset());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeRational0, 0, (-3252L), byteArray0, byteOrder0, 0);
      int int0 = tiffField0.getDirectoryType();
      assertEquals(0, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals((-3252), tiffField0.getOffset());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-1425), 0, fieldTypeByte0, 0L, 1392L, byteArray0, byteOrder0, 34737);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      TiffField tiffField0 = new TiffField(50, 50, fieldTypeRational0, 50, 50, (byte[]) null, (ByteOrder) null, 50);
      // Undeclared exception!
      try { 
        tiffField0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[1];
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      ByteOrder byteOrder0 = charBuffer0.order();
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeRational0, 1047L, (-771L), byteArray0, byteOrder0, (-4936));
      int int0 = tiffField0.getOffset();
      assertEquals(1, tiffField0.getTag());
      assertEquals((-771), int0);
      assertEquals((-4936), tiffField0.getSortHint());
      assertEquals(1, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[7];
      TiffField tiffField0 = new TiffField(1, 73, fieldTypeRational0, 1, 73, byteArray0, (ByteOrder) null, (-1501));
      int int0 = tiffField0.getTag();
      assertEquals((-1501), tiffField0.getSortHint());
      assertEquals(73, tiffField0.getOffset());
      assertEquals(1, int0);
      assertEquals(73, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[3];
      TiffField tiffField0 = new TiffField((byte)1, (byte) (-79), fieldTypeRational0, (-2147483648L), 8728L, byteArray0, (ByteOrder) null, (byte)1);
      long long0 = tiffField0.getCount();
      assertEquals((-2147483648L), long0);
      assertEquals((-79), tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(8728, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(34737, 3157, fieldTypeShort0, 2722L, 3157, byteArray0, byteOrder0, (byte)0);
      int int0 = tiffField0.getBytesLength();
      assertEquals(3157, tiffField0.getDirectoryType());
      assertEquals(3157, tiffField0.getOffset());
      assertEquals(34737, tiffField0.getTag());
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(5444, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(54, 54, fieldTypeRational0, 54, 54, byteArray0, byteOrder0, 54);
      String string0 = tiffField0.getDescriptionWithoutValue();
      assertEquals(54, tiffField0.getOffset());
      assertEquals(54, tiffField0.getSortHint());
      assertEquals("54 (0x36: Unknown Tag): ", string0);
      assertEquals(54, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(5, 5, fieldTypeRational0, 5, 5, byteArray0, byteOrder0, 5);
      // Undeclared exception!
      try { 
        tiffField0.getDoubleValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [Lorg.apache.commons.imaging.common.RationalNumber; cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(22, 22, fieldTypeRational0, 22, 22, byteArray0, byteOrder0, 22);
      // Undeclared exception!
      try { 
        tiffField0.getIntValue();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [Lorg.apache.commons.imaging.common.RationalNumber; cannot be cast to java.lang.Number
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[173];
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(488, 488, fieldTypeLong0, 488, 488, byteArray0, byteOrder0, 488);
      tiffField0.getIntValueOrArraySum();
      assertEquals(488, tiffField0.getSortHint());
      assertEquals(488, tiffField0.getTag());
      assertEquals(488, tiffField0.getDirectoryType());
      assertEquals(488L, tiffField0.getCount());
      assertEquals(488, tiffField0.getOffset());
      assertEquals(1952, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[137];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(40, 40, fieldTypeFloat0, 40, 40, byteArray0, byteOrder0, 40);
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@4f5a93d8 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(54, 54, fieldTypeRational0, 54, 54, byteArray0, byteOrder0, 54);
      // Undeclared exception!
      try { 
        tiffField0.getIntValueOrArraySum();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[202];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TiffField tiffField0 = new TiffField(488, 488, fieldTypeDouble0, 488, 488, byteArray0, byteOrder0, 488);
      tiffField0.getDoubleArrayValue();
      assertEquals(488, tiffField0.getSortHint());
      assertEquals(488, tiffField0.getOffset());
      assertEquals(3904, tiffField0.getBytesLength());
      assertEquals(488L, tiffField0.getCount());
      assertEquals(488, tiffField0.getTag());
      assertEquals(488, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[173];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(469, 469, fieldTypeFloat0, 469, 469, byteArray0, byteOrder0, 469);
      tiffField0.getDoubleArrayValue();
      assertEquals(469, tiffField0.getTag());
      assertEquals(469, tiffField0.getSortHint());
      assertEquals(469, tiffField0.getDirectoryType());
      assertEquals(1876, tiffField0.getBytesLength());
      assertEquals(469L, tiffField0.getCount());
      assertEquals(469, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[173];
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(488, 488, fieldTypeLong0, 488, 488, byteArray0, byteOrder0, 488);
      tiffField0.getDoubleArrayValue();
      assertEquals(1952, tiffField0.getBytesLength());
      assertEquals(488, tiffField0.getDirectoryType());
      assertEquals(488L, tiffField0.getCount());
      assertEquals(488, tiffField0.getTag());
      assertEquals(488, tiffField0.getSortHint());
      assertEquals(488, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[122];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      TiffField tiffField0 = new TiffField(65541, 65541, fieldTypeByte0, 65541, 65541, byteArray0, byteOrder0, 65541);
      try { 
        tiffField0.getDoubleArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [B@35db8fb9 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[8];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(5, 5, fieldTypeRational0, 5, 5, byteArray0, byteOrder0, 5);
      double[] doubleArray0 = tiffField0.getDoubleArrayValue();
      assertEquals(5L, tiffField0.getCount());
      assertEquals(5, tiffField0.getDirectoryType());
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(40, tiffField0.getBytesLength());
      assertEquals(5, tiffField0.getTag());
      assertEquals(5, tiffField0.getOffset());
      assertEquals(5, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[11];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(34719, 34719, fieldTypeShort0, 34719, 34719, byteArray0, byteOrder0, 34719);
      tiffField0.getDoubleArrayValue();
      assertEquals(34719, tiffField0.getSortHint());
      assertEquals(34719, tiffField0.getTag());
      assertEquals(34719, tiffField0.getOffset());
      assertEquals(34719L, tiffField0.getCount());
      assertEquals(69438, tiffField0.getBytesLength());
      assertEquals(34719, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeShort0, 1, 1, byteArray0, byteOrder0, 1);
      tiffField0.getDoubleArrayValue();
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(2, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(5, 5, fieldTypeRational0, 5, 5, byteArray0, byteOrder0, 5);
      tiffField0.getDoubleArrayValue();
      assertEquals(5, tiffField0.getOffset());
      assertEquals(5, tiffField0.getDirectoryType());
      assertEquals(5, tiffField0.getTag());
      assertEquals(5, tiffField0.getSortHint());
      assertEquals(40, tiffField0.getBytesLength());
      assertEquals(5L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[173];
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField(488, 488, fieldTypeLong0, 488, 488, byteArray0, byteOrder0, 488);
      tiffField0.getIntArrayValue();
      assertEquals(488, tiffField0.getSortHint());
      assertEquals(488, tiffField0.getTag());
      assertEquals(488L, tiffField0.getCount());
      assertEquals(1952, tiffField0.getBytesLength());
      assertEquals(488, tiffField0.getOffset());
      assertEquals(488, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[137];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeFloat0, 13, 13, byteArray0, byteOrder0, 13);
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown value: [F@2c918db6 for: -1 (0xffffffff: Unknown Tag): 
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(22, 22, fieldTypeRational0, 22, 22, byteArray0, byteOrder0, 22);
      tiffField0.getIntArrayValue();
      assertEquals(176, tiffField0.getBytesLength());
      assertEquals(22L, tiffField0.getCount());
      assertEquals(22, tiffField0.getDirectoryType());
      assertEquals(22, tiffField0.getTag());
      assertEquals(22, tiffField0.getOffset());
      assertEquals(22, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[2];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(34736, 34736, fieldTypeShort0, 34736, 34736, byteArray0, byteOrder0, 34736);
      int[] intArray0 = tiffField0.getIntArrayValue();
      assertEquals(34736L, tiffField0.getCount());
      assertEquals(69472, tiffField0.getBytesLength());
      assertEquals(34736, tiffField0.getDirectoryType());
      assertEquals(34736, tiffField0.getSortHint());
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(34736, tiffField0.getTag());
      assertEquals(34736, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[3];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeShort0, 1, 1, byteArray0, byteOrder0, 1);
      tiffField0.getIntArrayValue();
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1L, tiffField0.getCount());
      assertEquals(2, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[12];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(67, 67, fieldTypeRational0, 67, 67, byteArray0, byteOrder0, 67);
      // Undeclared exception!
      try { 
        tiffField0.getIntArrayValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField(9, 9, fieldTypeShort0.ASCII, 9340L, 1L, byteArray0, byteOrder0, 9);
      String string0 = tiffField0.getStringValue();
      assertEquals(9, tiffField0.getSortHint());
      assertEquals(9, tiffField0.getDirectoryType());
      assertEquals(9340, tiffField0.getBytesLength());
      assertEquals(1, tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals(9, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeRational0, 13, 13, byteArray0, byteOrder0, 13);
      try { 
        tiffField0.getStringValue();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Expected String value(-1 (0xffffffff: Unknown Tag): ): [Lorg.apache.commons.imaging.common.RationalNumber;@3227d13b
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[202];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TiffField tiffField0 = new TiffField(488, 488, fieldTypeDouble0, 488, 488, byteArray0, byteOrder0, 488);
      String string0 = tiffField0.getTagName();
      assertEquals(488, tiffField0.getOffset());
      assertEquals(488, tiffField0.getSortHint());
      assertEquals("Unknown Tag (0x1e8)", string0);
      assertEquals(488, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField(11, 11, fieldTypeRational0, 11, 11, byteArray0, byteOrder0, 11);
      String string0 = tiffField0.getTagName();
      assertEquals("ProcessingSoftware", string0);
      assertEquals(11, tiffField0.getDirectoryType());
      assertEquals(11, tiffField0.getSortHint());
      assertEquals(11, tiffField0.getOffset());
      assertEquals(11, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      byte[] byteArray0 = new byte[11];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(34719, 34719, fieldTypeShort0, 34719, 34719, byteArray0, byteOrder0, 34719);
      // Undeclared exception!
      try { 
        tiffField0.dump((PrintWriter) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.TiffField", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[241];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(452, 452, fieldTypeFloat0, 452, 452, byteArray0, byteOrder0, 452);
      String string0 = tiffField0.getValueDescription();
      assertEquals(452, tiffField0.getSortHint());
      assertEquals(452, tiffField0.getDirectoryType());
      assertEquals(452, tiffField0.getTag());
      assertEquals(1808, tiffField0.getBytesLength());
      assertEquals(452, tiffField0.getOffset());
      assertNotNull(string0);
      assertEquals(452L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[403];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      TiffField tiffField0 = new TiffField(42005, 42005, fieldTypeByte0, 42005, 0L, byteArray0, byteOrder0, 42005);
      String string0 = tiffField0.getValueDescription();
      assertEquals(42005L, tiffField0.getCount());
      assertEquals(42005, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getOffset());
      assertEquals(42005, tiffField0.getSortHint());
      assertEquals(42005, tiffField0.getDirectoryType());
      assertEquals(42005, tiffField0.getTag());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[137];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeFloat0, 13, 13, byteArray0, byteOrder0, 13);
      String string0 = tiffField0.toString();
      assertEquals("13 (0xd: Unknown Tag): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 (13 Float)", string0);
      assertEquals(13, tiffField0.getOffset());
      assertEquals(13, tiffField0.getDirectoryType());
      assertEquals(13, tiffField0.getSortHint());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[418];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TiffField tiffField0 = new TiffField(104, 104, fieldTypeDouble0, 104, 104, byteArray0, byteOrder0, 104);
      String string0 = tiffField0.toString();
      assertEquals("104 (0x68: Unknown Tag): 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0... (52) (104 Double)", string0);
      assertEquals(104, tiffField0.getDirectoryType());
      assertEquals(104, tiffField0.getSortHint());
      assertEquals(104, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[173];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FieldTypeDouble fieldTypeDouble0 = FieldType.DOUBLE;
      TiffField tiffField0 = new TiffField(488, 488, fieldTypeDouble0, 488, 488, byteArray0, byteOrder0, 488);
      tiffField0.dump();
      assertEquals(488L, tiffField0.getCount());
      assertEquals(488, tiffField0.getTag());
      assertEquals(488, tiffField0.getSortHint());
      assertEquals(3904, tiffField0.getBytesLength());
      assertEquals(488, tiffField0.getOffset());
      assertEquals(488, tiffField0.getDirectoryType());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[241];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeLong fieldTypeLong0 = FieldType.SLONG;
      TiffField tiffField0 = new TiffField(808, 808, fieldTypeLong0, 808, 808, byteArray0, byteOrder0, 0);
      String string0 = tiffField0.getValueDescription();
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(3232, tiffField0.getBytesLength());
      assertEquals(808, tiffField0.getTag());
      assertNotNull(string0);
      assertEquals(808, tiffField0.getOffset());
      assertEquals(808, tiffField0.getDirectoryType());
      assertEquals(808L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[118];
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(6479, 6479, fieldTypeShort0, 6479, 6479, byteArray0, byteOrder0, 6479);
      tiffField0.dump();
      assertEquals(6479, tiffField0.getOffset());
      assertEquals(6479, tiffField0.getTag());
      assertEquals(6479, tiffField0.getSortHint());
      assertEquals(6479, tiffField0.getDirectoryType());
      assertEquals(12958, tiffField0.getBytesLength());
      assertEquals(6479L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[257];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeAscii fieldTypeAscii0 = FieldType.ASCII;
      TiffField tiffField0 = new TiffField(65535, 65535, fieldTypeAscii0, 65535, (-56480L), byteArray0, byteOrder0, 65535);
      tiffField0.toString();
      assertEquals((-56480), tiffField0.getOffset());
      assertEquals(65535L, tiffField0.getCount());
      assertEquals(65535, tiffField0.getBytesLength());
      assertEquals(65535, tiffField0.getDirectoryType());
      assertEquals(65535, tiffField0.getSortHint());
      assertEquals(65535, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      byte[] byteArray0 = new byte[11];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(34719, 34719, fieldTypeShort0, 34719, 34719, byteArray0, byteOrder0, 34719);
      tiffField0.dump();
      assertEquals(34719, tiffField0.getOffset());
      assertEquals(34719L, tiffField0.getCount());
      assertEquals(34719, tiffField0.getSortHint());
      assertEquals(34719, tiffField0.getDirectoryType());
      assertEquals(34719, tiffField0.getTag());
      assertEquals(69438, tiffField0.getBytesLength());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FieldTypeShort fieldTypeShort0 = FieldType.SSHORT;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[0];
      TiffField tiffField0 = new TiffField(327, 327, fieldTypeShort0.ASCII, 379L, 379L, byteArray0, byteOrder0, 327);
      tiffField0.dump();
      assertEquals(327, tiffField0.getDirectoryType());
      assertEquals(327, tiffField0.getSortHint());
      assertEquals(379L, tiffField0.getCount());
      assertEquals(327, tiffField0.getTag());
      assertEquals(379, tiffField0.getBytesLength());
      assertEquals(379, tiffField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[203];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FieldTypeFloat fieldTypeFloat0 = FieldType.FLOAT;
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeFloat0, 1, 1, byteArray0, byteOrder0, 1);
      tiffField0.dump();
      assertEquals(1, tiffField0.getOffset());
      assertEquals(1, tiffField0.getTag());
      assertEquals(1, tiffField0.getDirectoryType());
      assertEquals(1, tiffField0.getSortHint());
      assertEquals(4, tiffField0.getBytesLength());
      assertEquals(1L, tiffField0.getCount());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(0, 0, fieldTypeRational0, 0, 0, byteArray0, byteOrder0, 0);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(0, tiffField0.getSortHint());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(0, tiffField0.getTag());
      assertNull(tiffElement0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FieldTypeByte fieldTypeByte0 = FieldType.UNDEFINED;
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(1, 0, fieldTypeByte0, 0L, 4L, byteArray0, byteOrder0, (byte)63);
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement((-4394), (-679));
      String string0 = tiffField_OversizeValueElement0.getElementDescription(true);
      assertNull(string0);
      assertEquals(0, tiffField0.getBytesLength());
      assertEquals(0, tiffField0.getDirectoryType());
      assertEquals(4, tiffField0.getOffset());
      assertEquals(63, tiffField0.getSortHint());
      assertEquals(1, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffField tiffField0 = new TiffField((-1399), 1520, fieldTypeRational0, 1520, 1520, byteArray0, byteOrder0, (-1399));
      TiffField.OversizeValueElement tiffField_OversizeValueElement0 = tiffField0.new OversizeValueElement(16, 1520);
      String string0 = tiffField_OversizeValueElement0.getElementDescription();
      assertEquals(1520, tiffField0.getOffset());
      assertEquals((-1399), tiffField0.getTag());
      assertEquals((-1399), tiffField0.getSortHint());
      assertEquals(1520, tiffField0.getDirectoryType());
      assertEquals("OversizeValueElement, tag: Unknown Tag, fieldType: SRational", string0);
      assertEquals(12160, tiffField0.getBytesLength());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField((-1227), 453, (FieldType) null, (-1227), 34719, byteArray0, byteOrder0, 453);
      // Undeclared exception!
      try { 
        tiffField0.getFieldTypeName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      FieldTypeLong fieldTypeLong0 = FieldType.IFD;
      TiffField tiffField0 = new TiffField(3, 3, fieldTypeLong0, (-481L), 277L, byteArray0, byteOrder0, 3);
      int int0 = tiffField0.getSortHint();
      assertEquals(277, tiffField0.getOffset());
      assertEquals(3, int0);
      assertEquals(3, tiffField0.getDirectoryType());
      assertEquals((-1924), tiffField0.getBytesLength());
      assertEquals(3, tiffField0.getTag());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffField tiffField0 = new TiffField(606, 606, fieldTypeRational0, 606, 606, (byte[]) null, byteOrder0, 606);
      // Undeclared exception!
      try { 
        tiffField0.dump();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.RATIONAL;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[7];
      TiffField tiffField0 = new TiffField(1, 1, fieldTypeRational0, 1, 1, byteArray0, byteOrder0, 1);
      // Undeclared exception!
      try { 
        tiffField0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.imaging.common.ByteConversions", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FieldTypeRational fieldTypeRational0 = FieldType.SRATIONAL;
      byte[] byteArray0 = new byte[7];
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffField tiffField0 = new TiffField(13, 13, fieldTypeRational0, 13, 13, byteArray0, byteOrder0, 13);
      TiffElement tiffElement0 = tiffField0.getOversizeValueElement();
      assertEquals(13, tiffField0.getSortHint());
      assertEquals(13, tiffField0.getDirectoryType());
      assertEquals(13, tiffField0.getTag());
      assertEquals(13L, tiffElement0.offset);
      assertNotNull(tiffElement0);
  }
}
