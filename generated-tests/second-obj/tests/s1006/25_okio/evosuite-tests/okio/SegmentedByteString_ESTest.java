/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 20:14:46 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.HashingSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        segmentedByteString0.indexOf(byteArray0, 797);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeInt((-900));
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = ByteString.EMPTY;
      byteString1.rangeEquals((-900), byteString0, (-2231), (-900));
      byteString0.rangeEquals(1163, byteString1, (-900), (-2231));
      // Undeclared exception!
      try { 
        byteString0.substring(2562, 1163);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(4)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.sha1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeInt((-900));
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = ByteString.EMPTY;
      byteString1.rangeEquals((-900), byteString0, (-2231), (-900));
      byteString0.rangeEquals((-2231), byteString1, (-900), (-2231));
      // Undeclared exception!
      try { 
        byteString0.substring((-900), (-2231));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        segmentedByteString0.string(charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeInt((-416));
      ByteString byteString0 = buffer0.snapshot();
      buffer0.readIntLe();
      ByteString byteString1 = ByteString.EMPTY;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        byteString0.hmacSha1(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Pipe pipe0 = new Pipe(840L);
      Buffer buffer0 = pipe0.buffer;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.utf8();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeInt((-416));
      ByteString byteString0 = buffer0.snapshot();
      buffer1.outputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = byteString0.rangeEquals((-416), byteString0, (-416), (-3));
      assertEquals(4, byteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[2];
      Charset.defaultCharset();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, (byte)0);
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf(byteArray0, (-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      HashingSource.sha1(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.write(buffer0);
      // Undeclared exception!
      try { 
        segmentedByteString0.internalArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[7];
      Charset.defaultCharset();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, (byte)0);
      segmentedByteString0.hashCode();
      segmentedByteString0.hashCode();
      // Undeclared exception!
      try { 
        segmentedByteString0.hex();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-900));
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = ByteString.EMPTY;
      boolean boolean0 = byteString0.equals(byteString1);
      byte[] byteArray0 = buffer0.readByteArray((long) 1);
      boolean boolean1 = byteString0.rangeEquals((int) (byte) (-1), byteArray0, 2, 4);
      assertEquals(4, byteString0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.close();
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = realBufferedSource0.closed;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, (byte)0);
      byte byte0 = ObjectStreamConstants.TC_CLASSDESC;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-853));
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = ByteString.EMPTY;
      ByteString byteString2 = ByteString.EMPTY;
      String string0 = byteString0.base64();
      assertEquals("///8qw==", string0);
      assertEquals(4, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeInt((-900));
      ByteString byteString0 = buffer0.snapshot();
      Buffer buffer2 = buffer0.writeUtf8CodePoint(0);
      OutputStream outputStream0 = buffer2.outputStream();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      byteString0.write(outputStream0);
      assertEquals(9L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeInt((-892));
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      Buffer buffer1 = new Buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      segmentedByteString0.write(buffer1);
      segmentedByteString0.getByte(1);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring((-1201));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeInt((-900));
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = ByteString.EMPTY;
      buffer1.outputStream();
      byteString1.rangeEquals((-900), byteString0, (-3), (-900));
      byteString0.rangeEquals(1163, byteString1, (-900), (-3));
      // Undeclared exception!
      try { 
        byteString0.substring(2531, 1163);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(4)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt((-853));
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.EMPTY;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      segmentedByteString0.rangeEquals(1645, (byte[]) null, 1645, (-1164));
      segmentedByteString0.md5();
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-900));
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = ByteString.EMPTY;
      boolean boolean0 = byteString1.rangeEquals(1, byteString0, 1, 1);
      boolean boolean1 = byteString0.rangeEquals((-900), byteString1, (-2044), (-900));
      assertTrue(boolean1 == boolean0);
      
      byteString0.substring(1, 1);
      assertEquals(4, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660480L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeUtf8CodePoint(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      byteString0.rangeEquals((-1), (ByteString) segmentedByteString0, 1, (-27));
      // Undeclared exception!
      try { 
        segmentedByteString0.sha512();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = (-900);
      Buffer buffer1 = buffer0.writeInt((-900));
      ByteString byteString0 = buffer0.snapshot();
      buffer1.outputStream();
      byteString0.rangeEquals(0, byteString0, (-2853), 1);
      // Undeclared exception!
      try { 
        byteString0.getByte((-2853));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=-2853 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-853));
      SegmentedByteString segmentedByteString0 = (SegmentedByteString)buffer0.snapshot();
      ByteString byteString0 = ByteString.EMPTY;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = segmentedByteString0.internalArray();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      boolean boolean0 = segmentedByteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      segmentedByteString0.hashCode();
      assertEquals(4, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095216660480L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeUtf8CodePoint(2722);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 1);
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(buffer0, 1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = segmentedByteString0.compareTo(byteString0);
      assertEquals(0, int1);
      assertEquals(1, segmentedByteString0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeInt((-900));
      ByteString byteString0 = buffer0.snapshot();
      buffer0.writeUtf8CodePoint((-900));
      byteString0.rangeEquals(0, byteString0, 0, 2);
      // Undeclared exception!
      try { 
        byteString0.sha512();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt((-900));
      byte[] byteArray0 = new byte[0];
      buffer1.read(byteArray0);
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.EMPTY;
      byte[] byteArray1 = buffer0.readByteArray((long) 1);
      buffer1.read(byteArray1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      segmentedByteString0.write(realBufferedSink0.buffer);
      ByteString byteString2 = ((RealBufferedSink) bufferedSink0).buffer.snapshot();
      assertEquals(3, byteString2.size());
      
      boolean boolean0 = segmentedByteString0.startsWith(byteArray1);
      assertFalse(boolean0);
      
      ByteString byteString3 = new ByteString(byteArray1);
      segmentedByteString0.equals(bufferedSink0);
      ByteString byteString4 = segmentedByteString0.toAsciiLowercase();
      assertEquals(1, byteString4.size());
      assertFalse(byteString4.equals((Object)byteString3));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt((-900));
      ByteString byteString0 = buffer0.snapshot();
      ByteString byteString1 = ByteString.EMPTY;
      ByteString byteString2 = byteString0.toAsciiUppercase();
      byteString0.equals(byteString2);
      // Undeclared exception!
      try { 
        buffer0.readByteArray((long) (-900));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=0 byteCount=-900
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeInt((-900));
      ByteString byteString0 = buffer0.snapshot();
      buffer0.outputStream();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-60);
      ByteString byteString1 = ByteString.of(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.getByte(2);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.equals(byteString1);
      byteString0.hex();
      // Undeclared exception!
      try { 
        byteString0.sha512();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt((-900));
      ByteString byteString0 = ByteString.EMPTY;
      ByteString byteString1 = ByteString.EMPTY;
      byte[] byteArray0 = buffer0.readByteArray((long) 1);
      buffer1.read(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort(1);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      segmentedByteString0.write(realBufferedSink0.buffer);
      ByteString byteString2 = ((RealBufferedSink) bufferedSink0).buffer.snapshot();
      ByteString byteString3 = byteString2.toAsciiLowercase();
      segmentedByteString0.size();
      ByteString.decodeBase64("");
      byteString2.asByteBuffer();
      Object object0 = new Object();
      int int0 = byteString2.compareTo(byteString3);
      assertEquals(0, int0);
      
      segmentedByteString0.sha256();
      byteString2.substring(1);
      assertEquals(3, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt((-853));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = buffer0.readByteArray((long) 1);
      buffer1.read(byteArray0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort(76);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      segmentedByteString0.write(realBufferedSink0.buffer);
      buffer1.outputStream();
      segmentedByteString0.md5();
      Buffer buffer2 = new Buffer();
      ByteString byteString0 = ((RealBufferedSink) bufferedSink0).buffer.snapshot();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.endsWith(byteArray0);
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer2, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=76
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(4476);
      ByteString byteString0 = ByteString.EMPTY;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = buffer0.readByteArray((long) 1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort(73);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      segmentedByteString0.write(realBufferedSink0.buffer);
      ByteString.of(byteArray0);
      ByteString byteString1 = ((RealBufferedSink) bufferedSink0).buffer.snapshot();
      byteString1.hmacSha512(segmentedByteString0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byteString1.endsWith((ByteString) segmentedByteString0);
      segmentedByteString0.asByteBuffer();
      realBufferedSink0.emit();
      // Undeclared exception!
      try { 
        buffer1.writeUtf8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }
}
