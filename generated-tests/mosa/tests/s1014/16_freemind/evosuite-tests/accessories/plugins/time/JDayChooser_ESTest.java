/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:52:53 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.sql.Timestamp;
import java.util.Date;
import java.util.Locale;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(2841);
      jDayChooser0.keyReleased((KeyEvent) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.setYear(3195);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertNotNull(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(164, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertNotNull(color0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(228, color0.getGreen());
      assertEquals(238, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals((-2956050), color0.getRGB());
      assertEquals(210, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2373), (-2373), (-2373), (-2373), '$');
      assertNotNull(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals((-2432), keyEvent0.getModifiersEx());
      assertEquals('$', keyEvent0.getKeyChar());
      assertEquals((-2373L), keyEvent0.getWhen());
      assertTrue(keyEvent0.isControlDown());
      assertEquals((-2373), keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltDown());
      assertEquals((-2373), keyEvent0.getID());
      assertEquals((-2147483589), keyEvent0.getModifiers());
      assertTrue(keyEvent0.isAltGraphDown());
      
      jDayChooser0.keyTyped(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals((-2432), keyEvent0.getModifiersEx());
      assertEquals('$', keyEvent0.getKeyChar());
      assertEquals((-2373L), keyEvent0.getWhen());
      assertTrue(keyEvent0.isControlDown());
      assertEquals((-2373), keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltDown());
      assertEquals((-2373), keyEvent0.getID());
      assertEquals((-2147483589), keyEvent0.getModifiers());
      assertTrue(keyEvent0.isAltGraphDown());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setMaxDayCharacters(9999);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      assertNull(jYearChooser0);
      
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      Color color0 = Color.LIGHT_GRAY;
      assertNotNull(color0);
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getBlue());
      
      jDayChooser0.setWeekdayForeground(color0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getRed());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertNotNull(jPanel0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertNotNull(jDayChooser_DecoratorButton0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      
      boolean boolean0 = jDayChooser_DecoratorButton0.isFocusable();
      assertFalse(boolean0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.setMaxDayCharacters((-78));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertNotNull(color0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(90, color0.getGreen());
      assertEquals((-16754012), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(164, color0.getBlue());
      
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(90, color0.getGreen());
      assertEquals((-16754012), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(164, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      assertNotNull(unmarshallingContext0);
      assertNull(unmarshallingContext0.getDocumentName());
      assertEquals(0, unmarshallingContext0.getStackDepth());
      assertEquals(4, UnmarshallingContext.TEXT);
      assertEquals(2, UnmarshallingContext.START_TAG);
      assertEquals(5, UnmarshallingContext.CDSECT);
      assertEquals(6, UnmarshallingContext.ENTITY_REF);
      assertEquals(8, UnmarshallingContext.PROCESSING_INSTRUCTION);
      assertEquals(10, UnmarshallingContext.DOCDECL);
      assertEquals(1, UnmarshallingContext.END_DOCUMENT);
      assertEquals(7, UnmarshallingContext.IGNORABLE_WHITESPACE);
      assertEquals(0, UnmarshallingContext.START_DOCUMENT);
      assertEquals(9, UnmarshallingContext.COMMENT);
      assertEquals(3, UnmarshallingContext.END_TAG);
      
      jDayChooser0.setMaxDayCharacters(1);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      Locale locale0 = jDayChooser0.getLocale();
      assertNotNull(locale0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9");
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      assertNotNull(date0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertNull(jButton0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      assertNotNull(jMonthChooser0);
      assertTrue(jMonthChooser0.hasSpinner());
      assertEquals(1, jMonthChooser0.getMonth());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser0.hasSpinner());
      assertEquals(1, jMonthChooser0.getMonth());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      Date date0 = jDayChooser0.getMaxSelectableDate();
      assertNotNull(date0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.setDay((-1084));
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      Date date0 = jDayChooser0.minSelectableDate;
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertNotNull(date1);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertSame(date0, date1);
      assertSame(date1, date0);
      
      jDayChooser0.setSelectableDateRange(date1, date1);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertSame(date0, date1);
      assertSame(date1, date0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      assertNotNull(date0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 40);
      assertNotNull(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(40, focusEvent0.getID());
      
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(40, focusEvent0.getID());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertNotNull(jDayChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      Color color0 = jDayChooser0.getBackground();
      assertNotNull(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals((-16776961), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setMaxDayCharacters(1313);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDay(5216);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setMonth((-78));
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      assertNotNull(date1);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertSame(date0, date1);
      assertSame(date1, date0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      jDayChooser0.focusGained((FocusEvent) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 14, 14, 14, 14, '+');
      assertNotNull(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(14, keyEvent0.getID());
      assertEquals(14, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals('+', keyEvent0.getKeyChar());
      assertEquals(14, keyEvent0.getModifiers());
      assertEquals(14L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(896, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isActionKey());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(14, keyEvent0.getID());
      assertEquals(14, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals('+', keyEvent0.getKeyChar());
      assertEquals(14, keyEvent0.getModifiers());
      assertEquals(14L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(896, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isActionKey());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      assertNotNull(unmarshallingContext0);
      assertEquals(0, unmarshallingContext0.getStackDepth());
      assertNull(unmarshallingContext0.getDocumentName());
      assertEquals(2, UnmarshallingContext.START_TAG);
      assertEquals(10, UnmarshallingContext.DOCDECL);
      assertEquals(8, UnmarshallingContext.PROCESSING_INSTRUCTION);
      assertEquals(3, UnmarshallingContext.END_TAG);
      assertEquals(0, UnmarshallingContext.START_DOCUMENT);
      assertEquals(7, UnmarshallingContext.IGNORABLE_WHITESPACE);
      assertEquals(9, UnmarshallingContext.COMMENT);
      assertEquals(5, UnmarshallingContext.CDSECT);
      assertEquals(1, UnmarshallingContext.END_DOCUMENT);
      assertEquals(4, UnmarshallingContext.TEXT);
      assertEquals(6, UnmarshallingContext.ENTITY_REF);
      
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      assertNotNull(unmarshallingContext0);
      assertNull(unmarshallingContext0.getDocumentName());
      assertEquals(0, unmarshallingContext0.getStackDepth());
      assertEquals(4, UnmarshallingContext.TEXT);
      assertEquals(2, UnmarshallingContext.START_TAG);
      assertEquals(5, UnmarshallingContext.CDSECT);
      assertEquals(6, UnmarshallingContext.ENTITY_REF);
      assertEquals(7, UnmarshallingContext.IGNORABLE_WHITESPACE);
      assertEquals(1, UnmarshallingContext.END_DOCUMENT);
      assertEquals(10, UnmarshallingContext.DOCDECL);
      assertEquals(9, UnmarshallingContext.COMMENT);
      assertEquals(3, UnmarshallingContext.END_TAG);
      assertEquals(8, UnmarshallingContext.PROCESSING_INSTRUCTION);
      assertEquals(0, UnmarshallingContext.START_DOCUMENT);
      
      jDayChooser0.setMaxDayCharacters(4);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setDay(4);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(4, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      Date date0 = jDayChooser0.getMinSelectableDate();
      assertNotNull(date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      SystemColor systemColor0 = SystemColor.textHighlight;
      assertNotNull(systemColor0);
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777088), systemColor0.getRGB());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(128, systemColor0.getBlue());
      
      jDayChooser0.setSundayForeground(systemColor0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777088), systemColor0.getRGB());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(128, systemColor0.getBlue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      assertNotNull(pDFDocumentGraphics2D0);
      assertEquals("", pDFDocumentGraphics2D0.getString());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertNotNull(jDayChooser_DecoratorButton0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      Timestamp timestamp0 = new Timestamp((-86L));
      assertNotNull(timestamp0);
      assertEquals("1969-12-31 23:59:59.914", timestamp0.toString());
      assertEquals(914000000, timestamp0.getNanos());
      
      jDayChooser0.setSelectableDateRange((Date) null, timestamp0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("1969-12-31 23:59:59.914", timestamp0.toString());
      assertEquals(914000000, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      assertNotNull(unmarshallingContext0);
      assertEquals(0, unmarshallingContext0.getStackDepth());
      assertNull(unmarshallingContext0.getDocumentName());
      assertEquals(5, UnmarshallingContext.CDSECT);
      assertEquals(2, UnmarshallingContext.START_TAG);
      assertEquals(10, UnmarshallingContext.DOCDECL);
      assertEquals(8, UnmarshallingContext.PROCESSING_INSTRUCTION);
      assertEquals(0, UnmarshallingContext.START_DOCUMENT);
      assertEquals(3, UnmarshallingContext.END_TAG);
      assertEquals(7, UnmarshallingContext.IGNORABLE_WHITESPACE);
      assertEquals(9, UnmarshallingContext.COMMENT);
      assertEquals(1, UnmarshallingContext.END_DOCUMENT);
      assertEquals(4, UnmarshallingContext.TEXT);
      assertEquals(6, UnmarshallingContext.ENTITY_REF);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, 9, 7, 36, 'p', 1);
      assertNotNull(keyEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(4, keyEvent0.getID());
      assertEquals(36, keyEvent0.getKeyCode());
      assertEquals(448, keyEvent0.getModifiersEx());
      assertEquals('p', keyEvent0.getKeyChar());
      assertEquals(9L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(1, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(7, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(4, keyEvent0.getID());
      assertEquals(36, keyEvent0.getKeyCode());
      assertEquals(448, keyEvent0.getModifiersEx());
      assertEquals('p', keyEvent0.getKeyChar());
      assertEquals(9L, keyEvent0.getWhen());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(1, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(7, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, 35, 35, 35, '}');
      assertNotNull(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(35, keyEvent0.getID());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(35, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(8384, keyEvent0.getModifiersEx());
      assertEquals(35L, keyEvent0.getWhen());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('}', keyEvent0.getKeyChar());
      assertEquals(35, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(28, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(35, keyEvent0.getID());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(35, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(8384, keyEvent0.getModifiersEx());
      assertEquals(35L, keyEvent0.getWhen());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('}', keyEvent0.getKeyChar());
      assertEquals(35, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 34, 34, 34, '&');
      assertNotNull(keyEvent0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(34, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(34, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals('&', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(34L, keyEvent0.getWhen());
      assertEquals(34, keyEvent0.getID());
      assertEquals(8320, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isMetaDown());
      
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 37, 37, 37, 37, 'g');
      assertNotNull(keyEvent0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(37, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltDown());
      assertEquals('g', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(37, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(8512, keyEvent0.getModifiersEx());
      assertEquals(37, keyEvent0.getID());
      assertEquals(37L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(13, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(37, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltDown());
      assertEquals('g', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(37, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(8512, keyEvent0.getModifiersEx());
      assertEquals(37, keyEvent0.getID());
      assertEquals(37L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, 40, 40, 40, 'A');
      assertNotNull(keyEvent0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(40L, keyEvent0.getWhen());
      assertEquals(40, keyEvent0.getID());
      assertEquals(8704, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(40, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals('A', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(40, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(40L, keyEvent0.getWhen());
      assertEquals(40, keyEvent0.getID());
      assertEquals(8704, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(40, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals('A', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(40, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 10043, 1L, 24, 33, '&');
      assertNotNull(keyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(24, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(33, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(keyEvent0.isAltDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(10043, keyEvent0.getID());
      assertEquals('&', keyEvent0.getKeyChar());
      assertEquals(1536, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(1L, keyEvent0.getWhen());
      
      String string0 = InputEvent.getModifiersExText(10043);
      assertNotNull(string0);
      assertEquals("Meta+Alt+Alt Graph+Button1", string0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertNotNull(jDayChooser0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      assertNotNull(menuSelectionManager0);
      
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1, 1, 1, 39, '!', menuElementArray0, menuSelectionManager0);
      assertNotNull(menuKeyEvent0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(menuKeyEvent0.isShiftDown());
      assertFalse(menuKeyEvent0.isAltGraphDown());
      assertFalse(menuKeyEvent0.isAltDown());
      assertEquals(1, menuKeyEvent0.getID());
      assertTrue(menuKeyEvent0.isActionKey());
      assertFalse(menuKeyEvent0.isControlDown());
      assertFalse(menuKeyEvent0.isMetaDown());
      assertEquals('!', menuKeyEvent0.getKeyChar());
      assertEquals(1L, menuKeyEvent0.getWhen());
      assertEquals(64, menuKeyEvent0.getModifiersEx());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals(39, menuKeyEvent0.getKeyCode());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertEquals(1, menuKeyEvent0.getModifiers());
      
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(15, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(menuKeyEvent0.isShiftDown());
      assertFalse(menuKeyEvent0.isAltGraphDown());
      assertFalse(menuKeyEvent0.isAltDown());
      assertEquals(1, menuKeyEvent0.getID());
      assertTrue(menuKeyEvent0.isActionKey());
      assertFalse(menuKeyEvent0.isControlDown());
      assertFalse(menuKeyEvent0.isMetaDown());
      assertEquals('!', menuKeyEvent0.getKeyChar());
      assertEquals(1L, menuKeyEvent0.getWhen());
      assertEquals(64, menuKeyEvent0.getModifiersEx());
      assertFalse(menuKeyEvent0.isConsumed());
      assertEquals(39, menuKeyEvent0.getKeyCode());
      assertEquals(0, menuKeyEvent0.getKeyLocation());
      assertEquals(1, menuKeyEvent0.getModifiers());
  }
}
