/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 21:45:45 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.time.Instant;
import java.util.Date;
import java.util.Locale;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicTableUI;
import org.apache.batik.util.SVGConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDayBordersVisible();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2168), (-1L), (-1647), (-2168), 'G');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.keyReleased(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setAlignmentX((-90.0F));
      // Undeclared exception!
      try { 
        java.sql.Date.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlignmentY(12.0F);
      jDayChooser0.setWeekOfYearVisible(true);
      Color color0 = Color.red;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.initDecorations();
      jDayChooser0.getRegisteredKeyStrokes();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isDoubleBuffered();
      jDayChooser_DecoratorButton0.getMultiClickThreshhold();
      jDayChooser_DecoratorButton0.isBorderPainted();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("", vetoableChangeListener0);
      jDayChooser_DecoratorButton0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser_DecoratorButton0.isRequestFocusEnabled();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      Color color0 = Color.BLACK;
      color0.getColorSpace();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.focusLost((FocusEvent) null);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setMonth(0);
      color0.getComponents((float[]) null);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.drawWeeks();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getDayPanel();
      jDayChooser0.getDay();
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.updateUI();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      jDayChooser0.locale = locale0;
      jDayChooser0.setVisible(false);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.isDecorationBackgroundVisible();
      locale0.getUnicodeLocaleKeys();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 16384, true, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, (-953L), 34, 34, '!');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 34, 34, '!', '!', 'f');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2515), (-2515), 63195, (-2515), 'R');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawWeeks();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      Window.Type window_Type0 = Window.Type.NORMAL;
      ActionEvent actionEvent0 = new ActionEvent(window_Type0, (-2515), "jkGQ", 0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.Window$Type cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertSame(date1, date0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2515), (-2515), 63195, (-2515), 'R');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.controlText;
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSundayForeground();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.isWeekOfYearVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = jDayChooser_DecoratorButton0.getLocale();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMaxDayCharacters(43);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Instant instant0 = MockInstant.ofEpochMilli(300000L);
      Date date0 = Date.from(instant0);
      jDayChooser0.setSelectableDateRange(date0, date0);
      SystemColor systemColor0 = SystemColor.menu;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 300000L;
      floatArray0[1] = 1649.6903F;
      floatArray0[2] = (float) 300000L;
      floatArray0[3] = (float) 300000L;
      floatArray0[4] = 914.463F;
      floatArray0[5] = (float) 300000L;
      systemColor0.getComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setSundayForeground(systemColor0);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSundayForeground();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser1.setMonthChooser((JMonthChooser) null);
      Date date0 = jDayChooser1.getMinSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-2515));
      jDayChooser0.firePropertyChange(")hpeN:%HM3&#<0,C", (long) (-2515), (long) (-2515));
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jMonthChooser0.isPaintingForPrint();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVetoableChangeListeners();
      jDayChooser0.setAlignmentY(12.0F);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getInputVerifier();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 600000L, 36, 3334, 't');
      keyEvent0.setKeyChar('t');
      jDayChooser0.keyPressed(keyEvent0);
      Boolean boolean0 = new Boolean("day");
      jDayChooser0.focusGained((FocusEvent) null);
      SystemColor systemColor0 = SystemColor.infoText;
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVetoableChangeListeners();
      jDayChooser0.setAlignmentY(12.0F);
      jDayChooser0.setWeekOfYearVisible(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      Boolean boolean0 = new Boolean("day");
      SystemColor systemColor0 = SystemColor.menuText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlignmentY(63195);
      jDayChooser0.setWeekOfYearVisible(true);
      Boolean boolean0 = new Boolean("day");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 25, 25, 25, 25, 'v', menuElementArray0, menuSelectionManager0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus(true);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.text;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setMaxDayCharacters(1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, '%', 1510L, 5, '%', '%');
      keyEvent0.setSource(jDayChooser0);
      jDayChooser0.keyPressed(keyEvent0);
      Boolean.valueOf("day");
      jDayChooser0.initDecorations();
      jDayChooser0.setYear(5);
      assertEquals(13, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 321, 321, 300, 35, '-');
      KeyEvent.getKeyText((-2323));
      jDayChooser0.keyPressed(keyEvent0);
      Boolean boolean0 = new Boolean("day");
      jDayChooser0.setMonth(35);
      assertEquals(31, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 36, 36, 238, 36, '~');
      BasicTableUI basicTableUI0 = new BasicTableUI();
      Component.BaselineResizeBehavior component_BaselineResizeBehavior0 = basicTableUI0.getBaselineResizeBehavior(jDayChooser0);
      keyEvent0.setSource(component_BaselineResizeBehavior0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(1, jDayChooser1.getDay());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 43, 43, 43, 38, '0');
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(7, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getLocale();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 321, 321, 34, 34, 'E');
      jDayChooser0.getPropertyChangeListeners();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 321, 321, 321, 33, '+');
      InputEvent.getModifiersExText(65555);
      String string0 = SVGConstants.SVG_LINEAR_VALUE;
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, 26438400000L, 35, 40, 'f');
      String string0 = SVGConstants.SVG_LINEAR_VALUE;
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 38, 38, 39, '0');
      jDayChooser0.getPropertyChangeListeners((String) null);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(15, jDayChooser0.getDay());
  }
}
