/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 12:45:12 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.operation.VectorOperation;
import org.la4j.operation.VectorVectorOperation;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3216.3278726827)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((byte)23, vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      BiFunction<Integer, Object, Byte> biFunction0 = (BiFunction<Integer, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Integer integer0 = new Integer(16);
      Byte byte0 = new Byte((byte)19);
      Byte.toUnsignedLong((byte)104);
      Byte.compare((byte)19, (byte)19);
      Byte byte1 = new Byte((byte)19);
      byte byte2 = (byte)0;
      Byte.toUnsignedLong((byte)0);
      hashMap0.replace(integer0, byte0, byte1);
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1469);
      MockRandom mockRandom0 = new MockRandom(0L);
      Vector.random(16, mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1469, vectorFunction0);
      MockRandom mockRandom1 = new MockRandom();
      CompressedVector.random(0, (double) 0L, (Random) mockRandom1);
      // Undeclared exception!
      try { 
        compressedVector0.each((VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)23;
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Vector.fromMap(hashMap0, 19);
      // Undeclared exception!
      try { 
        CompressedVector.fromCollection((Collection<? extends Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("org.la4j.LinearAlgebra$InverterFactory$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toBinary();
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((byte)23, (byte)23);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '23' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      CompressedVector compressedVector0 = new CompressedVector(5);
      compressedVector0.swapElements(806, 34);
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CompressedVector compressedVector1 = CompressedVector.random(0, 0.0, (Random) mockRandom0);
      VectorOperation<Byte> vectorOperation0 = (VectorOperation<Byte>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(vectorOperation0).apply(any(org.la4j.vector.SparseVector.class));
      compressedVector1.apply(vectorOperation0);
      mockRandom0.nextInt();
      mockRandom0.nextBoolean();
      Vector.unit(0);
      compressedVector0.infinityNorm();
      int int0 = 989;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(989, vectorFunction0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(989, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      long long0 = 3707L;
      MockRandom mockRandom0 = new MockRandom(3707L);
      // Undeclared exception!
      try { 
        CompressedVector.random(0, (-42.98), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toCSV();
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((-791), 1.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-791' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 16;
      intArray0[2] = 0;
      intArray0[3] = 16;
      intArray0[4] = 16;
      intArray0[5] = 16;
      intArray0[6] = 16;
      intArray0[7] = 0;
      CompressedVector compressedVector0 = new CompressedVector(16, 0, (double[]) null, intArray0);
      compressedVector0.iterator();
      compressedVector0.iterator();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(16, vectorFunction0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte) (-81));
      Byte.toUnsignedInt((byte) (-81));
      linkedList0.add(0, byte0);
      CompressedVector compressedVector1 = CompressedVector.fromCollection(linkedList0);
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.copy();
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      
      CompressedVector compressedVector3 = CompressedVector.zero(16, 0);
      compressedVector0.nonZeroAt(16);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector3.updateAt((-72), vectorFunction1);
      byte[] byteArray0 = compressedVector0.toBinary();
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)16, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(compressedVector0.equals((Object)compressedVector3));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(2146260010);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(2146260010, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1922.3937611066988;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.isZeroAt(2);
      // Undeclared exception!
      try { 
        compressedVector0.set((-3137), (-3137));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-3137' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1491.25);
      doubleArray0[1] = 1097.800140601;
      doubleArray0[2] = 496.1504;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1133.53957106);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 662.9478629846;
      doubleArray0[8] = 1003.2;
      CompressedVector.fromArray(doubleArray0);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Integer integer0 = new Integer(3641);
      BiFunction<Integer, Object, Byte> biFunction0 = (BiFunction<Integer, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(integer0, biFunction0);
      int int0 = (-1865);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-1865));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1865
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      double double0 = compressedVector0.getOrElse(0, (-664));
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.toRowMatrix();
      // Undeclared exception!
      try { 
        compressedVector0.set(1000, (-67.1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '1000' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-401));
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 124);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 16;
      CompressedVector compressedVector0 = new CompressedVector(16, 10);
      compressedVector0.getOrElse(10, 0.0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.eachNonZero(vectorProcedure0);
      Vector vector0 = compressedVector0.copyOfLength(10);
      compressedVector0.outerProduct(vector0);
      compressedVector0.multiply((double) 0);
      compressedVector0.copyOfLength(0);
      compressedVector0.blankOfLength(27);
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-974));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -974
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(32, 0);
      compressedVector0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.toBinary();
      compressedVector0.blankOfLength(0);
      compressedVector0.getOrElse(0, 0.0);
      compressedVector0.swapElements((-81), (-3483));
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll(Double.NEGATIVE_INFINITY);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      BiFunction<Integer, Object, Byte> biFunction0 = (BiFunction<Integer, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Integer integer0 = new Integer(16);
      Byte byte0 = new Byte((byte)19);
      byte byte1 = (byte)104;
      Byte.toUnsignedLong((byte)104);
      Byte.compare((byte)19, (byte)19);
      Byte byte2 = new Byte((byte)19);
      Byte.compare((byte)0, (byte)37);
      Byte.toUnsignedLong((byte)0);
      hashMap0.replace(integer0, byte0, byte2);
      int int0 = 1469;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1469);
      MockRandom mockRandom0 = new MockRandom(0L);
      Vector.random(16, mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1469, vectorFunction0);
      Integer integer1 = new Integer(5341);
      // Undeclared exception!
      try { 
        hashMap0.computeIfPresent(integer1, (BiFunction<? super Integer, ? super Byte, ? extends Byte>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-441.0518184);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.setAll((-441.0518184));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(954437177);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.max();
      compressedVector0.spliterator();
      compressedVector0.nonZeroIterator();
      compressedVector0.toMatrixMarket();
      Vector vector0 = compressedVector0.blankOfLength(3814);
      assertEquals(3814, vector0.length());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3814, vectorFunction0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>(1746);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1746);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(integer0, integer1, biFunction0);
      CompressedVector compressedVector1 = CompressedVector.fromMap(hashMap0, 3814);
      assertEquals(2.6219192448872575E-4, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      compressedVector0.swapElements(32, 32);
      boolean boolean0 = compressedVector0.nonZeroAt((-886));
      assertFalse(boolean0);
      assertEquals(1, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-11);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-11);
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte) (-11);
      doubleArray0[5] = (-118.0);
      doubleArray0[6] = 662.9478629846;
      doubleArray0[7] = (double) (byte) (-11);
      doubleArray0[8] = (double) (byte) (-11);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroAt((byte) (-11));
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toBinary();
      SparseVector.fromCSV("");
      compressedVector0.setAll(957.87496931);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1754;
      doubleArray0[1] = (double) 1754;
      doubleArray0[0] = (double) 1754;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-889), (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints((long) 1);
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-1003), vectorFunction0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(32, 15);
      compressedVector0.toBinary();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = new CompressedVector(15, 15);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      SparseVector.fromCollection(linkedList0);
      DecimalFormat decimalFormat0 = new DecimalFormat("The density value should be between 0 and 1.0");
      String string0 = compressedVector1.toMatrixMarket((NumberFormat) decimalFormat0);
      assertEquals("%%MatrixMarket vector coordinate real\n15 0\n", string0);
      
      compressedVector0.getOrElse(15, 15);
      CompressedVector compressedVector2 = CompressedVector.fromBinary(byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)32, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, compressedVector2.cardinality());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      byte[] byteArray0 = compressedVector0.toBinary();
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
      assertArrayEquals(new byte[] {(byte)16, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1754;
      doubleArray0[0] = (double) 1754;
      doubleArray0[2] = (double) 1754;
      doubleArray0[3] = (double) 1754;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      compressedVector0.toBinary();
      // Undeclared exception!
      try { 
        compressedVector0.getOrElse((-1610), 1754.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-1610' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 828.63;
      Integer integer0 = new Integer(1764);
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextBoolean();
      Vector.unit(2);
      CompressedVector compressedVector0 = new CompressedVector(2);
      compressedVector0.infinityNorm();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-623.156954877)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2, vectorFunction0);
      compressedVector0.swapElements((-3955), 1764);
      MockRandom mockRandom1 = new MockRandom(0L);
      mockRandom1.nextInt();
      compressedVector0.setAll(0L);
      compressedVector0.nonZeroIterator();
      int int0 = (-3831);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-3831), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -3831
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-662), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (-2397.349528961);
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = 466.0;
      doubleArray0[6] = (-1633.5689831269813);
      doubleArray0[7] = (double) 3;
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      CompressedVector compressedVector0 = new CompressedVector(3, 3, doubleArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1191.791)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.update(vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      compressedVector0.swapElements(1, (-433));
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1754;
      doubleArray0[1] = (double) 1754;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements((-1900), (-2152));
      VectorFactory<CompressedVector> vectorFactory0 = (VectorFactory<CompressedVector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (-2397.349528961);
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = 466.0;
      doubleArray0[6] = (-1633.5689831269813);
      doubleArray0[7] = (double) 3;
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      CompressedVector compressedVector0 = new CompressedVector(3, 3, doubleArray0, intArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      compressedVector0.blankOfLength(3);
      assertEquals(3, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      double[] doubleArray0 = new double[24];
      doubleArray0[0] = (double) 824;
      doubleArray0[12] = (double) 824;
      doubleArray0[2] = (double) 824;
      doubleArray0[3] = 2759.8352235;
      doubleArray0[4] = (double) 824;
      doubleArray0[5] = (double) 824;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      compressedVector0.iterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      // Undeclared exception!
      try { 
        compressedVector0.sliceLeft(824);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '24' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(1730);
      Vector vector0 = compressedVector0.blank();
      Vector vector1 = vector0.hadamardProduct(compressedVector0);
      vector1.add((double) 1730);
      vector1.sliceRight(1730);
      VectorOperation<CompressedVector> vectorOperation0 = (VectorOperation<CompressedVector>) mock(VectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorOperation0).apply(any(org.la4j.vector.SparseVector.class));
      VectorVectorOperation<CompressedVector> vectorVectorOperation0 = (VectorVectorOperation<CompressedVector>) mock(VectorVectorOperation.class, new ViolatedAssumptionAnswer());
      doReturn(vectorOperation0).when(vectorVectorOperation0).partiallyApply(any(org.la4j.vector.SparseVector.class));
      vector0.apply(vectorVectorOperation0, (Vector) compressedVector0);
      compressedVector0.innerProduct(vector0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      compressedVector0.toCSV();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(463, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      compressedVector0.nonZeroIterator();
      assertEquals(1, compressedVector0.cardinality());
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      double double0 = 1097.800140601;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1097.800140601;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1097.800140601;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.toCSV();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1097.800140601, 1.0, Double.NEGATIVE_INFINITY, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -1
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1097.800140601;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 1097.800140601;
      doubleArray1[2] = 1941.0577;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1426, vectorFunction0);
      compressedVector0.swapElements(32, 32);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(0, vectorFunction1);
      // Undeclared exception!
      try { 
        CompressedVector.zero((-3955), 1742);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -3955
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(0, (-662));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, 1.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-662), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      Vector vector0 = compressedVector0.copy();
      compressedVector0.hadamardProduct(vector0);
      compressedVector0.swapElements(1, 1);
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV("-U|c8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(10, 1.0, (Random) mockRandom0);
      Vector vector0 = compressedVector0.copyOfLength(10);
      compressedVector0.subtract(vector0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(10, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector compressedVector0 = CompressedVector.random(1, (double) 1, (Random) mockRandom0);
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-704);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-704);
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector1.swapElements(0, 1);
      assertEquals(0.5, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1097.800140601;
      doubleArray0[3] = (-1.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 662.9478629846;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.swapElements(3, 881);
      compressedVector0.nonZeroIterator();
      assertEquals(0.3333333333333333, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CompressedVector.random(10, 1.0, (Random) mockRandom0);
      CompressedVector compressedVector0 = CompressedVector.random(3853, 1.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-555), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      linkedList0.addFirst(byte0);
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)0;
      compressedVector0.manhattanNorm();
      doubleArray0[1] = 5.59446018;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      linkedList0.add(byte0);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)0;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      compressedVector0.nonZeroAt((byte)0);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector1).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.to(vectorFactory0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompressedVector.fromMap(hashMap0, (byte)0);
      compressedVector2.set((byte)0, Double.POSITIVE_INFINITY);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector2.each(vectorProcedure0);
      assertEquals(0.2857142857142857, compressedVector1.density(), 0.01);
      assertEquals(0.2857142857142857, compressedVector2.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints(0L);
      CompressedVector compressedVector0 = CompressedVector.random(10, 1.0, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      compressedVector0.swapElements((-662), 0);
      assertEquals(9, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints(0L);
      CompressedVector compressedVector0 = CompressedVector.random(10, 1.0, (Random) mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)0L).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(1, vectorFunction0);
      compressedVector0.divide(1180.488806313486);
      compressedVector0.swapElements(7, (-1321));
      // Undeclared exception!
      try { 
        compressedVector0.to((VectorFactory<Vector>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints(0L);
      CompressedVector compressedVector0 = CompressedVector.random(10, 1.0, (Random) mockRandom0);
      Vector vector0 = compressedVector0.divide(0L);
      mockRandom0.nextGaussian();
      compressedVector0.divide(0L);
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(vectorFactory0).apply(anyInt());
      compressedVector0.swapElements(10, 10);
      compressedVector0.to(vectorFactory0);
      // Undeclared exception!
      try { 
        CompressedVector.zero(10, 2571);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2571.
         //
         verifyException("org.la4j.Vector", e);
      }
  }
}
