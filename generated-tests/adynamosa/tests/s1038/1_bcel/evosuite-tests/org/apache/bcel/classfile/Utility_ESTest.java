/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 14:56:27 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInput;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer integer0 = new Integer(3749);
      ConstantString constantString0 = new ConstantString(78);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString1;
      constantArray0[2] = (Constant) constantString1;
      constantArray0[3] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Constant.getComparator();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-85), (int) (byte)115, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aconst_null
         // 1:    aconst_null
         // 2:    dup2_x1
         // 3:    drem
         // 4:    l2i
         // 5:    fconst_0
         // 6:    lload_3
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.convertString("f2i");
      try { 
        Utility.methodSignatureArgumentTypes("o'O{%fL(*~Cl}nty2v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: o'O{%fL(*~Cl}nty2v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        Utility.signatureToString("LmV6(*zGc$6 3<47\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LmV6(*zGc$6 3<47\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "+nvalid Fetod signature: ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+nvalid Fetod signature: ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((byte) (-96));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-91));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)19;
      byteArray0[0] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.getSignature("newarray");
      Utility.signatureToString("Lnewarray;", true);
      byte[] byteArray1 = Utility.decode(":r$hzV", false);
      Utility.compactClassName("a|xOm/8sM\"Gq<#b?6", false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-811), (byte)19);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Lnewarray;");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.getSignature("Lnewarray;");
      Utility.compactClassName("newarray", false);
      byte[] byteArray2 = new byte[0];
      try { 
        MockFile.createTempFile("newarray", " 9y;phW$");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantString constantString0 = new ConstantString((-1790550835));
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.readBoolean();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "(n4";
      Utility.compactClassName("(n4");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.skip((byte)117);
      try { 
        byteSequence0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readBoolean();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)37;
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte)54;
      byteArray1[3] = (byte) (-83);
      byteArray1[4] = (byte)11;
      byteArray1[5] = (byte)11;
      byteArray1[6] = (byte)37;
      byteArray1[7] = (byte)43;
      byteArray1[8] = (byte)90;
      byte[] byteArray2 = null;
      // Undeclared exception!
      try { 
        Utility.equals(byteArray1, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-82);
      byte byte1 = (byte) (-98);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-98);
      byte[] byteArray1 = new byte[11];
      byteArray1[0] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.printArray((Object[]) null);
      try { 
        Utility.methodSignatureArgumentTypes("freturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: freturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "MAhk+#Vyn|(Gs3}&^";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "MAhk+#Vyn|(Gs3}&^");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.readBoolean();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      byteArray0[1] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = "lmullmul";
      try { 
        Utility.typeOfSignature("%$L.!Q>5CU| V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %$L.!Q>5CU| V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.decode("%j", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", (String) null, (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-64);
      Utility.classOrInterface((byte) (-66));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = Utility.replace("I9NJbR", "I9NJbR", "(<\"");
      assertEquals("(<\"", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      short short0 = Utility.searchOpcode("(<\"");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(<\"";
      stringArray0[1] = "(<\"";
      stringArray0[2] = "(<\"";
      stringArray0[3] = "}%tKD5&oD,I=/^sC?";
      stringArray0[4] = "9|5mz7SL87z~`5rUF";
      String string1 = Utility.methodTypeToSignature("(<\"", stringArray0);
      assertEquals("(L(<\";L(<\";L(<\";L}%tKD5&oD,I=/^sC?;L9|5mz7SL87z~`5rUF;)L(<\";", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-114);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-114), (int) (byte) (-57), false);
      assertEquals("0:    ifnonnull\t\t#-9586\n", string2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.replace("\t(wide)", "\t(wide)", "\t(wide)");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.close();
      byteSequence1.readFully(byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-110), (int) (byte) (-110));
      Utility.replace("WA/h}0'$#", "zmp2BEm\"S,l[(n", "if_icmple");
      // Undeclared exception!
      try { 
        Utility.signatureToString("goto", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `goto'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Utility.replace("\t(wide)", "org.apache.bcel.classfile.Utility$1", "org.apache.bcel.classfile.Utility$1");
      assertEquals("\t(wide)", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = Utility.compactClassName("long", false);
      assertEquals("long", string1);
      
      Object object0 = new Object();
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = Utility.decode("\t(wide)", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-152), (-152), false);
      assertEquals("0:    lconst_0\n1:    dload_2\n2:    dneg\n3:    lmul\n4:    isub\n5:    lsub\n6:    dload_3\n", string2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.compactClassName("k#_6#1L}^|Zj][A6{");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)0;
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString(49);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(125, (byte) (-128));
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)50, (-2290), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fload_1");
      String string0 = "iconst_5";
      try { 
        Utility.decode("iconst_5", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t(wide)");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('e');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("N'N&7!m-VK)?x'", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N'N&7!m-VK)?x''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.decode("V", false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object object0 = new Object();
      try { 
        Utility.methodSignatureArgumentTypes("YU{`+", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YU{`+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "bipush\t\t0");
      try { 
        Utility.decode("bipush\t\t0", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("", "9fV;W:L$}Sbp?", true);
      assertEquals("", string0);
      
      byte byte0 = Utility.typeOfSignature("+*[N)w]X*L#wAPj");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantLong constantLong0 = new ConstantLong(0L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qH2D-f`");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.read(byteArray0);
      Constant.getComparator();
      Utility.equals(byteArray0, byteArray0);
      byteSequence0.skipBytes((byte) (-79));
      try { 
        Utility.methodSignatureArgumentTypes("return", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: return
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("lload_3", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lxor");
      Utility.decode("lxor", false);
      try { 
        Utility.methodSignatureReturnType("lxor", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lxor'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("iWau?!Szo /5", "iWau?!Szo /5", true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.decode("iWau?!Szo /5", false);
      Object object0 = new Object();
      Utility.printArray((Object[]) null, true, true);
      try { 
        Utility.typeOfSignature("impdep1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Utility.typeOfSignature("DP");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lneg");
      try { 
        Utility.decode("boolean", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      Object object0 = new Object();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-102);
      byteArray1[1] = (byte) (-102);
      byteArray1[2] = (byte) (-102);
      byteArray1[3] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.setBit((byte) (-102), (byte) (-102));
      Utility.classOrInterface((byte) (-102));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("O>[=Z#v)\u0004<39I0V)}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O>[=Z#v)\u0004<39I0V)}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte) (-90);
      byteArray0[8] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPool0.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool2, true);
      Utility.toHexString(byteArray0);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("be 4b 00 06 ba 70 06 a6 21", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((-2574));
      Utility.setBit(18, (byte) (-85));
      Utility.classOrInterface(2091);
      ConstantPool constantPool0 = null;
      byteSequence0.skip((byte) (-85));
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object7;
      objectArray0[1] = object4;
      objectArray0[2] = object1;
      Utility.printArray(objectArray0, false, false);
      String string0 = Utility.compactClassName("java.lang.Object@45ba523e, java.lang.Object@7dcbe7ab, java.lang.Object@572ac1a5", true);
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface((-2880));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("if_icmple\t\t#6920", string0);
      
      String string1 = Utility.classOrInterface(1391);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      String string0 = Utility.replace("@jQcgaJ?khl_", "@jQcgaJ?khl_", "@jQcgaJ?khl_");
      assertEquals("@jQcgaJ?khl_", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      constantPool1.setConstantPool((Constant[]) null);
      constantPool1.constantToString((Constant) constantLong0);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("if_icmpge\t\t#-726", string1);
      
      String string2 = Utility.classOrInterface((byte) (-3));
      assertEquals("interface", string2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = Utility.compactClassName("[Z*`P6gL5LcM[*!p@{b", false);
      assertEquals("[Z*`P6gL5LcM[*!p@{b", string0);
      
      String string1 = Utility.methodSignatureReturnType("[Z*`P6gL5LcM[*!p@{b");
      assertEquals("boolean[]", string1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(4446);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant.getComparator();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)105, (int) (byte)19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("Qj?C>A#l^@[uUJ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qj?C>A#l^@[uUJ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.replace("SourceFile: ", "SourceFile: ", "SourceFile: ");
      boolean boolean0 = false;
      Utility.fillup("SourceFile: ", 384, false, 'v');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "SourceFile: ";
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = Utility.decode("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvSourceFile: ", false);
      Utility.classOrInterface(88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(384);
      constantArray0[0] = (Constant) constantMethodType0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvSourceFile: ");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[3] = (Constant) constantLong1;
      constantMethodref0.copy();
      constantLong1.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "double");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool1, true);
      try { 
        Utility.methodSignatureReturnType("lshl", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lshl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "ior";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ior");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2795, 2795);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YmTm!6)r 9$@'A][Z[");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("if_icmplt\t\t#-24159", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i2l");
      byteSequence1.mark((-140));
      try { 
        Utility.methodSignatureReturnType("i2l", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i2l'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = new Integer(3220);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)87;
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)68;
      byte byte1 = (byte)18;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)57;
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(1L);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Constant.getComparator();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("iushr", "iushr", "iushr", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iushr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[0] = (byte) (-86);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-86));
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer integer0 = new Integer(3749);
      ConstantString constantString0 = new ConstantString(78);
      ConstantString constantString1 = new ConstantString(constantString0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-93);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.encode(byteArray0, true);
      Utility.classOrInterface(10);
      // Undeclared exception!
      try { 
        Utility.signatureToString("fyzoRHNX<=7l(C|", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fyzoRHNX<=7l(C|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.format((-2988), 0, false, '\\');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.replace("baload", "baload", "baload");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte)7;
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-81));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 174, (-606), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer(3749);
      ConstantString constantString0 = new ConstantString(78);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString1;
      constantArray0[2] = (Constant) constantString1;
      constantArray0[3] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Constant.getComparator();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte)82;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-85), (int) (byte)115, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 23923. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-104);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YmTm!6)r 9$@'A][Z[");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ishl", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.classOrInterface(44);
      assertEquals("class", string2);
      
      String string3 = Utility.codeToString(byteArray0, (ConstantPool) null, (-654), 1529);
      assertEquals("0:    ishl\n1:    dcmpg\n", string3);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.classOrInterface(190);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)5;
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)5, (byte)37);
      Constant constant0 = constantMethodHandle0.copy();
      constantArray0[0] = constant0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-69));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1587), (byte)37);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1262), (int) (byte)27, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 2821. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer integer0 = new Integer(3749);
      Utility.classOrInterface(3749);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-119);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("interface", "F-5,TY^", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-81);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte)62, false);
      Utility.compactClassName("0:    istore_3\n1:    impdep2\n2:    astore\t\t%184\n4:    dreturn\n", false);
      Utility.format((byte) (-72), (byte)62, false, '\'');
      try { 
        Utility.methodSignatureArgumentTypes("0:    istore_3\n1:    impdep2\n2:    astore\t\t%184\n4:    dreturn\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    istore_3
         // 1:    impdep2
         // 2:    astore\t\t%184
         // 4:    dreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.convertString("ryYcj@'t_/guDYTPP");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)59;
      byte byte0 = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1885, (int) (byte)11, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.convertString("ryYcj@'t_/guDYTPP");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)38;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-55), 512, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer(3749);
      Utility.classOrInterface(3749);
      Utility.getSignature("interface");
      Constant[] constantArray0 = new Constant[0];
      ConstantString constantString0 = new ConstantString(2202);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)23;
      Utility.codeToString(byteArray0, constantPool1, (-1722172890), (int) (byte)5, false);
      Utility.setBit(618, 89);
      Utility.searchOpcode("athrow");
      try { 
        Utility.methodSignatureReturnType("athrow");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `athrow'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.skip((byte) (-119));
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(0L);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      byteSequence0.mark(10);
      String string0 = Utility.classOrInterface((byte) (-119));
      assertEquals("interface", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("3e 89 89 89", string1);
      
      ConstantPool constantPool2 = constantPool0.copy();
      String string2 = Utility.codeToString(byteSequence0, constantPool2, false);
      assertEquals("l2f", string2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1427, (-692));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.classOrInterface(35);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 62, (int) (byte)81, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface((-675));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byte byte0 = (byte)75;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)75;
      byteArray1[1] = (byte)50;
      byteArray1[2] = (byte)16;
      byteArray1[3] = (byte)75;
      byteArray1[4] = (byte)50;
      byteArray1[5] = (byte)74;
      byteArray1[6] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)16, 10, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-99);
      byteArray0[0] = (byte) (-99);
      byteArray0[0] = (byte) (-99);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-99));
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.replace("ifgt\t\t#0", "ifgt\t\t#0", "ifgt\t\t#0");
      try { 
        Utility.typeOfSignature("ifgt\t\t#0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifgt\t\t#0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "awZ z~)5bf");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "awZ z~)5bf");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte) (-81);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("af 10 37 6e af", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("dreturn", string1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EvoSuiteFile evoSuiteFile0 = null;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(0L);
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, constantPool1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = null;
      // Undeclared exception!
      try { 
        constantPool1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "WVA";
      // Undeclared exception!
      try { 
        Utility.signatureToString("WVA", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WVA'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.reset();
      byteSequence0.skip((byte) (-87));
      try { 
        Utility.methodSignatureArgumentTypes("(Um/Y", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Um/Y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.setBit(1044, 1044);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h=");
      Utility.convertString("3~P(");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("3~P(", "h=", "h=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3~P(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-1785L));
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Constant[] constantArray0 = new Constant[9];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(689, 76);
      constantArray0[0] = (Constant) constantNameAndType0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(4, 4);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("lstore_0");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      ConstantClass constantClass0 = new ConstantClass(76);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[4] = (Constant) constantClass1;
      ConstantLong constantLong0 = new ConstantLong((-1396L));
      constantArray0[5] = (Constant) constantLong0;
      ConstantClass constantClass2 = new ConstantClass(constantClass1);
      constantArray0[6] = (Constant) constantClass2;
      ConstantString constantString0 = new ConstantString(711);
      constantArray0[7] = (Constant) constantString0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[8] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray1 = Utility.decode("( _9kFb(R?QIjp", false);
      Utility.toHexString(byteArray1);
      try { 
        Utility.methodSignatureArgumentTypes("( _9kFb(R?QIjp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` _9kFb(R?QIjp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[0] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(86, (byte) (-73));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 86
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((byte) (-73));
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip((byte) (-87));
      Utility.codeToString(byteSequence1, constantPool0, false);
      try { 
        Utility.codeToString(byteSequence1, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      String string1 = Utility.convertString("aload_0");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)52;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)52, (byte)52);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-124), 4753);
      String string0 = "V";
      String string1 = "newarray";
      boolean boolean0 = false;
      Method method0 = null;
      try {
        method0 = new Method((DataInput) null, constantPool1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.skip((byte) (-70));
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence3, constantPool0, true);
      Utility.getSignature("faload");
      Utility.decode("1", false);
      Utility.printArray((Object[]) constantArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("bcel.maxcached.size", ",;/{4_A`P", "7`RX5Y@daie[", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bcel.maxcached.size
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skip((byte) (-121));
      String string0 = Utility.compactClassName("07]", false);
      assertEquals("07]", string0);
      
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence2, constantPool0, false);
      assertEquals("i2d", string1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("goto_w\t\t#-926369865", string0);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte) (-56);
      byteArray1[2] = (byte) (-56);
      byteArray1[3] = (byte) (-123);
      byteArray1[4] = (byte) (-73);
      byteArray1[5] = (byte) (-73);
      byteArray1[6] = (byte) (-56);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byte[] byteArray2 = Utility.decode("goto_w\t\t#-926369865", false);
      assertEquals(19, byteArray2.length);
      
      String string1 = Utility.toHexString(byteArray1);
      assertEquals("11 c8 c8 85 b7 b7 c8", string1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantClass constantClass0 = new ConstantClass(672);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      constantArray0[6] = (Constant) constantClass0;
      constantArray0[7] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      constantPool1.toString();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)20;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)20, (int) (byte) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("iWau?!Szo /5", "iWau?!Szo /5", true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)111;
      byteArray1[1] = (byte)114;
      byteArray1[2] = (byte)114;
      byteArray1[3] = (byte)111;
      byteArray1[4] = (byte)114;
      byteArray1[5] = (byte)114;
      byteArray1[6] = (byte)114;
      byteArray1[7] = (byte)111;
      byteArray1[8] = (byte)114;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, true);
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iWau?!Szo /5");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("5QTQ#e\",", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5QTQ#e\",'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte) (-73);
      byteArray0[8] = (byte) (-73);
      Utility.encode(byteArray0, false);
      String string0 = "static";
      String string1 = ")";
      Utility.replace("C&Sxhw.hsK'", "static", ")");
      try { 
        Utility.decode("$b7$b7$b7$b7$b7$b7$b7$b7$b7", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("bastore", string0);
      
      byte[] byteArray1 = Utility.decode("org.apache.bcel.classfile.Utility$1", false);
      assertEquals(33, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("dstore_3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dstore_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Utility.replace("(\"", "(\"", "(\"");
      Utility.clearBit((byte)0, (byte)0);
      String string0 = ">";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(">", "m ", "(\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Field.getComparator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      try { 
        Utility.decode("i(Gs`M'e*$*`%M ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantString1;
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant.getComparator();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence1, constantPool1, true);
      try { 
        Utility.methodSignatureArgumentTypes("lstore_3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lstore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)57;
      byte byte0 = (byte)117;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant.getComparator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readDouble();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-92);
      Constant[] constantArray0 = new Constant[5];
      ConstantString constantString0 = new ConstantString((byte) (-92));
      constantArray0[0] = (Constant) constantString0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2397), 65);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantLong constantLong0 = new ConstantLong((-3238L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[3] = (Constant) constantLong1;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[4] = (Constant) constantInvokeDynamic1;
      BCELComparator bCELComparator0 = Field.getComparator();
      constantInvokeDynamic1.clone();
      Constant.setComparator(bCELComparator0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 190, 7, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("java.lang.a%+qx^", "LSignature;V", false);
      String string0 = Utility.signatureToString("LSignature;V", false);
      assertEquals("Signature", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "LSignature;V";
      String string1 = Utility.methodTypeToSignature("LSignature;V", stringArray0);
      assertEquals("(LLSignature;V;)LLSignature;V;", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0, false, false);
      assertEquals("LSignature;V", string2);
      
      String string3 = Utility.accessToString(2795, false);
      assertEquals("public private static synchronized volatile transient interface strictfp", string3);
      
      String string4 = Utility.signatureToString("Ja^f`YA>lj4v{=k;*?", true);
      assertEquals("long", string4);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant.getComparator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byte byte0 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("]_MeSWo4T1^,p7p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]_MeSWo4T1^,p7p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "$";
      try { 
        Utility.typeOfMethodSignature("$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(0L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence2);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      int int0 = 60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2, 60, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("R`3srQM#]nV3$]jC", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      byteSequence0.reset();
      String string0 = "Z#4V!I7";
      String string1 = "x\"XjQ59djJ";
      Utility.convertString("x\"XjQ59djJ");
      ConstantString constantString0 = new ConstantString(126);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.encode(byteArray0, false);
      boolean boolean0 = false;
      Utility.compactClassName("R`3srQM#]nV3$]jC", ", locals={", true);
      try { 
        Utility.methodSignatureArgumentTypes("x\"XjQ59djJ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: x\"XjQ59djJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.searchOpcode("9a");
      Utility.clearBit((short) (-1), (short) (-1));
      Utility.format(Integer.MAX_VALUE, (short) (-1), true, ']');
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0, true, true);
      Utility.accessToString((int) (short) (-1));
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-22);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("2147483647");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2147483647'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = "lload_3";
      Utility.convertString("lload_3");
      ConstantString constantString0 = new ConstantString(8);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)123;
      byteArray0[0] = (byte)9;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-122);
      int int0 = (-5382);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-5382), (-125), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lconst_0
         // 1:    nop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.convertString("O_aHjl");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-44);
      Utility.encode(byteArray0, true);
      Utility.replace("$l$8b$I$A$A$A$A$A$A$A", "DL8bOH]!(1C6", "O_aHjl");
      // Undeclared exception!
      try { 
        Utility.decode(".$7W", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7W\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "[[Y7#~on#";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[[Y7#~on#", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y7#~on#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byte byte0 = (byte) (-87);
      byteArray0[1] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = null;
      try {
        constantNameAndType0 = new ConstantNameAndType((ConstantNameAndType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantNameAndType", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte)91;
      byteArray1[2] = (byte) (-112);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[1] = (byte)105;
      Utility.methodTypeToSignature("42S}tk", (String[]) null);
      Utility.methodTypeToSignature("Byte code error: ", (String[]) null);
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()LByte;");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Vl<8tVQXs'AF^Kt0?r");
      Utility.signatureToString("Vl<8tVQXs'AF^Kt0?r", false);
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)7;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[3] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      ConstantUtf8.getInstance("org.apache.bcel.classfile.ConstantInterfaceMethodref");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)31;
      byteArray1[1] = (byte)31;
      byteArray1[2] = (byte) (-29);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("void", "void", "lload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = true;
      ConstantString constantString0 = new ConstantString(116);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantString1;
      constantArray0[1] = (Constant) constantString1;
      constantArray0[2] = (Constant) constantString1;
      constantArray0[3] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant.getComparator();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46788. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte byte0 = (byte)46;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-113);
      byteArray0[8] = (byte) (-32);
      int int0 = 103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer integer0 = new Integer(3749);
      Utility.classOrInterface(3749);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((byte) (-42));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-42), (byte) (-42));
      constantInvokeDynamic0.toString();
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(constantInvokeDynamic1);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      String string0 = "dconst_0";
      // Undeclared exception!
      try { 
        Utility.signatureToString("interface", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-87);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1167), (int) (byte)65);
      byteArray0[2] = (byte) (-14);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit((byte) (-87), (-1167));
      Utility.typeOfSignature("Zv#V0S6(-eW+= Ouq");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.typeOfSignature("Zv#V0S6(-eW+= Ouq");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.searchOpcode("@<++U2y");
      Utility.compactClassName("@<++U2y", false);
      Utility.compactClassName("(", "@<++U2y", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[0] = (byte)91;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)75;
      byteArray0[0] = (byte) (-94);
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte) (-2);
      try { 
        Utility.methodSignatureArgumentTypes("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-81);
      byteArray1[1] = (byte) (-81);
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte) (-81);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Utility.searchOpcode("9a");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "putstatic");
      byteArray0[0] = (byte)13;
      byteArray0[2] = (byte)75;
      byteArray0[0] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(3325L);
      Constant.setComparator((BCELComparator) null);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("astore_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false, false);
      Utility.classOrInterface((-1322));
      Utility.accessToString((int) (byte) (-93), false);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      Utility.accessToString((-1322));
      Utility.codeToString(byteSequence1, constantPool0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.convertString("lload_3");
      ConstantString constantString0 = new ConstantString(8);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-122);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-5382), (-125), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lshr
         // 1:    lconst_0
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Constant[] constantArray0 = null;
      Utility.printArray((Object[]) null, true, false);
      Utility.classOrInterface(2558);
      Utility.accessToString(47, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.accessToString((int) (byte)65);
      Utility.codeToString(byteSequence0, constantPool0);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      Utility.classOrInterface((byte)101);
      Utility.accessToString((int) (byte)101, false);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.accessToString((int) (byte)101);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.equals(byteArray0, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("L';V", "P", true);
      byte[] byteArray0 = new byte[25];
      // Undeclared exception!
      try { 
        Utility.signatureToString("P", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(34);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool1 = constantPool0.copy();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.42S}tk");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)34, 2265);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      ConstantInvokeDynamic constantInvokeDynamic2 = new ConstantInvokeDynamic(constantInvokeDynamic1);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        pipedOutputStream0.write((int) (byte)10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.convertString("lload_3");
      assertEquals("lload_3", string0);
      
      ConstantString constantString0 = new ConstantString(47);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      constantArray0[7] = (Constant) constantString0;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-84);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-84), (int) (byte) (-84), true);
      assertEquals("0:    saload\n1:    ireturn\n", string1);
      
      int int0 = Utility.setBit((byte)53, 195);
      assertEquals(61, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.LineNumberTable";
      Utility.convertString("org.apache.bcel.classfile.LineNumberTable");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)84;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)55;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte)84;
      byteArray1[2] = (byte)104;
      byteArray1[3] = (byte)104;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, 670, 2204, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-64);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("iinc\t\t%132\t-64", "*0:c:$1%R8_o0m#a4+4", "*0:c:$1%R8_o0m#a4+4", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iinc\t\t%132\t-64
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(34);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool1 = constantPool0.copy();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.42S}tk");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-111);
      Utility.codeToString(byteArray0, constantPool1, (-3166), (-2016));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence1, constantPool1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte byte0 = (byte)46;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-66);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";");
      byteArray0[6] = (byte) (-86);
      byteArray0[8] = (byte) (-66);
      int int0 = 103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    arraylength
         // 3:    <illegal opcode>
         // 4:    iaload
         // 5:    arraylength
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte byte0 = (byte)46;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-86);
      byteArray0[8] = (byte) (-66);
      int int0 = 103;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    arraylength
         // 3:    <illegal opcode>
         // 4:    iaload
         // 5:    arraylength
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.searchOpcode("9a");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Byte code er: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantString constantString0 = new ConstantString(107);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString1;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString1;
      constantArray0[4] = (Constant) constantString1;
      constantArray0[5] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      int int0 = 218;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte) (-53);
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 75, 91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 17733. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      Object object3 = new Object();
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      byteArray0[5] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)11, 60, false);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      // Undeclared exception!
      try { 
        constantPool0.constantToString((Constant) constantInterfaceMethodref0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      constantArray0[4] = (Constant) constantInvokeDynamic0;
      constantArray0[5] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(194, (-1750));
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte byte0 = (byte) (-64);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      Utility.accessToString((-1750));
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("R`3srQM#]nV3$]jC", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      String string0 = "Z#4V!I7";
      Utility.convertString("x\"XjQ59djJ");
      ConstantString constantString0 = new ConstantString(126);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.encode(byteArray0, false);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("x\"XjQ59djJ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: x\"XjQ59djJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[5] = (byte)34;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      ConstantString constantString0 = new ConstantString(89);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constantPool0.copy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPool0.copy();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray1 = new byte[10];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte) (-111);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lstore_1");
      byteArray1[3] = (byte)34;
      byteArray1[4] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)34, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(194, (-1750));
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte byte0 = (byte) (-124);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      Utility.accessToString((-1750));
      byte byte1 = (byte)11;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-124), (int) (byte)11, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "*66<X4mcrcMm";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 5761. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[[~on#", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `~on#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)51;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)51;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RuntimeVisibleAnnotations");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.searchOpcode("RuntimeVisibleAnnotations");
      Utility.searchOpcode("RuntimeVisibleAnnotations");
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*L2_BtiXx@(kFM^9z<|";
      stringArray0[1] = "baload";
      stringArray0[2] = "arraylength";
      stringArray0[3] = "baload";
      stringArray0[4] = "w#4r4KI~'!:3Y\"";
      stringArray0[5] = "*L2_BtiXx@(kFM^9z<|";
      stringArray0[6] = "baload";
      stringArray0[7] = "~+>U<[$wujx;X";
      stringArray0[8] = "*L2_BtiXx@(kFM^9z<|";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("baload", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[$wujx;X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.methodTypeToSignature("\t", (String[]) null);
      Utility.accessToString((-2199));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.methodTypeToSignature("", (String[]) null);
      byteSequence0.readShort();
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(6, byteSequence0.getIndex());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ">-AZlQr{)@}^g(Em4";
      String string0 = Utility.printArray(objectArray0, false, true);
      assertEquals("\">-AZlQr{)@}^g(Em4\"", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[1] = (byte)105;
      Utility.methodTypeToSignature("42S}tk", (String[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[0];
      byteSequence0.read(byteArray1);
      ConstantUtf8.getInstance("42S}tk");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-93);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.@<++U2y");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "java.lang.@<++U2y";
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "java.lang.@<++U2y";
      objectArray0[3] = object0;
      Utility.printArray(objectArray0, true, false);
      Utility.compactClassName("6d");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)40;
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte)40;
      byteArray1[3] = (byte)40;
      byteArray1[4] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfMethodSignature("dload_2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dload_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)48;
      byteArray0[11] = (byte)125;
      byteArray0[3] = (byte)65;
      byteArray0[9] = (byte)48;
      byteArray0[5] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (-613), (-1670));
      constantPool0.setConstantPool(constantArray0);
      Utility.getSignature("0:    faload\n1:    nop\n2:    nop\n3:    lstore_2\n4:    nop\n5:    lshr\n6:    nop\n7:    nop\n8:    nop\n9:    faload\n10:   nop\n11:   lushr\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n");
      Utility.typeOfSignature("L0:;");
      try { 
        constantPool0.constantToString((int) (byte)123, (byte)9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 123. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)105;
      byteArray0[1] = (byte)105;
      Utility.methodTypeToSignature("B0$A].;4S''f", (String[]) null);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte) (-13);
      byteArray1[2] = (byte)99;
      byteArray1[3] = (byte) (-101);
      byteArray1[4] = (byte)105;
      byteArray1[5] = (byte)95;
      byteArray1[6] = (byte)99;
      byteArray1[7] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.methodSignatureToString("()LB0$A]/;4S''f;", "()LB0$A]/;4S''f;", "B0$A].;4S''f", false);
      try { 
        Utility.typeOfMethodSignature("org.apache.bcel.classfile.RuntimeInvisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.RuntimeInvisibleAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)48;
      byteArray0[11] = (byte)125;
      byteArray0[3] = (byte)65;
      byteArray0[9] = (byte)48;
      byteArray0[5] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.methodTypeToSignature("faload", (String[]) null);
      Utility.encode(byteArray0, false);
      Utility.accessToString((int) (byte)65);
      Utility.format((byte)48, (byte)65, true, 'L');
      Utility.convertString("");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      ConstantString constantString0 = new ConstantString((byte)0);
      ConstantString constantString1 = new ConstantString((byte) (-78));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantString0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.compactClassName("", false);
      Utility.accessToString(5);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 10240. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Utility.signatureToString("La%+qx^;VIL$VC?vV");
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.printArray((Object[]) null, false, true);
      Utility.accessToString(66);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-61);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/F/<D.uh3H/\"");
      try { 
        Utility.typeOfSignature("1n.`]ySBIk~s3_.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1n.`]ySBIk~s3_.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.signatureToString("La%+qx^;VIL$VC?vV");
      String[] stringArray0 = null;
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.printArray((Object[]) null, false, true);
      Utility.accessToString(66);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfMethodSignature("org.apache.bcel.classfile.RuntimeInvisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.RuntimeInvisibleAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[4] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RuntimeVisibleAnnotations");
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)100;
      Object object0 = new Object();
      Utility.accessToString((int) (byte)127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfMethodSignature("RuntimeVisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeVisibleAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      constantArray0[4] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteArray0, constantPool0, 0, (-1164), true);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-102);
      Object object0 = new Object();
      Object object1 = new Object();
      Utility.printArray((Object[]) null, true, true);
      Utility.accessToString(2034);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-127);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)48;
      Constant[] constantArray0 = new Constant[16];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-110), (int) (byte)48);
      assertEquals("0:    i2c\n1:    nop\n2:    i2c\n3:    castore\n4:    lor\n5:    lshr\n6:    faload\n7:    faload\n", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, false, true);
      assertEquals("null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null", string1);
      
      String string2 = Utility.accessToString(180);
      assertEquals("protected final synchronized transient", string2);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2c", string3);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((byte)1);
      ConstantString constantString1 = new ConstantString(89);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)1);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      constantPool0.copy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " S>UAZSyA(m<4(OvEW");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)10, (int) (byte)1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "L\\';V";
      Utility.compactClassName("L';V", "P", true);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.searchOpcode("9a");
      Utility.compactClassName("QXoN}S1c;", "QXoN}S1c;", true);
      Utility.clearBit(857, (short) (-1));
      Utility.format(857, (short) (-1), true, ']');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";5OMh6?4");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      Utility.accessToString((int) (short) (-1));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-22);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantFieldref0.accept(emptyVisitor0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassPath classPath0 = ClassPath.SYSTEM_CLASS_PATH;
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath0);
      ClassPathRepository classPathRepository1 = new ClassPathRepository(classPath0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classPathRepository1.loadClass(class0);
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor1);
      constantFieldref0.accept(emptyVisitor0);
      constantFieldref0.setNameAndTypeIndex((byte)125);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.accessToString((int) (byte)49, true);
      ConstantLong constantLong0 = new ConstantLong((-1L));
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.typeOfSignature("daload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: daload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Byte code error: ");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-119);
      byteArray1[1] = (byte) (-119);
      byteArray1[3] = (byte)15;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)52;
      byteArray1[6] = (byte) (-108);
      byteArray1[7] = (byte) (-108);
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-108), (-506));
      assertEquals("0:    l2f\n1:    l2f\n2:    nop\n3:    dconst_1\n4:    aconst_null\n5:    caload\n6:    lcmp\n7:    lcmp\n", string0);
      
      String string1 = Utility.encode(byteArray1, false);
      assertEquals("$89$89$A$P$B4$94$94", string1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Utility.searchOpcode("9a");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[0] = (byte)13;
      byteArray0[2] = (byte)69;
      byteArray0[0] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(3325L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)76;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)76;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) byteSequence0;
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = Utility.getSignature("java.lang.");
      assertEquals("Ljava/lang/;", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Ljava/lang/;");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.methodSignatureReturnType("Ljava/lang/;");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = true;
      ConstantString constantString0 = new ConstantString((-4464));
      Utility.signatureToString("L';V", true);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString1;
      constantArray0[2] = (Constant) constantString1;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.convertString("org.apache.bcel.classfile.LineNumberTable");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)84;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)55;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.searchOpcode("org.apache.bcel.classfile.LineNumberTable");
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer integer0 = new Integer(3749);
      Utility.accessToString(3749);
      Utility.getSignature("public protected synchronized transient interface abstract strictfp");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), 3749);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("*8@iB952!9(:A{ed", "Lpublic;", "pop");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *8@iB952!9(:A{ed
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-37);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("lreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lreturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.signatureToString("Invalid type: ", false);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1227, 1227);
      ConstantLong constantLong0 = new ConstantLong((-426L));
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.fillup("a2BMVlkI\"k", 936, false, 'U');
      String string0 = Utility.format(936, 3288, true, 'V');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, string0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      Utility.accessToString(936);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfMethodSignature("a2BMVlkI\"k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: a2BMVlkI\"k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "T,gBrn@;`*9h.Y.U";
      byteSequence0.readShort();
      byteSequence0.readUnsignedByte();
      String string0 = Utility.signatureToString("T,gBrn@;`*9h.Y.U", false);
      assertEquals(",gBrn@", string0);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0, true, false);
      assertEquals("{null, T,gBrn@;`*9h.Y.U, null, null, null}", string2);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.getSignature("int");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "I5RHsU**jI{/:['3");
      Utility.replace("qb)N80\"(bh", "V", "qb)N80\"(bh");
      Utility.replace("Z,#Jf6_+zO7jt", "compiler version\t", "qb)N80\"(bh");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-64);
      byte byte0 = (byte)126;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)97;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">-AZlQr{)@}^g(Em4";
      stringArray0[1] = "\t";
      Utility.methodTypeToSignature("\t", stringArray0);
      Utility.accessToString(113);
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)97;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)0;
      byteArray0[7] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.methodTypeToSignature(">-AZlQr{)@}^g(Em4", stringArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">-AZlQr{)@}^g(Em4";
      stringArray0[1] = "\t";
      Utility.methodTypeToSignature("\t", stringArray0);
      String string0 = Utility.accessToString(113);
      assertEquals("public final synchronized volatile", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)15;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)115;
      byteArray0[7] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.methodTypeToSignature(">-AZlQr{)@}^g(Em4", stringArray0);
      assertEquals("(L>-AZlQr{)@}^g(Em4;L;)L>-AZlQr{)@}^g(Em4;", string1);
      
      byteSequence0.readShort();
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string2 = Utility.printArray((Object[]) stringArray0, false, false);
      assertEquals(">-AZlQr{)@}^g(Em4, \t", string2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.searchOpcode("9a");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "9a";
      stringArray0[1] = "9a";
      stringArray0[2] = "9a";
      stringArray0[3] = "9a";
      stringArray0[4] = "9a";
      stringArray0[5] = "9a";
      stringArray0[6] = "9a";
      Utility.methodTypeToSignature("9a", stringArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)98;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "KcQD^-C(+";
      stringArray0[1] = "@b6x1E&]~'XC6\">2%G9";
      stringArray0[2] = "@b6x1E&]~'XC6\">2%G9";
      stringArray0[3] = "boolean";
      Utility.methodTypeToSignature("@b6x1E&]~'XC6\">2%G9", stringArray0);
      byte[] byteArray1 = new byte[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray1[0] = (byte)98;
      Utility.isJavaIdentifierPart('w');
      Utility.format((byte)98, 173, false, 'w');
      Utility.accessToString((int) (byte)98);
      Utility.methodSignatureArgumentTypes("(LKcQD^-C(+;L@b6x1E&]~'XC6\">2%G9;L@b6x1E&]~'XC6\">2%G9;Z)L@b6x1E&]~'XC6\">2%G9;");
      Utility.setBit((-108), (-396));
      // Undeclared exception!
      try { 
        Utility.signatureToString("@b6x1E&]~'XC6\">2%G9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@b6x1E&]~'XC6\">2%G9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">-AZlQr{)@}^g(Em4";
      stringArray0[1] = "\t";
      Utility.methodTypeToSignature("\t", stringArray0);
      String string0 = Utility.accessToString(113);
      assertEquals("public final synchronized volatile", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)15;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)115;
      byteArray0[7] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.methodTypeToSignature(">-AZlQr{)@}^g(Em4", stringArray0);
      assertEquals("(L>-AZlQr{)@}^g(Em4;L;)L>-AZlQr{)@}^g(Em4;", string1);
      
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2d", string2);
      
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ladd", string3);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer integer0 = new Integer(3749);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte)24;
      byteArray1[2] = (byte)98;
      byteArray1[3] = (byte)24;
      byteArray1[4] = (byte) (-44);
      byteArray1[5] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantLong constantLong0 = new ConstantLong((-1329L));
      ConstantLong constantLong1 = new ConstantLong((byte)98);
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      ConstantLong constantLong3 = new ConstantLong(constantLong1);
      constantLong3.toString();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ConstantString constantString0 = new ConstantString((byte)24);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      constantPool2.setConstantPool(constantArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool2, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool2, (int) (byte)24, (int) (byte)98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "";
      Utility.getSignature("");
      boolean boolean0 = true;
      Utility.signatureToString("L;", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "vuCY%<UMqq6VF2?\"";
      try { 
        Utility.methodSignatureArgumentTypes("vuCY%<UMqq6VF2?\"", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: vuCY%<UMqq6VF2?\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      ConstantString constantString0 = new ConstantString((byte)0);
      ConstantString constantString1 = new ConstantString((byte) (-78));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantString0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 1941, 2110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 10240. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, false);
      Utility.accessToString((-513));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfMethodSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.signatureToString("Invalid type: ", false);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1227, 1227);
      ConstantLong constantLong0 = new ConstantLong((-426L));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)85;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid type: ");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-67);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.ConstantMethodHandle");
      byteArray0[2] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getstatic");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      try { 
        Utility.typeOfSignature("QdEAwZ;*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QdEAwZ;*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Constant pool at index ";
      stringArray0[1] = "Constant pool at index ";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Constant pool at index ");
      Object object0 = new Object();
      String string0 = Utility.printArray((Object[]) stringArray0, true, true);
      assertEquals("{\"Constant pool at index \", \"Constant pool at index \"}", string0);
      
      String string1 = Utility.accessToString((-1625336533));
      assertEquals("public private static synchronized native abstract synthetic enum", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore\t\t%103", string2);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "?y-qVeY%>Gs>kc";
      String string1 = "Signature: ";
      Utility.typeOfSignature("Signature: ");
      Utility.classOrInterface((-3443));
      int int0 = 40;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-1574), 2739);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.searchOpcode("9a");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(3325L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)93;
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Constant[] constantArray0 = new Constant[7];
      byteSequence0.mark(72);
      try { 
        Utility.typeOfSignature("AD4JT,9'k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AD4JT,9'k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[1] = (byte) (-83);
      byteArray0[3] = (byte) (-66);
      byteArray0[0] = (byte) (-66);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), 40);
      Utility.classOrInterface((byte)0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.convertString("\t");
      Utility.setBit((byte)0, (byte)0);
      Utility.convertString("impdgep1");
      Utility.compactClassName("0:    arraylength\n1:    lreturn\n2:    nop\n3:    arraylength\n4:    nop\n", false);
      try { 
        Utility.methodSignatureArgumentTypes("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Integer integer0 = new Integer(3749);
      Utility.accessToString(3749);
      Utility.getSignature("public protected synchronized transient interface abstract strictfp");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), 3749);
      Utility.codeToString(byteArray0, constantPool0, 1, 45);
      Utility.toHexString(byteArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "00 00 00";
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.searchOpcode("@b6x1E&]~'XC6\">2%G9");
      Utility.clearBit((byte)0, 4671);
      Utility.accessToString(427, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("00 00 00", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 382, false, 'z');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = false;
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-86);
      int int0 = 1956;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 47, 1956);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.typeOfSignature("B6<o!&e,m|}2");
      Utility.classOrInterface((byte)8);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)8;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1574), 40);
      Utility.classOrInterface((byte) (-66));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.convertString("interface");
      Utility.setBit(65536, 65536);
      Utility.convertString("0:    nop\n1:    iconst_5\n");
      Utility.compactClassName("B6<o!&e,m|}2", true);
      try { 
        Utility.methodSignatureArgumentTypes("h;%Q<}y#:Td`fZi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: h;%Q<}y#:Td`fZi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)46;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantClass constantClass0 = new ConstantClass((byte)46);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("IL{&c[K@");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      short short0 = Utility.searchOpcode("iaload");
      assertEquals((short)46, short0);
      
      String string1 = Utility.convertString("iaload");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      constantArray0[4] = (Constant) constantInvokeDynamic1;
      constantArray0[5] = (Constant) constantInvokeDynamic1;
      constantArray0[6] = (Constant) constantInvokeDynamic1;
      constantArray0[7] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.searchOpcode("fload_2");
      Utility.searchOpcode("fload_2");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "*L2_BtiXx@(kFM^9z<|";
      stringArray0[1] = "w#4r4KI~'!:3Y\"";
      stringArray0[2] = "fload_2";
      stringArray0[3] = "fload_2";
      Utility.methodTypeToSignature("*L2_BtiXx@(kFM^9z<|", stringArray0);
      try { 
        Utility.methodSignatureReturnType("(L*L2_BtiXx@(kFM^9z<|;Lw#4r4KI~'!:3Y\";Lfload_2;Lfload_2;)L*L2_BtiXx@(kFM^9z<|;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L*L2_BtiXx@(kFM^9z<|;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("C^|wm#");
      assertEquals((byte)5, byte0);
      
      int int0 = Utility.clearBit(2387, 2387);
      assertEquals(2387, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(554L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantLong0.toString();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong1;
      constantArray0[2] = (Constant) constantLong1;
      constantArray0[3] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantString constantString0 = new ConstantString((byte)24);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool1, false);
      assertEquals("dload\t\t%5", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "C^|wm#";
      Utility.typeOfSignature("C^|wm#");
      Utility.clearBit(2387, 2387);
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("C^|wm#", (String[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("static");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("()LC^|wm#;", "w", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "@'`6Bbd~R=E:^[Oc-$G";
      try { 
        Utility.typeOfSignature("@'`6Bbd~R=E:^[Oc-$G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @'`6Bbd~R=E:^[Oc-$G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.accessToString((int) (byte)0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokestatic", "", "invokespecial", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Constant pool at index ";
      stringArray0[1] = "Constant pool at index ";
      String string0 = Utility.methodTypeToSignature("Constant pool at index ", stringArray0);
      assertEquals("(LConstant;LConstant;)LConstant;", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)95;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dadd", string1);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("L;V");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.methodSignatureToString("(LConstant;LConstant;)LConstant;", "Invalid signature: `", "Constant pool at index ");
      assertEquals("Constant pool at index  Constant Invalid signature: `(Constant arg1, Constant arg2)", string2);
      
      byte byte0 = Utility.typeOfMethodSignature("(LConstant;LConstant;)LConstant;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)81;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte)81;
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte)4;
      byteArray1[4] = (byte)64;
      byteArray1[5] = (byte)119;
      byteArray1[4] = (byte) (-70);
      Utility.encode(byteArray1, false);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, 951);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 951, (int) (byte)119);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      Utility.methodTypeToSignature("42S}tk", (String[]) null);
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte)100;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)100;
      byteArray2[1] = (byte)99;
      byteArray2[2] = (byte)100;
      byteArray2[3] = (byte)99;
      byteArray2[4] = (byte)52;
      byteArray2[5] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, (int) (byte)99, (int) (byte)10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-61);
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-68);
      byte byte1 = (byte)78;
      byteArray0[2] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)78, (byte) (-61));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      byteSequence0.readByte();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantLong constantLong0 = new ConstantLong((byte) (-122));
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-122), 173);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      try { 
        Utility.typeOfSignature("#_#Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #_#Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ConstantPool constantPool0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-89);
      byteArray0[8] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    <illegal opcode>
         // 2:    arraylength
         // 3:    <illegal opcode>
         // 4:    iaload
         // 5:    arraylength
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)4;
      Utility.equals(byteArray0, byteArray0);
      Utility.convertString("{");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = "interface";
      String string1 = null;
      Method method0 = null;
      try {
        method0 = new Method((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)79;
      byteArray0[2] = (byte)79;
      byte byte1 = (byte) (-89);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)38);
      Utility.classOrInterface((byte) (-89));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantFieldref0.setNameAndTypeIndex(779);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.accessToString((int) (byte)123, true);
      constantFieldref0.setClassIndex(3590);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokestatic", "public private static final volatile", "invokespecial", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      Utility.methodTypeToSignature("42S}tk", (String[]) null);
      byte[] byteArray1 = new byte[8];
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = null;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)99;
      byteArray2[1] = (byte)100;
      byteArray2[2] = (byte)110;
      byteArray2[3] = (byte)100;
      byteArray2[4] = (byte)100;
      byteArray2[5] = (byte)105;
      int int0 = 187;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, 187, 163);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[2] = (byte)46;
      byte byte0 = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)101;
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-32);
      byte byte1 = (byte) (-89);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 200, (int) (byte) (-66));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Integer integer0 = new Integer(3749);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Bl*sg19";
      stringArray0[1] = "\n";
      stringArray0[2] = "`";
      Utility.methodTypeToSignature("Bl*sg19", stringArray0);
      Utility.accessToString((int) (byte) (-123));
      Utility.accessToString(108);
      Utility.methodTypeToSignature("public protected transient native interface abstract strictfp synthetic annotation enum", stringArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes(" ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false, false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">-AZlQr{)@}^g(Em4";
      stringArray0[1] = "_Iy#\"[[MK>``i!7V5W";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("_Iy#\"[[MK>``i!7V5W", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[[MK>``i!7V5W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)85;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t(wide)");
      byteArray0[4] = (byte) (-127);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isJavaIdentifierPart('e');
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lor", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.searchOpcode("@<++U2y");
      Utility.compactClassName("@<++U2y", true);
      Utility.compactClassName("\"", "@<++U2y", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte) (-2);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-43), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte)4;
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)4, (int) (byte) (-89));
      Utility.classOrInterface(103);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)31;
      byteArray2[1] = (byte) (-89);
      byteArray2[2] = (byte) (-89);
      byteArray2[3] = (byte)4;
      byteArray2[4] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      ByteSequence byteSequence1 = new ByteSequence(byteArray2);
      try { 
        byteSequence1.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte) (-89);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.searchOpcode("@<++U2y");
      Utility.compactClassName("@<++U2y", true);
      String string0 = "\\\"";
      Utility.compactClassName("\"", "@<++U2y", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte) (-2);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)62, (int) (short) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      Utility.methodTypeToSignature("42S}tk", (String[]) null);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte) (-13);
      byteArray1[2] = (byte)99;
      byteArray1[3] = (byte) (-101);
      byteArray1[4] = (byte)105;
      byteArray1[5] = (byte)95;
      byteArray1[6] = (byte)99;
      byteArray1[7] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 61, (-1982), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-48);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)107, 79, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = Utility.compactClassName("Total of ", "Total of ", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)21;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteSequence0.readBoolean();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload\t\t%0", string1);
      
      String string2 = Utility.compactClassName("", false);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = Utility.accessToString((int) (byte)77);
      assertEquals("public protected static volatile", string3);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)21;
      String string4 = Utility.toHexString(byteArray1);
      assertEquals("4d 15", string4);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte) (-89);
      byteArray1[4] = (byte)36;
      byteArray1[5] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 248, (int) (byte)36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "C^|wm#";
      Utility.typeOfSignature("C^|wm#");
      Utility.clearBit(2374, 2374);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((-2125L));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantLong1.toString();
      Constant[] constantArray0 = new Constant[20];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2374, 66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.typeOfSignature("C^|wm#");
      Utility.clearBit(2387, 2387);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("0A$2{Mlp@/#|fJP'D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0A$2{Mlp@/#|fJP'D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      Utility.methodTypeToSignature("42S}tk", (String[]) null);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte) (-13);
      byteArray1[2] = (byte)99;
      byteArray1[3] = (byte) (-101);
      byteArray1[4] = (byte)105;
      byteArray1[5] = (byte)95;
      byteArray1[6] = (byte)99;
      byteArray1[7] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("42S}tk");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      constantUtf8_0.dump(dataOutputStream0);
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.methodSignatureToString("()L42S}tk;", "L;V", ")>O0g2$|(jrwwov>z@");
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Integer integer0 = new Integer(3749);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byteSequence0.readBoolean();
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-2);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("static", "static", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: static
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)123;
      byteArray0[0] = (byte)123;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-52);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "The list of names must not be null");
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-25);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("fload\t\t%0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fload\t\t%0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      Utility.printArray(objectArray0, false, true);
      int int0 = 2558;
      Utility.classOrInterface(2558);
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)60;
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)80;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean1 = false;
      byteSequence0.readBoolean();
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.typeOfSignature("C^|wm#");
      Utility.clearBit(2373, 2373);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantLong0.toString();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong1;
      constantArray0[2] = (Constant) constantLong1;
      constantArray0[3] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 67, 2373, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte byte0 = (byte)113;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "#ryp";
      stringArray0[1] = "SQAylLf@";
      stringArray0[2] = "#ryp";
      stringArray0[3] = "#ryp";
      stringArray0[4] = "#ryp";
      stringArray0[5] = "iconst_2";
      stringArray0[6] = "#ryp";
      stringArray0[7] = "#ryp";
      Utility.methodTypeToSignature("#ryp", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)113;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)113, (-136));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantLong1;
      constantArray0[1] = (Constant) constantLong1;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      ConstantString constantString0 = new ConstantString(177);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[4] = (Constant) constantString1;
      constantArray0[5] = (Constant) constantLong0;
      constantArray0[6] = (Constant) constantLong0;
      constantArray0[7] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)36, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 9216. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.compactClassName("Total of ", "Total of ", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)21;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((byte)77, (byte) (-70), byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)123;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantFieldref0.accept(emptyVisitor0);
      constantArray0[0] = (Constant) constantFieldref0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "}_5=eO";
      stringArray0[1] = "}_5=eO";
      stringArray0[2] = "}_5=eO";
      stringArray0[3] = "}_5=eO";
      Utility.methodTypeToSignature("}_5=eO", stringArray0);
      Utility.getSignature("}_5=eO");
      try { 
        Utility.typeOfSignature("\"8v+(rtkz/p/x 9<;?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"8v+(rtkz/p/x 9<;?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong(byteSequence1);
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-105);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)48;
      Constant[] constantArray0 = new Constant[16];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)48, (-216), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-127);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)48;
      Constant[] constantArray0 = new Constant[16];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)48, (-216), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 234, (-541), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-37);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("i2f", "i2f", "i2f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getfield");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lshl", string0);
      
      String string1 = Utility.format(195, 39, true, '*');
      assertEquals("195************************************", string1);
      
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, 6, (-3556), true);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.typeOfSignature("C^|wm#");
      Utility.clearBit(2387, 2387);
      byte byte0 = (byte) (-128);
      byte byte1 = (byte)14;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(554L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantLong0.toString();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong1;
      constantArray0[2] = (Constant) constantLong1;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "CONSTANT_Long[5](bytes = 554)";
      stringArray0[1] = "CONSTANT_Long[5](bytes = 554)";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte byte0 = (byte)6;
      byte byte1 = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantString constantString0 = new ConstantString((byte)6);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantMethodType0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantMethodType1;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantMethodType1;
      constantArray0[6] = (Constant) constantString0;
      constantArray0[7] = (Constant) constantString0;
      constantArray0[8] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool1, (-3966), (int) (byte)6, false);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-73);
      byteArray0[0] = (byte) (-73);
      byte byte1 = (byte)46;
      byteArray0[2] = (byte)46;
      byte byte2 = (byte) (-32);
      ConstantPool constantPool0 = null;
      byte byte3 = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (int) (byte)46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Constant pool at index ";
      Utility.accessToString(1569);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((byte) (-83));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantString constantString0 = new ConstantString(1188);
      ConstantString constantString1 = new ConstantString((byte)56);
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-83));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      constantArray0[1] = (Constant) constantLong1;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)56);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      constantInteger1.dump(dataOutputStream0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      Utility.codeToString(byteArray0, constantPool2, (int) (byte) (-80), 63);
      short short0 = Utility.searchOpcode(", npairs = ");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("C^|wm#");
      assertEquals((byte)5, byte0);
      
      int int0 = Utility.clearBit(2387, 2387);
      assertEquals(2387, int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(554L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantLong0.toString();
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong1;
      constantArray0[2] = (Constant) constantLong1;
      constantArray0[3] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1157), (int) (byte)5);
      assertEquals("0:    dload\t\t%5\n2:    dload\t\t%5\n4:    ior\n", string0);
      
      String string1 = Utility.getSignature("C^|wm#");
      assertEquals("LC^|wm#;", string1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">-AZlQr{)@}^g(Em4";
      stringArray0[1] = "\t";
      Utility.methodTypeToSignature("\t", stringArray0);
      int int0 = 113;
      Utility.accessToString(113);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)115;
      byteArray0[7] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.methodTypeToSignature(">-AZlQr{)@}^g(Em4", stringArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 10, (-3671), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.getSignature("@?#RrOxbHr");
      assertEquals("L@?#RrOxbHr;", string0);
      
      Object object0 = new Object();
      String string1 = Utility.convertString(")\t");
      assertEquals(")\t", string1);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "CONSTANT_Fieldref");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-21);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.available();
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_3", string2);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.searchOpcode("@<++U2y");
      Utility.compactClassName("@<++U2y", true);
      Utility.compactClassName("\"", "@<++U2y", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte) (-2);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-43), (int) (byte)4);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("R`3srQM#]nV3$]jC", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("R`3srQM#]nV3$]jC");
      ConstantDouble constantDouble0 = new ConstantDouble(byteSequence0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence1);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantString constantString0 = new ConstantString(63);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantDouble1;
      constantArray0[2] = (Constant) constantDouble0;
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[3] = (Constant) constantString1;
      constantArray0[4] = (Constant) constantMethodType1;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 63, 8, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Integer integer0 = new Integer(3749);
      String string0 = Utility.accessToString(3749);
      assertEquals("public protected synchronized transient interface abstract strictfp", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((byte) (-42));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantString constantString0 = new ConstantString((-570));
      ConstantString constantString1 = new ConstantString((byte) (-42));
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-58), (-1320));
      assertEquals("0:    ifnull\t\t#-10576\n3:    lreturn\n", string1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((byte)4);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantString constantString0 = new ConstantString(89);
      ConstantString constantString1 = new ConstantString((byte)36);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantLong1;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantLong1;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.copy();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte)4;
      byteArray1[3] = (byte)81;
      byteArray1[4] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)81, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)76;
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readFloat();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lstore\t\t%76", string0);
      
      String string1 = Utility.compactClassName("J", "J", false);
      assertEquals("J", string1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = Utility.clearBit((-1120), (-1120));
      assertEquals((-1120), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("nop", string0);
      
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-68);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 0, 169);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+nvalid Fetod signature: ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((byte) (-95));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte) (-80));
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("areturn", string0);
      
      short short0 = Utility.searchOpcode("+nvalid Fetod signature: ");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((byte)4);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantString constantString0 = new ConstantString(89);
      ConstantString constantString1 = new ConstantString((byte)36);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantLong1;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantLong1;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.copy();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)36;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte) (-111);
      byteArray1[3] = (byte)81;
      byteArray1[4] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)81, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      constantArray0[4] = (Constant) constantInvokeDynamic1;
      constantArray0[5] = (Constant) constantInvokeDynamic1;
      constantArray0[6] = (Constant) constantInvokeDynamic1;
      constantArray0[7] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fload_2", string0);
      
      short short0 = Utility.searchOpcode("fload_2");
      assertEquals((short)36, short0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.signatureToString("La%+qx^;VIL$VC?vV");
      Utility.format(66, 66, false, 'o');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(1172L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantString constantString0 = new ConstantString((byte)18);
      ConstantString constantString1 = new ConstantString(0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 78, 0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = Utility.convertString("?>...");
      assertEquals("?>...", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{}", string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)67;
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("4f 06 e7 43", string2);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.getSignature("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      Utility.encode(byteArray0, true);
      String string0 = Utility.compactClassName("sUR", "", true);
      assertEquals("sUR", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) (byte) (-20);
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) (byte) (-20);
      objectArray0[5] = (Object) ":";
      objectArray0[6] = (Object) "sUR";
      Object object0 = new Object();
      objectArray0[8] = object0;
      Utility.printArray(objectArray0, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-20);
      byteArray1[1] = (byte) (-20);
      byteArray1[2] = (byte) (-20);
      byteArray1[3] = (byte) (-20);
      byteArray1[4] = (byte) (-20);
      byteArray1[5] = (byte) (-20);
      byteArray1[4] = (byte) (-20);
      byteArray1[7] = (byte) (-20);
      byteArray1[8] = (byte) (-20);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2925), (byte) (-20));
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.methodSignatureReturnType("L;", true);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((byte)4);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantString constantString0 = new ConstantString(89);
      ConstantString constantString1 = new ConstantString((byte)36);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantLong1;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantLong1;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-4734), 111, false);
      assertEquals("0:    iconst_1\n1:    iconst_1\n2:    fastore\n3:    fload_2\n4:    fload_2\n5:    fload_2\n6:    iconst_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4836, (int) (byte)78, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Constant pool at index ";
      stringArray0[1] = "Constant pool at index ";
      Utility.methodTypeToSignature("Constant pool at index ", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)95;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)95;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)99;
      byteArray1[6] = (byte) (-56);
      byteArray1[7] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2823);
      constantArray0[0] = (Constant) constantMethodType0;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence2, constantPool0, true);
      Utility.printArray((Object[]) stringArray0, true, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)121, (byte)121, byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("", "lshl", "", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = Utility.convertString("org.apache.bcel.classfile.LineNumberTable");
      assertEquals("org.apache.bcel.classfile.LineNumberTable", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "org.apache.bcel.classfile.LineNumberTable";
      objectArray0[1] = (Object) "org.apache.bcel.classfile.LineNumberTable";
      Object object0 = new Object();
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{org.apache.bcel.classfile.LineNumberTable, org.apache.bcel.classfile.LineNumberTable, null, null, null, null, null}", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("faload", string2);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)65;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)65;
      objectArray0[2] = (Object) (byte)65;
      objectArray0[3] = (Object) (byte)65;
      objectArray0[4] = (Object) (byte)122;
      objectArray0[5] = (Object) (byte)65;
      objectArray0[6] = (Object) (byte)122;
      objectArray0[7] = (Object) (byte)122;
      Utility.printArray(objectArray0, false, false);
      String string0 = Utility.accessToString(2960);
      assertEquals("final transient native interface strictfp", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ishr", string1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)76;
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "#ryp";
      stringArray0[1] = "SQAylLf@";
      stringArray0[2] = "#ryp";
      stringArray0[3] = "#ryp";
      stringArray0[4] = "#ryp";
      stringArray0[5] = "iconst_2";
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.replace("}:jI", "}:jI", "}:jI");
      Utility.isSet((-2231), (-2231));
      Utility.replace("}:jI", "tO3", "double");
      Utility.accessToString((-2231));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-25);
      byte byte0 = (byte) (-120);
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 878, (int) (byte) (-25));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = Utility.signatureToString("La%+qx^;VIL$VC?vV");
      assertEquals("a%+qx^", string0);
      
      String string1 = Utility.format(66, 66, false, 'o');
      assertEquals("oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo66", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("wide\t(wide)", string2);
      
      short short0 = Utility.searchOpcode("La%+qx^;VIL$VC?vV");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)123;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)48, (-216), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Integer integer0 = new Integer(3749);
      Utility.accessToString(3749);
      Utility.getSignature("public protected synchronized transient interface abstract strictfp");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1441196591), (int) (byte)54, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fadd
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("R`3srQM#]nV3$]jC", false);
      assertEquals(15, byteArray0.length);
      
      String string0 = Utility.compactClassName("R`3srQM#]nV3$]jC");
      assertEquals("R`3srQM#]nV3$]jC", string0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.classOrInterface(31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)90;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte)100;
      String string0 = Utility.encode(byteArray1, false);
      assertEquals("Zddd", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('`');
      assertFalse(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantFieldref0;
      constantArray0[5] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("dup_x1", string1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ConstantPool constantPool0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "#ryp";
      stringArray0[1] = "SQAylLf@";
      stringArray0[2] = "#ryp";
      stringArray0[3] = "#ryp";
      stringArray0[4] = "#ryp";
      stringArray0[5] = "iconst_2";
      stringArray0[6] = "#ryp";
      stringArray0[7] = "#ryp";
      Utility.methodTypeToSignature("#ryp", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), 2996);
      int int0 = 62;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-128);
      byteArray1[1] = (byte) (-128);
      byteArray1[2] = (byte) (-128);
      byteArray1[3] = (byte) (-128);
      byteArray1[4] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 90, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "X\"#";
      // Undeclared exception!
      try { 
        Utility.signatureToString("X\"#", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X\"#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Integer integer0 = new Integer(3749);
      String string0 = Utility.accessToString(3749);
      assertEquals("public protected synchronized transient interface abstract strictfp", string0);
      
      String string1 = Utility.getSignature("public protected synchronized transient interface abstract strictfp");
      assertEquals("Lpublic;", string1);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fadd", string2);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('X');
      assertTrue(boolean0);
      
      Utility.signatureToString("Vm+[E'4", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantString constantString0 = new ConstantString(925);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-32);
      byte byte0 = (byte) (-89);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 186, (int) (byte) (-66));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      Utility.replace("XyLf(ji@?!", "O_jl", "XyLf(ji@?!");
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Utility.methodTypeToSignature(", code_length = ", (String[]) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ">-AZlQr{)@}^g(Em4";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[2] = (Object) ", code_length = ";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) ">-AZlQr{)@}^g(Em4";
      Utility.printArray(objectArray0, true, true);
      Utility.accessToString((-513));
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      byte byte0 = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-25);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, 62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Utility.signatureToString("La%+qx^;VIL$VC?vV");
      boolean boolean0 = false;
      char char0 = 'o';
      Utility.format(66, 66, false, 'o');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)18;
      byte byte0 = (byte)1;
      byteArray0[2] = (byte)1;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-3226), 190, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = Utility.replace("}:jI", "}:jI", "}:jI");
      boolean boolean0 = Utility.isSet((-2231), (-2231));
      String string1 = Utility.replace("}:jI", "tO3", "double");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.accessToString((-2231));
      assertEquals("public static volatile native interface abstract synthetic annotation enum", string2);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "dstore_0");
      String string3 = Utility.getSignature("castore");
      assertEquals("Lcastore;", string3);
      
      boolean boolean1 = Utility.isJavaIdentifierPart('A');
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-14);
      String string4 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string4);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = Utility.replace("W5g3w%Ih]ytL", "W5g3w%Ih]ytL", "checkcast");
      assertEquals("checkcast", string0);
      
      short short0 = Utility.searchOpcode("ladd");
      assertEquals((short)97, short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((byte)81);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      ConstantLong constantLong2 = new ConstantLong(constantLong1);
      ConstantString constantString0 = new ConstantString((byte)81);
      ConstantString constantString1 = new ConstantString(constantString0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((short)97, (-162));
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantLong2;
      constantArray0[5] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fastore", string1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Utility.signatureToString("La%+qx^;VIL$VC?vV");
      Utility.format(66, 66, false, 'o');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = Utility.methodTypeToSignature(", code_length = ", (String[]) null);
      assertEquals("()L,;", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ">-AZlQr{)@}^g(Em4";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ", code_length = ";
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) ">-AZlQr{)@}^g(Em4";
      Utility.printArray(objectArray0, true, true);
      String string1 = Utility.accessToString((-513));
      assertEquals("public private protected static final synchronized volatile transient native abstract strictfp synthetic annotation enum", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("drem", string2);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)123;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = Utility.classOrInterface((byte)113);
      assertEquals("class", string0);
      
      ConstantPool constantPool2 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool2);
      assertEquals("lushr", string1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, true);
      assertEquals("", string0);
      
      String string1 = Utility.classOrInterface(2558);
      assertEquals("class", string1);
      
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{}", string2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)80;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string3 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("istore_1", string3);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int int0 = Utility.clearBit((-1577), 59);
      assertEquals((-134219305), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte)94;
      byteArray0[8] = (byte)0;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-609), 186);
      assertEquals("0:    if_icmpge\t\t#22690\n3:    <illegal opcode>\n4:    i2c\n5:    arraylength\n6:    <illegal opcode>\n7:    dup2_x2\n8:    nop\n", string0);
      
      String string1 = Utility.classOrInterface((-3224));
      assertEquals("interface", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmpge\t\t#22690", string2);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Constant pool at index ";
      stringArray0[1] = "Constant pool at index ";
      Utility.methodTypeToSignature("Constant pool at index ", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      constantArray0[4] = (Constant) constantInvokeDynamic0;
      constantArray0[5] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)31;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1167), (int) (byte)65);
      assertEquals("0:    lstore_2\n1:    lload_1\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      
      byteArray0[2] = (byte) (-14);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-67);
      byteArray1[1] = (byte) (-26);
      byteArray1[2] = (byte) (-61);
      byteArray1[3] = (byte) (-61);
      byteArray1[4] = (byte) (-26);
      byteArray1[5] = (byte) (-26);
      byteArray1[6] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("monitorexit", string1);
      
      String string2 = Utility.accessToString(174, true);
      assertEquals("private protected static transient", string2);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(0L);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantLong1;
      constantArray0[1] = (Constant) constantLong1;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      ConstantString constantString0 = new ConstantString(177);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[4] = (Constant) constantString1;
      constantArray0[5] = (Constant) constantLong0;
      constantArray0[6] = (Constant) constantLong0;
      constantArray0[7] = (Constant) constantLong0;
      constantArray0[8] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 9220. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Constant pool at index ";
      stringArray0[1] = "Constant pool at index ";
      String string0 = Utility.methodTypeToSignature("Constant pool at index ", stringArray0);
      assertEquals("(LConstant;LConstant;)LConstant;", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("swap", string1);
      
      String string2 = Utility.methodSignatureReturnType("Constant pool at index ");
      assertEquals("char", string2);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = Utility.signatureToString("La%+qx^;VIL$VC?vV");
      assertEquals("a%+qx^", string0);
      
      String string1 = Utility.format(66, 66, false, 'o');
      assertEquals("oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo66", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-59);
      byteArray0[1] = (byte)1;
      byteArray0[6] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fstore_3", string2);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte) (-25);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)16, 70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$b0", string0);
      
      String string1 = Utility.classOrInterface(61);
      assertEquals("class", string1);
      
      boolean boolean0 = Utility.isSet((-2689), (-2689));
      boolean boolean1 = Utility.isSet((-185), (-185));
      assertFalse(boolean1 == boolean0);
      
      String string2 = Utility.getSignature("6d=$9j}]'rmp%c");
      assertEquals("L6d=$9j}]'rmp%c;", string2);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      try { 
        Utility.typeOfSignature("$#s_i'`B!OTtvwNqJ!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $#s_i'`B!OTtvwNqJ!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Utility.setBit(2895, 2895);
      try { 
        Utility.typeOfSignature("7emD{GhUaG$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7emD{GhUaG$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(reference_kind = ");
      Utility.setBit(1165, 1165);
      // Undeclared exception!
      try { 
        Utility.signatureToString("R`3srQM#]nV3$]jC", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R`3srQM#]nV3$]jC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("DP");
      assertEquals((byte)7, byte0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Utility.clearBit(89, (-2187));
      assertEquals(89, int0);
      
      boolean boolean0 = Utility.isSet(61, 46);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e(%JF2+");
      byte byte0 = Utility.typeOfSignature("Bg@l(%@hCyr/vA8';G");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Illegally nested brackets:");
      assertEquals((byte)10, byte0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-78);
      byteArray1[1] = (byte) (-78);
      byteArray1[2] = (byte)77;
      byteArray1[3] = (byte)10;
      byteArray1[4] = (byte)82;
      byteArray1[5] = (byte)10;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, true);
      Utility.classOrInterface(2558);
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)80;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1971, 7, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2qD*! m}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2qD*! m}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("En+VjmICl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: En+VjmICl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Constant pool at index ";
      stringArray0[1] = "Constant pool at index ";
      String string0 = Utility.methodTypeToSignature("Constant pool at index ", stringArray0);
      assertEquals("(LConstant;LConstant;)LConstant;", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dadd", string1);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = Utility.getSignature("!cLo@+");
      assertEquals("L!cLo@+;", string0);
      
      int int0 = Utility.setBit(0, (-3787));
      assertEquals(2097152, int0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("&;`0q,W/.ZG-");
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("", (String[]) null);
      boolean boolean0 = true;
      try { 
        Utility.decode(">9M65${Vyh=", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("6P8!i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6P8!i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Xtj}JQ6wYX|j#vf(9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xtj}JQ6wYX|j#vf(9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!cLN+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: cLN+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("C^|wm#");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.compactClassName("z*u");
      assertEquals("z*u", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)41;
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte)5;
      byteArray1[6] = (byte)108;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = "Total of ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Total of ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2093, (int) (byte)52, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = "S";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "impdep2");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apach.bcel.classfile.Field");
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Utility.replace("(eM[9<0KS", "(eM[9<0KS", "org.apache.bcel.classfile.ConstantFloat");
      MockFile mockFile0 = new MockFile("(eM[9<0KS", "org.apache.bcel.classfile.ConstantFloat");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "org.apache.bcel.classfile.ConstantFloat");
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, false);
      Locale locale0 = new Locale("=", "OoH;jiYw@z0jE", "org.apache.bcel.classfile.ConstantFloat");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "org.apache.bcel.classfile.ConstantFloat";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)87;
      mockPrintStream1.write(byteArray0);
      objectArray0[1] = (Object) printStream0;
      objectArray0[2] = (Object) printStream0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "org.apache.bcel.classfile.ConstantFloat";
      PrintStream printStream1 = mockPrintStream1.printf(locale0, "org.apache.bcel.classfile.ConstantFloat", objectArray0);
      Object[] objectArray1 = new Object[2];
      objectArray1[0] = (Object) mockPrintStream1;
      objectArray1[1] = (Object) "OoH;jiYw@z0jE";
      Utility.printArray(printStream1, objectArray1);
      int int0 = 71;
      Utility.accessToString(71);
      try { 
        Utility.typeOfSignature("5ZVd};W{-yp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5ZVd};W{-yp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType(")Jl6YW Cb");
      try { 
        Utility.typeOfMethodSignature("V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      short short0 = Utility.searchOpcode("@<++U2y");
      assertEquals((short) (-1), short0);
      
      Utility.compactClassName("@<++U2y", true);
      String string0 = Utility.compactClassName("\"", "@<++U2y", true);
      assertEquals("\"", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte) (-2);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-43), (int) (byte) (-34));
      assertEquals("0:    iconst_1\n1:    dup_x2\n2:    <illegal opcode>\n3:    f2d\n4:    astore_0\n5:    if_icmpge\t\t#-5373\n", string1);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = Utility.format((-1963), (-3928), true, '>');
      assertEquals("-1963", string0);
      
      Utility.fillup("org.apache.bcel.cassfile.ParameterAnnotationEntry", 49, true, 'V');
      String string1 = Utility.accessToString((-1688));
      assertEquals("static synchronized volatile native strictfp synthetic annotation enum", string1);
      
      String string2 = Utility.fillup("static synchronized volatile native strictfp synthetic annotation enum", 182, false, 'V');
      assertEquals("VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVstatic synchronized volatile native strictfp synthetic annotation enum", string2);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      Utility.fillup("N7IXzhw/3y3Fe0tvS", 1665, false, '\\');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("aconst_null", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)31;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1167), (int) (byte)65);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)76);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "a.$fhn&5<Kv8y";
      MockFile mockFile0 = new MockFile("a.$fhn&5<Kv8y");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) null);
      try { 
        Utility.typeOfSignature("a.$fhn&5<Kv8y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: a.$fhn&5<Kv8y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Utility.typeOfSignature("V");
      try { 
        Utility.typeOfMethodSignature(")Jl6YW Cb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )Jl6YW Cb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)69;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)69;
      byteArray1[1] = (byte)101;
      byteArray1[2] = (byte)127;
      byteArray1[3] = (byte) (-114);
      byteArray1[4] = (byte)127;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Utility.format((-2), (-2), true, '=');
      // Undeclared exception!
      try { 
        Utility.signatureToString("Mjc\"M)j JV", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mjc\"M)j JV'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("", false);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Utility.compactClassName("lot");
      try { 
        Utility.typeOfSignature("G(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = "Mjc\"M)j JVj";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Mjc\"M)j JVj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mjc\"M)j JVj'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Class must not be null");
      assertEquals((byte)5, byte0);
      
      boolean boolean0 = Utility.isSet(89, 89);
      boolean boolean1 = Utility.isJavaIdentifierPart('Z');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+_BYBJ2L3Kmx(d@dm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: _BYBJ2L3Kmx(d@dm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+_BYBJ2L3Kmx(d@dm");
      Utility.signatureToString("BzEC+qD~>.`|R(", false);
      try { 
        Utility.methodSignatureArgumentTypes("+_BYBJ2L3Kmx(d@dm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: +_BYBJ2L3Kmx(d@dm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = ".x!mP";
      try { 
        Utility.typeOfSignature(".x!mP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .x!mP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Utility.getSignature("\tdefault = ");
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, true);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Utility.compactClassName("@.", "HyXmVYifmaJp]8*", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte)29;
      byteArray0[8] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1676, (int) (byte) (-4), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/2 #/WIX>>n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /2 #/WIX>>n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = Utility.replace("\t\t", "\t\t", "\t\t");
      assertEquals("\t\t", string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Utility.signatureToString("S?y-qVeY%>Gs>kcD", true);
      try { 
        Utility.methodSignatureReturnType("short", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("F @9saWk`rK:dX%X");
      assertEquals((byte)6, byte0);
      
      byte[] byteArray0 = Utility.decode("F @9saWk`rK:dX%X", false);
      assertEquals(16, byteArray0.length);
      
      String string0 = Utility.format(76, (-1474), false, 'V');
      assertEquals("76", string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Utility.signatureToString("La%+qx^;VIL$VC?vV");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "a%+qx^", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = "getstatic";
      try { 
        Utility.methodSignatureToString("if_acmpeq", "-5", "getstatic", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_acmpeq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("JGYgac#");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Utility.clearBit(2228, 2228);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(2591, 2744);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantLong constantLong0 = new ConstantLong(2228);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, 2591, 2228);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Utility.getSignature("@?#RrOxbHr");
      // Undeclared exception!
      try { 
        Utility.signatureToString("[", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Utility.isJavaIdentifierPart('_');
      String string0 = "=G=8:[>iv";
      try { 
        Utility.typeOfSignature("=G=8:[>iv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =G=8:[>iv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Utility.signatureToString("La%+qx^;VIL$VC?vV");
      Utility.format(66, 66, false, 'o');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-59);
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 29331. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Utility.signatureToString("FULL", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("float", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte) (-25);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals("ifeq\t\t#4208", string0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Utility.getSignature("Zfnonnull");
      Utility.signatureToString("Zfnonnull", false);
      try { 
        Utility.methodSignatureArgumentTypes("clV^lV(W:#]j4St45.&", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: clV^lV(W:#]j4St45.&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Hi@^rG_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hi@^rG_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false);
      Utility.getSignature("java.lang.Object@7bffd3b7, java.lang.Object@1a03649");
      byte[] byteArray0 = null;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 16, 58, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R`3srQM#]nV$]jC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R`3srQM#]nV$]jC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = Utility.getSignature("&n+VjIk=");
      short short0 = Utility.searchOpcode("L&n+VjIk=;");
      assertEquals((short) (-1), short0);
      
      String string1 = Utility.signatureToString("L&n+VjIk=;", false);
      assertEquals("&n+VjIk=", string1);
      
      String string2 = Utility.accessToString((int) (short) (-1), false);
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string2);
      
      String string3 = Utility.convertString("L&n+VjIk=;");
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("5QTQ#e\",", false);
      assertArrayEquals(new byte[] {(byte)53, (byte)81, (byte)84, (byte)81, (byte)35, (byte)101, (byte)34, (byte)44}, byteArray0);
      
      short short0 = Utility.searchOpcode("5QTQ#e\",");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('x');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CH|wm#");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.convertString("Mjc\"M)j JVj");
      assertEquals("Mjc\\\"M)j JVj", string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Utility.signatureToString("La%+qx^;VIL$VC?vV");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Total of ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Total of ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Total of 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(fq('vfui6<(de3_u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (fq('vfui6<(de3_u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Utility.typeOfSignature("Total of ");
      int int0 = 81;
      Utility.accessToString(81);
      String string0 = "p=]P)oe";
      String string1 = "instanceof";
      String string2 = "areturn";
      boolean boolean0 = false;
      int int1 = (-1616);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)65;
      CodeException[] codeExceptionArray0 = new CodeException[9];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, (-1616));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("Illegally nested brackets:", stringArray0);
      String string0 = Utility.accessToString(46, true);
      String string1 = Utility.methodTypeToSignature("Illegally nested brackets:", stringArray0);
      assertEquals("()LIllegally;", string1);
      
      String string2 = Utility.compactClassName("private protected static", false);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String[] stringArray0 = Constants.INTERFACES_IMPLEMENTED_BY_ARRAYS;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Utility.typeOfSignature("C^|wm#");
      Utility.clearBit(2387, 2387);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "t-7!D{6";
      stringArray0[1] = "t-7!D{6";
      stringArray0[2] = "t-7!D{6";
      stringArray0[3] = "C^|wm#";
      stringArray0[4] = "t-7!D{6";
      stringArray0[5] = "t-7!D{6";
      stringArray0[6] = "C^|wm#";
      stringArray0[7] = "C^|wm#";
      Utility.methodTypeToSignature("t-7!D{6", stringArray0);
      Utility.getSignature(", ");
      try { 
        Utility.typeOfSignature("8VtR,OE)q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8VtR,OE)q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">KOwC@\"(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >KOwC@\"(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Utility.isJavaIdentifierPart('G');
      // Undeclared exception!
      try { 
        Utility.signatureToString("R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Utility.typeOfSignature("C3|wm#");
      try { 
        Utility.typeOfSignature("M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("C3|wm#");
      assertEquals((byte)5, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = "U5pD\\v{Ws(R?f2G8-_";
      try { 
        Utility.typeOfSignature("459");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 459
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = Utility.getSignature("short");
      assertEquals("S", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)12;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("be 0c", string1);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Utility.typeOfSignature("C^|wm#");
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = ": ";
      try { 
        Utility.typeOfSignature(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: : 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = "I}|[_A[uFU/";
      Utility.typeOfSignature("I}|[_A[uFU/");
      Utility.typeOfSignature("I}|[_A[uFU/");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0, true, true);
      Utility.compactClassName("{null}", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{null}", "{null}", "Usq;}5W1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {null}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = Utility.signatureToString("D", true);
      assertEquals("double", string0);
      
      String string1 = Utility.fillup("D", (-5434), false, 'm');
      assertEquals("D", string1);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("C^|wm#");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.compactClassName("z*u");
      assertEquals("z*u", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)5;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)41;
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte)5;
      byteArray1[6] = (byte)108;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Utility.getSignature(";");
      MockFile mockFile0 = new MockFile("monitorexit", "D;l;'HM][");
      MockFile mockFile1 = new MockFile(mockFile0, "breakpoint");
      File file0 = MockFile.createTempFile("L;;", "monitorexit", (File) mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "breakpoint");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(printStream0, objectArray0);
      assertEquals(13L, file0.length());
      
      boolean boolean0 = Utility.isJavaIdentifierPart(';');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-20);
      Utility.encode(byteArray0, true);
      Utility.compactClassName("sUR", "", true);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "$l$8b$I$A$A$A$A$A$A$A";
      Utility.toHexString(byteArray0);
      Utility.clearBit((-6253), 46);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("_k", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      try { 
        Utility.typeOfSignature("HyXmVYifmaJp]8*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HyXmVYifmaJp]8*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",pn-UcVmn9sXo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,pn-UcVmn9sXo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)78;
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[8];
      String string0 = "Erj5@rtWh5v#~c`p{VH";
      stringArray0[0] = "Erj5@rtWh5v#~c`p{VH";
      stringArray0[1] = "void";
      stringArray0[2] = "F.83P5ceW@)h,hj3";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      stringArray0[5] = "void";
      stringArray0[6] = "void";
      stringArray0[7] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j");
      Utility.setBit(691, 60);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "J&%q*c\"VU9\"(bfC", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("C^|wm#");
      assertEquals((byte)5, byte0);
      
      byte byte1 = Utility.typeOfSignature("Z5?_6(_Iv#>+L`");
      assertEquals((byte)4, byte1);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("QuVwM*2'Ks{1?%5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QuVwM*2'Ks{1?%5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit(588, 4);
      String string0 = "N!`J*CLd5y<^6x";
      // Undeclared exception!
      try { 
        Utility.signatureToString("N!`J*CLd5y<^6x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N!`J*CLd5y<^6x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = "PJvPa8b$o*";
      try { 
        Utility.typeOfSignature("PJvPa8b$o*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PJvPa8b$o*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("\t(wide)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t(wide)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = Utility.signatureToString("Illegal type: ", true);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      try { 
        Utility.typeOfSignature("? extends ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? extends 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      int int0 = Utility.clearBit(125, (-345));
      assertEquals(125, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte)82;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      short short0 = Utility.searchOpcode("i!u1020u%M");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.accessToString((int) (short) (-1), true);
      assertEquals("public private protected static final volatile transient native abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L>]>i9");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("Illegally nested brackets:");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Utility.typeOfSignature("C^|wm#");
      // Undeclared exception!
      try { 
        Utility.signatureToString("P>5]HP8/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P>5]HP8/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Utility.signatureToString("C^|wm#", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      MockFile mockFile0 = new MockFile(".class");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "char");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"char\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "Y|";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y|", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y|'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Utility.convertString("'");
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, true);
      assertEquals("{}", string0);
      
      String string1 = Utility.methodSignatureReturnType("SYSTEM");
      assertEquals("short", string1);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("L", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[9];
      try { 
        Utility.methodSignatureReturnType("O,Jl|{-9.4M4[sw&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O,Jl|{-9.4M4[sw&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = "U5pD\\v{Ws(R]f2G8-_";
      try { 
        Utility.typeOfSignature("U5pDv{Ws(R]f2G8-_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U5pDv{Ws(R]f2G8-_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      try { 
        Utility.typeOfSignature("N:74");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N:74
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = "&n+VjIk=";
      try { 
        Utility.typeOfSignature("&n+VjIk=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &n+VjIk=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      short short0 = Utility.searchOpcode("java.lang.Es+:;=6__I?MgluPa.E");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('\"');
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("java.lang.Es+:;=6__I?MgluPa.E", false);
      assertEquals("java.lang.Es+:;=6__I?MgluPa.E", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = Utility.format(54, 54, true, 'a');
      assertEquals("54aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("Class must not be null");
      try { 
        Utility.methodSignatureReturnType("3g&`,2i}}41D'y", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3g&`,2i}}41D'y'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = "3g&`,2i}}1D'y";
      try { 
        Utility.typeOfSignature("OhX,v`7NJ$j'q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OhX,v`7NJ$j'q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = Utility.convertString("org.apache.bcel.classfile.LineNumberTable");
      assertEquals("org.apache.bcel.classfile.LineNumberTable", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "org.apache.bcel.classfile.LineNumberTable";
      objectArray0[1] = (Object) "org.apache.bcel.classfile.LineNumberTable";
      objectArray0[2] = (Object) "org.apache.bcel.classfile.LineNumberTable";
      objectArray0[3] = (Object) "org.apache.bcel.classfile.LineNumberTable";
      objectArray0[4] = (Object) "org.apache.bcel.classfile.LineNumberTable";
      objectArray0[5] = (Object) "org.apache.bcel.classfile.LineNumberTable";
      Object object0 = new Object();
      objectArray0[6] = object0;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)3;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("0$M$D", string1);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokedynamic");
      Utility.compactClassName("putstatic");
      String string0 = Utility.methodSignatureReturnType("Xn]0}AI)CnX~fxKB9", true);
      assertEquals("char", string0);
      
      String string1 = Utility.compactClassName("!l+CuEStWF6wiF:.~", "Xn]0}AI)CnX~fxKB9", false);
      assertEquals("!l+CuEStWF6wiF:.~", string1);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Utility.format(684, (-346), true, '=');
      try { 
        Utility.methodSignatureToString("nFIue", "ez6C%!bZ", "ez6C%!bZ", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nFIue
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("Invalid type: ");
      Utility.compactClassName(")hSGs-_`kv");
      Utility.compactClassName("Invalid type: ", true);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Utility.isJavaIdentifierPart('G');
      String string0 = "G^aP";
      // Undeclared exception!
      try { 
        Utility.signatureToString("G^aP", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G^aP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Utility.clearBit((-1151), (-1151));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)12;
      byte byte0 = (byte)94;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte) (-110);
      byteArray0[8] = (byte) (-25);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 1427, true, '0');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("L", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Utility.signatureToString("FI");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)67;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 256, (int) (byte)2, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3g&`,2i}}1D'y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3g&`,2i}}1D'y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Utility.signatureToString("FI");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("I.`JC[g$y*2aY?J", "", "FI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: I.`JC[g$y*2aY?J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      int int0 = 1963;
      boolean boolean0 = false;
      Utility.format(1963, 1963, false, '6');
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Utility.getSignature(")hSGs-_`kv");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-37);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L)hSGs-_`kv;", "L)hSGs-_`kv;", "org.apache.bcel.classfile.ConstantMethodType", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L)hSGs-_`kv;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.compactClassName("\t\t%", false);
      assertEquals("\t\t%", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\t\t%";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"\t\t%\"}", string1);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.signatureToString("Vl<8tVQXs'AF^Kt0?r", true);
      String string0 = Utility.methodSignatureReturnType("Vl<8tVQXs'AF^Kt0?r", true);
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte) (-25);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = ")hSGs-_`kv";
      Utility.convertString(")hSGs-_`kv");
      try { 
        Utility.typeOfSignature(")hSGs-_`kv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )hSGs-_`kv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Utility.isJavaIdentifierPart(';');
      // Undeclared exception!
      try { 
        Utility.getSignature("[Z*`P6gL5LcM[*!p@{b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [Z*`P6gL5LcM[*!p@{b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)123;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("lshr", string0);
      
      String string1 = Utility.accessToString((int) (byte)65, true);
      assertEquals("public volatile", string1);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("FI");
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      Utility.isJavaIdentifierPart('z');
      Utility.compactClassName("ixor", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ixor", "ixor", "ixor");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ixor
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("K[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.signatureToString("V");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Es+:;=6__I?MgluPa/E", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Es+:;=6__I?MgluPa/E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      boolean boolean0 = true;
      Utility.compactClassName("~ J)q>GY8|5)ZR", "y9]bAJ -t lQ&@jD>", true);
      Utility.printArray(objectArray0);
      Utility.convertString("{java.lang.Object@40bf8963, java.lang.Object@431aa3d5}");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("~ J)q>GY8|5)ZR", true);
      Utility.getSignature("{java.lang.Object@40bf8963, java.lang.Object@431aa3d5}");
      Utility.getSignature("y9]bAJ -t lQ&@jD>");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("? super ", "~ J)q>GY8|5)ZR", "y9]bAJ -t lQ&@jD>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String string0 = Utility.replace("K[", "}0wJrZ", "K[");
      assertEquals("K[", string0);
      
      String string1 = Utility.accessToString(1202, true);
      assertEquals("private final transient abstract", string1);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Utility.convertString(")hSGs-_`kv");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(")hSGs-_`kv", ")hSGs-_`kv", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )hSGs-_`kv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Utility.replace("", "interfazace", "interfazace");
      // Undeclared exception!
      try { 
        Utility.signatureToString(".87XI[93AK{)O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `.87XI[93AK{)O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = "W=\"F";
      try { 
        Utility.decode("W=\"F", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = ")hSGs-_`kv";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("byte", (String) null, "byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = "K[";
      // Undeclared exception!
      try { 
        Utility.signatureToString("K[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("K[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = Utility.classOrInterface(84);
      assertEquals("class", string0);
      
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte) (-73);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("d9 f4 ec f1 2d 50 b7", string1);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.typeOfSignature("java.lang.Object@25e6d2bf, java.lang.Object@9b627d7, java.lang.Object@31786851");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@25e6d2bf, java.lang.Object@9b627d7, java.lang.Object@31786851
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Utility.convertString("*LE>b");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*LE>b");
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Utility.convertString("U[p[v{sHR?f2G8-_");
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Utility.convertString("*LE>b");
      Utility.typeOfSignature("*LE>b");
      try { 
        Utility.methodSignatureArgumentTypes("*LE>b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *LE>b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String string0 = Utility.convertString("org.apache.bcel.classfile.LocalVariable");
      assertEquals("org.apache.bcel.classfile.LocalVariable", string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode("ireturn");
      assertEquals((short)172, short0);
      
      String string1 = Utility.getSignature("InitObject");
      assertEquals("LInitObject;", string1);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Utility.isJavaIdentifierPart('i');
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(3-}M3@", "dup_x2", " /g$=ct}b0Rb", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3-}M3@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Y`F]NTG$}gTa/G(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y`F]NTG$}gTa/G('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Utility.fillup(" 6Cu(??o|5naIM{!oI6", 882, false, 'X');
      try { 
        Utility.methodSignatureReturnTypeu(??o|5naIM{!oI6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `u(??o|5naIM{!oI6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Utility.convertString("U5p[v{sHR?f2G8-_");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-16);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("=|['=N#7gH%'Uz#cdnJ", false);
      try { 
        Utility.methodSignatureArgumentTypes("U5p[\\v{sHR?f2G8-_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U5p[\\v{sHR?f2G8-_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.signatureToString("Invalid type: ");
      assertEquals("int", string0);
      
      String string1 = Utility.compactClassName("Invalid type: ");
      assertEquals("Invalid type: ", string1);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "putstatic", "putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-63);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("12 00 2a e3 c1 00 5c 00 c1", string0);
      
      boolean boolean0 = Utility.isSet((byte) (-29), (byte)0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      int int0 = Utility.setBit((byte) (-63), (byte)18);
      assertEquals((-63), int0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Object object0 = new Object();
      String string0 = Utility.convertString("*LE>b");
      assertEquals("*LE>b", string0);
      
      Utility.classOrInterface((-4168));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("*LE>b", "#n2v^]7QK4JV<rmp", "*LE>b", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *LE>b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = Utility.format(67, (-3305), false, 'Q');
      assertEquals("67", string0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Utility.isJavaIdentifierPart(';');
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.format((-1092181131), (-1092181131), true, 'g');
      assertEquals("-1092181131", string0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("@", "putstatic", "putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      String string0 = Utility.format(0, 0, true, '=');
      assertEquals("0", string0);
      
      String string1 = Utility.getSignature("drem");
      assertEquals("Ldrem;", string1);
      
      Utility.isSet((-559), (-591));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("C7\"%e`#(!uaW/bmTp", "0", " (?\"u %;!AO", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: C7\"%e`#(!uaW/bmTp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.fillup("U5p[v{sHR?f2G8-_", (-5434), false, 'm');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("U5p[v{sHR?f2G8-_", (String) null, "U5p[v{sHR?f2G8-_", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U5p[v{sHR?f2G8-_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      String string0 = "? extends ";
      int int0 = (-2753);
      Utility.getSignature("? extends ");
      boolean boolean0 = true;
      int int1 = (-4314);
      LocalVariable[] localVariableArray0 = new LocalVariable[3];
      int int2 = (-541);
      int int3 = 149;
      Constant[] constantArray0 = new Constant[8];
      int int4 = 1616;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)87;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -128
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('~');
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">-AZlQr{)@}^g(Em4";
      stringArray0[1] = "\t";
      String string0 = Utility.methodTypeToSignature("\t", stringArray0);
      assertEquals("(L>-AZlQr{)@}^g(Em4;L;)L;", string0);
      
      Utility.printArray((Object[]) stringArray0, false, false);
      Utility.accessToString(113);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-62);
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("breakpoint", string1);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      Utility.isJavaIdentifierPart('~');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t", "double", "oTdp#DEDt_;GJ=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Utility.fillup("drem", 0, true, '=');
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-5);
      byteArray0[0] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "long";
      stringArray0[3] = "getfield";
      stringArray0[3] = "getfield";
      stringArray0[4] = "getfield";
      stringArray0[5] = "getfield";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "fOw@";
      objectArray0[1] = (Object) "fOw@";
      objectArray0[2] = (Object) "fOw@";
      objectArray0[3] = (Object) "fOw@";
      objectArray0[4] = (Object) "fOw@";
      objectArray0[5] = (Object) "fOw@";
      objectArray0[6] = (Object) "fOw@";
      objectArray0[7] = (Object) "fOw@";
      objectArray0[8] = (Object) "fOw@";
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{fOw@, fOw@, fOw@, fOw@, fOw@, fOw@, fOw@, fOw@, fOw@}", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('p');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      int int0 = 869;
      Utility.isJavaIdentifierPart('_');
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("'", (String[]) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1117);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.format("if_icmpge", (Object[]) null);
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(printStream0, false, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.accessToString((-2301));
      Utility.decode("public private native interface abstract synthetic annotation enum", false);
      Utility.replace("public private native interface abstract synthetic annotation enum", "public private native interface abstract synthetic annotation enum", "public private native interface abstract synthetic annotation enum");
      Utility.isJavaIdentifierPart('1');
      Utility.searchOpcode("public private native interface abstract synthetic annotation enum");
      // Undeclared exception!
      try { 
        Utility.signatureToString("public private native interface abstract synthetic annotation enum", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public private native interface abstract synthetic annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, false, false);
      Utility.isJavaIdentifierPart('S');
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.Object@142548f9, java.lang.Object@1bd9e436, java.lang.Object@1fa32ce4, java.lang.Object@1607ba8d, java.lang.Object@28db5a34, java.lang.Object@7cf7e34d, java.lang.Object@7a35243b, java.lang.Object@51cd2a22, java.lang.Object@23b5d0d5";
      stringArray0[1] = ">-AZlQr{)@}^g(Em4";
      stringArray0[2] = "\t";
      stringArray0[3] = "!|";
      stringArray0[4] = "java.lang.Object@142548f9, java.lang.Object@1bd9e436, java.lang.Object@1fa32ce4, java.lang.Object@1607ba8d, java.lang.Object@28db5a34, java.lang.Object@7cf7e34d, java.lang.Object@7a35243b, java.lang.Object@51cd2a22, java.lang.Object@23b5d0d5";
      String string1 = Utility.methodTypeToSignature("!|", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-122);
      Utility.fillup("E;$7oB^", 14, false, 'm');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("E))-,/K(W6qm->", "~9Nq/LRe|-g", "}l6@h\"d-4i :4bOvo", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E))-,/K(W6qm->
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      MockPrintStream mockPrintStream0 = new MockPrintStream("impdep2");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "FXdm5W'R1opuGR<FT";
      objectArray0[1] = (Object) "FXdm5W'R1opuGR<FT";
      objectArray0[2] = (Object) "impdep2";
      objectArray0[3] = (Object) "FXdm5W'R1opuGR<FT";
      objectArray0[4] = (Object) "impdep2";
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[6] = (Object) fileSystemHandling0;
      objectArray0[7] = (Object) fileSystemHandling0;
      objectArray0[8] = (Object) fileSystemHandling0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)0;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 04 86 00", string0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String string0 = "4|V@|\"9?t18";
      // Undeclared exception!
      try { 
        Utility.signatureToString("4|V@|\"9?t18", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4|V@|\"9?t18'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = Utility.fillup("U5p[v{sHR?f2G8-_", (-5434), false, 'm');
      assertEquals("U5p[v{sHR?f2G8-_", string0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      String string0 = "$ikk2J{EcN";
      try { 
        Utility.typeOfMethodSignature("$ikk2J{EcN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $ikk2J{EcN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      String string0 = "x<Kak`V~";
      Utility.compactClassName("", "x<Kak`V~", true);
      String string1 = "E{AB9;7%f=l";
      String string2 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = "";
      Utility.isSet(241, 3);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("multianewarray", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: multianewarray
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Utility.getSignature("6");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte) (-20);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "^:D36b1>\"Kp,99 mr", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Utility.getSignature("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.compactClassName("sUR", "", true);
      assertEquals("sUR", string1);
      
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte) (-20);
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) (byte) (-20);
      objectArray0[5] = (Object) "rxdN0T*6@@[9q0zG`F^";
      objectArray0[6] = (Object) "sUR";
      objectArray0[7] = object0;
      Object object1 = new Object();
      objectArray0[8] = object1;
      Utility.printArray(objectArray0, true);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-20);
      byteArray1[1] = (byte) (-20);
      byteArray1[2] = (byte) (-20);
      byteArray1[3] = (byte) (-20);
      byteArray1[4] = (byte) (-20);
      byteArray1[5] = (byte) (-20);
      byteArray1[6] = (byte) (-20);
      byteArray1[7] = (byte) (-20);
      byteArray1[8] = (byte) (-20);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-2925), (byte) (-20));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-20), (int) (byte) (-20), false);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    <illegal opcode>\n6:    <illegal opcode>\n7:    <illegal opcode>\n8:    <illegal opcode>\n", string2);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-123);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("12 00 2a e3 c1 00 5c 00 85", string0);
      
      boolean boolean0 = Utility.isSet((byte) (-29), (byte)0);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "char";
      stringArray0[1] = "12 00 2a e3 c1 00 5c 00 85";
      stringArray0[2] = "12 00 2a e3 c1 00 5c 00 85";
      stringArray0[3] = "12 00 2a e3 c1 00 5c 00 85";
      stringArray0[4] = "12 00 2a e3 c1 00 5c 00 85";
      stringArray0[5] = "12 00 2a e3 c1 00 5c 00 85";
      stringArray0[6] = "12 00 2a e3 c1 00 5c 00 85";
      stringArray0[7] = "12 00 2a e3 c1 00 5c 00 85";
      stringArray0[8] = "12 00 2a e3 c1 00 5c 00 85";
      String string1 = Utility.methodTypeToSignature("12 00 2a e3 c1 00 5c 00 85", stringArray0);
      assertEquals("(CL12;L12;L12;L12;L12;L12;L12;L12;)L12;", string1);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-123);
      String string0 = Utility.toHexString(byteArray0);
      Utility.isSet((byte) (-29), (byte)0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)18;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte) (-123);
      objectArray0[3] = (Object) (byte)92;
      Object object0 = new Object();
      objectArray0[4] = object0;
      String string1 = Utility.printArray(objectArray0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      String string0 = "bM&T|Y#h<ie*rRQ`e";
      boolean boolean0 = false;
      Utility.compactClassName("bM&T|Y#h<ie*rRQ`e", false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "bM&T|Y#h<ie*rRQ`e";
      objectArray0[1] = (Object) "bM&T|Y#h<ie*rRQ`e";
      objectArray0[2] = (Object) "bM&T|Y#h<ie*rRQ`e";
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("bM&T|Y#h<ie*rRQ`e", "java.lang.", "bM&T|Y#h<ie*rRQ`e", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bM&T|Y#h<ie*rRQ`e
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Utility.setBit(96, 0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)62;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("41 95 3e", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "5T6:isNndD9&VY,";
      String string1 = Utility.methodTypeToSignature("5T6:isNndD9&VY,", stringArray0);
      assertEquals("(L5T6:isNndD9&VY,;)L5T6:isNndD9&VY,;", string1);
      
      String string2 = Utility.accessToString(0);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      String string0 = "U5p[\\v{sHR?f2G8-_";
      // Undeclared exception!
      try { 
        Utility.signatureToString("U5p[v{sHR?f2G8-_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U5p[v{sHR?f2G8-_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("", false);
      Utility.clearBit(4289, 255);
      Utility.format((-2329), 255, false, '.');
      int int0 = (-175);
      boolean boolean0 = true;
      Utility.fillup("", (-175), true, '$');
      String string1 = "4L'-BcB";
      int int1 = (-2234);
      int int2 = 0;
      LocalVariable[] localVariableArray0 = new LocalVariable[5];
      int int3 = 90;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      String string0 = "oJjz";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("oJjz", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `oJjz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      String string0 = "w_-zevgz}";
      boolean boolean0 = false;
      Utility.compactClassName("w_-zevgz}", "w_-zevgz}", false);
      try { 
        Utility.methodSignatureReturnType("&h){N!TX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{N!TX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      String string0 = "sH3hW4~)KRhh}g$3Th#";
      Utility.replace("sH3hW4~)KRhh}g$3Th#", "sH3hW4~)KRhh}g$3Th#", "sH3hW4~)KRhh}g$3Th#");
      Utility.getSignature("sH3hW4~)KRhh}g$3Th#");
      Utility.clearBit(5, 65);
      String string1 = "Iy_nV0k!iO";
      try { 
        Utility.decode("Iy_nV0k!iO", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      int int0 = (-959);
      Utility.accessToString((-959), false);
      String string0 = "c?N/6(y(^\"]Qcu|>P";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("public volatile abstract strictfp synthetic annotation enum", "", "c?N/6(y(^\"]Qcu|>P", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public volatile abstract strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      int int0 = (-2859);
      Utility.setBit((-2859), (-2725));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("s!nfK/mC", "s!nfK/mC", "s!nfK/mC", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s!nfK/mC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      byte[] byteArray0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      Utility.methodTypeToSignature("", stringArray0);
      String string0 = "E\\uH_= ]z>\\`\"r{AdS";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", string0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Utility.isSet(0, 241);
      Utility.searchOpcode("org.apache.bcel.classfile.Utility$JavaReader");
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.Utility$JavaReader", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$JavaReader
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      MockFile mockFile0 = new MockFile("char");
      File file0 = MockFile.createTempFile("char", "Null", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('O');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Null";
      objectArray0[1] = (Object) printWriter0;
      objectArray0[2] = (Object) "Null";
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) printWriter0;
      objectArray0[5] = (Object) mockFile0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) file0;
      objectArray0[8] = (Object) mockPrintWriter0;
      Utility.printArray(printWriter0, objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[2];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("org.apache.bcel.classfile.MethodParameter", "org.apache.bcel.classfile.MethodParameter");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"org.apache.bcel.classfile.MethodParameter\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("", "x<Kak`V~", true);
      String string1 = "E{AB9;7%f=l";
      boolean boolean0 = true;
      int int0 = 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      MockFile mockFile0 = new MockFile("\"G/=cB\"%Zh:");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"W\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Utility.accessToString((-929));
      try { 
        Utility.methodSignatureToString("", "", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Utility.classOrInterface(869);
      Utility.compactClassName("");
      String string0 = "$ikk2J{EcN";
      try { 
        Utility.typeOfMethodSignature("$ikk2J{EcN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $ikk2J{EcN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      short short0 = Utility.searchOpcode("(");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "E) ~@S~xP8LO";
      stringArray0[2] = "E) ~@S~xP8LO";
      stringArray0[3] = "E) ~@S~xP8LO";
      stringArray0[4] = "]xp,lO\\rDRh=q6`|C";
      stringArray0[5] = "(";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string0 = Utility.methodTypeToSignature("E) ~@S~xP8LO", stringArray0);
      assertEquals("(L;LE);LE);LE);L]xp,lO\\rDRh=q6`|C;L(;L;L;)LE);", string0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String string0 = "94aAXVL@=E]p";
      Utility.compactClassName("94aAXVL@=E]p", false);
      try { 
        Utility.typeOfMethodSignature("94aAXVL@=E]p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 94aAXVL@=E]p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      char char0 = ';';
      Utility.isJavaIdentifierPart(';');
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("3}O[f'i1-", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[f'i1-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String string0 = ":R";
      LocalVariableTable localVariableTable0 = null;
      try { 
        Utility.methodSignatureToString(":R", "Km\"|J3", "~mnE", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("RX8OX7.2]");
      Utility.replace("RX8OX7.2]", "Z]HkUQCE 5)", "RX8OX7.2]");
      int int0 = (-3645);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "RX8OX7.2]", (-3645), (-3645));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString(":g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("");
      ByteSequence byteSequence0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-27);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.setBit((byte) (-27), (byte) (-2));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-27);
      objectArray0[1] = (Object) (byte) (-2);
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfMethodSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      Utility.getSignature("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-20);
      Utility.encode(byteArray0, true);
      Utility.compactClassName("sUR", "", true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[2] = "sUR";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("rxdN0T*6@@[9q0zG`F^", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[9q0zG`F^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(",", "FXdm5W'R1opuGR<FT", ",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      int int0 = 23;
      Utility.accessToString(23, false);
      boolean boolean0 = false;
      Utility.decode("public private protected final", false);
      Utility.accessToString(23, false);
      MockFile mockFile0 = new MockFile("public private protected final");
      MockFile mockFile1 = new MockFile(mockFile0, "public private protected final");
      mockFile0.getCanonicalPath();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile1, "public private protected final");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // public private protected final
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("[]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
