/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:26:54 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Frame;
import wheel.asm.Item;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 6, "", "", "", "NS:kTb");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putLong(32);
      fieldWriter0.put(byteVector1);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1561), "RuntimeInvisibleAnnotations", "eyCOz;`Z,?", "NS:kTb", "eyCOz;`Z,?");
      ByteVector byteVector0 = new ByteVector(49);
      fieldWriter0.visitAnnotation("eyCOz;`Z,?", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1558), "NS:kTb", "RuntimeInvisibleAnnotations", "NS:kTb", (Object) null);
      ByteVector byteVector0 = new ByteVector(2);
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4, "r'&JG", "Dw8j,wm,mFYQZE\"7Y|k", "Dw8j,wm,mFYQZE\"7Y|k", "r'&JG");
      ByteVector byteVector0 = new ByteVector(4);
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1558), "NS:kTb", "RuntimeInvisibleAnnotations", "NS:kTb", (Object) null);
      ByteVector byteVector0 = new ByteVector(1);
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, (-1558), "NS:kTb", "NS:kTb", "NS:kTb", fieldWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.FieldWriter@8
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1568), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "NS:kTb", (Object) null);
      ByteVector byteVector0 = new ByteVector(2);
      fieldWriter0.visitAnnotation("NS:kTb", true);
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter1.put(byteVector0);
      assertSame(fieldWriter1, fieldWriter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 340, "", "", (String) null, "");
      ByteVector byteVector0 = new ByteVector(1);
      byteVector0.put11(1, 340);
      ByteVector byteVector1 = byteVector0.putLong((-1558));
      fieldWriter0.put(byteVector1);
      fieldWriter0.visitAnnotation("NS:kTb", true);
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("NS:kTb");
      ByteVector byteVector2 = byteVector1.putLong((-4684L));
      fieldWriter0.put(byteVector2);
      Attribute attribute1 = attribute0.next;
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(7);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "RuntimeInvisibleAnnotations", "eyCOz;`,?", "NS:kTb", "eyCOz;`,?");
      Attribute attribute0 = new Attribute("RuntimeInvisibleAnnotations");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "", "=GpFAjLU");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = new ByteVector();
      ByteVector byteVector2 = byteVector1.putLong(6);
      fieldWriter0.put(byteVector0);
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(50);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1558), "NS:kTb", "RuntimeInvisibleAnnotations", "NS:kTb", (Object) null);
      fieldWriter0.visitAnnotation("", false);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      classWriter0.version = (-1550);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1550), "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "NS:kTb", "RuntimeInvisibleAnnotations");
      ByteVector byteVector0 = new ByteVector(2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteVector0.put11(1, 131072);
      ByteVector byteVector1 = byteVector0.putLong(23L);
      fieldWriter0.put(byteVector1);
      fieldWriter0.visitAnnotation("RuntimeInvisibleAnnotations", true);
      fieldWriter0.getSize();
      Item[] itemArray0 = new Item[9];
      Item item0 = classWriter0.newMethodItem("RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "NS:kTb", true);
      itemArray0[0] = item0;
      Item item1 = new Item((-1108), item0);
      itemArray0[1] = item1;
      Item item2 = classWriter0.newClassItem("iGcPR<qI< }m|jRB5^+");
      itemArray0[2] = item2;
      Item item3 = new Item(131072);
      itemArray0[3] = item3;
      Item item4 = classWriter0.newDouble((-1200.784191));
      itemArray0[5] = item4;
      Item item5 = new Item();
      itemArray0[5] = item5;
      Item item6 = classWriter0.newMethodItem("", "StackMap", "RuntimeInvisibleAnnotations", true);
      itemArray0[6] = item6;
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(item3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@17
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
