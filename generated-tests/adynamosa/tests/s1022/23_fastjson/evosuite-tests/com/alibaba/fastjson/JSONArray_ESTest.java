/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 09:45:50 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 614;
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONArray0.isEmpty();
      jSONArray1.fluentRemove(591);
      jSONArray2.fluentRetainAll(jSONArray0);
      jSONArray1.add(30, (Object) serializeConfig0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      JSONArray jSONArray3 = new JSONArray();
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.JSONArray", treeMap0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[3] = serializerFeature3;
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.serializer.SerializeConfig@70
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray2 = jSONArray1.fluentSet(37, integer0);
      Integer integer1 = new Integer(30);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(linkedList0);
      jSONArray3.containsAll(jSONArray2);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46", 30);
      jSONArray3.add((Object) integer1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getContext();
      ParserConfig.getGlobalInstance();
      jSONArray2.getBigInteger(30);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.addAll(0, (Collection<?>) linkedList0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray3.getLong(30);
      jSONArray3.getInteger(37);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray((-3289));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3289, Size: 78
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray2 = jSONArray1.fluentSet(37, integer0);
      Integer integer1 = new Integer(30);
      JSONArray jSONArray3 = new JSONArray(30);
      jSONArray3.containsAll(jSONArray2);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46", 30);
      jSONArray3.add((Object) integer1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultJSONParser0.getContext();
      ParserConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      jSONArray2.getBigInteger(30);
      jSONArray3.getShort(0);
      JSONArray jSONArray4 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray4.getIntValue(2860);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2860, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray2 = jSONArray1.fluentSet(37, integer0);
      Integer integer1 = new Integer(30);
      JSONArray jSONArray3 = new JSONArray(30);
      jSONArray3.containsAll(jSONArray2);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46", 30);
      jSONArray3.add((Object) integer1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultJSONParser0.getContext();
      // Undeclared exception!
      try { 
        JSON.parse("Z", 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      MockDate mockDate0 = new MockDate((-32), (-32), 30);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(30, 30);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(linkedList0);
      jSONArray3.containsAll(jSONArray2);
      jSONArray0.fluentSet(30, jSONArray3);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray2 = jSONArray1.fluentSet(37, integer0);
      Integer integer1 = new Integer(30);
      JSONArray jSONArray3 = new JSONArray(30);
      jSONArray3.containsAll(jSONArray2);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46", 30);
      jSONArray3.add((Object) integer1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultJSONParser0.getContext();
      ParserConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      jSONArray2.getBigInteger(30);
      linkedList0.add((Object) null);
      Integer integer2 = new Integer((-3419));
      jSONArray3.fluentClear();
      JSONArray jSONArray4 = jSONArray1.fluentRemove(30);
      jSONArray4.getJSONArray(0);
      jSONArray2.getTimestamp(0);
      // Undeclared exception!
      try { 
        jSONArray3.getString(169);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 169, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray1.stream();
      JSONArray jSONArray2 = jSONArray0.fluentSet(1669, "1.2.46");
      SerializeConfig.getGlobalInstance();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.getSqlDate(30);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(1650);
      JSON.defaultTimeZone = null;
      jSONArray3.getObject(37, (Type) parameterizedTypeImpl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray3.addAll(1658, (Collection<?>) jSONArray0);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      jSONArray0.setComponentType(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        jSONArray2.getShortValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray2 = jSONArray1.fluentSet(37, integer0);
      Integer integer1 = new Integer(30);
      JSONArray jSONArray3 = new JSONArray(30);
      jSONArray3.containsAll(jSONArray2);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46", 30);
      jSONArray3.add((Object) integer1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getContext();
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray2.fluentRemove(30);
      ConcurrentSkipListMap<SequenceInputStream, Integer> concurrentSkipListMap0 = new ConcurrentSkipListMap<SequenceInputStream, Integer>();
      Feature feature0 = Feature.DisableFieldSmartMatch;
      jSONArray0.set(0, feature0);
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        jSONArray1.get(2372);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2372, Size: 37
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(43);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) linkedList0);
      jSONArray1.iterator();
      jSONArray1.lastIndexOf(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.subList(2181, (-16));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2181) > toIndex(-16)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray1.stream();
      JSONArray jSONArray2 = jSONArray0.fluentSet(1669, "1.2.46");
      SerializeConfig.getGlobalInstance();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.getSqlDate(30);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(1650);
      jSONArray3.getObject(37, (Type) parameterizedTypeImpl0);
      jSONArray3.equals(parameterizedTypeImpl0);
      jSONArray0.addAll(37, (Collection<?>) jSONArray1);
      jSONArray2.getShort(1658);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig.getGlobalInstance();
      jSONArray3.fluentRemove(30);
      JSON.parse("", 30);
      ParserConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      jSONArray0.indexOf((Object) null);
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      jSONArray2.toJavaList(class1);
      LinkedHashSet<List<String>> linkedHashSet0 = new LinkedHashSet<List<String>>();
      jSONArray0.fluentAddAll(30, (Collection<?>) linkedHashSet0);
      JSON.parseArray("", class0);
      jSONArray3.remove((Object) null);
      assertEquals(3336, jSONArray3.size());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray1.stream();
      jSONArray0.fluentSet(1669, "1.2.46");
      SerializeConfig.getGlobalInstance();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.getSqlDate(30);
      JSONArray jSONArray2 = jSONArray0.fluentRemove(1650);
      JSON.defaultTimeZone = null;
      jSONArray2.getObject(37, (Type) parameterizedTypeImpl0);
      jSONArray2.equals(parameterizedTypeImpl0);
      jSONArray2.addAll(1658, (Collection<?>) jSONArray0);
      jSONArray1.getShort(1658);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig.getGlobalInstance();
      jSONArray2.fluentRemove(1669);
      // Undeclared exception!
      try { 
        JSON.parse("Z", 30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      MockDate mockDate0 = new MockDate(37, (-32), 30);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray2 = jSONArray1.fluentSet(37, integer0);
      Integer integer1 = new Integer(30);
      JSONArray jSONArray3 = new JSONArray(jSONArray1);
      jSONArray2.fluentRetainAll(jSONArray0);
      Collection<Object> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray2.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), jSONArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Z";
      stringArray0[1] = "Z";
      stringArray0[2] = "Z";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "Z";
      stringArray0[5] = "";
      stringArray0[6] = "1.2.46";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Set<String> set0 = simplePropertyPreFilter0.getExcludes();
      jSONArray1.containsAll(set0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 30);
      Feature feature0 = Feature.SupportAutoType;
      jSONArray0.add((Object) feature0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getContext();
      ParserConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.a\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray2 = jSONArray1.fluentSet(37, integer0);
      Integer integer1 = new Integer(30);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(linkedList0);
      jSONArray3.containsAll(jSONArray2);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46", 30);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z");
      defaultJSONParser0.getContext();
      ParserConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      jSONArray2.getBigInteger(30);
      JSONArray jSONArray4 = jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      JSONArray jSONArray5 = jSONArray3.fluentAddAll((Collection<?>) jSONArray4);
      jSONArray5.getComponentType();
      jSONArray3.getInteger(30);
      JSON.parseArray("");
      float float0 = jSONArray2.getFloatValue(0);
      assertEquals(152, jSONArray2.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      Integer integer0 = new Integer(30);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z");
      JSONArray jSONArray2 = jSONArray1.fluentSet(37, integer0);
      Integer integer1 = new Integer(30);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(linkedList0);
      jSONArray3.containsAll(jSONArray2);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46", 30);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getContext();
      ClassLoader.getSystemClassLoader();
      jSONArray3.getBigInteger(2);
      jSONReaderScanner0.numberString();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte) (-22);
      byteArray0[7] = (byte) (-99);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray4 = jSONArray0.fluentSet(642, integer0);
      JSONArray jSONArray5 = jSONArray0.fluentAddAll((Collection<?>) jSONArray4);
      jSONArray5.getString(37);
      jSONArray0.listIterator(2);
      assertEquals(1286, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.containsAll(jSONArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Z", 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getContext();
      ParserConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      int int0 = 37;
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray2 = jSONArray1.fluentSet(37, integer0);
      Integer integer1 = new Integer(30);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(linkedList0);
      jSONArray3.containsAll(jSONArray2);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46", 30);
      jSONArray0.fluentAdd((Object) integer0);
      jSONArray1.getBooleanValue(0);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(37, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Locale$LanguageRange
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Z");
      Integer integer0 = new Integer((-2073));
      JSON.toJSON((Object) integer0);
      jSONArray0.add((Object) integer0);
      jSONArray1.getLongValue(0);
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue(3125);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3125, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      MockDate mockDate0 = new MockDate(37, (-393217), 30);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray2 = jSONArray1.fluentSet(37, integer0);
      Integer integer1 = new Integer(30);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(linkedList0);
      jSONArray3.containsAll(jSONArray2);
      JSONObject jSONObject0 = new JSONObject(776, true);
      jSONArray0.getFloat(30);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        jSONArray0.add(776, (Object) sequenceInputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 776, Size: 38
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-393217), (Object) sequenceInputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -393217, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = null;
      ParserConfig parserConfig1 = new ParserConfig();
      JSON.toJSON((Object) jSONArray0, parserConfig1);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[4] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.SortField;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[4] = serializerFeature2;
      serializerFeatureArray0[7] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[6] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[7] = serializerFeature5;
      PipedInputStream pipedInputStream0 = new PipedInputStream(30);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, (InputStream) null);
      jSONArray0.indexOf(sequenceInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig serializeConfig0 = new SerializeConfig(30, false);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONString((Object) jSONArray0, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      jSONArray2.getByte(30);
      int int0 = 1;
      jSONArray0.getByte(1);
      jSONArray1.getString(236);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z", parserConfig0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.fluentPut("Q(7XD4lG1,-", (Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject1 = jSONObject0.fluentRemove((Object) null);
      JSON.handleResovleTask(defaultJSONParser0, jSONObject1);
      jSONArray1.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray2.getInteger(1680);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1.2.46\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UhvK@{^");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-27);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray2.getDate(614);
      JSONArray jSONArray3 = jSONArray1.fluentRemove(591);
      jSONArray3.fluentAdd(30, (Object) "Z");
      jSONArray0.set(30, (Object) null);
      ParserConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      JSON.DEFAULT_PARSER_FEATURE = 30;
      jSONArray1.getBigInteger(1653);
      jSONArray2.getDoubleValue(30);
      // Undeclared exception!
      jSONArray2.fluentSet(1107297537, (Object) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "UhvK@{^");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      jSONArray2.getDate(614);
      jSONArray1.fluentRemove(591);
      jSONArray0.set(30, (Object) null);
      ParserConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      JSON.DEFAULT_PARSER_FEATURE = 30;
      jSONArray1.getBigInteger(1653);
      jSONArray2.getDoubleValue(30);
      // Undeclared exception!
      jSONArray2.fluentSet(1107297537, (Object) null);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray2 = jSONArray1.fluentSet(37, integer0);
      Integer integer1 = new Integer(30);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(linkedList0);
      jSONArray3.containsAll(jSONArray2);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46", 30);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z");
      defaultJSONParser0.getContext();
      ParserConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      jSONArray2.getBigInteger(30);
      jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray3.fluentRemoveAll(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)30;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray1 = jSONArray0.fluentSet(30, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean((byte)107);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 107, Size: 31
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-94);
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)30;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray1 = jSONArray0.fluentSet(30, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean((byte)107);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 107, Size: 31
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      jSONArray1.getByteValue(30);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes((Object) serializeConfig0, serializeConfig0, serializerFeatureArray0);
      jSONArray0.isEmpty();
      JSONArray jSONArray3 = jSONArray1.fluentRemove(591);
      SerializeConfig serializeConfig1 = new SerializeConfig(false);
      jSONArray1.isEmpty();
      JSONArray jSONArray4 = jSONArray3.fluentRemove(30);
      jSONArray4.fluentRetainAll(jSONArray1);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray2.addAll(30, (Collection<?>) jSONArray3);
      JSONArray jSONArray5 = jSONArray4.fluentRemove(89);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z");
      jSONArray4.fluentRetainAll(jSONArray0);
      jSONArray3.getShort(614);
      JSONArray jSONArray6 = new JSONArray();
      jSONArray5.getIntValue(30);
      JSONArray jSONArray7 = new JSONArray(jSONArray0);
      JSONArray jSONArray8 = jSONArray1.fluentRetainAll(jSONArray3);
      PipedInputStream pipedInputStream0 = new PipedInputStream(89);
      jSONArray8.fluentAdd(30, (Object) pipedInputStream0);
      // Undeclared exception!
      try { 
        jSONArray7.getDouble(30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.io.PipedInputStream@4382a2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = (-393217);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      MockDate mockDate0 = new MockDate(30, (-393217), 30);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray2 = jSONArray1.fluentSet(30, integer0);
      Integer integer1 = new Integer(30);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(linkedList0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46", 30);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getContext();
      jSONArray3.getJSONObject(2);
      jSONArray0.getFloat(30);
      jSONArray2.fluentAddAll((Collection<?>) jSONArray1);
      System.setCurrentTimeMillis(30);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(945);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 945, Size: 62
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      jSONArray1.getByteValue(30);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      JSON.toJSONBytes((Object) serializeConfig0, serializeConfig0, serializerFeatureArray0);
      jSONArray0.isEmpty();
      JSONArray jSONArray3 = jSONArray1.fluentRemove(591);
      SerializeConfig serializeConfig1 = new SerializeConfig(false);
      jSONArray1.isEmpty();
      JSONArray jSONArray4 = jSONArray3.fluentRemove(30);
      jSONArray4.fluentRetainAll(jSONArray1);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray2.addAll(30, (Collection<?>) jSONArray3);
      JSONArray jSONArray5 = jSONArray4.fluentRemove(89);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z");
      jSONArray4.fluentRetainAll(jSONArray0);
      jSONArray3.getShort(614);
      JSONArray jSONArray6 = new JSONArray();
      jSONArray5.getIntValue(30);
      jSONArray4.retainAll(jSONArray1);
      JSONArray jSONArray7 = new JSONArray(jSONArray0);
      // Undeclared exception!
      jSONArray1.fluentRetainAll(jSONArray3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      jSONArray1.getByteValue(30);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONArray0.isEmpty();
      JSONArray jSONArray3 = jSONArray1.fluentRemove(591);
      SerializeConfig serializeConfig1 = new SerializeConfig(false);
      jSONArray1.isEmpty();
      JSONArray jSONArray4 = jSONArray3.fluentRemove(30);
      jSONArray4.fluentRetainAll(jSONArray1);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      JSONArray jSONArray5 = jSONArray4.fluentRemove(89);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z");
      jSONArray4.fluentRetainAll(jSONArray0);
      jSONArray3.getShort(614);
      JSONArray jSONArray6 = new JSONArray();
      jSONArray5.getIntValue(30);
      jSONArray4.retainAll(jSONArray1);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z", parserConfig0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.fluentPut((String) null, jSONArray4);
      JSON.handleResovleTask(defaultJSONParser0, jSONObject1);
      jSONArray2.getComponentType();
      jSONArray3.getInteger(591);
      float float0 = jSONArray3.getFloatValue(1659);
      assertEquals(1678, jSONArray3.size());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray0.fluentSet(1680, "1.2.46");
      jSONArray1.getByteValue(30);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONArray0.isEmpty();
      JSONArray jSONArray2 = jSONArray1.fluentRemove(591);
      SerializeConfig serializeConfig1 = new SerializeConfig(false);
      jSONArray1.isEmpty();
      JSONArray jSONArray3 = jSONArray2.fluentRemove(30);
      jSONArray3.fluentRetainAll(jSONArray1);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      JSONArray jSONArray4 = jSONArray3.fluentRemove(89);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z");
      jSONArray3.fluentRetainAll(jSONArray0);
      jSONArray2.getShort(614);
      JSONArray jSONArray5 = new JSONArray();
      jSONArray4.getIntValue(30);
      jSONArray3.retainAll(jSONArray1);
      JSONArray jSONArray6 = new JSONArray(jSONArray0);
      jSONArray1.fluentRetainAll(jSONArray2);
      jSONArray6.getDouble(30);
      // Undeclared exception!
      try { 
        JSON.parseArray("f/%-#G!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      jSONArray0.isEmpty();
      jSONArray2.getDate(614);
      jSONArray1.fluentRemove(591);
      // Undeclared exception!
      try { 
        jSONArray0.set((-1767), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add((JSONObject) null);
      jSONArray0.containsAll(linkedList0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONArray jSONArray1 = new JSONArray();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(30);
      jSONArray1.writeJSONString((Appendable) charArrayWriter0);
      int int0 = 1576;
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(1576);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1576, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      jSONArray0.isEmpty();
      jSONArray2.getDate(614);
      jSONArray1.fluentRemove(591);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z");
      jSONArray2.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getByte(1680);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1680, Size: 1680
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray0.fluentSet(30, "1.2.46");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(30);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1.2.46\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      jSONArray1.getByteValue(186);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONArray0.isEmpty();
      JSONArray jSONArray3 = jSONArray1.fluentRemove(591);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONArray jSONArray4 = jSONArray2.fluentRetainAll(jSONArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      jSONArray2.clear();
      jSONArray2.set(1680, jSONArray4);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      parserConfig0.setDefaultClassLoader(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 1680);
      LinkedList<SequenceInputStream> linkedList0 = new LinkedList<SequenceInputStream>();
      JSONArray jSONArray5 = jSONArray4.fluentAdd((Object) jSONArray1);
      jSONArray5.getComponentType();
      jSONArray1.fluentAddAll((Collection<?>) jSONArray3);
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      jSONArray1.getObject(1659, class0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll((-1302), (Collection<?>) jSONArray3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1302, Size: 3364
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.contains((Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      assertFalse(jSONArray2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      boolean boolean0 = jSONArray0.containsAll(linkedList0);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      String[] stringArray0 = new String[4];
      stringArray0[1] = "Z";
      stringArray0[2] = "Z";
      boolean boolean1 = jSONArray0.contains((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)30;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray1.toJSONString();
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      jSONArray2.getBoolean((byte)107);
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray1.getObject(59, (Type) class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Locale.LanguageRange> class2 = Locale.LanguageRange.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class2);
      jSONArray1.setComponentType(class1);
      short short0 = jSONArray0.getShortValue(30);
      assertEquals(1681, jSONArray0.size());
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONArray0.isEmpty();
      JSONArray jSONArray3 = jSONArray1.fluentRemove(591);
      JSONArray jSONArray4 = jSONArray2.fluentRetainAll(jSONArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray4.fluentRemove(1643);
      jSONArray3.getBooleanValue(30);
      jSONArray2.getShort(30);
      jSONArray0.fluentRemove(1658);
      jSONArray2.fluentAdd(102, (Object) uTF8Decoder0);
      double double0 = jSONArray0.getDoubleValue(30);
      assertEquals(1679, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig.getGlobalInstance();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(1680);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 1.2.46
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      jSONArray1.getByteValue(186);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONArray0.isEmpty();
      JSONArray jSONArray3 = jSONArray1.fluentRemove(591);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONArray jSONArray4 = jSONArray2.fluentRetainAll(jSONArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      jSONArray2.set(1680, jSONArray4);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 1680);
      LinkedList<SequenceInputStream> linkedList0 = new LinkedList<SequenceInputStream>();
      JSONArray jSONArray5 = jSONArray4.fluentAdd((Object) jSONArray1);
      jSONArray5.getComponentType();
      JSONArray jSONArray6 = jSONArray1.fluentAddAll((Collection<?>) jSONArray3);
      jSONArray6.add((Object) jSONArray1);
      jSONArray0.getSqlDate(2493);
      assertEquals(3365, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray0.fluentSet(1680, "1.2.46");
      jSONArray1.getByteValue(186);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jSONArray0.fluentRetainAll(jSONArray1);
      byte[] byteArray0 = null;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.AllowSingleQuotes;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.IgnoreNotMatch;
      featureArray0[1] = feature1;
      JSON.parse((byte[]) null, 199, 30, (CharsetDecoder) uTF8Decoder0, featureArray0);
      jSONArray1.getBigDecimal(30);
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(1680);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 1.2.46
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)107;
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      ParserConfig parserConfig0 = new ParserConfig(true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        jSONArray0.set((byte) (-117), sequenceInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray1 = jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig.getGlobalInstance();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.getSqlDate(30);
      JSONArray jSONArray2 = jSONArray0.fluentRemove(1650);
      jSONArray2.getObject(37, (Type) parameterizedTypeImpl0);
      jSONArray2.equals(parameterizedTypeImpl0);
      jSONArray0.retainAll(jSONArray2);
      assertEquals(1680, jSONArray0.size());
      
      jSONArray1.toArray();
      assertEquals(1680, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray1.toJSONString();
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      jSONArray2.getBoolean((byte)107);
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray1.getObject(59, (Type) class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Locale.LanguageRange> class2 = Locale.LanguageRange.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class2);
      jSONArray1.setComponentType(class1);
      assertEquals(1681, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = 614;
      JSONArray jSONArray0 = new JSONArray(614);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "Y?aBcdgBC7ar8H?~cG");
      jSONArray0.containsAll(jSONArray1);
      Class<String> class0 = String.class;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Z0e0hiN:", 3947);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getContext();
      JSONObject jSONObject0 = new JSONObject();
      defaultJSONParser0.getContext();
      ParseContext parseContext0 = new ParseContext((ParseContext) null, jSONArray2, class0);
      JSONArray jSONArray3 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray3.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      String string0 = "Y?aBcdgBC7ar8H?~cG";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "Y?aBcdgBC7ar8H?~cG");
      jSONArray2.getByte(84);
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      SequenceInputStream[] sequenceInputStreamArray0 = new SequenceInputStream[0];
      // Undeclared exception!
      try { 
        jSONArray1.toArray(sequenceInputStreamArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-1);
      jSONArray0.isEmpty();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray1.toJSONString();
      jSONArray0.fluentSet(1680, "1.2.46");
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray1.getObject(59, (Type) class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Locale.LanguageRange> class2 = Locale.LanguageRange.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class2);
      jSONArray0.add((Object) null);
      assertEquals(1682, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONArray0.isEmpty();
      int int0 = 591;
      jSONArray1.fluentRemove(591);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      jSONArray1.add(30, (Object) serializeConfig0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      JSONArray jSONArray4 = jSONArray3.fluentRemove(1655);
      jSONArray0.equals(jSONArray4);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(30, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-117);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.contains(class0);
      JSONArray jSONArray2 = new JSONArray(2393);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) linkedList0);
      JSONArray jSONArray4 = jSONArray3.fluentRemove((Object) linkedList0);
      Class<Object> class1 = Object.class;
      List<Object> list0 = jSONArray4.toJavaList(class1);
      JSONArray jSONArray5 = new JSONArray(list0);
      // Undeclared exception!
      try { 
        jSONArray5.listIterator(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONArray0.isEmpty();
      JSONArray jSONArray3 = jSONArray1.fluentRemove(591);
      Class<Annotation> class0 = Annotation.class;
      jSONArray3.getObject(800, class0);
      JSONArray jSONArray4 = jSONArray2.fluentRetainAll(jSONArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      JSONArray jSONArray5 = jSONArray4.fluentRemove(1643);
      jSONArray0.equals(jSONArray5);
      jSONArray2.getShort(30);
      assertEquals(1679, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONArray0.isEmpty();
      jSONArray1.fluentRemove(591);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      JSONArray jSONArray4 = jSONArray3.fluentRemove(1643);
      jSONArray0.equals(jSONArray4);
      jSONArray2.getShort(30);
      assertEquals(1679, jSONArray2.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      jSONArray1.getByteValue(186);
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONArray0.isEmpty();
      JSONArray jSONArray3 = jSONArray1.fluentRemove(591);
      JSONArray jSONArray4 = jSONArray2.fluentRetainAll(jSONArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      Feature[] featureArray0 = new Feature[0];
      JSON.parse((byte[]) null, 30, 1700, charsetDecoder0, featureArray0);
      jSONArray4.getBigDecimal(30);
      jSONArray3.getTimestamp(548);
      boolean boolean0 = jSONArray2.isEmpty();
      assertEquals(1680, jSONArray2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.toJSONString();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1680, "1.2.46");
      Class<Field> class0 = Field.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray0.getObject(59, (Type) class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Locale.LanguageRange> class2 = Locale.LanguageRange.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class2);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONArray1.set((byte) (-1), linkedList0);
      assertEquals(1682, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray1.toJSONString();
      jSONArray0.fluentSet(1680, "1.2.46");
      Class<Annotation> class0 = Annotation.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray1.getObject(59, (Type) class1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Locale.LanguageRange> class2 = Locale.LanguageRange.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) integer0);
      jSONArray0.fluentSet(30, integer0);
      SerializeConfig.getGlobalInstance();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray1.getSqlDate(1);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRemove(30);
      jSONArray3.equals((Object) null);
      assertEquals(61, jSONArray1.size());
      assertEquals(61, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONString((Object) jSONArray0, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      jSONArray2.getByte(84);
      jSONArray0.getByte(1);
      jSONArray1.getString(236);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentRetainAll(jSONArray1);
      Class<String> class0 = String.class;
      List<String> list0 = jSONArray4.toJavaList(class0);
      JSON.toJSON((Object) list0, serializeConfig0);
      jSONArray0.getByte(30);
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONArray0.isEmpty();
      JSONArray jSONArray3 = jSONArray1.fluentRemove(591);
      JSONArray jSONArray4 = jSONArray2.fluentRetainAll(jSONArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.REPLACE;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onUnmappableCharacter(codingErrorAction0);
      Feature[] featureArray0 = new Feature[0];
      JSON.parse((byte[]) null, 30, 1719, charsetDecoder0, featureArray0);
      jSONArray4.getBigDecimal(30);
      jSONArray3.getTimestamp(548);
      assertEquals(1680, jSONArray1.size());
      assertEquals(1680, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONArray0.isEmpty();
      JSONArray jSONArray3 = jSONArray1.fluentRemove(591);
      jSONArray3.getShort(614);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Collection<Annotation> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray2.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray2 = jSONArray1.fluentSet(37, integer0);
      Integer integer1 = new Integer(30);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(linkedList0);
      jSONArray3.containsAll(jSONArray2);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46", 30);
      jSONArray3.add((Object) integer1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getContext();
      ParserConfig.getGlobalInstance();
      ClassLoader.getSystemClassLoader();
      jSONArray2.getBigInteger(30);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      Set<String> set0 = jSONArray1.defaultLocale.getUnicodeLocaleKeys();
      jSONArray2.fluentRemoveAll(set0);
      jSONArray3.getShortValue(0);
      jSONArray0.getShort(0);
      assertEquals(78, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteNullNumberAsZero;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONString((Object) jSONArray0, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      jSONArray2.getByte(84);
      jSONArray0.getByte(1);
      jSONArray1.getString(236);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      jSONArray3.fluentRetainAll(jSONArray1);
      jSONArray1.getBigDecimal(1022);
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      jSONArray0.getObject(0, class0);
      assertEquals(1680, jSONArray0.size());
      
      int int0 = jSONArray2.getIntValue(30);
      assertEquals(1680, jSONArray2.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0, parserConfig0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[4] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.SortField;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.SkipTransientField;
      SerializerFeature serializerFeature4 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[4] = serializerFeature4;
      serializerFeatureArray0[7] = serializerFeature3;
      SerializerFeature serializerFeature5 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[6] = serializerFeature5;
      SerializerFeature serializerFeature6 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[7] = serializerFeature6;
      JSONArray jSONArray2 = jSONArray0.fluentSet(88, (Object) null);
      jSONArray2.getJSONArray(88);
      jSONArray1.getLong(0);
      jSONArray2.getInteger(30);
      Class<Annotation> class0 = Annotation.class;
      jSONArray2.toJavaList(class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate((-2497));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray0.fluentSet(1680, "1.2.46");
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(1680);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig.getGlobalInstance();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.getSqlDate(30);
      JSONArray jSONArray1 = jSONArray0.fluentRemove(1650);
      jSONArray1.equals(parameterizedTypeImpl0);
      assertEquals(1680, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.getSqlDate(30);
      assertEquals(1681, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        JSON.parseArray("un:tN@%48%zpgljg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ident, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray0.fluentSet(1680, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(1680);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : 1.2.46
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray0.fluentSet(1680, "1.2.46");
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      int int0 = JSON.DEFAULT_GENERATE_FEATURE;
      jSONArray0.fluentSet(30, jSONArray1);
      jSONArray1.add(30, (Object) jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray2.getByte(30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"},{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      jSONArray2.getByte(84);
      jSONArray0.getByte(1);
      jSONArray1.getString(236);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      jSONArray3.fluentRetainAll(jSONArray1);
      jSONArray1.getBigDecimal(1022);
      assertEquals(1680, jSONArray1.size());
      
      jSONArray2.addAll((Collection<?>) jSONArray3);
      assertEquals(3360, jSONArray3.size());
      assertEquals(3360, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1652);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      jSONArray0.fluentAdd((Object) sequenceInputStream0);
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("Z", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray1 = jSONArray0.fluentSet(1680, "1.2.46");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray1.fluentAddAll(30, (Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        JSON.parseObject("V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      jSONArray2.getByte(84);
      jSONArray0.getByte(1);
      jSONArray1.getString(236);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentRetainAll(jSONArray1);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      boolean boolean0 = jSONArray4.removeAll(jSONArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      jSONArray2.getByte(84);
      jSONArray0.getByte(1);
      jSONArray1.getString(236);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      jSONArray3.fluentRetainAll(jSONArray1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray1.getBigDecimal(1022);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      boolean boolean0 = jSONArray2.remove((Object) sequenceInputStream0);
      assertEquals(1680, jSONArray2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      MockDate mockDate0 = new MockDate(37, (-393217), 30);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray2 = jSONArray1.fluentSet(37, integer0);
      Integer integer1 = new Integer(30);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(linkedList0);
      jSONArray3.containsAll(jSONArray2);
      int int0 = 776;
      Class<String> class0 = String.class;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46", 30);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getContext();
      JSONObject jSONObject0 = new JSONObject();
      ParseContext parseContext0 = new ParseContext((ParseContext) null, jSONArray1, jSONObject0);
      jSONArray3.getJSONObject(2);
      jSONArray0.getFloat(30);
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) integer0, (Object) null);
      Type type0 = parseContext1.type;
      FieldInfo.getFieldType(class0, class0, (Type) null);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(78);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 78, Size: 38
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      MockDate mockDate0 = new MockDate(37, (-393217), 30);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray2 = jSONArray1.fluentSet(37, integer0);
      double double0 = new Integer(30);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(linkedList0);
      jSONArray3.containsAll(jSONArray2);
      Class<String> class0 = String.class;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1.2.46", 30);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getContext();
      JSONObject jSONObject0 = new JSONObject();
      ParseContext parseContext0 = new ParseContext((ParseContext) null, jSONArray1, jSONObject0);
      jSONArray3.getJSONObject(2);
      ParseContext parseContext1 = defaultJSONParser0.setContext(parseContext0, (Object) integer0, (Object) null);
      Type type0 = parseContext1.type;
      FieldInfo.getFieldType(class0, class0, (Type) null);
      // Undeclared exception!
      try { 
        jSONArray0.getObject(776, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 776, Size: 38
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "1.2.46");
      jSONArray2.getByte(84);
      jSONArray0.getByte(1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-60);
      Feature[] featureArray0 = new Feature[9];
      Feature feature0 = Feature.AllowComment;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowSingleQuotes;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.SortFeidFastMatch;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.NonStringKeyAsString;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.NonStringKeyAsString;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableSpecialKeyDetect;
      featureArray0[5] = feature5;
      Feature feature6 = Feature.AutoCloseSource;
      featureArray0[6] = feature6;
      Feature feature7 = Feature.InternFieldNames;
      featureArray0[7] = feature7;
      Feature feature8 = Feature.UseObjectArray;
      featureArray0[8] = feature8;
      JSON.parse(byteArray0, featureArray0);
      jSONArray1.setRelatedArray((Object) null);
      jSONArray1.getString(236);
      JSONArray jSONArray3 = jSONArray0.fluentRemove(0);
      JSONArray jSONArray4 = jSONArray3.fluentRetainAll(jSONArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray5 = jSONArray3.fluentRetainAll(jSONArray4);
      jSONArray5.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray3.remove(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      String string0 = "Y?aBcdgBC7ar8H?~cG";
      jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      JSONArray jSONArray1 = jSONArray0.fluentSet(1680, "Y?aBcdgBC7ar8H?~cG");
      jSONArray1.getByte(84);
      LinkedHashSet<Annotation> linkedHashSet0 = new LinkedHashSet<Annotation>();
      ParserConfig parserConfig0 = new ParserConfig(true);
      jSONArray0.set(1653, jSONArray1);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Z", parserConfig0, 2493);
      Class<SequenceInputStream> class0 = SequenceInputStream.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : Z
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1670, "Y?aBcdgBC7ar8H?~cG");
      jSONArray2.getByte(84);
      jSONArray0.getByte(1);
      jSONArray1.getString(236);
      jSONArray0.remove(30);
      jSONArray0.indexOf("Y?aBcdgBC7ar8H?~cG");
      int int0 = jSONArray0.size();
      assertEquals(1670, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0, parserConfig0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(88, (Object) null);
      jSONArray2.getJSONArray(88);
      jSONArray1.getLong(0);
      jSONArray2.getInteger(30);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("1.2.46", "^");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ^
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      MockDate mockDate0 = new MockDate(37, (-393217), 30);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedList0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray2 = jSONArray1.fluentSet(37, integer0);
      jSONArray0.getDoubleValue(37);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(linkedList0);
      jSONArray3.containsAll(jSONArray2);
      jSONArray1.add((Object) jSONArray0);
      assertTrue(linkedList0.contains(30));
      assertEquals(39, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      JSONArray jSONArray1 = jSONArray0.fluentSet(614, "Y?aBcdgBC7ar8H?~cG");
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(614);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      JSONArray jSONArray2 = jSONArray0.fluentSet(1680, "Y?aBcdgBC7ar8H?~cG");
      jSONArray2.getByte(84);
      jSONArray0.getByte(1);
      jSONArray1.getString(236);
      jSONArray0.remove(30);
      int int0 = jSONArray0.indexOf("Y?aBcdgBC7ar8H?~cG");
      assertEquals(1680, jSONArray0.size());
      assertEquals(1679, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Properties properties0 = new Properties();
      Collection<Object> collection0 = properties0.values();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(collection0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) properties0);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAdd(51, (Object) "com.alibaba.fastjson.JSONArray");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.toJSON((Object) jSONArray0, parserConfig0);
      jSONArray0.fluentSet(88, (Object) null);
      jSONArray0.fluentRemove(88);
      // Undeclared exception!
      try { 
        JSON.parseArray("fastjson.parser.deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      // Undeclared exception!
      try { 
        jSONArray0.addAll((-3271), (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3271, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0, parserConfig0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(88, (Object) null);
      jSONArray2.getJSONArray(88);
      jSONArray1.getLong(0);
      jSONArray2.getInteger(30);
      JSONArray jSONArray3 = new JSONArray();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      JSONArray jSONArray4 = jSONArray3.fluentAddAll(0, (Collection<?>) linkedList0);
      JSONArray jSONArray5 = (JSONArray)jSONArray4.clone();
      assertEquals(0, jSONArray5.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.spliterator();
      BigInteger bigInteger0 = BigInteger.ONE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      jSONArray0.fluentClear();
      jSONArray0.getComponentType();
      String string0 = JSON.VERSION;
      jSONArray0.setComponentType((Type) null);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("com.alibaba.fastjson.JSONArray", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONString();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-114);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig.global = parserConfig0;
      jSONArray0.add((int) (byte)0, (Object) "[]");
      int int0 = 1;
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentAdd((Object) null);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) null);
      Object object0 = jSONArray2.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(1652, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1652, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      JSONArray jSONArray1 = jSONArray0.fluentSet((-1), listIterator0);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue((-1183));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = new ParserConfig();
      JSON.toJSON((Object) jSONArray0, parserConfig0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(88, (Object) null);
      jSONArray1.getJSONArray(88);
      jSONArray0.getLongValue(0);
      // Undeclared exception!
      try { 
        jSONArray1.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "writeLong";
      // Undeclared exception!
      try { 
        jSONArray0.getShort(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(2825);
      linkedList0.add((Object) integer0);
      System.setCurrentTimeMillis(213L);
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      Integer integer1 = new Integer(463);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd((-2762), (Object) integer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2762, Size: 2
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      JSONArray jSONArray1 = jSONArray0.fluentSet(1680, "Y?aBcdgBC7ar8H?~cG");
      double double0 = jSONArray1.getDoubleValue(614);
      assertEquals(1681, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = jSONArray0.containsAll(jSONArray1);
      assertEquals(1681, jSONArray0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.fluentRetainAll(list0);
      Integer integer0 = new Integer(1141);
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) class0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(4031);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4031, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-726));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1515);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-1515));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray1 = new JSONArray(1);
      // Undeclared exception!
      try { 
        jSONArray1.getLong(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("Z", concurrentHashMap0);
      // Undeclared exception!
      try { 
        jSONArray0.add(611, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 611, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) jSONArray0);
      JSON.defaultLocale = jSONArray1.defaultLocale;
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSON.defaultTimeZone = null;
      int int1 = (-1633);
      // Undeclared exception!
      try { 
        jSONArray1.listIterator(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Field> class0 = Field.class;
      jSONArray0.listIterator();
      List<Field> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.removeAll(list0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(1653);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1653, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = JSON.DEFAULT_GENERATE_FEATURE;
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.toJSON((Object) jSONArray0);
      jSONArray0.size();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float, pos 3, json : 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 1653;
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(1653);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1653, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1671);
      Integer integer1 = new Integer(1680);
      jSONArray0.indexOf(integer1);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(30);
      jSONArray0.indexOf(integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(2966);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2966, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = JSON.DEFAULT_PARSER_FEATURE;
      jSONArray0.clear();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(651);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 651, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2966;
      String string0 = "writeLong";
      // Undeclared exception!
      try { 
        jSONArray0.getShort(2966);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2966, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      List<JSONArray> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray1.add((-704), (Object) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -704, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.remove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(1648);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1648, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1003);
      int int0 = 2564;
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-680));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1003);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(2564, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2564, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(7);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Y?aBdgBC7ar8H?~cG");
      BigInteger bigInteger0 = BigInteger.TEN;
      Class<String> class0 = String.class;
      boolean boolean0 = jSONArray1.add((Object) class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove((-3512));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.lastIndexOf("KRM5[5\"ru7");
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove(1636);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1636, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(1671);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1671
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1148;
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-4492));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(1954);
      int int0 = JSON.DEFAULT_GENERATE_FEATURE;
      // Undeclared exception!
      try { 
        jSONArray1.get((-2192));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.IgnoreNotMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportArrayToBean;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowComment;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.UseObjectArray;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.CustomMapDeserializer;
      featureArray0[4] = feature4;
      JSON.parse((byte[]) null, (-872), 30, (CharsetDecoder) null, featureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.add((-5958), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -5958, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = JSON.DEFAULT_PARSER_FEATURE;
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(66);
      // Undeclared exception!
      try { 
        jSONArray0.get(1138);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1138, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(30);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 59;
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clone();
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("D2", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : D2
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(92);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 92, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.MapSortField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteMapNullValue;
      linkedList0.add((Object) serializerFeature3);
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONString((Object) linkedList0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-1096));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1096, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = 40;
      JSONArray jSONArray0 = new JSONArray(40);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(30);
      jSONArray0.fluentClear();
      jSONArray0.equals("i9!j{VCdI");
      assertTrue(jSONArray0.equals((Object)jSONArray1));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.getComponentType();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(1631);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1631, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(1639, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(2524);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2524, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.getComponentType();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.serializer.SerializeConfig");
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      jSONArray1.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue((-1605));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      // Undeclared exception!
      try { 
        jSONArray1.getInteger((-1097));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(30);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray1.getObject((-987), (Type) parameterizedTypeImpl0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(30);
      String string0 = JSON.VERSION;
      jSONArray1.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 614;
      JSONArray jSONArray0 = new JSONArray(614);
      String string0 = JSON.VERSION;
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getObject(799, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 799, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.remove((Object) jSONArray1);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(3088, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3088, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      MockDate mockDate0 = new MockDate(30, 30, 30, 30, 30, 30);
      int int0 = (-2882);
      String string0 = JSON.DEFAULT_TYPE_KEY;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-2882));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2882, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Class<Annotation> class0 = Annotation.class;
      jSONArray1.toJavaList(class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(3088, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3088, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      MockDate mockDate0 = new MockDate(37, (-393217), 30);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-845));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -845, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      featureArray0[0] = feature0;
      JSON.parseObject("", (Type) class1, parserConfig0, 30, featureArray0);
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      // Undeclared exception!
      try { 
        jSONArray0.toArray((Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      linkedList0.add((Object) jSONArray0);
      MockDate mockDate0 = new MockDate(30, 30, 30, 30, 30);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-3905));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3905, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      JSONArray jSONArray4 = new JSONArray();
      boolean boolean0 = jSONArray4.retainAll(jSONArray4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(773);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 773, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) set0);
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-23), (Object) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -23, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(3088, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3088, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONString((Object) jSONArray0, 30, serializerFeatureArray0);
      Object[] objectArray0 = jSONArray0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = new JSONArray(0);
      int int0 = 0;
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray0);
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray3.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-1597));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3081);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      jSONArray0.getRelatedArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(3076);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3076, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) set0);
      jSONArray1.fluentRemoveAll(jSONArray0);
      JSONArray jSONArray2 = new JSONArray(30);
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int int0 = 254;
      JSONArray jSONArray0 = new JSONArray(254);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(1, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      jSONArray0.parallelStream();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 123;
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(123);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 123, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getDate(144);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 144, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-2);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(0, (Collection<?>) jSONArray0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      int int0 = (-1);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject((-5911), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(0, (Collection<?>) jSONArray0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      jSONArray3.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getString((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Object object0 = null;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      Class<JSONArray> class3 = JSONArray.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "Z";
      stringArray0[2] = "Z";
      stringArray0[3] = "Z";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class3, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[2] = (SerializeFilter) pascalNameFilter0;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[3] = (SerializeFilter) pascalNameFilter1;
      PascalNameFilter pascalNameFilter2 = new PascalNameFilter();
      serializeFilterArray0[4] = (SerializeFilter) pascalNameFilter2;
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(159);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 159, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-11));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -11, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Class<JSONArray> class0 = JSONArray.class;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.setComponentType(class0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((-1050));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1050
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      Class<Object> class0 = Object.class;
      FieldInfo.getFieldType(class0, class0, class0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader0.getParent();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(0, (Collection<?>) jSONArray0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      jSONArray2.fluentRemoveAll(jSONArray0);
      JSONArray jSONArray4 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray4.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(30);
      jSONArray0.defaultLocale.getUnicodeLocaleAttributes();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      // Undeclared exception!
      try { 
        jSONArray1.subList(16384, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(16384) > toIndex(0)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(0, (Collection<?>) jSONArray0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.getString(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.addAll(0, (Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray((-845));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray0.toJavaList(class0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray1 = jSONArray0.fluentSet(30, integer0);
      jSONArray1.subList(30, 30);
      jSONArray1.parallelStream();
      jSONArray1.getBoolean(30);
      jSONArray1.getLong(30);
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray1.getString(30);
      jSONArray1.getComponentType();
      jSONArray0.toArray();
      assertEquals(62, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.getJSONArray("%4cNd");
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      jSONArray0.fluentAdd((Object) linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(30, linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : [(this Collection), null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, (this Collection)]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(0, (Collection<?>) jSONArray0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      JSONArray jSONArray4 = jSONArray3.fluentRemoveAll(jSONArray0);
      int int0 = (-2366);
      // Undeclared exception!
      try { 
        jSONArray4.getInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(30);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-9), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(30);
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleAttributes();
      jSONArray0.addAll((Collection<?>) set0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-1319));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(30);
      JSONArray jSONArray1 = jSONArray0.fluentSet(30, integer0);
      jSONArray1.subList(30, 30);
      jSONArray1.parallelStream();
      jSONArray1.getBoolean(30);
      jSONArray1.getLong(30);
      jSONArray1.getString(30);
      jSONArray1.getComponentType();
      jSONArray0.toArray();
      assertEquals(31, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      Class<JSONArray> class3 = JSONArray.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "Z";
      stringArray0[2] = "Z";
      stringArray0[3] = "Z";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class3, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[2] = (SerializeFilter) pascalNameFilter0;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[3] = (SerializeFilter) pascalNameFilter1;
      PascalNameFilter pascalNameFilter2 = new PascalNameFilter();
      serializeFilterArray0[4] = (SerializeFilter) pascalNameFilter2;
      PascalNameFilter pascalNameFilter3 = new PascalNameFilter();
      serializeFilterArray0[5] = (SerializeFilter) pascalNameFilter3;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(161, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 161, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(0, (Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(30, (Object) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSON.parseArray((String) null);
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      Integer integer0 = new Integer(30);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, (Object) null);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        jSONArray1.subList((-1), (-1369));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "1.2.46");
      jSONArray0.fluentAddAll(0, (Collection<?>) jSONArray1);
      JSONArray jSONArray2 = new JSONArray(jSONArray0);
      jSONArray2.fluentRemoveAll(jSONArray0);
      int int0 = (-2366);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove(2927);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2927, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray(linkedList0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[6];
      Class<JSONArray> class3 = JSONArray.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "Z";
      stringArray0[2] = "Z";
      stringArray0[3] = "Z";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class3, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(stringArray0);
      serializeFilterArray0[1] = (SerializeFilter) simplePropertyPreFilter1;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[2] = (SerializeFilter) pascalNameFilter0;
      PascalNameFilter pascalNameFilter1 = new PascalNameFilter();
      serializeFilterArray0[3] = (SerializeFilter) pascalNameFilter1;
      PascalNameFilter pascalNameFilter2 = new PascalNameFilter();
      serializeFilterArray0[4] = (SerializeFilter) pascalNameFilter2;
      PascalNameFilter pascalNameFilter3 = new PascalNameFilter();
      serializeFilterArray0[5] = (SerializeFilter) pascalNameFilter3;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.SortField;
      serializerFeatureArray0[1] = serializerFeature1;
      JSON.toJSONString((Object) null, serializeFilterArray0, serializerFeatureArray0);
      jSONArray0.toArray(classArray0);
      int int0 = jSONArray0.indexOf((Object) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.DisableCircularReferenceDetect;
      featureArray0[0] = feature0;
      JSON.parseObject("", (Type) null, parserConfig0, 30, featureArray0);
      Object[] objectArray0 = jSONArray0.toArray();
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(51068);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      jSONArray1.fluentRemove((Object) jSONArray0);
      String string0 = ";Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Z";
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      // Undeclared exception!
      try { 
        JSON.parse("com.alibaba.fastjson.JSONArray", parserConfig0, 51068);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAdd(30, (Object) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.getJSONArray("");
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((Object) jSONObject0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      Integer integer0 = new Integer(30);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, integer0);
      // Undeclared exception!
      try { 
        jSONArray1.subList(30, 30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 30
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1316);
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleAttributes();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) set0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-1316), (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1316, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Integer integer0 = new Integer(30);
      jSONArray1.setRelatedArray(integer0);
      jSONArray0.fluentRemoveAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "Y?aBcdgBC7ar8H?~cG");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(0, (Collection<?>) jSONArray0);
      JSONArray jSONArray3 = new JSONArray(jSONArray2);
      JSONArray jSONArray4 = jSONArray3.fluentRemoveAll(jSONArray0);
      int int0 = (-2366);
      // Undeclared exception!
      try { 
        jSONArray4.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-2147483647));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) 30);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(1, (Collection<?>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = (-1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1;
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
