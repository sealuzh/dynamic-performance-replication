/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:30:25 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.notEquals();
      xPathLexer0.setXPath("1");
      xPathLexer0.number();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume(1276);
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.setPreviousToken(token1);
      assertEquals(22, token1.getTokenType());
      
      Token token3 = xPathLexer1.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer1.consume(3);
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.and();
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.rightParen();
      String string0 = ";N~z&fk($/.[*Ki0";
      xPathLexer0.setXPath(";N~z&fk($/.[*Ki0");
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8MeFT");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("8", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("Me", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("F", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7XPSei");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("wgBE", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("@", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("(", token4.getTokenText());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNull(token5);
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6t=");
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.consume(50);
      assertEquals("6t=", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('.');
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      boolean boolean1 = xPathLexer0.isIdentifierStartChar('.');
      assertFalse(boolean1 == boolean0);
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('-');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<qewIXW'bEYx%5$");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(7, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.pipe();
      String string0 = token1.toString();
      assertEquals("[ (17) (q)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.number();
      Token token3 = xPathLexer0.rightParen();
      assertEquals("e", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.consume(1492);
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]:mr/g\"Rt");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(4, token0.getTokenType());
      assertEquals("]", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("mr", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals("g", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer1.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer2.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer1.setXPath("");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.setXPath("]:mr/g\"Rt");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.operatorName();
      Token token7 = xPathLexer4.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (13) (:)", string0);
      
      xPathLexer3.div();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("", token8.getTokenText());
      assertEquals((-1), token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      xPathLexer0.whitespace();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("@ZYse,}ko^5<");
      xPathLexer1.or();
      xPathLexer0.slashes();
      xPathLexer1.nextToken();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.div();
      xPathLexer2.number();
      xPathLexer0.dots();
      XPathLexer xPathLexer5 = new XPathLexer("@ZYse,}ko^5<");
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer5.or();
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7XPSei");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.slashes();
      token0.toString();
      xPathLexer0.at();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dots();
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("-IRwO:x$");
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K&ZV[,jlWDSjU");
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.at();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.setXPath("d]`aGtwC)~~$");
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("d]`aGtwC)~~$");
      xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      xPathLexer0.hasMoreChars();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setXPath("bx");
      assertEquals("bx", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]:mr/g\"Rt");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer1.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      assertFalse(xPathLexer3.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      xPathLexer0.consume(0);
      Token token1 = xPathLexer0.at();
      assertEquals(" ", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.div();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(1, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      assertEquals("", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.setXPath("=MPRsfB34");
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("=", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("M", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("=MPRsfB34");
      Token token3 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token3);
      assertEquals("", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.nextToken();
      assertEquals((-1), token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.at();
      xPathLexer0.setXPath("wA)WMM.SZQZZ");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("w", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals("A", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(16, token2.getTokenType());
      assertEquals(")", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("W", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("MM.SZQZZ", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Wwphr{Q8");
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer2.not();
      xPathLexer1.leftParen();
      xPathLexer2.dots();
      xPathLexer1.and();
      xPathLexer1.leftParen();
      xPathLexer1.mod();
      xPathLexer2.consume();
      assertFalse(xPathLexer2.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("S7di`a`G:)~~*p");
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("S7di`a`G:)~~*p");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.equals();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.whitespace();
      xPathLexer3.or();
      String string0 = ")";
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("z<w^I");
      xPathLexer0.isIdentifierChar('_');
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      assertEquals("z", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("%y'}");
      Token token1 = xPathLexer1.minus();
      assertEquals("%", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      xPathLexer1.hasMoreChars();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer("%y'}");
      Token token2 = xPathLexer1.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("y", token2.getTokenText());
      
      Token token3 = xPathLexer2.nextToken();
      assertEquals("%y'}", token3.getTokenText());
      
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.setXPath("");
      boolean boolean0 = xPathLexer0.isIdentifierChar('_');
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertNotNull(token1);
      
      XPathLexer xPathLexer1 = new XPathLexer("Qq");
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      boolean boolean1 = xPathLexer1.hasMoreChars();
      assertTrue(boolean1);
      
      XPathLexer xPathLexer2 = new XPathLexer("$CZ%bOiR'LIT6.AQ");
      Token token3 = xPathLexer2.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      boolean boolean2 = xPathLexer2.isIdentifierStartChar('_');
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("_@T9[^9");
      xPathLexer0.leftBracket();
      xPathLexer1.nextToken();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.equals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.at();
      xPathLexer3.leftParen();
      xPathLexer0.comma();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.setPreviousToken(token0);
      xPathLexer3.at();
      xPathLexer3.slashes();
      Token token1 = xPathLexer0.and();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("]|:9`.p~Nt<5U(n");
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.star();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") y(");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer(") y(");
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer2.equals();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      token0.toString();
      xPathLexer3.equals();
      xPathLexer3.relationalOperator();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.identifierOrOperatorName();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lHXQ&u1*/P?'E");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("l", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("HX", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("Q", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("&", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("]|:9..p~Nt<5U(n");
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer0.notEquals();
      Token token1 = xPathLexer0.colon();
      token1.toString();
      token1.toString();
      token1.toString();
      xPathLexer0.star();
      xPathLexer0.notEquals();
      token1.toString();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "if0TY'";
      XPathLexer xPathLexer0 = new XPathLexer("if0TY'");
      xPathLexer0.pipe();
      xPathLexer0.doubleColon();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.operatorName();
      xPathLexer0.doubleColon();
      xPathLexer0.consume((-71));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8MeFT");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("M", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("eF", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      assertEquals("T", token3.getTokenText());
      
      Token token4 = xPathLexer0.minus();
      assertEquals("T", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = ") (";
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer2.equals();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.dots();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.or();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+ K");
      xPathLexer0.nextToken();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.equals();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.equals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.doubleColon();
      token0.toString();
      xPathLexer2.mod();
      xPathLexer0.identifier();
      xPathLexer1.literal();
      xPathLexer2.star();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("HJuB^g{'M&al");
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.dots();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("<l}N|EU=,7I9/eMjls");
      xPathLexer0.leftBracket();
      xPathLexer1.or();
      xPathLexer1.nextToken();
      xPathLexer0.minus();
      xPathLexer1.and();
      xPathLexer0.div();
      xPathLexer1.getPreviousToken();
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("Cg^.'Qq'=J#");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.dollar();
      assertEquals("g", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("^", token1.getTokenText());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(".", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token3);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.equals();
      assertEquals(21, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer2.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(27, token6.getTokenType());
      assertEquals("Qq", token6.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer(") (");
      Token token7 = xPathLexer4.comma();
      assertEquals(")", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
      
      xPathLexer3.operatorName();
      xPathLexer0.mod();
      Token token8 = xPathLexer1.identifier();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer3.number();
      assertEquals(30, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&@'gR^{JZ]L]g,Oo");
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token0 = xPathLexer0.nextToken();
      assertEquals("&@'gR^{JZ]L]g,Oo", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("&", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6^=");
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.consume(50);
      assertEquals("6^=", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.setXPath("o.UGr!tSQ(A{^%");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer1.nextToken();
      xPathLexer1.getXPath();
      xPathLexer1.rightParen();
      xPathLexer1.rightParen();
      xPathLexer1.nextToken();
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer0.dots();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8MeFT");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("8", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("M", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("e", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("FT", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.setXPath("4dv=2w{lxg");
      Token token1 = xPathLexer0.not();
      assertEquals("4", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("2w", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      token4.toString();
      String string0 = token4.toString();
      assertEquals("[ (13) ({)", string0);
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("l", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      token6.toString();
      token6.toString();
      String string1 = token6.toString();
      assertEquals("[ (5) (x)", string1);
      
      xPathLexer0.setPreviousToken(token4);
      xPathLexer0.setPreviousToken(token6);
      xPathLexer0.and();
      Token token7 = xPathLexer0.dollar();
      assertEquals("g", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1Q JxE? x:");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar(':');
      assertFalse(boolean0);
      
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("1Q JxE? x:");
      xPathLexer0.consume();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("Q ", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("JxE", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals(" ", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("z<w^I");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("c'SST`]2");
      XPathLexer xPathLexer3 = new XPathLexer("z<w^I");
      boolean boolean0 = xPathLexer0.isIdentifierChar('9');
      assertTrue(boolean0);
      
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer1.dollar();
      assertEquals("z", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      xPathLexer2.div();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.and();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer4.dots();
      Token token3 = xPathLexer2.nextToken();
      assertEquals("c", token3.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("z<w^I");
      Token token4 = xPathLexer2.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("'", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token6 = xPathLexer7.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      xPathLexer1.at();
      xPathLexer0.star();
      xPathLexer1.nextToken();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      XPathLexer xPathLexer3 = new XPathLexer("o`EdGA^@M1{0*>n\"");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        xPathLexer3.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8MeFT");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("8", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("M", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("eFT", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vp^nDy");
      xPathLexer0.not();
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.consume();
      assertEquals("vp^nDy", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("z<w^I");
      Token token2 = xPathLexer1.colon();
      assertEquals("z", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token3);
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      xPathLexer1.setXPath("");
      xPathLexer0.isIdentifierChar('<');
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token6 = xPathLexer2.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer2.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer2.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer1.getPreviousToken();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer("z<w^I");
      Token token9 = xPathLexer3.nextToken();
      assertEquals("z", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]:mr/g\"Rt");
      XPathLexer xPathLexer1 = new XPathLexer("]:mr/g\"Rt");
      XPathLexer xPathLexer2 = new XPathLexer("t>R^QUWS8OjY^I\"");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer2.leftBracket();
      assertEquals("t", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer2.nextToken();
      assertEquals(">", token1.getTokenText());
      assertEquals(9, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("]", token2.getTokenText());
      
      xPathLexer3.relationalOperator();
      Token token3 = xPathLexer2.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("R", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".5[>5G 49J\"!*z]:&");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.equals();
      assertEquals(21, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer2.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(31, token3.getTokenType());
      assertEquals(".5", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("]|:9`.p~Nt</5U(n");
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.dollar();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "]:mr/g\"Rt";
      XPathLexer xPathLexer0 = new XPathLexer("]:mr/g\"Rt");
      xPathLexer0.nextToken();
      xPathLexer0.dots();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.notEquals();
      xPathLexer0.setXPath("1");
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("lHXQ&u1*/P?E");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("fw=4U$v{}nh");
      Token token0 = xPathLexer0.not();
      String string0 = token0.toString();
      assertEquals("[ (23) (f)", string0);
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.minus();
      assertEquals("w", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.notEquals();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("U$", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("v", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      assertEquals("{", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("]|:9`.p~Nt<5U(n");
      xPathLexer1.operatorName();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("}nh", token6.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      Token token7 = xPathLexer1.doubleColon();
      assertEquals("]|", token7.getTokenText());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertNull(token8);
      
      Token token9 = xPathLexer0.slashes();
      assertEquals("}", token9.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer3.slashes();
      assertEquals(11, token10.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer0.leftBracket();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token12 = xPathLexer5.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.LA(18);
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token11);
      assertEquals(3, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".35[>5G 49J\"!*z]:&");
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.equals();
      String string0 = "$r'WI!upq,w>pKj";
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer(".35[>5G 49J\"!*z]:&");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" AO\"k");
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer1.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer2.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.at();
      assertEquals(" ", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer1.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer2.notEquals();
      assertEquals(22, token4.getTokenType());
      
      xPathLexer1.identifier();
      Token token5 = xPathLexer1.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.consume();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("AO", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.consume(103);
      xPathLexer0.setXPath(")");
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals(")", token3.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "$r'WI!upq,w>pKj";
      XPathLexer xPathLexer0 = new XPathLexer("$r'WI!upq,w>pKj");
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("$r'WI!upq,w>pKj");
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.not();
      xPathLexer1.consume(3);
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".5[>5G 49J\"!*z]:&");
      Token token0 = xPathLexer0.at();
      xPathLexer0.operatorName();
      xPathLexer0.setPreviousToken((Token) null);
      Token token1 = xPathLexer0.plus();
      assertEquals("5", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.setXPath(" A\"k");
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.slashes();
      Token token3 = xPathLexer0.number();
      assertEquals("", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (16) (.)", string0);
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals("\"", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer(" A\"k");
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("k", token6.getTokenText());
      
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer("WQ");
      Token token7 = xPathLexer1.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals(" ", token7.getTokenText());
      
      xPathLexer0.identifier();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.consume();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K8fdi!!O[O");
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.minus();
      xPathLexer0.getPreviousToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("sOVC4}[o9?`S(%");
      xPathLexer2.mod();
      XPathLexer xPathLexer3 = new XPathLexer("]|:9`p~Nt<5F(n");
      Token token1 = xPathLexer3.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("]", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer2.nextToken();
      assertEquals("sOVC4", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer3.identifierOrOperatorName();
      Token token4 = xPathLexer1.minus();
      assertEquals(6, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") ");
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("&-klc 9%kTLHfA");
      xPathLexer1.colon();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "K8fdi!!O[O";
      XPathLexer xPathLexer0 = new XPathLexer("K8fdi!!O[O");
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.whitespace();
      xPathLexer2.or();
      Token token0 = xPathLexer1.comma();
      xPathLexer0.literal();
      xPathLexer2.not();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("<ow^I");
      xPathLexer1.colon();
      xPathLexer0.comma();
      xPathLexer1.at();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer("<ow^I");
      xPathLexer1.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_HdlA.z5=Y3i(");
      xPathLexer0.identifier();
      xPathLexer0.comma();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("&(k_HdlA.z5=Y3i(");
      xPathLexer0.equals();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.setXPath("tsTkVq<50Wt|*xC|");
      xPathLexer2.isIdentifierStartChar('f');
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer2.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.endPosition();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<qewIXW'bEYx%5$");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(7, token0.getTokenType());
      assertEquals("<", token0.getTokenText());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.pipe();
      String string0 = token1.toString();
      assertEquals("[ (17) (q)", string0);
      
      Token token2 = xPathLexer0.number();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("e", token3.getTokenText());
      
      xPathLexer0.getXPath();
      String string1 = token2.toString();
      assertEquals("[ (30) ()", string1);
      
      xPathLexer0.consume(1492);
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(30, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("1", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("9I4x~");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertNotSame(token2, token1);
      
      XPathLexer xPathLexer2 = new XPathLexer("9I4x~");
      XPathLexer xPathLexer3 = new XPathLexer("9I4x~");
      Token token3 = xPathLexer3.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("9", token3.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("1");
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token4 = xPathLexer5.dollar();
      assertEquals(26, token4.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("1");
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer1.dots();
      assertEquals(13, token6.getTokenType());
      assertEquals("I", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      XPathLexer xPathLexer1 = new XPathLexer("6$V3uda]UmsQ)C]M");
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("MCe.ST ");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.plus();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer0.dollar();
      xPathLexer0.minus();
      xPathLexer0.getPreviousToken();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K8fdi!!O[O");
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      String string0 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "$r'WI!upq,w>pKj";
      XPathLexer xPathLexer0 = new XPathLexer("$r'WI!upq,w>pKj");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("$r'WI!upq,w>pKj");
      String string1 = null;
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.div();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setXPath("");
      xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.setXPath("");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      xPathLexer0.getPreviousToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("6$V3uda]UmsQ)C]M");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.isIdentifierChar('#');
      XPathLexer xPathLexer5 = new XPathLexer();
      boolean boolean0 = xPathLexer5.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer5.and();
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token3 = xPathLexer6.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer3.operatorName();
      xPathLexer2.and();
      XPathLexer xPathLexer7 = new XPathLexer("!=");
      Token token4 = xPathLexer7.nextToken();
      assertEquals(22, token4.getTokenType());
      assertEquals("!=", token4.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.mod();
      xPathLexer3.and();
      Token token5 = xPathLexer1.nextToken();
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[6/X$kTJ/0F");
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      int int0 = xPathLexer0.endPosition();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.colon();
      xPathLexer0.rightParen();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.whitespace();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.or();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      int int1 = xPathLexer0.endPosition();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".5[>5G 49J\"!*z]:&");
      Token token0 = xPathLexer0.equals();
      assertEquals(".", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("5", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("LP#OP?w@i:uKW)");
      xPathLexer2.div();
      xPathLexer2.nextToken();
      xPathLexer1.leftParen();
      xPathLexer1.getXPath();
      int int0 = xPathLexer1.currentPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("]|:9`.p~Nt</5U(n");
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("21h#<+ix.R");
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.dollar();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token1);
      xPathLexer0.dollar();
      xPathLexer0.doubleColon();
      xPathLexer0.currentPosition();
      xPathLexer2.currentPosition();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.dots();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer3.nextToken();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token2 = xPathLexer4.operatorName();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("R'g+zK.>M;m");
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.div();
      Token token4 = xPathLexer0.at();
      assertEquals("+", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      assertEquals("z", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      assertEquals("K", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K8fdi!!O[O");
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dots();
      xPathLexer1.whitespace();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("T9$^,QK;0(`+z>/s");
      Token token0 = xPathLexer0.not();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.notEquals();
      xPathLexer0.at();
      xPathLexer0.getPreviousToken();
      xPathLexer0.minus();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",,_fcGj~rC`*w");
      xPathLexer0.comma();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.isIdentifierChar('.');
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.hasMoreChars();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      xPathLexer0.plus();
      xPathLexer0.at();
      xPathLexer0.whitespace();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.plus();
      xPathLexer0.currentPosition();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vp^nDy");
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.plus();
      xPathLexer0.identifier();
      xPathLexer0.plus();
      xPathLexer0.consume();
      assertEquals("vp^nDy", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*!K,\"G_E::#?$'p(h");
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.equals();
      xPathLexer0.setPreviousToken((Token) null);
      assertEquals("*!K,\"G_E::#?$'p(h", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      Token token0 = xPathLexer0.star();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token1.toString();
      token1.toString();
      token1.toString();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.consume(9);
      xPathLexer0.consume();
      xPathLexer0.isIdentifierChar('W');
      xPathLexer0.comma();
      xPathLexer0.leftParen();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.minus();
      Token token3 = xPathLexer0.mod();
      assertNull(token3);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String string0 = ".@v^]0I";
      XPathLexer xPathLexer0 = new XPathLexer(".@v^]0I");
      xPathLexer0.number();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("uaj");
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      xPathLexer0.at();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.slashes();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.consume();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("{-");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.rightParen();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("{", token3.getTokenText());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer1.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("-", token5.getTokenText());
      
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("uaj");
      Token token0 = xPathLexer0.colon();
      assertEquals("u", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("aj", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.pipe();
      assertEquals(17, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("uab");
      xPathLexer0.at();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("uab");
      xPathLexer1.slashes();
      xPathLexer1.rightParen();
      xPathLexer1.nextToken();
      xPathLexer0.pipe();
      String string0 = "";
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      String string0 = "]|:9`.p~Nt<5U(n";
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("WX}6>S>MBWVRU!wS");
      Token token0 = xPathLexer0.not();
      token0.toString();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.not();
      xPathLexer0.comma();
      xPathLexer0.at();
      Token token1 = xPathLexer2.pipe();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6?'GPxoFrLekQ|");
      char char0 = xPathLexer0.LA(2);
      assertEquals('?', char0);
      
      Token token0 = xPathLexer0.at();
      assertEquals("6", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("?'GPxoFrLekQ|", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("TSE.9C3YcD,epJ}aXw");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.star();
      token0.toString();
      xPathLexer0.star();
      token0.toString();
      Token token1 = xPathLexer0.star();
      assertEquals(".", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      token0.toString();
      xPathLexer0.pipe();
      token0.toString();
      Token token2 = xPathLexer0.pipe();
      assertEquals("C", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (11) (T)", string0);
      
      xPathLexer0.slashes();
      Token token3 = xPathLexer0.dots();
      assertEquals("Y", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("c", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("D", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.equals();
      assertEquals(",", token6.getTokenText());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals("e", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals("p", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      xPathLexer0.setXPath("'");
      Token token9 = xPathLexer0.dollar();
      assertEquals("'", token9.getTokenText());
      assertEquals(26, token9.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.hasMoreChars();
      xPathLexer0.hasMoreChars();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K&ZV[,jlWDSjU");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("K", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("[", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+6&/@m@e");
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.relationalOperator();
      xPathLexer0.mod();
      xPathLexer0.colon();
      xPathLexer0.consume((-899));
      xPathLexer0.at();
      xPathLexer0.star();
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("]|:9`.p~Nt<5U(n");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("]|", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (26) (:)");
      xPathLexer1.relationalOperator();
      xPathLexer1.setXPath("21h#<+ix.R");
      Token token2 = xPathLexer1.nextToken();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer1.identifierOrOperatorName();
      assertNull(token3);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.dollar();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("9", token5.getTokenText());
      
      String string0 = token4.toString();
      assertEquals("[ (26) (h)", string0);
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (26) (h)");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.identifier();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer5.identifier();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer5.mod();
      xPathLexer1.mod();
      Token token7 = xPathLexer4.dots();
      assertEquals(13, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer3.nextToken();
      assertEquals(3, token8.getTokenType());
      assertEquals("[", token8.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token9 = xPathLexer0.rightParen();
      assertEquals("`", token9.getTokenText());
      assertEquals(2, token9.getTokenType());
      
      xPathLexer2.mod();
      Token token10 = xPathLexer0.leftParen();
      assertEquals(".", token10.getTokenText());
      assertEquals(1, token10.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer("");
      xPathLexer9.setXPath("V");
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer11 = new XPathLexer();
      Token token11 = xPathLexer11.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer8.equals();
      assertEquals(21, token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.consume();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('~');
      assertFalse(boolean0);
      
      xPathLexer0.mod();
      xPathLexer0.setXPath("");
      xPathLexer0.and();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.setXPath("Z-`_{,GBFvU0LC|)v+");
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("Z", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(6, token5.getTokenType());
      assertEquals("-", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("]|:9..p~Nt<5U(n");
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (3) (])", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("|", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("[ (3) (])");
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals(":", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      Token token4 = xPathLexer0.number();
      assertEquals(31, token4.getTokenType());
      
      token3.toString();
      xPathLexer1.slashes();
      Token token5 = xPathLexer0.comma();
      assertEquals(".", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.operatorName();
      Token token6 = xPathLexer2.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer0.slashes();
      String string1 = token7.toString();
      assertEquals("[ (11) (p)", string1);
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.setPreviousToken(token7);
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.consume();
      Token token8 = xPathLexer6.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer1.literal();
      assertEquals("(3)", token9.getTokenText());
      assertNotNull(token9);
      assertEquals(27, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("]|:9`.p~Nt<5U(n");
      Token token0 = xPathLexer0.not();
      token0.toString();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightParen();
      Token token1 = xPathLexer0.not();
      xPathLexer1.operatorName();
      token0.toString();
      xPathLexer1.comma();
      xPathLexer0.at();
      Token token2 = xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      token2.toString();
      Token token3 = xPathLexer0.dots();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.or();
      token2.toString();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.number();
      xPathLexer6.setPreviousToken(token1);
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("");
      xPathLexer8.operatorName();
      xPathLexer1.consume();
      xPathLexer0.setPreviousToken(token3);
      xPathLexer8.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer6.literal();
      xPathLexer3.consume(90);
      assertFalse(xPathLexer3.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AhmoqY-DD>Y1`O|&[ty");
      xPathLexer0.consume();
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.mod();
      xPathLexer0.doubleColon();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.plus();
      String string0 = ")";
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
