/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:58:31 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnAlgebraicSymMatrix_ESTest extends MnAlgebraicSymMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = null;
      try {
        mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix((-11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid matrix size: -11
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(4);
      double[] doubleArray0 = mnAlgebraicSymMatrix0.data();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = mnAlgebraicSymMatrix0.nrow();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = mnAlgebraicSymMatrix0.clone();
      String string0 = mnAlgebraicSymMatrix0.toString();
      assertNotSame(mnAlgebraicSymMatrix0, mnAlgebraicSymMatrix1);
      assertEquals("LASymMatrix parameters:\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(1);
      mnAlgebraicSymMatrix0.eigenvalues();
      double[] doubleArray0 = mnAlgebraicSymMatrix0.data();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(1260);
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix0.set((-1), 3146, 1.0E-35);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(0);
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix0.get((-943), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = 2;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(2);
      mnAlgebraicSymMatrix0.invert();
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix0.get(2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      int int0 = 9;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(9);
      mnAlgebraicSymMatrix0.toString();
      mnAlgebraicSymMatrix0.nrow();
      mnAlgebraicSymMatrix0.eigenvalues();
      mnAlgebraicSymMatrix0.set(0, 4, 9);
      mnAlgebraicSymMatrix0.clone();
      mnAlgebraicSymMatrix0.eigenvalues();
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = new MnAlgebraicSymMatrix(6);
      mnAlgebraicSymMatrix1.nrow();
      int int1 = 1;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix2 = new MnAlgebraicSymMatrix(1);
      try { 
        mnAlgebraicSymMatrix2.invert();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(5);
      mnAlgebraicSymMatrix0.invert();
      mnAlgebraicSymMatrix0.clone();
      // Undeclared exception!
      mnAlgebraicSymMatrix0.eigenvalues();
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(2);
      mnAlgebraicSymMatrix0.set(0, 0, 2);
      mnAlgebraicSymMatrix0.eigenvalues();
      mnAlgebraicSymMatrix0.ncol();
      mnAlgebraicSymMatrix0.eigenvalues();
      mnAlgebraicSymMatrix0.size();
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix1 = new MnAlgebraicSymMatrix(0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix2 = new MnAlgebraicSymMatrix(3);
      mnAlgebraicSymMatrix0.eigenvalues();
      // Undeclared exception!
      try { 
        mnAlgebraicSymMatrix0.set(3, 1333, (-6148.19191));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }
}
