/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 08:36:57 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.CharArrayWriter;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3393);
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-96));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-96);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-96), 425);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)94;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      byteSequence0.skipBytes((byte) (-28));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("b=x;w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `b=x;w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Y*n=</eF,Ns'RQ\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y*n=</eF,Ns'RQ\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-7);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$963$A$f9$A", string0);
      
      String string1 = Utility.fillup("$963$A$f9$A", (byte)0, true, 'a');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.isJavaIdentifierPart('\"');
      // Undeclared exception!
      try { 
        Utility.signatureToString("HIVOviWaD{~}?4tv", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HIVOviWaD{~}?4tv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.fillup(") (Ktc9?SVd/'RhU4", 205, false, 'e');
      Utility.accessToString(99, true);
      try { 
        Utility.typeOfSignature("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee) (Ktc9?SVd/'RhU4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee) (Ktc9?SVd/'RhU4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = Utility.typeOfSignature("ZHjIXd!q!pd)kJK:");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('4');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)63;
      byteArray0[8] = (byte)23;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("33 54 38 53 e3 c2 10 3f 17", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("E?5G1}63=<>@9kQ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E?5G1}63=<>@9kQ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "`Fnb%0,\"j]LZqy^I;`B";
      Utility.searchOpcode("`Fnb%0,\"j]LZqy^I;`B");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "`Fnb%0,\"j]LZqy^I;`B";
      objectArray0[1] = (Object) "`Fnb%0,\"j]LZqy^I;`B";
      objectArray0[2] = (Object) "`Fnb%0,\"j]LZqy^I;`B";
      objectArray0[3] = (Object) "`Fnb%0,\"j]LZqy^I;`B";
      objectArray0[4] = (Object) "`Fnb%0,\"j]LZqy^I;`B";
      objectArray0[5] = (Object) "`Fnb%0,\"j]LZqy^I;`B";
      objectArray0[6] = (Object) "`Fnb%0,\"j]LZqy^I;`B";
      objectArray0[7] = (Object) "`Fnb%0,\"j]LZqy^I;`B";
      objectArray0[8] = (Object) "`Fnb%0,\"j]LZqy^I;`B";
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false);
      Utility.clearBit((short) (-1), (short) (-1));
      // Undeclared exception!
      try { 
        Utility.signatureToString("`Fnb%0,\"j]LZqy^I;`B, `Fnb%0,\"j]LZqy^I;`B, `Fnb%0,\"j]LZqy^I;`B, `Fnb%0,\"j]LZqy^I;`B, `Fnb%0,\"j]LZqy^I;`B, `Fnb%0,\"j]LZqy^I;`B, `Fnb%0,\"j]LZqy^I;`B, `Fnb%0,\"j]LZqy^I;`B, `Fnb%0,\"j]LZqy^I;`B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``Fnb%0,\"j]LZqy^I;`B, `Fnb%0,\"j]LZqy^I;`B, `Fnb%0,\"j]LZqy^I;`B, `Fnb%0,\"j]LZqy^I;`B, `Fnb%0,\"j]LZqy^I;`B, `Fnb%0,\"j]LZqy^I;`B, `Fnb%0,\"j]LZqy^I;`B, `Fnb%0,\"j]LZqy^I;`B, `Fnb%0,\"j]LZqy^I;`B'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-V?FD<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -V?FD<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)17;
      byteArray0[6] = (byte) (-71);
      byteArray0[6] = (byte) (-66);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("_$b4IA$R$A$be", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.isJavaIdentifierPart('');
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      String string0 = Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[10];
      byteArray1[0] = (byte)84;
      byteArray1[1] = (byte) (-114);
      byteArray1[2] = (byte) (-114);
      byteArray1[3] = (byte) (-114);
      byteArray1[4] = (byte) (-114);
      byteArray1[5] = (byte)36;
      byteArray1[6] = (byte) (-114);
      byteArray1[7] = (byte) (-114);
      byteArray1[8] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("$8e$A$A$A$A");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((-184));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-82);
      byteArray0[0] = (byte) (-82);
      byte byte1 = (byte)18;
      byteArray0[1] = (byte)18;
      byte byte2 = (byte) (-21);
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)41;
      byte byte3 = (byte) (-74);
      byteArray0[4] = (byte) (-74);
      byte byte4 = (byte) (-52);
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte) (-13);
      byte byte5 = (byte) (-39);
      byteArray0[7] = (byte) (-39);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.read();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Utility.accessToString((-2374), true);
      Utility.setBit((-2374), 254);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1499, (-2374), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("SourceFile");
      byte[] byteArray0 = new byte[23];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-69);
      byteArray0[17] = (byte) (-69);
      byteArray0[5] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("if_icmpgt\t\t#15291", string0);
      
      String string1 = Utility.compactClassName(", max_locals = ");
      assertEquals(", max_locals = ", string1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("idF5..;)UXY", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Dont call getValueByte() on a non BYTE ElementValue";
      stringArray0[1] = "Dont call getValueByte() on a non BYTE ElementValue";
      stringArray0[2] = "Dont call getValueByte() on a non BYTE ElementValue";
      stringArray0[3] = "Dont call getValueByte() on a non BYTE ElementValue";
      String string0 = Utility.methodTypeToSignature("Dont call getValueByte() on a non BYTE ElementValue", stringArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.classOrInterface(3434);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-937), (-3567));
      constantMethodHandle0.setReferenceKind((-3567));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byteSequence0.close();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.searchOpcode("],g(|r{y#.f");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)9;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 58, (int) (byte)98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.s=O.=!d.u9|~_KEcx");
      assertEquals("java.lang.s=O.=!d.u9|~_KEcx", string0);
      
      String string1 = Utility.fillup("java.lang.s=O.=!d.u9|~_KEcx", 70, false, 'q');
      assertEquals("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqjava.lang.s=O.=!d.u9|~_KEcx", string1);
      
      Utility.compactClassName(".jar");
      String string2 = Utility.getSignature(".jar");
      assertEquals("L/jar;", string2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Utility.classOrInterface(3358);
      Utility.compactClassName("class");
      Utility.replace("boolean", "class", "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3618);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Object[] objectArray0 = new Object[0];
      Utility.compactClassName("6;$Fh_(:Q}<,$CwR", "fload_2", true);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("onABZzhcL*", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.compactClassName("onABZzhcL*", "onABZzhcL*", false);
      assertEquals("onABZzhcL*", string0);
      
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("onABZzhcL$w", string1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantClass constantClass0 = new ConstantClass((byte)24);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      constantArray0[6] = (Constant) constantClass0;
      constantArray0[7] = (Constant) constantClass0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-69);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-69), (int) (byte) (-100), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lor
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.isSet((-4027), (-4027));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)61;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes(")c&cvn2gr_I\fYsU7", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )c&cvn2gr_I\fYsU7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.searchOpcode("u(\"]Jo");
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("", "", true);
      byte[] byteArray0 = new byte[8];
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!#g53R4;q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #g53R4;q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.compactClassName("L\";V", "", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "L\";V", "$w+.1~'I4A *A", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Utility.getSignature("BJ)u | F'");
      assertEquals("LBJ)u;", string0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "LBJ)u;";
      objectArray0[1] = (Object) "BJ)u | F'";
      objectArray0[2] = (Object) "BJ)u | F'";
      objectArray0[3] = (Object) "LBJ)u;";
      objectArray0[4] = (Object) "BJ)u | F'";
      objectArray0[5] = (Object) "BJ)u | F'";
      objectArray0[6] = (Object) "BJ)u | F'";
      objectArray0[7] = (Object) "BJ)u | F'";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{LBJ)u;, BJ)u | F', BJ)u | F', LBJ)u;, BJ)u | F', BJ)u | F', BJ)u | F', BJ)u | F'}", string1);
      
      String string2 = Utility.convertString("{LBJ)u;, BJ)u | F', BJ)u | F', LBJ)u;, BJ)u | F', BJ)u | F', BJ)u | F', BJ)u | F'}");
      assertEquals("{LBJ)u;, BJ)u | F\\', BJ)u | F\\', LBJ)u;, BJ)u | F\\', BJ)u | F\\', BJ)u | F\\', BJ)u | F\\'}", string2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Bcw3=9iDXodf");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("land");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `land'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = Utility.getSignature("float");
      assertEquals("F", string0);
      
      String string1 = Utility.fillup("float", (-201), true, 'S');
      assertEquals("float", string1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-56);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 39, (int) (byte)58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "i2l";
      objectArray0[1] = (Object) (byte)101;
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{i2l, 101}", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format((-1792), 76, true, '8');
      Utility.compactClassName("java.lang.StringBuffer", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("java.lang.UzKxp8nVZ7");
      constantArray0[1] = (Constant) constantUtf8_0;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ixor", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("arraylength", "{\"java.lang.Object@4000eb15\", \"java.lang.Object@7984a2ab\", \"java.lang.Object@26c3acab\", null, null, null, null}", "arraylength", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: arraylength
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      constantPool1.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("XtjGw;h$NyP~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XtjGw;h$NyP~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("onABZzhcL*", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.compactClassName("onABZzhcL*", "onABZzhcL*", false);
      assertEquals("onABZzhcL*", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("ddiv", string1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("lb8v 1j\"_C", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("idiv", string0);
      
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("fadd", string1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.signatureToString("Bm_;/J7/");
      try { 
        Utility.methodSignatureReturnType("KqwpHJ}Sb3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KqwpHJ}Sb3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('e');
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      File file0 = MockFile.createTempFile("f2l", "iconst_3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "iconst_1", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      assertEquals(11L, file0.length());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.signatureToString("VD0`mf=hf", true);
      short short0 = Utility.searchOpcode("VD0`mf=hf");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('r');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("void", "VD0`mf=hf", true);
      assertEquals("void", string0);
      
      byte[] byteArray0 = Utility.decode("void", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fneg", string1);
      
      String string2 = Utility.accessToString((-534));
      assertEquals("private static synchronized volatile transient native abstract strictfp synthetic annotation enum", string2);
      
      String string3 = Utility.getSignature(")");
      assertEquals("L);", string3);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, 0, 3214);
      Utility.isSet(0, 13);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.isSet((byte)99, 161);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.accessToString(34, true);
      try { 
        Utility.typeOfSignature("/0Z~gD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /0Z~gD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Rw", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Rw'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 0;
      Utility.isSet((-1737), 0);
      try { 
        Utility.decode("<", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Rw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rw
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      Utility.isJavaIdentifierPart('\\');
      Utility.format(0, 180, false, 't');
      Utility.classOrInterface(180);
      try { 
        Utility.typeOfSignature("ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.decode("RiEwQ/~$", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-73);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$b7", string0);
      
      byte[] byteArray1 = Utility.decode("$A$b7", false);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-73)}, byteArray1);
      
      short short0 = Utility.searchOpcode("&w^J%G{$,]u|");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_acmpeq\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Utility.signatureToString("VD0`mf=hf", false);
      String string0 = Utility.compactClassName("void", "f", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-101);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      CodeException codeException0 = new CodeException(byteSequence0);
      int int0 = Utility.clearBit((byte)77, (-349));
      assertEquals(69, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("J'l_Qm9{laOUArc|0");
      assertEquals("long", string0);
      
      short short0 = Utility.searchOpcode("long");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('A');
      assertTrue(boolean0);
      
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = Utility.accessToString((-2374), true);
      int int0 = Utility.setBit((-2374), 254);
      assertEquals((-2374), int0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.decode("private static final transient abstract synthetic annotation enum", false);
      String string1 = Utility.compactClassName("private static final transient abstract synthetic annotation enum");
      assertTrue(string1.equals((Object)string0));
      
      int int1 = Utility.clearBit((-1779), 1083);
      assertEquals((-134219507), int1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "{|";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("{|", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.isJavaIdentifierPart('.');
      Utility.methodSignatureReturnType("Code(max_stack = ");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 102, (int) (byte)107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('?');
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Illegally nested brackets:", (String) null, "Nn?MpY-zb54G", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Illegally nested brackets:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Utility.classOrInterface(161);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L4z\"]bv9Oi]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L4z\"]bv9Oi]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[4] = (byte) (-94);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-89));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.isJavaIdentifierPart('X');
      String string0 = "4@psM6ReWN0rm3EQ";
      try { 
        Utility.typeOfSignature("4@psM6ReWN0rm3EQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4@psM6ReWN0rm3EQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Integer integer0 = new Integer(254);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(92, (byte) (-103), byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("float", "@", "@", true, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iload\t\t%21", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      try { 
        Utility.typeOfSignature("6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte)56;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lmul", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Utility.compactClassName("onABZzhcL*", "onABZzhcL*", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      byte[] byteArray1 = new byte[0];
      String string0 = Utility.encode(byteArray1, false);
      assertEquals("", string0);
      
      byte[] byteArray2 = Utility.decode("jsr_w", false);
      assertArrayEquals(new byte[] {(byte)106, (byte)115, (byte)114, (byte)95, (byte)119}, byteArray2);
      
      String string1 = Utility.compactClassName("ej6g%T", "Il[", true);
      assertEquals("ej6g%T", string1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.fillup("L\";V", 173, true, 'Q');
      Utility.isJavaIdentifierPart('g');
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[0] = (Object) "L\";VQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ";
      objectArray0[2] = (Object) "L\";V";
      objectArray0[3] = (Object) "L\";V";
      objectArray0[4] = (Object) "L\";V";
      Utility.printArray(objectArray0, true, false);
      try { 
        Utility.typeOfSignature("?kG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?kG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("L\";V");
      assertEquals("\"", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte)82;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-19), false);
      assertEquals("0:    nop\n1:    dup\n2:    lshr\n3:    d2f\n4:    d2f\n5:    dup2_x1\n6:    <illegal opcode>\n7:    dastore\n", string1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-89));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      byteSequence0.available();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)17;
      byteArray1[1] = (byte) (-64);
      byteArray1[2] = (byte) (-74);
      byteArray1[3] = (byte) (-117);
      byteArray1[4] = (byte) (-102);
      byteArray1[5] = (byte)79;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("sipush\t\t-16202", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(32, 32);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantInteger constantInteger0 = new ConstantInteger(1880);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46517. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantClass constantClass0 = new ConstantClass((byte)24);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[0] = (Constant) constantClass0;
      constantArray0[5] = (Constant) constantClass0;
      constantArray0[6] = (Constant) constantClass0;
      constantArray0[7] = (Constant) constantClass0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-69);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)24;
      byteArray1[1] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dload\t\t%181", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.replace("Illegally nestedbrackets:", "Illegally nestedbrackets:", "impdep2");
      String string0 = "3VlkN";
      Utility.compactClassName("Illegally nestedbrackets:", "3VlkN", true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("3VlkN", "<eDs}k>/CQNX:a");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // <eDs}k>/CQNX:a
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-1L));
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("iload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iload_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1486), 834);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      Constant[] constantArray0 = new Constant[21];
      constantArray0[0] = (Constant) constantMethodHandle0;
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte)122;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)105, (int) (byte)40, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Utility.format(122, 4, true, '*');
      Utility.convertString("122*");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = Utility.convertString("jsr");
      assertEquals("jsr", string0);
      
      String string1 = Utility.classOrInterface((-2818));
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)30;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@^!U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @^!U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "Synthetic";
      Utility.convertString("Synthetic");
      String string1 = "\t(wide)";
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)24;
      Constant[] constantArray0 = new Constant[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantClass constantClass0 = new ConstantClass(766);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2409, 2761);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.signatureToString("Illegal signature: ", false);
      assertEquals("int", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{}", string1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.isJavaIdentifierPart('X');
      try { 
        Utility.typeOfSignature("OdWB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: OdWB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "";
      Utility.searchOpcode("");
      boolean boolean0 = false;
      Utility.compactClassName("", false);
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.accessToString((-2374), true);
      Utility.setBit((-2374), 254);
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$l$8b$I$A$A$A$A$A$A$A", "#p[", ">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";i'30Fk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;i'30Fk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.format((byte)48, (byte)48, true, '8');
      assertEquals("488888888888888888888888888888888888888888888888", string0);
      
      String string1 = Utility.classOrInterface((-234));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.compactClassName("D(/[H0");
      // Undeclared exception!
      try { 
        Utility.getSignature("D(.[H0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[H0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("C-}");
      assertEquals((byte)5, byte0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = Utility.replace("dreturn", "dreturn", "dreturn");
      assertEquals("dreturn", string0);
      
      int int0 = Utility.setBit((-1417), (-351));
      assertEquals((-1417), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      constantPool1.setConstantPool((Constant[]) null);
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1598, (-1321), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("onABZzhcL*", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.compactClassName("onABZzhcL*", "onABZzhcL*", false);
      assertEquals("onABZzhcL*", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-1L));
      byteSequence0.readByte();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fdiv", string1);
      
      String string2 = Utility.accessToString(58);
      assertEquals("private static final synchronized", string2);
      
      String string3 = Utility.getSignature("ifnonnull");
      assertEquals("Lifnonnull;", string3);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = "<illegal ocode>";
      stringArray0[1] = "<illegal ocode>";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte) (-97);
      byteArray0[8] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteSequence0.readInt();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("<illegal ocode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal ocode>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = Utility.compactClassName(")c&cvn2gr_I\fYsU7");
      assertEquals(")c&cvn2gr_I\fYsU7", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('=');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "j%YQjm]G,5CL2w.)3i;";
      String string1 = "The offset cannot be negative";
      // Undeclared exception!
      try { 
        Utility.signatureToString("The offset cannot be negative", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The offset cannot be negative
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantClass constantClass0 = new ConstantClass((byte)24);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[2] = (Constant) constantClass0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)95;
      String string0 = Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.isSet((-2456), (-2456));
      Utility.signatureToString("FX~89", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("float", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "IZLJM$,!";
      stringArray0[1] = "Warning: Padding byte != 0 in ";
      stringArray0[2] = "IZLJM$,!";
      stringArray0[3] = "mt)8$7'qaMW#z";
      stringArray0[4] = "IZLJM$,!";
      Utility.methodTypeToSignature("IZLJM$,!", stringArray0);
      MockFile mockFile0 = new MockFile("akcZ14mT{#+sw", "mt)8$7'qaMW#z");
      File file0 = MockFile.createTempFile("(LIZLJM$,!;LWarning:;LIZLJM$,!;Lmt)8$7'qaMW#z;LIZLJM$,!;)LIZLJM$,!;", "", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(file0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ConstantUtf8.getInstance("SourceFile");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Utility.convertString(".Constan pool size is: ");
      assertEquals(".Constan pool size is: ", string0);
      
      String string1 = Utility.format((-1423), (-1423), false, '\"');
      assertEquals("-1423", string1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      try { 
        Utility.typeOfSignature("URUpWf_Foa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: URUpWf_Foa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Integer integer0 = new Integer(254);
      byte[] byteArray0 = Utility.decode("goto_w", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)71;
      byteArray0[2] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("ret\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      constantPool1.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)113;
      byteArray0[4] = (byte) (-2);
      byteArray0[7] = (byte) (-91);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-2);
      byte byte0 = Utility.typeOfSignature("Invalid type: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      try { 
        Utility.typeOfSignature("Mfa.uqr=~oi&5{Hk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Mfa.uqr=~oi&5{Hk
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = Utility.clearBit('`', '`');
      assertEquals(96, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("istore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.compactClassName("short");
      Utility.getSignature("getField");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$aa$A$A$A$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("$aa$A$A$A$A$A", false);
      assertEquals(6, byteArray1.length);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      String string1 = Utility.format((byte) (-86), (byte) (-86), false, 'R');
      assertEquals("-86", string1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("TKkx(kNX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TKkx(kNX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[A94sp4-8bIkbeh4Eo", "[A94sp4-8bIkbeh4Eo", "[A94sp4-8bIkbeh4Eo", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [A94sp4-8bIkbeh4Eo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "M?Y]b-@0d$|'";
      try { 
        Utility.methodSignatureReturnType("M?Y]b-@0d$|'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M?Y]b-@0d$|''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.compactClassName("Ox>o}=<ItC|=AJd0ho,");
      int int0 = 123;
      Utility.fillup("ret", 123, false, '4');
      boolean boolean0 = true;
      try { 
        Utility.decode("Only element values of type array can be built with this ctor - type specified: ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.clearBit('`', '`');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-82);
      byteArray0[0] = (byte)6;
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-19);
      byteArray1[1] = (byte) (-19);
      byteArray1[2] = (byte)117;
      byteArray1[3] = (byte) (-71);
      byteArray1[4] = (byte) (-71);
      Utility.encode(byteArray1, true);
      Utility.decode("JwV[4Z1$#S", false);
      Utility.searchOpcode("xQ7");
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-71);
      byteArray2[1] = (byte) (-19);
      byteArray2[2] = (byte) (-77);
      byteArray2[3] = (byte)117;
      byteArray2[4] = (byte) (-71);
      byteArray2[5] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -77
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "JI|drErzQ3jsM^";
      Utility.signatureToString("JI|drErzQ3jsM^", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byte byte0 = (byte)79;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)86;
      byte byte1 = (byte)45;
      byteArray0[5] = (byte)45;
      Utility.equals(byteArray0, byteArray0);
      String string1 = "Q}]1}gXqv}=:q?~";
      int int0 = (-5323);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, (byte) (-20));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.convertString(";");
      String string0 = "wide";
      String string1 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      try { 
        Utility.methodSignatureToString("wide", "s%1)H3>HxM", "2", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wide
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.methodSignatureReturnType("FULL", false);
      Utility.printArray((Object[]) null, false, false);
      boolean boolean0 = true;
      Utility.fillup("FULL", 170, true, 'a');
      Utility.isJavaIdentifierPart('g');
      Utility.printArray((Object[]) null, false, true);
      Utility.typeOfSignature("FULL");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte) (-5);
      byteArray0[8] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = "}*J4\"{nHmd";
      String string1 = "jsr_w";
      boolean boolean0 = false;
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((byte)68, 45, byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('X');
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("Deprecated", true);
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('`');
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit((-2906), (-2906));
      assertEquals((-2906), int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("istore\t\t%45", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('4');
      assertTrue(boolean0);
      
      byte[] byteArray0 = Utility.decode("$~wEn^I<8k?\"T", false);
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ConstantUtf8.getInstance("SourceFile");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47942. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.classOrInterface(3358);
      Utility.compactClassName("class");
      Utility.replace("boolean", "class", "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(3618);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "6;$Fh_(:Q}<,$CwR", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertEquals(20, charArrayWriter0.size());
      assertEquals("6;$Fh_(:Q}<,$CwR{}\n", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byte byte0 = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(32, 32);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantInteger constantInteger0 = new ConstantInteger(1880);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Only element values of type array can be built with this ctor - type specified: ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Only element values of type array can be built with this ctor - type specified: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.signatureToString("L\";V");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool1, (-5187), (-5187));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("XL!HJ1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XL!HJ1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("onABZzhcL*", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("onABZzhcL*", "onABZzhcL*", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-81);
      byteArray1[1] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-4836), (-4836), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dreturn
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("yqJ", "yqJ", false);
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-4027), (-4027));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_0", string0);
      
      byte byte0 = Utility.typeOfSignature("CH`yOdeq=iY:LG=S");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Wsl*^xHSRs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Wsl*^xHSRs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      Utility.codeToString(byteArray0, constantPool0, 0, 3214);
      Object object0 = new Object();
      String string0 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{}", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('O');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore\t\t%174", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-88);
      byteArray0[0] = (byte) (-88);
      byte byte1 = (byte)9;
      byteArray0[1] = (byte)9;
      byte byte2 = (byte)69;
      byteArray0[2] = (byte)69;
      byte byte3 = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)89;
      byte byte4 = (byte)86;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)16;
      byte byte5 = (byte)92;
      byteArray0[7] = (byte)92;
      byte byte6 = (byte)77;
      byteArray0[8] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "'P/rd6S.S`+";
      String string1 = "sW";
      String string2 = "Jn(]";
      int int0 = (-4217);
      LocalVariable[] localVariableArray0 = new LocalVariable[5];
      int int1 = 104;
      int int2 = 632;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)77;
      byteArray1[2] = (byte) (-108);
      CodeException[] codeExceptionArray0 = new CodeException[8];
      CodeException codeException0 = null;
      try {
        codeException0 = new CodeException(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[4] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("aload_3", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)14, (int) (byte)124, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.decode("4D=", false);
      Utility.accessToString(41);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "public static synchronized";
      objectArray0[1] = (Object) "public static synchronized";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "public static synchronized";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("astore_0", false);
      assertEquals("astore_0", string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("8 1j\"_C", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("fstore\t\t%32", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.replace("LxT[4cdo5|k}NWyQ", "LxT[4cdo5|k}NWyQ", "LxT[4cdo5|k}NWyQ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "(", ", length = ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("K6s0", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K6s0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "7XW72.:Wy\\!xBwye4";
      try { 
        Utility.typeOfSignature("7XW72.:Wy!xBwye4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7XW72.:Wy!xBwye4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<illegal ocode>";
      stringArray0[1] = "<illegal ocode>";
      stringArray0[2] = "<illegal ocode>";
      stringArray0[3] = "<illegal ocode>";
      Utility.methodTypeToSignature("<illegal ocode>", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.accessToString((-2374), false);
      int int0 = new Integer(254);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-9);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-9), (int) (byte) (-9), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = "A/>iT;1 <&IC<Mt/`";
      try { 
        Utility.typeOfMethodSignature("A/>iT;1 <&IC<Mt/`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A/>iT;1 <&IC<Mt/`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("X6zd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X6zd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = Utility.format(610, 610, false, '#');
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      try { 
        Utility.typeOfSignature("EM_S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EM_S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.isJavaIdentifierPart('X');
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("o$A");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(3522, (byte)0);
      constantArray0[1] = (Constant) constantNameAndType0;
      int int0 = (-2632);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2632), (-465));
      constantArray0[2] = (Constant) constantMethodHandle0;
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iadd", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "dreturn";
      Utility.replace("dreturn", "dreturn", "dreturn");
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'", "0l5}{FP/VrvM*NQK", (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*F+ieW]i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: F+ieW]i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = Utility.classOrInterface(161);
      assertEquals("class", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload\t\t%2", string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Utility.isSet(256, 256);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.replace("PO9n", "PO9n", "PO9n");
      try { 
        Utility.typeOfSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("inokestatic", "jsr_w", "inokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: inokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.getSignature("JavaClass.debug");
      String string0 = Utility.signatureToString("LJavaClass/debug;", false);
      assertEquals("JavaClass.debug", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-66));
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string1 = Utility.replace("arraylength", "double", "YS:NDIK$!vYY7cT6FOv");
      assertEquals("arraylength", string1);
      
      String string2 = Utility.getSignature("}z]D:K*2r=d!");
      assertEquals("L}z]D:K*2r=d!;", string2);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-66);
      byteArray1[1] = (byte) (-80);
      byteArray1[2] = (byte) (-66);
      byteArray1[3] = (byte) (-66);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "if_icmpne";
      Utility.getSignature("if_icmpne");
      Utility.fillup("Y>$v", 49, true, ';');
      Utility.classOrInterface(49);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lif_icmpne;");
      Utility.accessToString(103);
      Utility.searchOpcode("if_icmpne");
      boolean boolean0 = false;
      Utility.compactClassName("Y>$v;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;", false);
      String string1 = "{W?qdux'g!\"&]Fl'8";
      try { 
        Utility.typeOfMethodSignature("{W?qdux'g!\"&]Fl'8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {W?qdux'g!\"&]Fl'8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(']');
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ba^7j0[;b";
      stringArray0[1] = "ba^7j0[;b";
      stringArray0[2] = "ba^7j0[;b";
      stringArray0[3] = "ba^7j0[;b";
      stringArray0[4] = "ba^7j0[;b";
      stringArray0[5] = "ba^7j0[;b";
      // Undeclared exception!
      try { 
        Utility.getSignature("ba^7j0[;b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[;b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lF<US1vb\\", "", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lF<US1vb\\
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)121, (int) (byte)121, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifne\t\t#-6246", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Ox>o}=<ItC|=AJd0ho,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ox>o}=<ItC|=AJd0ho,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.isJavaIdentifierPart('c');
      String string0 = "\t\t#";
      try { 
        Utility.decode("\t\t#", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isSet(9, 9);
      assertFalse(boolean0);
      
      String string0 = Utility.classOrInterface((-1164));
      assertEquals("interface", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)48;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("fz0", string1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('\u0086');
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      Utility.getSignature("{java.lang.Object@7b8ffa9a, java.lang.Object@31db88ce, java.lang.Object@7b9287f0}");
      String string0 = Utility.methodTypeToSignature("GEw&>XO`s;q=l", (String[]) null);
      assertEquals("()LGEw&>XO`s;q=l;", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y*n=</eF,Ns'RQ\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y*n=</eF,Ns'RQ\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("TKk:x(kN;");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.signatureToString("TKk:x(kN;", false);
      String string1 = Utility.replace("Kk:x(kN", "TKk:x(kN;", "TKk:x(kN;");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "L;";
      objectArray0[2] = (Object) "\"";
      objectArray0[3] = (Object) "\"";
      objectArray0[4] = (Object) "\"";
      objectArray0[5] = (Object) "L;";
      objectArray0[6] = (Object) "";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{, L;, \", \", \", L;, }", string1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)16;
      byteArray0[1] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = false;
      Utility.searchOpcode("W %pEwg) P;%1");
      Utility.isJavaIdentifierPart('M');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-96);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-96));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (short) (-1), (int) (byte)70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore_3
         // 1:    iload_3
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = Utility.getSignature("ifnonnull");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte)13;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.clearBit('`', '`');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)51;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("short");
      PrintWriter printWriter0 = mockPrintWriter0.append('L');
      Utility.printArray(printWriter0, objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$3c$A$A$A$A$A$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("$3c$A$A$A$A$A$A$A", false);
      assertEquals(8, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)60, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      String string1 = Utility.compactClassName("Invalid signature: `", "Il[", true);
      assertEquals("Invalid signature: `", string1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip(0L);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("areturn", false);
      try { 
        Utility.typeOfMethodSignature("ifge");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifge
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format(40, 172, true, 'E');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 39
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("imul", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = object0;
      objectArray1[1] = object1;
      objectArray1[2] = object0;
      Utility.printArray(objectArray1, true, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.AnnotationDefault", "astore_0", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfMethodSignature("lreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("drem", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `drem'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 29, true, '\"');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.compactClassName("java.lang.Ox>o}=<ItC|=AJd0ho,");
      String string1 = Utility.replace("Ox>o}=<ItC|=AJd0ho,", "uV(Q,2!7Tf5F$hqyYaN", (String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_1", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = ".T:W`";
      Utility.compactClassName(".T:W`");
      try { 
        Utility.typeOfSignature(".T:W`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .T:W`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('%');
      Utility.isSet((-289), (-289));
      String string0 = "}";
      try { 
        Utility.typeOfSignature("}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lload_3", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte) (-123);
      byteArray0[8] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      boolean boolean0 = Utility.isJavaIdentifierPart('S');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte) (-123);
      objectArray0[2] = (Object) (byte)89;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{null, \"-123\", \"89\"}", string0);
      
      String string1 = Utility.format(3122, (-841), true, '|');
      assertEquals("3122", string1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte) (-42);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 156, (int) (byte) (-42), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1847, (int) (byte) (-12), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", signature_index = ");
      byteArray0[0] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Utility.compactClassName("URUpWf_Foa");
      // Undeclared exception!
      try { 
        Utility.signatureToString("URUpWf_Foa", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `URUpWf_Foa'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = "";
      Utility.replace("org.apache.bcel.classfile.Utility$1", ", high = ", "");
      int int0 = (-491);
      boolean boolean0 = false;
      Utility.fillup(" '(@g]2@B[o", (-491), false, '!');
      String string1 = "class";
      Utility.decode("class", false);
      Utility.clearBit((-491), (-591));
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+3b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-21);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray1 = new byte[2];
      byte byte0 = (byte) (-86);
      byteArray1[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 123, (int) (byte) (-101), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-108);
      byteArray0[2] = (byte)77;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      CodeException codeException0 = new CodeException(byteSequence0);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$94$AM$A$A$A$A$A$A$A$A$A$A", string0);
      
      byte[] byteArray1 = Utility.decode("$94$AM$A$A$A$A$A$A$A$A$A$A", false);
      assertEquals(13, byteArray1.length);
      
      short short0 = Utility.searchOpcode("VtBRN:o?k,3W\r~~");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = "2_)1xf&3H)!?nKqO_";
      boolean boolean0 = true;
      Utility.compactClassName("2_)1xf&3H)!?nKqO_", "2_)1xf&3H)!?nKqO_", true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "2_)1xf&3H)!?nKqO_";
      objectArray0[1] = (Object) "2_)1xf&3H)!?nKqO_";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "2_)1xf&3H)!?nKqO_";
      objectArray0[4] = (Object) "2_)1xf&3H)!?nKqO_";
      objectArray0[5] = (Object) "2_)1xf&3H)!?nKqO_";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      Utility.printArray(objectArray0, true);
      MockFile mockFile0 = new MockFile("2_)1xf&3H)!?nKqO_", "");
      MockFile mockFile1 = new MockFile(mockFile0, "z#|_]yiw\u0000");
      String string1 = "xsW:SL\\?lPc{";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile1, "xsW:SL?lPc{");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // xsW:SL?lPc{
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = "Synthetic";
      Utility.convertString("Synthetic");
      try { 
        Utility.methodSignatureArgumentTypes("\t(wide)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t(wide)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ya(r", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ya(r'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean boolean0 = Utility.isSet(75, (-871));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(4);
      Utility.convertString("protected");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)30;
      Utility.equals(byteArray0, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_0", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[NE}V]a", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NE}V]a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.format((byte)0, (-3628), false, '2');
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifnull\t\t#14833", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-31);
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte) (-15);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantClass constantClass0 = new ConstantClass((byte)24);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload\t\t%24", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1), (int) (byte)20, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      // Undeclared exception!
      Utility.replace(", offset=", "", "");
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      boolean boolean0 = true;
      String[] stringArray0 = Constants.ATTRIBUTE_NAMES;
      Utility.compactClassName("(!hw/dbk#JE/K_2l7Ne", "wide", true);
      String string0 = " arg";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(!hw/dbk#JE/K_2l7Ne", "(!hw/dbk#JE/K_2l7Ne", " arg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!hw/dbk#JE/K_2l7Ne'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Dont call getValueByte() on a non BYTE ElementValue");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-116);
      byteArray0[7] = (byte) (-116);
      byteArray0[8] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Utility.isSet((-4027), (-4027));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2^bSL1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2^bSL1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      try { 
        Utility.typeOfSignature("GM&d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: GM&d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-100);
      byteArray0[0] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("lload_1", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("AN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `AN'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lload_0", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Utility.replace("LxT[4cdo5|k}NWyQ", "LxT[4cdo5|k}NWyQ", "LxT[4cdo5|k}NWyQ");
      try { 
        Utility.methodSignatureArgumentTypes("(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Utility.signatureToString("VD0`mf=hf", true);
      Utility.searchOpcode("VD0`mf=hf");
      byte[] byteArray0 = Utility.decode("byte", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      constantPool1.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dadd", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = null;
      boolean boolean0 = false;
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((byte)24, (byte) (-119), byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Utility.compactClassName("", "", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-92);
      Utility.signatureToString("VD0`mf=hf", true);
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[0] = (byte) (-56);
      byteArray0[2] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, constantPool1, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("astore_1", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(95, (byte) (-93));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, constantPool1, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-114);
      byteArray0[0] = (byte) (-114);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("$8e$A$A$A", "[/ousX|Gv,\":", "[/ousX|Gv,\":", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $8e$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NevPzU4zMH@rhPHyxK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NevPzU4zMH@rhPHyxK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      int int0 = 0;
      Utility.isSet(59, 0);
      try { 
        Utility.decode("<", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("y[=z65.)RJDXae");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RJDXae'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2b", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("'*g=PG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '*g=PG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = "dup2_x2";
      try { 
        Utility.methodSignatureToString("*0=>*]2::k{ 2F;N0W", "*0=>*]2::k{ 2F;N0W", "dup2_x2", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *0=>*]2::k{ 2F;N0W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte)89;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-123);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte) (-123);
      byteArray1[2] = (byte)81;
      byteArray1[3] = (byte)13;
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte) (-123);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string0 = Utility.signatureToString("B- ,X", false);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Utility.signatureToString("VD0`mf=hf", true);
      short short0 = Utility.searchOpcode("VD0`mf=hf");
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('r');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("void", "VD0`mf=hf", true);
      assertEquals("void", string0);
      
      byte[] byteArray0 = Utility.decode("void", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.readByte();
      String string1 = Utility.accessToString((-534));
      assertEquals("private static synchronized volatile transient native abstract strictfp synthetic annotation enum", string1);
      
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lmul", string2);
      
      String string3 = Utility.format((byte)111, 3, true, 'r');
      assertEquals("111", string3);
      
      String string4 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("isub", string4);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)93, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Kk:x(kNU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kk:x(kNU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Utility.getSignature("JavaClass.debug");
      Utility.signatureToString("LJavaClass/debug;", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-66));
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("}:>)5s`", "goto", "JavaClass.debug", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }:>)5s`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = ")\t";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-94);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('3');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = "short";
      stringArray0[3] = "short";
      String string0 = Utility.methodTypeToSignature("short", stringArray0);
      assertEquals("(SSSS)S", string0);
      
      String string1 = Utility.convertString("float");
      assertEquals("float", string1);
      
      String string2 = Utility.methodSignatureToString("(SSSS)S", "K3Vb{r~|w_", "short", true);
      assertEquals("short short K3Vb{r~|w_(short arg1, short arg2, short arg3, short arg4)", string2);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[5] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3'?FD<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3'?FD<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("8)iJu;$b||3(#$o");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String[] stringArray0 = new String[6];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('7');
      Utility.toHexString(byteArray0);
      MockFile mockFile0 = new MockFile("bb bb bb 00", "@&*?k9Sf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object object0 = new Object();
      PrintStream printStream0 = mockPrintStream0.format("\t(wide)", (Object[]) stringArray0);
      Utility.printArray(printStream0, (Object[]) stringArray0);
      assertEquals(44L, mockFile0.length());
      
      Utility.accessToString((-3793));
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("bb bb bb 00", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Utility.compactClassName("Q9>:(?.B?");
      Utility.getSignature("Q9>:(?.B?");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Q9>:(?.B?";
      stringArray0[1] = "Q9>:(?.B?";
      Utility.methodTypeToSignature("Q9>:(?.B?", stringArray0);
      try { 
        Utility.typeOfSignature("Q9>:(?.B?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q9>:(?.B?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Utility.classOrInterface(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte) (-12);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      String string0 = "d#HRd2S$";
      int int0 = (-299);
      int int1 = (-2151);
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      int int2 = 118;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = Utility.compactClassName("short");
      assertEquals("short", string0);
      
      Utility.getSignature(":");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L:;";
      stringArray0[1] = "L:;";
      stringArray0[2] = ":";
      stringArray0[3] = "short";
      stringArray0[4] = ":";
      String string1 = Utility.methodTypeToSignature("? extends ", stringArray0);
      assertEquals("(LL:;;LL:;;L:;SL:;)L?;", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-2), (int) (byte)9, true);
      assertEquals("0:    faload\n1:    impdep1\n2:    lconst_0\n", string2);
      
      String string3 = Utility.accessToString((int) (byte)48);
      assertEquals("final synchronized", string3);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.printArray((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.getSignature("m[AQGDgLv$]v@kS81a");
      Constant[] constantArray0 = new Constant[7];
      int int0 = 198;
      ConstantString constantString0 = new ConstantString(198);
      constantArray0[0] = (Constant) constantString0;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile((File) null, "[Lm;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"[Lm;\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Utility.decode("onABZzhcL*", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("onABZzhcL*", "onABZzhcL*", false);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Utility.compactClassName("0r!!0", "\t", false);
      try { 
        Utility.typeOfSignature("0r!!0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0r!!0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = Utility.getSignature("):\n");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('G');
      assertTrue(boolean0);
      
      int int0 = Utility.setBit(0, (-1232));
      assertEquals(65536, int0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      try { 
        Utility.typeOfSignature("=class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =class 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)70;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Utility.convertString("vm");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)5;
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureReturnType("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `double'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = Utility.getSignature("L;");
      assertEquals("LL;;", string0);
      
      String string1 = Utility.signatureToString("C8O^pn%hzSNWYpElD", true);
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType(")c&cvn2gr_I\fYsU7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `c&cvn2gr_I\fYsU7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref(32, 32);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, (int) (byte) (-67), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("1>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = "A/>iT;1 <&IC<Mt/`";
      try { 
        Utility.typeOfSignature("A/>iT;1 <&IC<Mt/`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A/>iT;1 <&IC<Mt/`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte)0;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('7');
      Utility.toHexString(byteArray0);
      File file0 = MockFile.createTempFile("00 eb ae 06 00 bb 00", "00 eb ae 06 00 bb 00");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "00 eb ae 06 00 bb 00";
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)6;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) "short";
      objectArray0[6] = (Object) (byte) (-69);
      objectArray0[7] = (Object) (byte) (-69);
      PrintStream printStream0 = mockPrintStream0.format("short", objectArray0);
      Object[] objectArray1 = new Object[9];
      objectArray1[0] = (Object) file0;
      objectArray1[1] = (Object) mockPrintStream0;
      objectArray1[2] = (Object) (byte)0;
      objectArray1[3] = (Object) (byte)0;
      objectArray1[4] = (Object) (byte) (-82);
      objectArray1[5] = (Object) (byte) (-69);
      objectArray1[6] = object0;
      objectArray1[7] = (Object) (byte)6;
      objectArray1[8] = (Object) (byte) (-82);
      Utility.printArray(printStream0, objectArray1);
      assertEquals(164L, file0.length());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ba^7j0[;b";
      stringArray0[1] = "ba^7j0[;b";
      stringArray0[2] = "ba^7j0[;b";
      stringArray0[3] = "ba^7j0[;b";
      stringArray0[4] = "ba^7j0[;b";
      stringArray0[5] = "ba^7j0[;b";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("ba^7j0[;b", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[;b
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-94);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte) (-89);
      byteArray1[2] = (byte) (-86);
      byteArray1[3] = (byte) (-64);
      byteArray1[4] = (byte)54;
      byteArray1[5] = (byte) (-89);
      byteArray1[6] = (byte) (-89);
      byteArray1[7] = (byte) (-94);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray1[8] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, (int) (byte)89, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = Utility.getSignature("):\n");
      assertEquals("L):;", string0);
      
      String string1 = Utility.convertString("):\n");
      assertEquals("):\\n", string1);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Utility.fillup("", (-1844), true, '{');
      Utility.convertString("");
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)34;
      Utility.encode(byteArray0, false);
      boolean boolean0 = true;
      try { 
        Utility.decode("$x$f4$eeY$o", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = Utility.fillup("Bo)u | F'", 154, true, '{');
      assertEquals("Bo)u | F'{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = Utility.compactClassName("invokeinte");
      assertEquals("invokeinte", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-23);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-23), (-3363));
      assertEquals("0:    lconst_0\n1:    lreturn\n2:    <illegal opcode>\n3:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.getSignature("Tit");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1262), (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Utility.clearBit(0, (-1689));
      Utility.searchOpcode("");
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = Utility.getSignature("3fo^ &E");
      assertEquals("L3fo^;", string0);
      
      int int0 = Utility.setBit(83, 83);
      assertEquals(524371, int0);
      
      String string1 = Utility.accessToString(524371);
      assertEquals("public private final volatile", string1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Integer integer0 = new Integer(254);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iinc\t\t%153\t66", string0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      try { 
        Utility.typeOfSignature("8kx}S/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8kx}S/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("KR\"UG&r!&H=S&.p", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 166, (-853), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = Utility.signatureToString("TKk:x(kN;");
      assertEquals("Kk:x(kN", string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-89));
      constantArray0[0] = (Constant) constantDouble0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      byteSequence0.available();
      ConstantInteger constantInteger0 = new ConstantInteger(13);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "org.apache.bcel.classfile.AnnotationElementValue");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      LocalVariable[] localVariableArray0 = new LocalVariable[3];
      LocalVariable localVariable0 = new LocalVariable((byte) (-9), (byte) (-102), (byte) (-102), (byte)9, (-2699), (ConstantPool) null);
      localVariableArray0[0] = localVariable0;
      LocalVariable localVariable1 = new LocalVariable((-2699), (byte) (-9), (byte)65, (-128), (-2699), (ConstantPool) null);
      localVariableArray0[1] = localVariable1;
      LocalVariable localVariable2 = new LocalVariable(54, (byte)87, 87, (-583), 252, (ConstantPool) null);
      localVariableArray0[2] = localVariable2;
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-9), (byte)9, localVariableArray0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "18eB5WP~(", (String) null, false, localVariableTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("if_icmpne\t\t#14889", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Utility.compactClassName("m}+ew`");
      Utility.compactClassName("");
      try { 
        Utility.methodSignatureReturnType("areturn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `areturn'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.getSignature("):\n");
      assertEquals("L):;", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("", "", "", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Utility.isJavaIdentifierPart('t');
      Utility.setBit(57, 57);
      Utility.compactClassName("Pp6*s", "Pp6*s", true);
      try { 
        Utility.methodSignatureReturnType("Pp6*s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Pp6*s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("?iHFtiK!_roe", false);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 166, 91, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance(")\t");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[4] = (byte) (-57);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-73);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-57);
      byteArray1[1] = (byte)70;
      byteArray1[2] = (byte)70;
      byteArray1[3] = (byte) (-73);
      byteArray1[4] = (byte) (-57);
      byteArray1[5] = (byte) (-73);
      byteArray1[6] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 95, (int) (byte) (-57));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 51127. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("$8e$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $8e$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      ConstantUtf8.getInstance(")\t");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[4] = (byte) (-57);
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)9;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte) (-112);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-113), 190, false);
      assertEquals("0:    d2l\n1:    <illegal opcode>\n2:    nop\n3:    d2l\n4:    lshr\n5:    d2f\n6:    d2f\n", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = "<illegal opcode>";
      stringArray0[1] = "<illegal opcode>";
      stringArray0[2] = "<illegal opcode>";
      stringArray0[3] = "<illegal opcode>";
      Utility.methodTypeToSignature("<illegal opcode>", stringArray0);
      Utility.convertString("<illegal opcode>");
      int int0 = 92;
      Utility.accessToString(92, false);
      Utility.compactClassName("<illegal opcode>", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(L<illegal;L<illegal;L<illegal;L<illegal;)L<illegal;", "getfield", "Illegal type: ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;L<illegal;L<illegal;L<illegal;)L<illegal;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = Utility.isSet(86, (-5661));
      assertFalse(boolean0);
      
      String string0 = Utility.getSignature("void");
      assertEquals("V", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Utility.isJavaIdentifierPart('n');
      try { 
        Utility.methodSignatureArgumentTypes("caload");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: caload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Utility.replace("", ">", "");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">";
      stringArray0[1] = ">";
      stringArray0[2] = "\"";
      stringArray0[3] = "";
      Utility.methodTypeToSignature("", stringArray0);
      Utility.accessToString(0, true);
      Utility.printArray((Object[]) stringArray0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-66);
      byte byte0 = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-94);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(32, 32);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantInteger constantInteger0 = new ConstantInteger(1880);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 32, 1110, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "dload_3";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string1 = "l(Db05?ATT*KnKiJ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l(Db05?ATT*KnKiJ");
      char char0 = 'P';
      String[] stringArray0 = new String[1];
      stringArray0[0] = "dload_3";
      Utility.methodTypeToSignature("|mlzQ-1ppi", stringArray0);
      String string2 = Utility.fillup("dload_3", 4208, false, 'P');
      try { 
        Utility.typeOfSignature(string2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signaturedload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.getSignature("K]long");
      Utility.signatureToString("LK]long;");
      Utility.classOrInterface(4);
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "LK]long;";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "class";
      objectArray0[6] = (Object) "class";
      String string1 = Utility.printArray(objectArray0, true, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-123);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte) (-123);
      byteArray1[2] = (byte)81;
      byteArray1[3] = (byte)13;
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte) (-123);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string0 = Utility.signatureToString("B- ,X", false);
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-67);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<Unknown>");
      try { 
        Utility.typeOfSignature("5$?kHI-VK k}{H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5$?kHI-VK k}{H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "jsr_";
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skipBytes((-1679));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.format(0, 0, true, 'n');
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("LId");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LId
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Zr;HUZ2");
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L\";V");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ifge\t\t#-3172", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lor");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)33;
      byteArray0[4] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      int int0 = Utility.clearBit(200, (byte)33);
      assertEquals(200, int0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Utility.format((-373), (-373), false, '*');
      Utility.convertString("J");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfMethodSignature("J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("RiEwQ/~$", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertArrayEquals(new byte[] {(byte)82, (byte)105, (byte)69, (byte)119, (byte)81, (byte)47, (byte)126}, byteArray0);
      assertEquals("dastore", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.signatureToString("Z/LRm>~4(Y$,", true);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-73);
      byteArray1[1] = (byte) (-127);
      byteArray1[2] = (byte)118;
      byteArray1[3] = (byte) (-91);
      byteArray1[4] = (byte) (-66);
      byteArray1[5] = (byte) (-84);
      byteArray1[6] = (byte)2;
      String string0 = Utility.toHexString(byteArray1);
      assertEquals("b7 81 76 a5 be ac 02", string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Utility.signatureToString("VD0`mf=hf", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte)79;
      byteArray1[2] = (byte)79;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Utility.isSet((-4027), (-4027));
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = Utility.getSignature("J'l_Qm9{laOUArc|0");
      assertEquals("LJ'l_Qm9{laOUArc|0;", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("byte");
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
      int int0 = Utility.clearBit(4, 4);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet(9, 9);
      Utility.typeOfSignature("V5U");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      Utility.toHexString(byteArray0);
      try { 
        MockFile.createTempFile("Zbu&8S59_vS=C[JnV/", "address");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = Utility.compactClassName("short");
      Utility.getSignature(":");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L:;";
      stringArray0[1] = "L:;";
      stringArray0[2] = ":";
      stringArray0[3] = "short";
      stringArray0[4] = ":";
      Utility.methodTypeToSignature("? extends ", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Utility.compactClassName("", "", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-92);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-92);
      byteArray1[1] = (byte) (-92);
      byteArray1[2] = (byte) (-92);
      byteArray1[3] = (byte)60;
      byteArray1[4] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("if_icmple\t\t#-23388", string0);
      
      boolean boolean0 = Utility.isSet(239, (byte) (-92));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("irem", string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 156, (int) (byte) (-105), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = "java.lang.Double";
      Utility.getSignature("java.lang.Double");
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Rw");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)28, 188);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantString constantString0 = new ConstantString(202);
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.getSignature("int");
      String string0 = Utility.format((byte) (-122), 1693, true, '(');
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      Utility.getSignature("L;");
      Utility.signatureToString("LL;;", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("bcel.statistics");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: bcel.statistics
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      byte[] byteArray1 = new byte[0];
      Utility.encode(byteArray1, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = Utility.accessToString(3358, false);
      String string1 = Utility.convertString("private protected static final native abstract strictfp");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      short short0 = Utility.searchOpcode("dadd");
      assertEquals((short)99, short0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals(2, byteSequence1.getIndex());
      assertEquals("ret\t\t%133", string0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = Utility.compactClassName("xky5xD/VuM!.wcaCXw6", "", false);
      assertEquals("xky5xD.VuM!.wcaCXw6", string0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<illegal ocode>";
      stringArray0[1] = "<illegal ocode>";
      stringArray0[2] = "<illegal ocode>";
      stringArray0[3] = "<illegal ocode>";
      String string0 = Utility.methodTypeToSignature("<illegal ocode>", stringArray0);
      assertEquals("(L<illegal;L<illegal;L<illegal;L<illegal;)L<illegal;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-107);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[2] = (byte) (-108);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.getSignature("volatile");
      assertEquals("Lvolatile;", string1);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      byte[] byteArray1 = new byte[0];
      String string0 = Utility.encode(byteArray1, false);
      assertEquals("", string0);
      
      String string1 = Utility.toHexString(byteArray1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Utility.isSet((-4027), (-4027));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)108;
      byteArray0[8] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-4027), 1370, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ret\t\t%133
         // 2:    istore_1
         // 3:    monitorenter
         // 4:    dstore_0
         // 5:    lstore_0
         // 6:    <illegal opcode>
         // 7:    idiv
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = Utility.convertString("L\";V");
      assertEquals("L\\\";V", string0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-64);
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte) (-6);
      byteArray1[3] = (byte)105;
      byteArray1[4] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.getSignature("m[AQGDgLv$]v@kS81a");
      assertEquals("[Lm;", string0);
      
      ConstantString constantString0 = new ConstantString(2623);
      String string1 = Utility.signatureToString("[Lm;", true);
      assertEquals("m[]", string1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      int int0 = 136;
      int int1 = 3828;
      Utility.setBit(136, 3828);
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Utility.signatureToString("Zr;HUZ2");
      Utility.clearBit((-85), 419);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Utility.convertString("qg>ls]gZ~RSHa;sHCt ");
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9");
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Utility.isSet((-4027), (-4027));
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)73, (byte)73);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Utility.compactClassName("h1|Allnqlcz%z~O");
      File file0 = MockFile.createTempFile("h1|Allnqlcz%z~O", "h1|Allnqlcz%z~O");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.FRANCE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "<";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "<", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("G5k^5~'nK.MFxv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G5k^5~'nK.MFxv'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Utility.accessToString((-2374), false);
      Integer integer0 = new Integer(254);
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "jsr_";
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('?');
      Utility.decode("{jsr_}", false);
      byte[] byteArray0 = Utility.decode("", false);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3393);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantMethodType0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-29);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      Utility.compactClassName("short");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      stringArray0[2] = ":";
      stringArray0[3] = "short";
      stringArray0[4] = ":";
      String string0 = Utility.methodTypeToSignature("? extends ", stringArray0);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-2);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)28;
      byteArray1[3] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-6);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("f2 02 54 30 0e fa", string0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) byteSequence0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) (byte)52;
      objectArray0[6] = (Object) (byte)52;
      objectArray0[7] = (Object) byteSequence0;
      objectArray0[8] = (Object) "dload_3";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "#.-.7.%R";
      try { 
        Utility.typeOfSignature("#.-.7.%R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #.-.7.%R
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-937), (-3567));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Object object0 = new Object();
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      Utility.compactClassName("", "", true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)94;
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("monitorenter");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Utility.replace("LxT[4cdo5|k}NWyQ", "LxT[4cdo5|k}NWyQ", "LxT[4cdo5|k}NWyQ");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)30;
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("Ho~Q<t&WI", (String) null, "java.lang.monitorenter", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ho~Q<t&WI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(46, (byte)60);
      constantMethodHandle0.setReferenceKind((byte)60);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(constantMethodHandle1);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[1] = (Constant) constantMethodHandle0;
      constantArray0[2] = (Constant) constantMethodHandle0;
      constantArray0[3] = (Constant) constantMethodHandle1;
      constantArray0[4] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = Utility.accessToString((-2374), true);
      assertEquals("private static final transient abstract synthetic annotation enum", string0);
      
      int int0 = Utility.setBit((-2374), 254);
      assertEquals((-2374), int0);
      
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (-2374), 1499, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Utility.getSignature(" ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte)111;
      byteArray0[8] = (byte)70;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)55;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 39, (int) (byte)58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      String string0 = Utility.getSignature("JavaClass.debug");
      assertEquals("LJavaClass/debug;", string0);
      
      byte byte0 = Utility.typeOfSignature("JavaClass.debug");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      Utility.format(122, 4, true, '*');
      String string0 = Utility.convertString("122*");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = Utility.signatureToString("Illegally nestedbrackets:");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("S)[gcMUwWn-1Ys.9o");
      assertEquals((byte)9, byte0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)9;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("09 09 09 09", string0);
      
      int int0 = Utility.clearBit((byte)9, 164);
      assertEquals(9, int0);
      
      String string1 = Utility.compactClassName("H?VQ");
      assertEquals("H?VQ", string1);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('|');
      assertFalse(boolean0);
      
      String string0 = Utility.format(146, (-3197), false, 'A');
      assertEquals("146", string0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable(2331, 2331, localVariableArray0, (ConstantPool) null);
      localVariableTable0.copy((ConstantPool) null);
      localVariableTable0.setConstantPool((ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("xp>yWERkTq", (String) null, (String) null, false, localVariableTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("J'l_Qm9{laOUArc|0", false);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1545);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInteger constantInteger0 = new ConstantInteger(1545);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("E?5}6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E?5}6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = Utility.convertString("\n");
      assertEquals("\\n", string0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = Utility.decode("putstatic", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.compactClassName("05%;DB", "05%;DB", true);
      assertEquals("", string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)112, (byte)117, (byte)116, (byte)115, (byte)116, (byte)97, (byte)116, (byte)105, (byte)99}, byteArray1);
      assertFalse(boolean0);
      
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte) (-120);
      byteArray2[1] = (byte) (-68);
      byteArray2[2] = (byte) (-115);
      byteArray2[3] = (byte) (-84);
      byteArray2[4] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readShort();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("l2i", string1);
      
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-68);
      byteArray3[1] = (byte) (-120);
      byteArray3[2] = (byte) (-84);
      byteArray3[3] = (byte) (-84);
      byteArray3[4] = (byte) (-120);
      byteArray3[5] = (byte) (-115);
      byteArray3[6] = (byte) (-68);
      byteArray3[7] = (byte) (-33);
      String string2 = Utility.encode(byteArray3, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "dload_3";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l(Db05?ATT*KnKiJ");
      char char0 = 'P';
      Utility.fillup("dload_3", 4208, false, 'P');
      String string1 = "W*U^a,";
      try { 
        Utility.typeOfSignature("W*U^a,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W*U^a,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("wide", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `wide'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)79;
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[NE}V]a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NE}V]a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-27);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ladd", string0);
      
      String string1 = Utility.getSignature("r>ILHr-hk~aj");
      assertEquals("Lr>ILHr-hk~aj;", string1);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t#");
      assertEquals("L#;", string0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("NKWGI~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NKWGI~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Utility.isSet(201, 201);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 141, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = "VD0`mf=hf";
      Utility.signatureToString("VD0`mf=hf", false);
      Utility.compactClassName("void", "f", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = null;
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((byte)42, (byte)20, byteSequence1, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      try { 
        Utility.typeOfSignature("HIVOviWaD{~}?4tv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HIVOviWaD{~}?4tv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-37);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantUtf8.getInstance("Rw");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("N(W.6NAzvR9[!md", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N(W.6NAzvR9[!md'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('(');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = Utility.format((byte)52, (byte)52, false, 'd');
      String string1 = Utility.convertString("dddddddddddddddddddddddddddddddddddddddddddddddddd52");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)52;
      byteArray0[4] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("land", string2);
      
      String string3 = Utility.accessToString((int) (byte)0);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("L\";V");
      assertEquals("\"", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup", string1);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Utility.isJavaIdentifierPart('=');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)59;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-18);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1187, (int) (byte)31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = Utility.compactClassName("LXxT[4cdo5|k}NWyQ");
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "LXxT[4cdo5|k}NWyQ";
      objectArray0[2] = (Object) "LXxT[4cdo5|k}NWyQ";
      objectArray0[3] = (Object) "LXxT[4cdo5|k}NWyQ";
      Object object1 = new Object();
      objectArray0[4] = object1;
      String string1 = Utility.printArray(objectArray0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Utility.compactClassName("}wV>?@~d~-lUJC~<G", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("&#:3NFjH");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "&#:3NFjH";
      objectArray0[1] = (Object) "if_icmple";
      objectArray0[2] = (Object) "if_icmple";
      objectArray0[3] = (Object) "if_icmple";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "if_icmple";
      objectArray0[6] = (Object) "if_icmple";
      objectArray0[7] = (Object) "}wV>?@~d~-lUJC~<G";
      mockPrintStream0.print(1L);
      PrintStream printStream0 = mockPrintStream0.format("if_icmple", objectArray0);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) mockPrintStream0;
      objectArray1[1] = (Object) "}wV>?@~d~-lUJC~<G";
      objectArray1[2] = (Object) mockPrintStream0;
      objectArray1[3] = object0;
      objectArray1[4] = (Object) printStream0;
      Object object1 = new Object();
      objectArray1[5] = object1;
      objectArray1[6] = (Object) mockPrintStream0;
      objectArray1[7] = (Object) "&#:3NFjH";
      Utility.printArray(printStream0, objectArray1);
      Utility.compactClassName("if_icmple");
      // Undeclared exception!
      try { 
        Utility.signatureToString("&#:3NFjH", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `&#:3NFjH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Utility.compactClassName("short");
      Utility.getSignature(":");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L:;";
      stringArray0[1] = "L:;";
      stringArray0[2] = ":";
      stringArray0[3] = "short";
      stringArray0[4] = ":";
      Utility.methodTypeToSignature("? extends ", stringArray0);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-81);
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", "lload_2", "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("onABZzhcL*", false);
      assertArrayEquals(new byte[] {(byte)111, (byte)110, (byte)65, (byte)66, (byte)90, (byte)122, (byte)104, (byte)99, (byte)76, (byte)42}, byteArray0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-57);
      byteArray1[1] = (byte) (-33);
      byteArray1[2] = (byte) (-33);
      byteArray1[3] = (byte) (-33);
      byteArray1[4] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence2, constantPool1, false);
      assertEquals("ifnonnull\t\t#-8225", string0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      Utility.compactClassName("short");
      String string0 = Utility.getSignature(":");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L:;";
      stringArray0[1] = "L:;";
      stringArray0[2] = ":";
      stringArray0[3] = "short";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)94;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(" 1\"_C", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 166, 166, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte)33;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_3", string0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-89);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "P+LlbJGM0A^GCzpJ2.";
      // Undeclared exception!
      try { 
        Utility.signatureToString("P+LlbJGM0A^GCzpJ2.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P+LlbJGM0A^GCzpJ2.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Utility.format(181, 181, false, 'J');
      Utility.convertString("TKkx(kNX");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -127
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Utility.compactClassName("7qg1;-ff.%`3");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.isSet(2226, 0);
      String string0 = "&^LHlgrwXd\"xTaHe";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("&^LHlgrwXd\"xTaHe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `&^LHlgrwXd\"xTaHe'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantClass constantClass0 = new ConstantClass((byte)24);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      Object object0 = new Object();
      constantClass0.setNameIndex((-189));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-108);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-32), (int) (byte)16, false);
      assertEquals("0:    lcmp\n1:    bipush\t\t46\n3:    <illegal opcode>\n4:    lcmp\n5:    lcmp\n", string0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = "(!hw/dbk#JE/K_2l71 ";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("(!hw/dbk#JE/K_2l71 ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!hw/dbk#JE/K_2l71 '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 13, (int) (byte)125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":|~P`V0=),b -+ZU`Il");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :|~P`V0=),b -+ZU`Il
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Utility.convertString("RRuhW");
      Utility.compactClassName("RRuhW", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RRuhW";
      stringArray0[1] = "RRuhW";
      stringArray0[2] = "RRuhW";
      stringArray0[3] = "RRuhW";
      stringArray0[4] = "RRuhW";
      stringArray0[5] = "RRuhW";
      stringArray0[6] = "RRuhW";
      Utility.methodTypeToSignature("RRuhW", stringArray0);
      byte[] byteArray0 = null;
      MockFile mockFile0 = new MockFile("RRuhW", "\r");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "RRuhW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"RRuhW\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      Utility.isJavaIdentifierPart('`');
      Utility.setBit(46, 59);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      Utility.clearBit(4318, (-238));
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-122);
      byteArray0[8] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-18);
      byteArray0[6] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(2, byteSequence0.getIndex());
      
      String string0 = Utility.accessToString((int) (byte)44, false);
      assertEquals("protected static synchronized", string0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",dYLL.p+_pfQt~K!F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,dYLL.p+_pfQt~K!F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      String string0 = "EU1 Q@;'$c|E9G";
      Utility.compactClassName("EU1 Q@;'$c|E9G");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.decode("EU1 Q@;'$c|E9G", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      String string0 = "Sc+6CAO:a0I";
      Utility.signatureToString("Sc+6CAO:a0I", false);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      Utility.signatureToString("V[q");
      Utility.compactClassName("V[q");
      String string0 = Utility.compactClassName("V[q", false);
      assertEquals("V[q", string0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-7);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1042, 4587, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte) (-28);
      byteArray0[7] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("dstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%FMII~^5&9'lRzr");
      String string0 = Utility.fillup("%FMII~^5&9'lRzr", 34, true, '?');
      assertEquals("%FMII~^5&9'lRzr???????????????????", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "%('Oa";
      stringArray0[1] = "%FMII~^5&9'lRzr???????????????????";
      stringArray0[2] = "%('Oa";
      stringArray0[3] = "%('Oa";
      stringArray0[4] = "%FMII~^5&9'lRzr???????????????????";
      Utility.methodTypeToSignature("%('Oa", stringArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('?');
      assertFalse(boolean0);
      
      String string1 = Utility.classOrInterface((-7));
      assertEquals("interface", string1);
      
      String string2 = Utility.methodTypeToSignature("%FMII~^5&9'lRzr???????????????????", stringArray0);
      assertEquals("(L%('Oa;L%FMII~^5&9'lRzr???????????????????;L%('Oa;L%('Oa;L%FMII~^5&9'lRzr???????????????????;)L%FMII~^5&9'lRzr???????????????????;", string2);
      
      Utility.methodSignatureArgumentTypes("(L%('Oa;L%FMII~^5&9'lRzr???????????????????;L%('Oa;L%('Oa;L%FMII~^5&9'lRzr???????????????????;)L%FMII~^5&9'lRzr???????????????????;");
      int int0 = Utility.setBit(1413, 1413);
      assertEquals(1445, int0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)122;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)40;
      byteArray0[7] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("i2c", string0);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Utility.compactClassName("VD0`mf=hf", "VD0`mf=hf", false);
      try { 
        Utility.methodSignatureToString("putstatic", "VD0`mf=hf", "putstatic", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putstatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("QZX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QZX'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
