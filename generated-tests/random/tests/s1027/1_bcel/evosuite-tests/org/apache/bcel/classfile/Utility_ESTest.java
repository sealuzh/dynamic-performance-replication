/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 14:10:13 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StreamCorruptedException;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassLoaderRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[2] = (byte)83;
      byteArray0[1] = (byte)117;
      byteArray0[3] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, (-1656));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)37;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("? super ");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)27, 20, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte) (-20);
      Utility.encode(byteArray0, false);
      Utility.accessToString((int) (byte)29, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?_07Eb?'eW~IN?.C,X");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)3;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4582, (int) (byte)3, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char char0 = 'F';
      Utility.format(225, 225, true, 'F');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = "bcuV$uF8*A";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("225FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "Q4 L{sqE/3^lt^+3", "bcuV$uF8*A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 225FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-2438);
      Utility.clearBit((-2438), 43);
      String string0 = "/}HU9qSs\"!|RQ";
      try { 
        Utility.typeOfSignature("/}HU9qSs\"!|RQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /}HU9qSs\"!|RQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "o@}?TS^~QEXOz!X&4";
      Utility.replace("o@}?TS^~QEXOz!X&4", "4G0JLS2", "4G0JLS2");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "o@}?TS^~QEXOz!X&4";
      objectArray0[1] = (Object) "o@}?TS^~QEXOz!X&4";
      objectArray0[2] = (Object) "4G0JLS2";
      objectArray0[3] = (Object) "o@}?TS^~QEXOz!X&4";
      objectArray0[4] = (Object) "o@}?TS^~QEXOz!X&4";
      Object object0 = new Object();
      objectArray0[5] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "o@}?TS^~QEXOz!X&4";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-88);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = "9Zug\\?O;Ot$P6.d1LI";
      try { 
        Utility.typeOfSignature("9Zug?O;Ot$P6.d1LI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9Zug?O;Ot$P6.d1LI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "G_Sm b'A5";
      Utility.searchOpcode("G_Sm b'A5");
      try { 
        Utility.typeOfSignature("G_Sm b'A5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G_Sm b'A5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "R;#Zsu";
      boolean boolean0 = false;
      Utility.compactClassName("R;#Zsu", false);
      try { 
        Utility.typeOfSignature("R;#Zsu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R;#Zsu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-40);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2928);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1884, 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.signatureToString("CrA\"Mc1L9f[=]3");
      String string0 = "P";
      String string1 = "[]";
      Utility.replace("P", "[]", "P");
      Utility.clearBit((-2891), 20);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)24;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, 1805);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.compactClassName("SAME_LOCALS_1_STACK_EXTENDED", "Invalid signature: ", true);
      Utility.convertString("SAME_LOCALS_1_STACK_EXTENDED");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)97;
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-76));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 348, (int) (byte)86, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Utility.getSignature("EQ^'eI11");
      try { 
        Utility.typeOfSignature("EQ^'eI11");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EQ^'eI11
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.getSignature("`Mhd)$d5h");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "\\'";
      String string1 = "HIkeO=/T=^";
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((-1083), 131, byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1;v'(Yn|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1;v'(Yn|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)47;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{\"java.lang.Object@3f90a301\", \"java.lang.Object@6e23de4f\", \"java.lang.Object@321ad4e7\"}");
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)29;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-90), (int) (byte) (-84), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ireturn
         // 1:    laload
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)2;
      byte byte0 = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte)38;
      byteArray0[8] = (byte)39;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = (-11);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-85), (-11));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)88;
      byte byte0 = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-72);
      byteArray0[6] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("jsr_w\t\t#1482754901", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jsr_w\t\t#1482754901
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      Utility.getSignature("{java.lang.Object@557b9d9f, java.lang.Object@3d6bcae6, java.lang.Object@5de76c25, java.lang.Object@28f3c6fa, java.lang.Object@216d211e, java.lang.Object@42b2f32f, java.lang.Object@24523918, java.lang.Object@12a0ef7e}");
      Utility.accessToString((-1043));
      Utility.methodSignatureReturnType("L{java/lang/Object@557b9d9f,;");
      Utility.clearBit((-1043), (-1043));
      byte[] byteArray0 = Utility.decode("public protected static synchronized volatile transient native interface strictfp synthetic annotation enum", false);
      Utility.compactClassName("eE9Y", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-90);
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte) (-84);
      byteArray1[3] = (byte)30;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-90);
      byteArray2[1] = (byte)122;
      byteArray2[2] = (byte)30;
      boolean boolean1 = Utility.equals(byteArray1, byteArray2);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-37);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2368, (-1122));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Utility.compactClassName("org.apache.bcel.classfile.ParameterAnnotations");
      byte[] byteArray0 = Utility.decode("M^he)<PLyIe[_hb~.,", false);
      String string0 = Utility.accessToString(46);
      assertEquals("private protected static synchronized", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(18, byteArray0.length);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M^he)<PLyIe[_hb~.,");
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, constantPool1, false);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("4d 5e 68 65 29 3c 50 4c 79 49 65 5b 5f 68 62 7e 2e 2c", string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Utility.accessToString(9, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)118;
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)97);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[1] = (Constant) constantDouble0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)49;
      byteArray1[1] = (byte)13;
      byteArray1[2] = (byte)97;
      byteArray1[3] = (byte)118;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-101);
      byteArray1[6] = (byte)118;
      byteArray1[7] = (byte)13;
      byteArray1[8] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[2] = (Constant) constantString0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[3] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)97, 59, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)75;
      byteArray0[0] = (byte)75;
      Utility.toHexString(byteArray0);
      Utility.toHexString(byteArray0);
      Utility.accessToString((-172));
      Utility.isJavaIdentifierPart('i');
      Utility.compactClassName("4b", "protected final volatile native interface abstract strictfp synthetic annotation enum", true);
      Utility.isSet(4056, 4056);
      String string0 = "KLF1Tzbsx";
      try { 
        Utility.typeOfSignature("KLF1Tzbsx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KLF1Tzbsx
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 168, (-1551));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Utility.typeOfSignature("... (truncated)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ... (truncated)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Utility.signatureToString("Z*!j:3GbY<+%s", true);
      Utility.convertString("Z*!j:3GbY<+%s");
      Utility.compactClassName("Z*!j:3GbY<+%s");
      Utility.isSet(2, (-1082));
      String string0 = Utility.format(4506, 4506, true, '[');
      Utility.isSet((-1082), (-935));
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "(reference_kind = ";
      try { 
        Utility.typeOfMethodSignature("(reference_kind = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (reference_kind = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)6;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)6, 7, false);
      assertEquals("8:    iconst_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "&";
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.compactClassName("&", true);
      try { 
        Utility.typeOfSignature("&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-122);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      Class<Integer> class0 = Integer.class;
      JavaClass javaClass0 = classLoaderRepository0.loadClass(class0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor(javaClass0, emptyVisitor0);
      constantPool0.accept(descendingVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 59, (int) (byte) (-113), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)31;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)109;
      byteArray0[2] = (byte) (-95);
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte)81;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-95));
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      mockPrintWriter0.write("0:    dload_1\n1:    <illegal opcode>\n2:    if_icmplt\t\t#42\n5:    ldiv\n6:    nop\n7:    lload_1\n8:    fastore\n");
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.compactClassName("q&^JEg-BKzebDt");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)22;
      byte byte0 = (byte)95;
      byteArray0[3] = (byte)95;
      byte byte1 = (byte)84;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte) (-22);
      ConstantPool constantPool0 = null;
      int int0 = 199;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 199, 8, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        Utility.typeOfSignature("(8}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (8}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)106;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1800), (int) (byte)106);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fmul
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)89;
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-64);
      byte byte1 = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-62);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 153, (int) (byte) (-64));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "i2f";
      boolean boolean0 = false;
      Utility.compactClassName("i2f", "i2f", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "iload_2";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) (byte) (-82);
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "i2f";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) byteSequence0;
      Utility.printArray(objectArray0);
      int int0 = 128;
      int int1 = 3314;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 014BAEA1
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-91);
      Constant[] constantArray0 = new Constant[2];
      int int0 = 54;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-103), 54);
      constantArray0[0] = (Constant) constantNameAndType0;
      String string0 = "Pattern is missing";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Pattern is missing");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.copy();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-103), (int) (byte) (-103), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-51);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-72);
      byteArray1[1] = (byte)27;
      byteArray1[2] = (byte) (-72);
      byteArray1[3] = (byte)116;
      byteArray1[4] = (byte)27;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray1[5] = (byte)27;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("lookupswitch");
      assertEquals("lookupswitch", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "monitorenter";
      stringArray0[1] = "(C2>yLvdLFrv~Pg";
      stringArray0[2] = "monitorenter";
      stringArray0[3] = "monitorenter";
      stringArray0[4] = "monitorenter";
      stringArray0[5] = "monitorenter";
      stringArray0[6] = "Invalid IOCase name: ";
      stringArray0[7] = "monitorenter";
      Utility.methodTypeToSignature("monitorenter", stringArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-26);
      byte byte0 = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)70;
      byte byte1 = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-78);
      byte byte2 = (byte)66;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2332, 170);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.compactClassName("\\", "S:4NGVluf&", false);
      Utility.classOrInterface((-6));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-62);
      int int0 = 650;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 474, 650);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      Utility.accessToString(44);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-115);
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-6));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 75, (int) (byte)95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      boolean boolean0 = true;
      Utility.signatureToString("Dont call getValueString() on a non STRING ElementValue", true);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "Dont call getValueString() on a non STRING ElementValue";
      objectArray0[2] = (Object) "Dont call getValueString() on a non STRING ElementValue";
      objectArray0[3] = (Object) "double";
      objectArray0[4] = (Object) "Dont call getValueString() on a non STRING ElementValue";
      objectArray0[5] = (Object) "double";
      objectArray0[6] = (Object) "Dont call getValueString() on a non STRING ElementValue";
      objectArray0[7] = (Object) "double";
      objectArray0[8] = (Object) "Dont call getValueString() on a non STRING ElementValue";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-35);
      byteArray0[0] = (byte) (-35);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-75);
      byteArray0[8] = (byte)36;
      Utility.encode(byteArray0, false);
      Utility.fillup("goto", (byte) (-40), false, '{');
      Utility.setBit((byte) (-57), (byte) (-40));
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-40), (-2090));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = ":";
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)20;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("nZGi%~@kfq]LX");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 78, (int) (byte)97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 12714. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-79);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2010), 2496);
      assertEquals("0:    lload_0\n1:    dconst_0\n2:    return\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("#AF|`y%,Kg`_6Zk|d+1", false);
      String string0 = Utility.compactClassName("#AF|`y%,Kg`_6Zk|d+1");
      assertEquals("#AF|`y%,Kg`_6Zk|d+1", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet(471, 471);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$pAF$7c$60y$r$yKg$60_6Zk$7cd$x1", string1);
      
      boolean boolean0 = Utility.isSet(177, 25);
      assertFalse(boolean0);
      
      Utility.isJavaIdentifierPart('.');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload_1", string2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = ">hqYiZEMJ*$:K5e2=";
      try { 
        Utility.typeOfSignature(">hqYiZEMJ*$:K5e2=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >hqYiZEMJ*$:K5e2=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-78);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">n>}llF[#");
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)11;
      byte byte0 = (byte) (-117);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)61;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), 1783, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)12;
      byte byte0 = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-53);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, (int) (byte) (-96), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 25951. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "Px&u$K?G";
      try { 
        Utility.typeOfSignature("Px&u$K?G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Px&u$K?G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-75);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), 99);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    pop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "O!vMhTW";
      try { 
        Utility.typeOfSignature("O!vMhTW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O!vMhTW
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("From\tTo\tHandler\tType\n");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)34;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "From\tTo\tHandler\tType\n");
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)87;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "From\tTo\tHandler\tType\n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.setBit(82, 82);
      Utility.convertString("From\tTo\tHandler\tType\n");
      Utility.accessToString(235);
      Utility.accessToString((int) (byte)87);
      try { 
        Utility.typeOfMethodSignature("From\tTo\tHandler\tType\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: From\tTo\tHandler\tType
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString((-381), false);
      Utility.searchOpcode("public private transient interface abstract strictfp synthetic annotation enum");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-90);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("public private transient interface abstract strictfp synthetic annotation enum");
      String string0 = "AP$'";
      mockPrintStream0.checkError();
      PrintStream printStream0 = mockPrintStream0.format("AP$'", (Object[]) constantArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      constantPool0.dump(dataOutputStream0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)120, (int) (byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = ">+G,(?JiISku46QS,";
      Utility.replace("!DU46", "!DU46", ">+G,(?JiISku46QS,");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte)68;
      Utility.equals(byteArray0, byteArray0);
      Utility.typeOfSignature("!DU46");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-33);
      byteArray1[1] = (byte)68;
      byteArray1[2] = (byte) (-61);
      Utility.equals(byteArray0, byteArray1);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "!hi,";
      Utility.methodTypeToSignature("!hi,", stringArray0);
      boolean boolean0 = true;
      Utility.methodSignatureArgumentTypes("(L!hi,;)L!hi,;", true);
      Utility.compactClassName("!hi,");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("!hi,", "impdep1", "!hi,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !hi,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(4`v<kvoe84");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4`v<kvoe84'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = Utility.format((-1633), 155, true, '1');
      assertEquals("-1633111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-29);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.accessToString((int) (byte) (-87));
      assertEquals("public static synchronized transient native interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, true);
      Utility.accessToString(85, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1517), 256);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.clearBit(109, (-1061));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-15);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)66;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 66, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.compactClassName("putfield", true);
      Utility.isJavaIdentifierPart('P');
      Utility.compactClassName("&eu", "l-MLR.~!5W", false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "&eu";
      objectArray0[1] = (Object) "putfield";
      objectArray0[2] = (Object) "putfield";
      objectArray0[3] = (Object) "putfield";
      objectArray0[4] = (Object) "putfield";
      objectArray0[5] = (Object) "&eu";
      boolean boolean0 = false;
      Utility.printArray(objectArray0, true, false);
      try { 
        Utility.typeOfSignature(";+1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;+1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("Uk0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Uk0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.accessToString((-1512));
      String string0 = "Could not create the directory ";
      Utility.typeOfSignature("Could not create the directory ");
      Utility.setBit((-1512), (-1512));
      boolean boolean0 = true;
      Utility.signatureToString("Could not create the directory ", true);
      byte[] byteArray0 = new byte[0];
      int int0 = 548;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1512), 548);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "IXLwJSiy8vuX7>GU");
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)93;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1), (int) (byte)74, true);
      assertEquals("0:    dstore_3\n1:    if_icmpge\t\t#20371\n4:    impdep2\n5:    iconst_4\n6:    iaload\n7:    dup2_x1\n", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.convertString("strictfp");
      Utility.typeOfSignature("S]~J");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName("2", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte)29;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("58 83 a1 2e 43 2c 33 9a 1d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 58 83 a1 2e 43 2c 33 9a 1d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('L');
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, false);
      Utility.convertString("java.lang.Object@272c8580, java.lang.Object@5ef9fbda, java.lang.Object@5309d5c2, java.lang.Object@6c234f6e, java.lang.Object@2f60c7ef, java.lang.Object@3ed6cef2, java.lang.Object@236cbb2f, java.lang.Object@5542c813, java.lang.Object@7c3432eb");
      int int0 = Utility.clearBit(128, 128);
      assertEquals(128, int0);
      
      Utility.isJavaIdentifierPart('L');
      String string1 = Utility.classOrInterface(182);
      assertEquals("class", string1);
      
      String string2 = Utility.printArray(objectArray0, true);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = Utility.isSet(128, 128);
      assertFalse(boolean1 == boolean0);
      
      byte byte0 = Utility.typeOfSignature("Visiting non-standard PMGClass object");
      assertEquals((byte)12, byte0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)12;
      boolean boolean2 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, (int) (byte) (-110));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = Utility.convertString("INSENSITIVE");
      assertEquals("INSENSITIVE", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-618), 193);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-917), (-1992));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_acmpne\t\t#-15557", string1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "jsr_w";
      stringArray0[1] = "jsr_w";
      Utility.methodTypeToSignature("jsr_w", stringArray0);
      Utility.format(13, 13, true, '.');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)110;
      byteArray0[6] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Utility.codeToString(byteArray0, constantPool0, (-2380), (int) (byte)97, true);
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "0:    <illegal opcode>\n1:    ladd\n2:    if_icmpeq\t\t#27441\n5:    fdiv\n6:    lmul\n", (int) (byte)105, (int) (byte) (-47));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)79;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("? super ");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantUtf8_0.clone();
      constantUtf8_0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)27, 20, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "t|X4";
      stringArray0[1] = "t|X4";
      stringArray0[2] = "t|X4";
      stringArray0[3] = "t|X4";
      String string0 = "int";
      stringArray0[4] = "int";
      stringArray0[5] = "t|X4";
      stringArray0[6] = "invokevirtual";
      Utility.methodTypeToSignature("t|X4", stringArray0);
      int int0 = 1914;
      Utility.setBit(1914, 1021);
      Utility.getSignature("t|X4");
      String string1 = ")i/O";
      try { 
        Utility.typeOfSignature(")i/O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )i/O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)3;
      Utility.equals(byteArray0, byteArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = " fields:\n";
      stringArray0[1] = " fields:\n";
      stringArray0[2] = "BQ)SW7Y:5:a;DdZr";
      stringArray0[3] = " fields:\n";
      stringArray0[4] = "p3m= 2xHl";
      stringArray0[5] = " fields:\n";
      Utility.methodTypeToSignature(" fields:\n", stringArray0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)1;
      objectArray0[2] = (Object) " fields:\n";
      objectArray0[3] = (Object) "p3m= 2xHl";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Utility.compactClassName(" = ", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-39);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3407, 1915, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)72;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1203), (int) (byte)92);
      assertEquals("0:    dup2\n1:    <illegal opcode>\n2:    if_icmpgt\t\t#8607\n5:    astore_1\n6:    dstore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte) (-86);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 752, (int) (byte)5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)121;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-577), (-416), false);
      try { 
        Utility.methodSignatureReturnType("0:    nop\n1:    fstore_2\n2:    iconst_4\n3:    dload_3\n4:    dup2\n5:    iaload\n6:    lshl\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    nop
         // 1:    fstore_2
         // 2:    iconst_4
         // 3:    dload_3
         // 4:    dup2
         // 5:    iaload
         // 6:    lshl
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)105;
      byteArray0[7] = (byte) (-88);
      byteArray0[8] = (byte)0;
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((byte)90);
      constantArray0[0] = (Constant) constantLong0;
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[1] = (Constant) constantLong1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-426), 233);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-19), 135, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    goto\t\t#10035
         // 3:    dup_x1
         // 4:    <illegal opcode>
         // 5:    <illegal opcode>
         // 6:    lmul
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-104);
      byteArray0[0] = (byte) (-104);
      byteArray0[2] = (byte)83;
      byteArray0[2] = (byte)65;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 345, 73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("76wW", "76wW", false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "76wW";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "76wW";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "76wW";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "76wW";
      String string0 = Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)90);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantInteger constantInteger2 = new ConstantInteger(46);
      ConstantInteger constantInteger3 = new ConstantInteger(constantInteger2);
      constantArray0[3] = (Constant) constantInteger3;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.fillup("[]", 913, false, 'O');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "[]";
      objectArray0[1] = (Object) "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO[]";
      objectArray0[2] = (Object) "OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO[]";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)102;
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)102, 913, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte) (-60);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte) (-1), false);
      assertEquals("0:    iload_3\n1:    lload_3\n2:    impdep2\n3:    iflt\t\t#16201\n6:    lshl\n7:    wide\t(wide)\n", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-53);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2010), 2496);
      assertEquals("0:    lload_0\n1:    dconst_0\n2:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = ">y,}=<1";
      Utility.getSignature(">y,}=<1");
      int int0 = 10;
      boolean boolean0 = false;
      Utility.accessToString(10, false);
      try { 
        Utility.methodSignatureReturnType("L>y,}=<1;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L>y,}=<1;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, (int) (byte) (-110));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, (-1188));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utility.clearBit(109, (-1061));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte)32;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 66, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.searchOpcode("!c%qj|zbyGg");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte)83;
      byteArray1[2] = (byte)94;
      byteArray1[3] = (byte)95;
      byteArray1[4] = (byte) (-10);
      Utility.toHexString(byteArray1);
      try { 
        Utility.typeOfSignature("0d 53 5e 5f f6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0d 53 5e 5f f6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)105;
      byteArray0[8] = (byte)18;
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)16, (-511));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)105, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = Utility.clearBit(30, 30);
      assertEquals(30, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)45;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1439181048), 30, false);
      assertEquals("0:    istore_0\n1:    imul\n2:    sipush\t\t22836\n5:    dload_1\n6:    aload_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false);
      String string0 = Utility.methodSignatureReturnType("J", false);
      assertEquals("long", string0);
      
      String string1 = Utility.accessToString(498, false);
      assertEquals("private final synchronized volatile transient native", string1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "(";
      Utility.compactClassName("(", "(", false);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object[] objectArray0 = null;
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true, false);
      String string0 = "DJL.}1/TjKB8_";
      Utility.typeOfSignature("DJL.}1/TjKB8_");
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 802;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) null, (int) (byte)7, 802);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)80, (-1188));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1351), (int) (byte)73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload\t\t%31
         // 2:    <illegal opcode>
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Utility.accessToString(9, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)13;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)57, 214, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("java.lang.", stringArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte) (-98);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 96, (int) (byte)70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 206, 75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.setBit((-1281), (-1281));
      Utility.typeOfSignature("INHw6Rbmi");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "LineNumberTable";
      Utility.replace("LineNumberTable", "LineNumberTable", "INHw6Rbmi");
      try { 
        Utility.methodSignatureReturnType("java.lang.Ep");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Ep'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)11;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-27), (-1488), true);
      assertEquals("0:    istore_2\n1:    <illegal opcode>\n2:    istore_3\n3:    <illegal opcode>\n4:    lstore_1\n5:    nop\n6:    lrem\n7:    fconst_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-57);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.classOrInterface(190);
      try { 
        Utility.typeOfSignature("<Any exception>(0)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Any exception>(0)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "X$h.";
      try { 
        Utility.typeOfSignature("X$h.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X$h.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Aex?~~S/e248er";
      stringArray0[1] = "Aex?~~S/e248er";
      stringArray0[2] = "Aex?~~S/e248er";
      stringArray0[3] = "Aex?~~S/e248er";
      Utility.methodTypeToSignature("Aex?~~S/e248er", stringArray0);
      Utility.compactClassName("org.apache.bcel.classfile.ConstantFloat", "fcmpg", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)92;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-4302), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PMGClass(");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility$1", false);
      assertEquals(33, byteArray0.length);
      
      String string0 = Utility.accessToString(36);
      assertEquals("protected synchronized", string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "protected synchronized";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "org.apache.bcel.classfile.Utility$1";
      objectArray0[3] = (Object) "org.apache.bcel.classfile.Utility$1";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertEquals("protected synchronized, null, org.apache.bcel.classfile.Utility$1, org.apache.bcel.classfile.Utility$1", string1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.setBit((-2133), (-2133));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 91. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.typeOfSignature("J>eJ]ZMYIJY");
      Utility.clearBit((byte)11, 0);
      int int0 = 155;
      Utility.accessToString(155);
      try { 
        Utility.methodSignatureReturnType("v!I6K,UGLH6o%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `v!I6K,UGLH6o%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.isJavaIdentifierPart('~');
      Utility.getSignature("*a-[]c~M");
      try { 
        Utility.methodSignatureArgumentTypes("ret");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ret
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)70;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-77), 121);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 119, 107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "Z0Hm0(hGF^FF]kx~%";
      Utility.signatureToString("Z0Hm0(hGF^FF]kx~%");
      int int0 = (-2248);
      Utility.setBit((-2248), (-2248));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("invokestatic", "invokestatic", "Z0Hm0(hGF^FF]kx~%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)72;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1203), (int) (byte)92);
      assertEquals("0:    dup2\n1:    <illegal opcode>\n2:    if_icmpgt\t\t#8607\n5:    iconst_0\n6:    dstore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-70);
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)65;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 345, 73);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("impdep1");
      Utility.isJavaIdentifierPart('v');
      Utility.classOrInterface(159);
      String string0 = Utility.fillup("impdep1", (-3), true, 'v');
      Utility.accessToString((-3), false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "class";
      objectArray0[1] = (Object) "impdep1";
      objectArray0[2] = (Object) "public protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "class";
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "[rZi_^[i@!9S9/{ WV^";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Utility.typeOfSignature("[rZi_^[i@!9S9/{ WV^");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[rZi_^[i@!9S9/{ WV^", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [rZi_^[i@!9S9/{ WV^
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.compactClassName("org.apache.bcel.classfile.Utility$1", "java.lang.double", false);
      Utility.compactClassName("=b", "=b", true);
      int int0 = 32;
      Utility.accessToString(32);
      Utility.compactClassName("org.apache.bcel.classfile.Utility$1", "(descriptor_index = ", false);
      try { 
        Utility.typeOfSignature("HKx|}LTZ!^m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HKx|}LTZ!^m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte) (-70);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("OLQ'?\"cjR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OLQ'?\"cjR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, (-1656));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "Z:r ";
      Utility.typeOfSignature("Z:r ");
      try { 
        Utility.methodSignatureArgumentTypes("rt$qx6!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: rt$qx6!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)81;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)43;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 12, 1584);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-44);
      byteArray0[8] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantLong constantLong0 = new ConstantLong((byte)47);
      constantArray0[1] = (Constant) constantLong0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(46, (byte)65);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType((byte)49);
      constantArray0[3] = (Constant) constantMethodType2;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[4] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)103;
      byteArray0[0] = (byte)103;
      Utility.toHexString(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 14, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, true, false);
      Utility.accessToString(7);
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)88;
      byteArray1[1] = (byte)37;
      byteArray1[2] = (byte)47;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 159, 342, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object2;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[2] = object5;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      String string0 = "3Lh";
      try { 
        Utility.typeOfSignature("3Lh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3Lh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = "return";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("return", "ret\t\t%11", "ret\t\t%11");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: return
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-118);
      byte byte0 = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)79;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)50, (int) (byte)79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "MU)Xp=\"C";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("MU)Xp=\"C", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xp=\"C'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)70;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)89, 114);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 119, 107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      String string0 = "anewarray";
      Utility.replace("anewarray", "anewarray", "anewarray");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 155, (int) (byte)14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte) (-1);
      Constant[] constantArray0 = new Constant[2];
      ConstantClass constantClass0 = new ConstantClass((-3185));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantLong constantLong0 = new ConstantLong(2288L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)6, 632, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "Synthetic attribute with length > 0";
      boolean boolean0 = false;
      Utility.signatureToString("Synthetic attribute with length > 0", false);
      Utility.compactClassName("Synthetic attribute with length > 0");
      try { 
        Utility.typeOfSignature("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.convertString("_[)F^ 31d[");
      Utility.compactClassName("_[)F^ 31d[", true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "_[)F^ 31d[";
      stringArray0[1] = "_[)F^ 31d[";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("-6,\u0002MgS", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[)F^ 31d[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("-HkmE;HH#uq", "-HkmE;HH#uq", "ozos vk@4|#+");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "-HkmE;HH#uq";
      objectArray0[1] = (Object) "ozos vk@4|#+";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-10);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1629, 174, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Gt&}a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gt&}a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("3r");
      boolean boolean0 = true;
      boolean boolean1 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      try { 
        Utility.typeOfSignature("+NfVf/8jK/N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NfVf/8jK/N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byte byte0 = (byte)13;
      byteArray0[1] = (byte)13;
      byte byte1 = (byte) (-52);
      byteArray0[2] = (byte) (-52);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.isJavaIdentifierPart('.');
      Utility.accessToString((int) (byte)13);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)50, (int) (byte)50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Utility.typeOfSignature("FpI&G");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString((int) (byte)6, false);
      String string0 = "org.apache.bcel.classfile.AnnotationDefault";
      String string1 = "F|`37";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("org.apache.bcel.classfile.AnnotationDefault", "F|`37", "F|`37");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.AnnotationDefault
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("B[.>Szf$", false);
      assertArrayEquals(new byte[] {(byte)66, (byte)91, (byte)46, (byte)62, (byte)83, (byte)122, (byte)102}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte)53;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 35, 13, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = Utility.decode(",x3ROIA", false);
      Utility.isJavaIdentifierPart('x');
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(170);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantString constantString0 = new ConstantString(170);
      constantArray0[1] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 170, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.convertString(" o;kb,;QHi*ZN)");
      Utility.isSet((-4322), (-4322));
      Utility.compactClassName("<$S<ZV1");
      Utility.compactClassName("6EPbm");
      try { 
        Utility.typeOfSignature("6EPbm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6EPbm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Utility.isSet(2890, 2890);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = Utility.getSignature("\t<");
      assertEquals("L<;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("\t<");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifne\t\t#5165", string1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byte byte0 = (byte)85;
      byteArray0[1] = (byte)85;
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      int int0 = (-1390);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1390), (int) (byte)85);
      Utility.accessToString((-1390));
      String string0 = "]w'#BOE :6}r<hv:";
      String string1 = "^cs:2E9Y";
      LocalVariable[] localVariableArray0 = new LocalVariable[2];
      DataInput dataInput0 = null;
      LocalVariable localVariable0 = null;
      try {
        localVariable0 = new LocalVariable((DataInput) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariable", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("The strings must not be null");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("The strings must not be null", "Syc7q.#'zKqSC", "The strings must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: The strings must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.isSet(2890, 2890);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-101);
      byteArray0[8] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Utility.isJavaIdentifierPart('+');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(\"`I|UUPcI8=sK<=", "tmm42M[b|{Um", "(\"`I|UUPcI8=sK<=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"`I|UUPcI8=sK<='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)47;
      Constant[] constantArray0 = new Constant[8];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(171);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInteger constantInteger0 = new ConstantInteger(171);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(149, 171);
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-72), (-2068));
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(255, 3535);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[4] = (Constant) constantInvokeDynamic1;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[5] = (Constant) constantDouble0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(132, 1513);
      constantArray0[6] = (Constant) constantMethodref1;
      ConstantLong constantLong0 = new ConstantLong((byte)47);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[7] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 10, 1513);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-24);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)63, 2436);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "C@";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-122);
      byteArray0[7] = (byte) (-59);
      byteArray0[8] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.fillup("C@", 88, true, 'W');
      Utility.signatureToString("C@WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("LU7+d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LU7+d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("d &*)l4{)Fs}2y", false);
      Utility.classOrInterface(3791);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true, false);
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("float", (String[]) null);
      Utility.fillup("[]", 3791, false, 'H');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-642), (-1467), true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(" reaching EOF", "0:    impdep2\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 0:    impdep2
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-30);
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("impdep2");
      constantArray0[0] = (Constant) constantUtf8_0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1284), (-2022));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantClass constantClass0 = new ConstantClass((byte)69);
      constantArray0[3] = (Constant) constantClass0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(218, (byte)124);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[4] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1337, (int) (byte)62);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("T!m8E'HShF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T!m8E'HShF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)90;
      byteArray0[0] = (byte)90;
      byte byte1 = (byte)86;
      byteArray0[1] = (byte)86;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"%nHMcbyk%KRB]tg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"%nHMcbyk%KRB]tg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte)96;
      byteArray0[8] = (byte)84;
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("YPP'LO-Ky ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YPP'LO-Ky '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = false;
      Utility.compactClassName("nE4", false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "nE4";
      stringArray0[1] = "nE4";
      stringArray0[2] = "nE4";
      stringArray0[3] = "nE4";
      stringArray0[4] = "nE4";
      stringArray0[5] = "nE4";
      stringArray0[6] = "dWIb;=1$C5_[Cx3";
      stringArray0[7] = "nE4";
      stringArray0[8] = "nE4";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("nE4", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Cx3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Utility.isSet(1340, 1340);
      boolean boolean0 = false;
      Utility.accessToString(78, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)70;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 78, (-202));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+p:M+ekn");
      Utility.methodSignatureReturnType("Invalid type: ", true);
      Utility.isSet((-123), 195);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)104;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)0;
      Utility.encode(byteArray0, false);
      Utility.setBit((byte)0, 195);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      MockFile mockFile0 = new MockFile("int", "if_icmpne");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, ":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \":\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[EQ*RK{6SqltU]Cj6q8", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EQ*RK{6SqltU]Cj6q8'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = ">R^QUWS8OjY^I\"P";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">R^QUWS8OjY^I\"P");
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)105;
      Utility.encode(byteArray0, true);
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureReturnType("K:%.V:l!f^[3^}k]`m", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K:%.V:l!f^[3^}k]`m'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "25]qES]hJ";
      try { 
        Utility.typeOfSignature("25]qES]hJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 25]qES]hJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-/pBMKYj4i~5Nsv?");
      Utility.getSignature("-/pBMKYj4i~5Nsv?");
      try { 
        Utility.typeOfSignature("?g:JY,ecbilY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?g:JY,ecbilY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)126;
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass(1194);
      constantArray0[0] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("breakpoint55555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)126);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 119, 117, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "Mj]";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Mj]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mj]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte) (-86);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.format(145, 145, true, 'Z');
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-17), (-1102842356));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ddiv
         // 1:    <illegal opcode>
         // 2:    <illegal opcode>
         // 3:    aload_3
         // 4:    iconst_0
         // 5:    <illegal opcode>
         // 6:    impdep2
         // 7:    daload
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.classOrInterface((-3221));
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.getSignature(" arg");
      Utility.classOrInterface(194);
      Utility.classOrInterface((-3221));
      try { 
        Utility.typeOfMethodSignature("F892c+Dq1>@r,rnr;8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: F892c+Dq1>@r,rnr;8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-10);
      byte byte0 = (byte)77;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (int) (byte) (-10), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)37;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("? super ");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)27, 20, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.getSignature("lookupswitch");
      assertEquals("Llookupswitch;", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("", string1);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("$");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      String string2 = Utility.classOrInterface(95);
      assertEquals("class", string2);
      
      String string3 = Utility.methodSignatureReturnType("Llookupswitch;", false);
      assertEquals("lookupswitch", string3);
      
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte) (-60);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%JfG9^pE?'p5m5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %JfG9^pE?'p5m5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-48);
      byteArray0[7] = (byte)64;
      Constant[] constantArray0 = new Constant[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[0] = (Constant) constantString0;
      Constant constant0 = constantString0.copy();
      constantArray0[1] = constant0;
      ConstantClass constantClass0 = new ConstantClass((byte)76);
      constantArray0[2] = (Constant) constantClass0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantClass constantClass1 = new ConstantClass(byteSequence0);
      constantArray0[4] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 108, (int) (byte)64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 50680. Constant pool size is: 5
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.typeOfSignature("Bw/");
      Utility.fillup("Bw/", 84, true, '@');
      try { 
        Utility.methodSignatureArgumentTypes("byte", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.fillup("w", 2867, false, '&');
      String string0 = "float";
      int int0 = 46;
      Utility.fillup("float", 46, false, '&');
      Utility.isJavaIdentifierPart('S');
      // Undeclared exception!
      try { 
        Utility.signatureToString("LDrF{:}sxbOH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LDrF{:}sxbOH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "'V=)-s}f=(3";
      Utility.convertString("'V=)-s}f=(3");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)100;
      byteArray0[0] = (byte)100;
      Constant[] constantArray0 = new Constant[1];
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("'V=)-s}f=(3");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-68);
      byte byte0 = (byte) (-45);
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.replace(")Nz(D:,~/", ")Nz(D:,~/", ")Nz(D:,~/");
      Utility.isSet((byte) (-68), (byte)74);
      Utility.isJavaIdentifierPart('U');
      try { 
        Utility.methodSignatureReturnType(")Nz(D:,~/", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nz(D:,~/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "v3B!?,1W@";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "v3B!?,1W@";
      stringArray0[1] = "v3B!?,1W@";
      stringArray0[2] = "v3B!?,1W@";
      stringArray0[3] = "wide";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[4] = "boolean";
      stringArray0[5] = "v3B!?,1W@";
      stringArray0[6] = "v3B!?,1W@";
      stringArray0[7] = "v3B!?,1W@";
      Utility.methodTypeToSignature("v3B!?,1W@", stringArray0);
      String string1 = "invokeinterface";
      // Undeclared exception!
      try { 
        Utility.signatureToString("invokeinterface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokeinterface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)31;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte)81;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), (int) (byte) (-107));
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      mockPrintWriter1.write("0:    dload_1\n1:    <illegal opcode>\n2:    lload_1\n3:    nop\n4:    dload_2\n5:    ldiv\n6:    fcmpl\n7:    lload_1\n8:    fastore\n");
      Utility.printArray((PrintWriter) mockPrintWriter1, (Object[]) null);
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "UL9zvro(";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("UL9zvro(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UL9zvro('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.compactClassName("{}");
      boolean boolean0 = false;
      Utility.fillup("{}", 14, false, '=');
      try { 
        Utility.typeOfSignature("============{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ============{}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "5GOo{";
      Utility.searchOpcode("5GOo{");
      Utility.isJavaIdentifierPart('_');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "5GOo{";
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) fileSystemHandling0;
      objectArray0[3] = (Object) "5GOo{";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5GOo{");
      objectArray0[4] = (Object) fileSystemHandling0;
      objectArray0[5] = (Object) "5GOo{";
      objectArray0[6] = (Object) fileSystemHandling0;
      objectArray0[7] = (Object) "5GOo{";
      Utility.printArray(objectArray0);
      Utility.getSignature("{5GOo{, org.evosuite.runtime.testdata.FileSystemHandling@5a822367, org.evosuite.runtime.testdata.FileSystemHandling@5a822367, 5GOo{, org.evosuite.runtime.testdata.FileSystemHandling@5a822367, 5GOo{, org.evosuite.runtime.testdata.FileSystemHandling@5a822367, 5GOo{}");
      Utility.format(8192, (-725), true, '_');
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("L{5GOo{,;", stringArray0);
      try { 
        Utility.typeOfMethodSignature("wide");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wide
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-701), (-701));
      assertFalse(boolean0);
      
      String string0 = Utility.compactClassName("java.lang.", "java.lang.", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = Utility.classOrInterface((-400));
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "interface";
      objectArray0[1] = (Object) "interface";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "interface";
      objectArray0[4] = (Object) "interface";
      objectArray0[5] = (Object) "interface";
      objectArray0[6] = (Object) "interface";
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[7] = (Object) "interface";
      objectArray0[8] = (Object) "interface";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.printArray(objectArray0, true, false);
      int int0 = Utility.setBit((-400), (-400));
      assertEquals((-400), int0);
      
      String string1 = Utility.compactClassName("interface", false);
      assertTrue(string1.equals((Object)string0));
      
      Utility.getSignature("H)l$oiv11HwsBKoM");
      String string2 = Utility.methodTypeToSignature("dmul", (String[]) null);
      assertEquals("()Ldmul;", string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('#');
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("z/4'6]%[f", false);
      assertArrayEquals(new byte[] {(byte)122, (byte)47, (byte)52, (byte)39, (byte)54, (byte)93, (byte)37, (byte)91, (byte)102}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = ", offset delta=";
      stringArray0[1] = ", offset delta=";
      stringArray0[2] = ", offset delta=";
      stringArray0[3] = ", offset delta=";
      stringArray0[4] = ", offset delta=";
      stringArray0[5] = ", offset delta=";
      stringArray0[6] = "fadd";
      stringArray0[7] = ", offset delta=";
      stringArray0[8] = ", offset delta=";
      Utility.methodTypeToSignature(", offset delta=", stringArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte) (-127);
      byte byte0 = (byte)73;
      byteArray0[7] = (byte)73;
      Constant[] constantArray0 = new Constant[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte)81;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), (int) (byte) (-107));
      assertEquals("0:    dneg\n1:    <illegal opcode>\n2:    lload_1\n3:    nop\n4:    lstore_1\n5:    ldiv\n6:    fcmpl\n7:    lload_1\n8:    fastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 379, 855);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        Utility.decode("transient", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".|=9kCz=|?jgAJFVG_N");
      Utility.format(287, 102, true, 'x');
      Utility.convertString(".|=9kCz=|?jgAJFVG_N");
      Utility.compactClassName("hRA<b", ".|=9kCz=|?jgAJFVG_N", false);
      Utility.compactClassName("o2G\"`C&o)(", false);
      Utility.convertString("o2G\"`C&o)(");
      Utility.convertString("N@>R~LZN)cWL&4x");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(".|=9kCz=|?jgAJFVG_N", "o2G\"`C&o)(", "EbA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .|=9kCz=|?jgAJFVG_N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.searchOpcode("boolean");
      Utility.signatureToString("BVPh9");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "byte");
      Utility.compactClassName("instanceof");
      Utility.classOrInterface((short) (-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)39;
      Utility.encode(byteArray0, false);
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("boolean", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `boolean'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.accessToString(4632, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid method signature: ", ">\t", "static final synthetic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "L;V";
      Utility.convertString("L;V");
      Utility.setBit(87, (-339));
      try { 
        Utility.methodSignatureArgumentTypes(".8`,Y[YG,-hoS5J~C\"#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .8`,Y[YG,-hoS5J~C\"#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = Utility.replace("Invalid constant pool reference: ", "tmqDa~~?%uNA!`bG", "tmqDa~~?%uNA!`bG");
      assertEquals("Invalid constant pool reference: ", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.accessToString(2014, true);
      Utility.format(2014, 2014, false, '$');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-32);
      Constant[] constantArray0 = new Constant[7];
      ConstantString constantString0 = new ConstantString(219);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantLong constantLong0 = new ConstantLong((byte) (-32));
      constantArray0[1] = (Constant) constantLong0;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("private protected static final volatile transient native abstract", "private protected static final volatile transient native abstract");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"private protected static final volatile transient native abstract\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "RNoedgxza\\1]X~f";
      // Undeclared exception!
      try { 
        Utility.signatureToString("RNoedgxza\u0001]X~f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RNoedgxza\u0001]X~f'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "7e&yWh(%DG|Z";
      try { 
        Utility.typeOfSignature("7e&yWh(%DG|Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7e&yWh(%DG|Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte) (-73);
      Utility.encode(byteArray0, false);
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -52
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      short short0 = Utility.searchOpcode("impdep2");
      assertEquals((short)255, short0);
      
      String string0 = Utility.classOrInterface(245);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-118);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)49;
      byteArray0[8] = (byte) (-86);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.format(145, 145, true, 'Z');
      Utility.isSet(145, 1381);
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[<-4VzK@@But@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [<-4VzK@@But@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.isJavaIdentifierPart('e');
      byte[] byteArray0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = Utility.getSignature("`a-vyK&/_g;gm>");
      assertEquals("L`a-vyK&/_g;gm>;", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-52);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lmul", string1);
      
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("69 cc b2 c7", string2);
      
      String string3 = Utility.format((byte) (-52), 12, true, '=');
      assertEquals("-52=========", string3);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)61;
      byteArray1[1] = (byte) (-39);
      byteArray1[2] = (byte)20;
      byteArray1[3] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      Utility.encode(byteArray0, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.isSet((byte) (-124), 3452);
      Utility.toHexString(byteArray0);
      String string0 = "P7lvX!0X";
      try { 
        Utility.methodSignatureReturnType("P7lvX!0X", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P7lvX!0X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "eSr$3\\1";
      // Undeclared exception!
      try { 
        Utility.decode("eSr$3\u0001", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3\u0001\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.accessToString((-2011));
      Utility.getSignature("`a-vyK&/_g;gm>");
      Utility.compactClassName(" and got ", false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) " and got ";
      objectArray0[1] = (Object) " and got ";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)78;
      byte byte0 = (byte)83;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      int int0 = 80;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "H";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("H", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.compactClassName("WhM^hw::O", "hpo-mF(Z5OC~Bi!J[.(", false);
      Utility.isSet(238, 238);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byte byte0 = (byte)65;
      byteArray0[1] = (byte)65;
      byte byte1 = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)71;
      Utility.equals(byteArray0, byteArray0);
      Utility.fillup("WhM^hw::O", (byte) (-18), true, 'C');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-18));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantString constantString0 = new ConstantString((byte) (-18));
      constantArray0[1] = (Constant) constantString0;
      int int0 = 65535;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 45
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = 970;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "D(y1");
      Utility.setBit(970, 970);
      String string0 = ":=";
      Utility.searchOpcode(":=");
      String string1 = "BootstrapMethods(";
      int int1 = (-259);
      LocalVariable[] localVariableArray0 = new LocalVariable[8];
      int int2 = 219;
      DataInput dataInput0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('T');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)42;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "float";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      Utility.clearBit(1, 32);
      String string1 = "Q8j-1z'QuEZ<";
      try { 
        Utility.methodSignatureReturnType("Q8j-1z'QuEZ<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q8j-1z'QuEZ<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = Utility.accessToString(249, true);
      assertEquals("public static final volatile transient", string0);
      
      String string1 = Utility.classOrInterface(249);
      assertEquals("class", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte)43;
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("44 ee db 79 00 00 04 b9 2b", string3);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-37);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-18);
      byteArray2[5] = (byte)43;
      byteArray2[6] = (byte)68;
      byteArray2[7] = (byte) (-71);
      boolean boolean0 = Utility.equals(byteArray1, byteArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Utility.isSet((-3531), (-3531));
      char char0 = ']';
      Utility.format((-3531), (-3531), false, ']');
      try { 
        Utility.methodSignatureReturnType("-3531", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-3531'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit((-1132606988), (-1132606988));
      String string0 = "V";
      Utility.signatureToString("V");
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-1132606988));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      try { 
        Utility.typeOfSignature("putField");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: putField
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.replace("#L", "#L", "#L");
      // Undeclared exception!
      try { 
        Utility.signatureToString("/?8T<Vu>I%(:V,4.Zc", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `/?8T<Vu>I%(:V,4.Zc'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)73;
      byte byte0 = (byte)68;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.signatureToString("D6cSQR)gIR+Ps^<", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Signature", (String) null, "double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.clearBit(40, 12);
      Utility.setBit(8, 1011);
      String string0 = "cNt@xh";
      String string1 = "ZrF yso$E_:@";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("cNt@xh", "cNt@xh", "ZrF yso$E_:@", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: cNt@xh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.setBit(3, 3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("}#a<q~AScz;zc [,%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: }#a<q~AScz;zc [,%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = Utility.accessToString(0, false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      String string1 = Utility.fillup("_<?8b.", 1388, true, '.');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Utility.methodTypeToSignature("", stringArray0);
      String string0 = "java.class.path";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("java.class.path");
      mockPrintWriter0.print((-2499));
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) "", (-2499), (-2499));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit(241, 2565);
      assertEquals(209, int0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.classOrInterface((-1440));
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1_jS&eu");
      Utility.isJavaIdentifierPart(';');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "1_jS&eu";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "1_jS&eu";
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "instanceof";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "instanceof";
      stringArray0[1] = "G|=F6R]='%O}";
      stringArray0[2] = "instanceof";
      Utility.methodTypeToSignature("instanceof", stringArray0);
      String string1 = "vt}zt";
      boolean boolean0 = false;
      int int0 = 102;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("G|=F6R]='%O}", "instanceof");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"instanceof\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lwide;V");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)46;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = Utility.decode("$3b$c7$$", false);
      Utility.encode(byteArray1, true);
      Utility.typeOfSignature("Lwide;V");
      Utility.equals(byteArray0, byteArray1);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("athrow");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: athrow
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Utility.clearBit((-2298), (-2298));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = (-523);
      boolean boolean0 = false;
      Utility.accessToString((-523), false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "public protected final synchronized volatile transient native abstract strictfp synthetic annotation enum";
      objectArray0[1] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.accessToString(508);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "protected static final synchronized volatile transient native";
      objectArray0[1] = (Object) "protected static final synchronized volatile transient native";
      objectArray0[2] = (Object) "protected static final synchronized volatile transient native";
      objectArray0[3] = (Object) "protected static final synchronized volatile transient native";
      Utility.printArray(objectArray0, false);
      Utility.isSet(508, (-1628502869));
      String string0 = "Ls|,UOo";
      try { 
        Utility.typeOfMethodSignature("Ls|,UOo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ls|,UOo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = 72;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.classOrInterface(72);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "class");
      // Undeclared exception!
      try { 
        Utility.signatureToString("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.accessToString(102, false);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "private protected synchronized volatile";
      objectArray0[1] = (Object) "private protected synchronized volatile";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "private protected synchronized volatile";
      objectArray0[7] = (Object) null;
      String string1 = Utility.printArray(objectArray0, true, false);
      assertEquals("{private protected synchronized volatile, private protected synchronized volatile, null, null, null, null, private protected synchronized volatile, null}", string1);
      
      String string2 = Utility.compactClassName("private protected synchronized volatile", "{private protected synchronized volatile, private protected synchronized volatile, null, null, null, null, private protected synchronized volatile, null}", true);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[5] = (byte)33;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte) (-98);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-1), (int) (byte) (-1), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iload_3
         // 1:    nop
         // 2:    impdep2
         // 3:    iflt\t\t#16230
         // 6:    lshl
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
