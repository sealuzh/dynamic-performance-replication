/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:49:43 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.thread.CountableThreadPool;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("P0fohJp[h72");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(true);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("P0fohJp[h72", " stop success!");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      boolean boolean0 = spider2.isExitWhenComplete();
      assertTrue(boolean0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) 5);
      Spider spider2 = spider1.setExitWhenComplete(true);
      spider2.getUUID();
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      String string0 = "";
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("cY%}]}|/kfY2@");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      // Undeclared exception!
      try { 
        spider1.thread((-3141));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider1 = spider0.setExecutorService(forkJoinPool0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("#x5BE)Yzj");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider2 = spider1.scheduler(duplicateRemovedScheduler0);
      // Undeclared exception!
      try { 
        spider2.thread((ExecutorService) forkJoinPool0, (-425));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.pipeline(consolePipeline0);
      Spider spider2 = spider1.setUUID("|?^c[6Rv\"\"g)}GyFTbn");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider3 = spider2.setScheduler(queueScheduler0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider4 = spider3.setPipelines(linkedList0);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      Spider spider5 = spider4.setSpiderListeners(linkedList1);
      spider5.runAsync();
      assertTrue(spider5.isSpawnUrl());
      assertTrue(spider5.isExitWhenComplete());
      assertEquals(0L, spider5.getPageCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ", charset='";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("yNca z");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.startRequest((List<Request>) null);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      spider1.setUUID("yNca z");
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Spider.Status.fromValue((-3227));
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("l{vyixSWlX");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(3240);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      spider0.start();
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("\"J-*VkN-~0O1&6!");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.scheduler((Scheduler) null);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      // Undeclared exception!
      try { 
        spider2.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", charset='");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID((String) null);
      Spider spider2 = spider1.downloader((Downloader) null);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      Spider spider3 = spider2.setSpiderListeners(linkedList1);
      Spider spider4 = spider3.setScheduler(queueScheduler0);
      Spider spider5 = spider4.setPipelines(linkedList0);
      Scheduler scheduler0 = spider5.getScheduler();
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider5.isExitWhenComplete());
      assertSame(scheduler0, queueScheduler0);
      assertTrue(spider5.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("(");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "(";
      stringArray0[2] = "(";
      stringArray0[4] = "(";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getCollectorPipeline();
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(26);
      spider0.threadPool = countableThreadPool0;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request request0 = new Request("threadNum should be more than one!");
      request0.setPriority(0L);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("HTTP request failed");
      spider0.start();
      spider0.close();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Request request0 = new Request();
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".AbS/U");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("TBrea interrupted when slee");
      fileCacheQueueScheduler1.setDuplicateRemover(hashSetDuplicateRemover0);
      Page.fail();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.addPipeline(collectorPipeline0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      Request request1 = request0.setCharset("8<QT(Caf");
      Request request2 = request1.setMethod("");
      requestArray0[0] = request2;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      Request request0 = new Request();
      Request request1 = request0.addCookie("", "");
      Request request2 = request1.setCharset("8<QT(Caf");
      request2.setMethod("");
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", charset='");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread((ExecutorService) null, 4675);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      Spider spider3 = spider2.setUUID(",mK3Vn<J");
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      List<Request> list0 = new LinkedList<Request>();
      spider3.startRequest(list0);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider0 = Spider.create(simplePageProcessor0);
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(26);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider0.extractAndAddRequests((Page) null, false);
      Spider spider1 = spider0.clearPipeline();
      spider1.setEmptySleepTime((-1));
      spider0.getSite();
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("aunni]G");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      Spider spider2 = spider0.thread(5);
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(5);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider2.extractAndAddRequests((Page) null, false);
      spider1.getSite();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", charset='");
      Spider spider0 = new Spider(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(86);
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      Spider spider1 = spider0.setDownloader((Downloader) null);
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("l`vk%S>$T m0NO;wg");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("l`vk%S>$T m0NO;wg");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("B");
      fileCacheQueueScheduler1.setDuplicateRemover(hashSetDuplicateRemover0);
      Page.fail();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("download page {} error");
      Spider spider1 = spider0.setUUID((String) null);
      spider1.setDownloader((Downloader) null);
      // Undeclared exception!
      try { 
        spider1.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".Ab/U");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("a");
      fileCacheQueueScheduler1.setDuplicateRemover(hashSetDuplicateRemover0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.addPipeline(collectorPipeline0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("a", "");
      spider1.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "TBrea interrupted when sleep";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".AbS/U");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("k_2EN7W");
      fileCacheQueueScheduler1.getDuplicateRemover();
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler1.getDuplicateRemover();
      fileCacheQueueScheduler1.setDuplicateRemover(duplicateRemover0);
      Page.fail();
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getCollectorPipeline();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      spider0.addPipeline(jsonFilePipeline0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("'5}", "$IA)|!");
      spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider0.test(stringArray0);
      spider0.getStartTime();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("f;Exbz[;q#m");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Json json0 = new Json((List<String>) null);
      Class<Pipeline> class0 = Pipeline.class;
      json0.toList(class0);
      Spider spider1 = spider0.setPipelines((List<Pipeline>) null);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3, threadFactory0);
      Spider spider2 = spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 3);
      Spider spider3 = spider2.thread(1464);
      spider3.getScheduler();
      assertTrue(spider3.isSpawnUrl());
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Spider spider0 = Spider.create(simplePageProcessor0);
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(26);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5, threadFactory0);
      spider0.getStatus();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Running");
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      List<String> list0 = spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Spider spider1 = spider0.startUrls(list0);
      spider1.stop();
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".Ab/U");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TBrea interrupted when sleep");
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("a");
      fileCacheQueueScheduler1.setDuplicateRemover(hashSetDuplicateRemover0);
      fileCacheQueueScheduler1.setDuplicateRemover(hashSetDuplicateRemover0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getCollectorPipeline();
      Spider spider1 = spider0.setExitWhenComplete(false);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("a", "");
      spider1.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "TBrea interrupted when sleep";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".AbS/U");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler(".AbS/U");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Spider {} started!");
      Spider spider0 = Spider.create(simplePageProcessor1);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(1709);
      spider0.setEmptySleepTime((-3479));
      spider0.getThreadAlive();
      spider0.start();
      spider0.runAsync();
      // Undeclared exception!
      try { 
        spider0.checkIfRunning();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Jwr('DP XCE");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("Jwr('DP XCE");
      Spider spider2 = spider1.clearPipeline();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FilePipeline filePipeline0 = new FilePipeline("select text error! ");
      Spider spider3 = spider2.addPipeline(filePipeline0);
      ForkJoinTask.getPool();
      Spider spider4 = spider3.setExecutorService((ExecutorService) null);
      filePipeline0.getFile("select text error! ");
      Spider spider5 = spider4.setExitWhenComplete(false);
      spider5.isSpawnUrl();
      Selector[] selectorArray0 = new Selector[1];
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector("select text error! ");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.thread(5);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider2 = spider0.thread(5);
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 5);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedHashSet0.add((Integer) 5);
      ForkJoinPool forkJoinPool1 = new ForkJoinPool(5);
      spider0.setExitWhenComplete(false);
      Request[] requestArray0 = new Request[0];
      Spider spider4 = spider3.addRequest(requestArray0);
      spider4.getStatus();
      spider1.setSpawnUrl(false);
      spider0.getUUID();
      assertFalse(spider0.isSpawnUrl());
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      spider0.setUUID("Running");
      Request request0 = new Request();
      Request request1 = request0.setMethod("Running");
      request1.getExtras();
      Request request2 = request0.setExtras((Map<String, Object>) null);
      PriorityScheduler priorityScheduler1 = new PriorityScheduler();
      priorityScheduler1.poll(spider1);
      Request request3 = request2.addCookie("Running", "_cycle_tried_times");
      request3.addCookie("Running", "Running");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("_cycle_tried_times");
      fileCacheQueueScheduler0.poll(spider0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".Ab/U");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("Thread interrupted when sleep");
      fileCacheQueueScheduler0.getDuplicateRemover();
      fileCacheQueueScheduler1.setDuplicateRemover(hashSetDuplicateRemover0);
      Page.fail();
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getCollectorPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("a", "184CK^Agj-%FK!1");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider0.clearPipeline();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider2.getAll((Collection<String>) synchronousQueue0);
      spider1.getThreadAlive();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      CountableThreadPool countableThreadPool0 = new CountableThreadPool(26);
      spider0.threadPool = countableThreadPool0;
      QueueScheduler queueScheduler0 = new QueueScheduler();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".AbS/U");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler(".AbS/U");
      fileCacheQueueScheduler0.getDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler2 = new FileCacheQueueScheduler("a");
      Page.fail();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Trea interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getCollectorPipeline();
      Spider spider1 = spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "");
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      spider1.runAsync();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(30000);
      spider1.setEmptySleepTime(30000);
      // Undeclared exception!
      try { 
        spider2.setExecutorService(forkJoinPool0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Page page0 = Page.fail();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("#5pRwW*");
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      spider0.getStatus();
      Spider spider2 = spider1.setSpawnUrl(false);
      Request request0 = new Request();
      request0.setPriority((-1644L));
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("#5pRwW*", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(39);
      spider2.setDownloader(phantomJSDownloader1);
      String[] stringArray0 = new String[0];
      spider2.test(stringArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".Ab/U");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TBrea interrupted when sleep");
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("Thread interrupted when sleep");
      FileCacheQueueScheduler fileCacheQueueScheduler2 = new FileCacheQueueScheduler("H&o}$h~[W(:a3*)");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler2.getDuplicateRemover();
      fileCacheQueueScheduler1.setDuplicateRemover(duplicateRemover0);
      fileCacheQueueScheduler1.setDuplicateRemover(hashSetDuplicateRemover0);
      fileCacheQueueScheduler1.setDuplicateRemover(hashSetDuplicateRemover0);
      Page.fail();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.addPipeline(collectorPipeline0);
      spider0.getStatus();
      FilePipeline filePipeline0 = new FilePipeline("Thread interrupted when sleep");
      spider1.pipeline(collectorPipeline0);
      spider0.sleep(1555);
      spider0.getPageCount();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("a");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(".AbS/U");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler(".AbS/U");
      fileCacheQueueScheduler0.getDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler2 = new FileCacheQueueScheduler("a");
      Page.fail();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Trea interrupted when sleep");
      Spider spider0 = new Spider(simplePageProcessor0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.setUUID("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "");
      Spider spider2 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      spider1.runAsync();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(30000);
      spider1.setEmptySleepTime(30000);
      Spider spider3 = spider2.setExecutorService(forkJoinPool0);
      spider3.pipeline(collectorPipeline0);
      Spider spider4 = spider0.setSpawnUrl(true);
      spider1.getSpiderListeners();
      spider2.getScheduler();
      spider4.setExitWhenComplete(true);
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider4.getAll((Collection<String>) priorityBlockingQueue0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Running");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Page.fail();
      String string0 = "yk'Tfo]^j";
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("yk'Tfo]^j");
      String string1 = null;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "Running");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      spider0.runAsync();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5);
      spider1.setEmptySleepTime(5);
      Spider spider2 = spider0.setExecutorService(forkJoinPool0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider3 = spider1.pipeline(resultItemsCollectorPipeline0);
      boolean boolean0 = true;
      boolean boolean1 = false;
      spider2.setSpawnUrl(boolean1);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider4 = spider3.setSpiderListeners(linkedList0);
      spider4.getSpiderListeners();
      spider1.getScheduler();
      Spider spider5 = spider1.clearPipeline();
      spider5.setExitWhenComplete(boolean0);
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider5.getAll((Collection<String>) priorityBlockingQueue0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Spider is already running!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("aiE=>L4m.L3m.");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      FileCacheQueueScheduler fileCacheQueueScheduler1 = new FileCacheQueueScheduler("Running");
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Page page0 = Page.fail();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("''R#\"UlJ+5/S");
      Spider spider1 = new Spider(simplePageProcessor0);
      spider1.getCollectorPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("aiE=>L4m.L3m.", "Running");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      Spider spider3 = spider2.clearPipeline();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider3.getAll((Collection<String>) synchronousQueue0);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("''R#\"UlJ+5/S", "aiE=>L4m.L3m.");
      spider1.scheduler(duplicateRemovedScheduler0);
      Spider spider4 = spider0.downloader(phantomJSDownloader1);
      spider2.startRequest(linkedList0);
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      Spider spider5 = spider1.setPipelines(linkedList1);
      Spider spider6 = spider0.setSpawnUrl(true);
      spider4.extractAndAddRequests(page0, false);
      spider2.downloader(phantomJSDownloader1);
      spider5.run();
      List<Request> list0 = spider5.getAll((Collection<String>) synchronousQueue0);
      spider6.startRequest(list0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Running");
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Running");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Page.fail();
      Spider spider0 = new Spider(simplePageProcessor0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("aiE=>L4m.L3m.", " stop success!");
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      Spider spider2 = spider1.setSpiderListeners((List<SpiderListener>) null);
      Spider spider3 = spider2.clearPipeline();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      spider0.getAll((Collection<String>) synchronousQueue0);
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("''R#\"UlJ+5/S", "p+uu6");
      spider3.runAsync();
      Spider spider4 = spider3.clearPipeline();
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      LinkedList<Pipeline> linkedList1 = new LinkedList<Pipeline>();
      spider4.setPipelines(linkedList0);
      spider1.stop();
      linkedList1.add((Pipeline) collectorPipeline0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider2.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
