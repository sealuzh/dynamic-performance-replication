/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 08:06:28 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.CharArrayWriter;
import java.io.Closeable;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char char0 = 'V';
      IOUtils.isIdent('V');
      IOUtils.firstIdentifier('V');
      IOUtils.decodeBase64("");
      String string0 = "9jo\"i->G^";
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("9jo\"i->G^", (-11), (-32));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("yur9azhLEjm:Fn", (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IOUtils.firstIdentifier('');
      String string0 = IOUtils.getStringProperty("5@qfP0gX");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = IOUtils.isIdent('b');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
      
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.getStringProperty("tnp~N'CI(f9U0");
      int int0 = IOUtils.stringSize((-475));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOUtils.isIdent('~');
      String string0 = "C=-*4$Gy-pow";
      IOUtils.decodeBase64("C=-*4$Gy-pow");
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize((-2513L));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0);
      byteArrayInputStream0.mark(0);
      try { 
        bufferedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resetting to invalid mark
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(10L);
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)8, (int) (byte)8, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("Z=");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("Rf6Y");
      assertArrayEquals(new byte[] {(byte)69, (byte) (-2), (byte) (-104)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-83), (-972), iOUtils0.DIGITS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -973
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      IOUtils.decodeBase64("", 0, 0);
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = 'f';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)41, 2860, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2859
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("#:DBB#w0.<0AjT7W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = IOUtils.isValidJsonpQueryParam("49_PXJ_pm[aP");
      assertFalse(boolean0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.getChars((long) 0, (-6579), (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.encodeUTF8(iOUtils0.ASCII_CHARS, (-1847), (-1030), iOUtils0.specicalFlags_singleQuotes);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOUtils.getStringProperty("com.alibaba.fastjson.JSONException");
      IOUtils.isValidJsonpQueryParam("com.alibaba.fastjson.util.UTF8Decoder");
      IOUtils.loadPropertiesFromFile();
      IOUtils.isIdent('z');
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = 'z';
      charArray0[5] = '>';
      charArray0[6] = 'z';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)38, (-6303), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6304
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOUtils.stringSize(333);
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[7];
      char char0 = 'k';
      charArray0[0] = 'k';
      char char1 = '~';
      charArray0[1] = '~';
      charArray0[2] = 'l';
      char char2 = ' ';
      charArray0[3] = ' ';
      charArray0[4] = '%';
      charArray0[5] = 'X';
      char char3 = '<';
      charArray0[6] = '<';
      IOUtils.getChars((byte)3, 3, charArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        Charset.forName("I*cL#f1#4}uj)");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // I*cL#f1#4}uj)
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1;
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-1), 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[2];
      IOUtils.decodeBase64(charArray0, 1, 1);
      IOUtils.firstIdentifier('A');
      IOUtils.loadPropertiesFromFile();
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-66), 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IOUtils.isIdent('');
      // Undeclared exception!
      try { 
        IOUtils.getChars(93, 93, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[3];
      IOUtils.decodeBase64(charArray0, 1, 1);
      IOUtils.getChars(1, 1, charArray0);
      assertArrayEquals(new char[] {'1', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.close((Closeable) null);
      IOUtils.encodeUTF8(iOUtils0.ASCII_CHARS, 0, 0, iOUtils0.specicalFlags_doubleQuotes);
      char char0 = 'X';
      IOUtils.firstIdentifier('X');
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      IOUtils.close(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[7];
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, (byte)1, (byte)1, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      byte[] byteArray1 = IOUtils.decodeBase64("R");
      assertArrayEquals(new byte[] {}, byteArray1);
      
      byte[] byteArray2 = IOUtils.decodeBase64(">A,", 1, 1);
      assertArrayEquals(new byte[] {}, byteArray2);
      
      IOUtils iOUtils0 = new IOUtils();
      int int0 = IOUtils.encodeUTF8(iOUtils0.replaceChars, 1, 1, iOUtils0.specicalFlags_singleQuotes);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("Rf6,YQ");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)97}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "XLE";
      IOUtils.decodeBase64("XLE");
      PipedReader pipedReader0 = new PipedReader();
      try { 
        pipedReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "fastjson.compatibleWithJavaBean";
      IOUtils.decodeBase64("fastjson.compatibleWithJavaBean");
      IOUtils.firstIdentifier('4');
      IOUtils.isIdent('4');
      byte byte0 = (byte)16;
      char[] charArray0 = new char[3];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)16, (int) (byte)16, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[2];
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 1, 1);
      int int0 = IOUtils.stringSize((long) 1);
      assertEquals(1, int0);
      
      int int1 = IOUtils.decodeUTF8(byteArray0, 1, (-439), charArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = IOUtils.stringSize(0);
      assertEquals(1, int0);
      
      boolean boolean0 = IOUtils.isValidJsonpQueryParam((String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)123;
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = 'I';
      int int1 = IOUtils.decodeUTF8(byteArray0, 12, (byte) (-128), charArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IOUtils.getStringProperty("com.alibaba.fastjson.util.UTF8Decoder");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Charset charset0 = IOUtils.UTF8;
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = uTF8Decoder0.decode(byteBuffer0);
      IOUtils.decode(uTF8Decoder0, byteBuffer0, charBuffer0);
      assertFalse(byteBuffer0.isDirect());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.alibaba.fastjson.JSONException");
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      IOUtils.readAll(stringReader0);
      IOUtils.decodeBase64("com.alibaba.fastjson.JSONException");
      stringReader0.read();
      char[] charArray1 = new char[8];
      stringReader0.read();
      charArray1[0] = '0';
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        Charset.forName("com.alibaba.fastjson.JSONException");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // com.alibaba.fastjson.JSONException
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      IOUtils.getChars(117, 6, charArray0);
      assertArrayEquals(new char[] {'o', '\u0000', '\u0000', '1', '1', '7'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IOUtils.decodeBase64("~");
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = '4';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)26, (int) (byte)26, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[9];
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-61);
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)1, (byte)89, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-18);
      char[] charArray0 = new char[3];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = 'H';
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 0, 1155, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte) (-32);
      char[] charArray0 = new char[7];
      IOUtils.decodeUTF8(byteArray1, (byte)0, 12, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.getChars((long) 12, 12, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte) (-12);
      char[] charArray0 = new char[7];
      IOUtils.decodeUTF8(byteArray1, (byte)0, 12, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.getChars((long) 12, 12, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-18);
      char[] charArray0 = new char[14];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = 'H';
      IOUtils.decodeUTF8(byteArray0, 0, 1155, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.getChars((-2492L), 9999999, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9999998
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[7];
      char char0 = 'x';
      charArray0[0] = 'x';
      charArray0[2] = 'x';
      char char1 = 'j';
      charArray0[2] = 'j';
      char char2 = 'y';
      charArray0[3] = 'y';
      byte byte0 = (byte)1;
      IOUtils.decodeBase64("Ix]&");
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (int) (byte)1, 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-18);
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      String string0 = ">A,";
      IOUtils.decodeBase64(">A,");
      IOUtils.decodeBase64(charArray0, 1, 1);
      char[] charArray1 = new char[2];
      charArray1[0] = '`';
      charArray1[1] = '/';
      // Undeclared exception!
      try { 
        IOUtils.getChars(77, (-189), charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -190
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = IOUtils.stringSize((-38L));
      assertEquals(1, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ';';
      charArray0[1] = 'L';
      IOUtils.getChars((long) 1, 1, charArray0);
      assertArrayEquals(new char[] {'1', 'L'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[3];
      IOUtils.decodeBase64(charArray0, 1, 1);
      // Undeclared exception!
      try { 
        IOUtils.getChars((-2430L), 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      charArray0[1] = '6';
      charArray0[2] = 'F';
      charArray0[3] = '=';
      charArray0[3] = 'c';
      IOUtils.getChars((byte)36, 5, charArray0);
      IOUtils.getChars((long) (byte)36, 5, charArray0);
      assertArrayEquals(new char[] {'W', '6', 'F', '1', '6'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-18);
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      byte[] byteArray1 = IOUtils.decodeBase64(">A,");
      assertArrayEquals(new byte[] {}, byteArray1);
      
      IOUtils.decodeBase64(charArray0, 1, 1);
      char[] charArray1 = new char[2];
      charArray1[0] = '`';
      IOUtils.firstIdentifier('`');
      byte[] byteArray2 = IOUtils.decodeBase64("}r|d&s.f!:tm", 1, 1);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = 'v';
      charArray0[2] = '+';
      charArray0[3] = 'T';
      charArray0[4] = 'Z';
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 1, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)2;
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = 'w';
      charArray0[2] = '@';
      charArray0[3] = 'u';
      IOUtils.decodeUTF8(byteArray0, (byte)2, 388, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (int) (byte)50, (int) (byte) (-66));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -17
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IOUtils.isIdent('\u0090');
      char[] charArray0 = new char[7];
      charArray0[0] = '\u0090';
      charArray0[3] = '\u0090';
      charArray0[4] = '\u0090';
      charArray0[5] = '\u0090';
      charArray0[1] = '\u0090';
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, (byte)1, (byte)1, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'x';
      IOUtils.decodeBase64("qs O 1D;Q30|#(9", 4, 4);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      char[] charArray0 = new char[3];
      byte[] byteArray0 = IOUtils.decodeBase64("i+Fj>'6W(yjZ8Nylg", 2, 2);
      assertArrayEquals(new byte[] {(byte)22}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = IOUtils.isIdent('\u0090');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\u0090';
      charArray0[3] = '\u0090';
      charArray0[4] = '\u0090';
      char[] charArray1 = new char[7];
      charArray1[0] = '\u0090';
      charArray1[1] = '\u0090';
      charArray1[2] = '\u0090';
      charArray1[3] = '\u0090';
      charArray1[4] = '\u0090';
      charArray1[5] = '{';
      charArray1[6] = '\u0090';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      int int0 = IOUtils.encodeUTF8(charArray1, (byte)1, (byte)1, byteArray0);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-112), (byte)1, (byte)1, (byte)1}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IOUtils.getStringProperty("^Dvu5pLFB9");
      byte[] byteArray0 = IOUtils.decodeBase64("encodeUTF8 error", 5, 5);
      assertArrayEquals(new byte[] {(byte)121, (byte)68, (byte) (-59)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = IOUtils.specicalFlags_singleQuotes;
      byte[] byteArray1 = IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      byte[] byteArray2 = IOUtils.decodeBase64("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 1, 45);
      assertNotSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = 'n';
      charArray0[2] = 'i';
      charArray0[3] = 't';
      charArray0[4] = 'I';
      charArray0[5] = '6';
      charArray0[1] = '=';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 1, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = 'n';
      charArray0[2] = 'i';
      charArray0[3] = 't';
      charArray0[4] = 'I';
      charArray0[5] = '6';
      charArray0[1] = '=';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 1, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[1] = '9';
      charArray0[2] = '{';
      charArray0[3] = 'U';
      charArray0[4] = '';
      charArray0[5] = '6';
      charArray0[6] = 'e';
      charArray0[7] = ')';
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 1, 7);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-23)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = 'l';
      charArray0[0] = '.';
      charArray0[4] = 'P';
      charArray0[5] = 'a';
      IOUtils.decodeBase64(charArray0, 3, 3);
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, (-941), 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[1] = '9';
      charArray0[2] = '{';
      charArray0[5] = '6';
      charArray0[6] = 'e';
      charArray0[7] = ')';
      byte[] byteArray0 = IOUtils.decodeBase64(charArray0, 1, 7);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-23)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("><p ", 1, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte) (-12);
      byteArray1[2] = (byte)90;
      byteArray1[3] = (byte) (-16);
      byteArray1[4] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte) (-117);
      byteArray1[7] = (byte)111;
      byteArray1[8] = (byte)61;
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = 'H';
      charArray0[2] = 'r';
      charArray0[3] = 'M';
      IOUtils.decodeUTF8(byteArray1, 1, 1189, charArray0);
      assertArrayEquals(new char[] {'p', 'H', 'r', 'M'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)63;
      byte byte0 = (byte)90;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)49;
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'v';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, 3, (byte)49, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\u010C';
      charArray0[1] = '\u010C';
      charArray0[2] = '\u010C';
      boolean boolean0 = IOUtils.isIdent('\u010C');
      assertFalse(boolean0);
      
      int int0 = IOUtils.stringSize(2165);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = IOUtils.firstIdentifier('\u0101');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte)22;
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[0] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'c';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      int int0 = IOUtils.decodeUTF8(byteArray0, 1, (byte)22, charArray0);
      assertEquals((-1), int0);
      
      IOUtils iOUtils0 = new IOUtils();
      int int1 = IOUtils.decodeUTF8(byteArray0, (byte) (-12), (byte) (-12), iOUtils0.DIGITS);
      assertEquals(0, int1);
      
      int int2 = IOUtils.stringSize((long) (byte) (-12));
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("PIy+)=~", 3, 3);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)72;
      byteArray0[3] = (byte) (-115);
      byteArray0[5] = (byte)63;
      byteArray0[7] = (byte)22;
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[0] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'c';
      charArray0[4] = 'K';
      int int0 = IOUtils.decodeUTF8(byteArray0, 1, (byte)22, charArray0);
      assertArrayEquals(new char[] {'H', '\u0000', 'K', 'c', 'K', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-115);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte) (-115);
      byteArray1[2] = (byte) (-115);
      byteArray1[4] = (byte) (-115);
      byteArray1[5] = (byte) (-115);
      byteArray1[7] = (byte) (-115);
      byteArray1[8] = (byte) (-115);
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      charArray0[6] = 'H';
      int int0 = IOUtils.decodeUTF8(byteArray1, (byte)0, 12, charArray0);
      assertEquals((-1), int0);
      
      int int1 = IOUtils.stringSize(0L);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte) (-115);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-19);
      byteArray1[1] = (byte) (-115);
      byteArray1[2] = (byte) (-115);
      byteArray1[4] = (byte) (-115);
      byteArray1[5] = (byte) (-115);
      byteArray1[7] = (byte) (-115);
      byteArray1[8] = (byte) (-115);
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      charArray0[6] = 'H';
      int int0 = IOUtils.decodeUTF8(byteArray1, (byte)0, 12, charArray0);
      assertArrayEquals(new char[] {'\uD34D', '\u0000', 'K', 'K', 'K', 'K', 'H'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-27);
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = '9';
      charArray0[3] = 'b';
      charArray0[4] = 'm';
      charArray0[5] = '.';
      charArray0[6] = 'D';
      charArray0[7] = 'w';
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)7, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0007', '\u0000', '\u0014', '\t', '.', 'D', 'w'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte) (-12);
      char[] charArray0 = new char[7];
      IOUtils.decodeUTF8(byteArray1, (byte)0, 3, charArray0);
      IOUtils.getChars((long) 3, 3, charArray0);
      char[] charArray1 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte)7, (int) (byte)7, charArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }
}
