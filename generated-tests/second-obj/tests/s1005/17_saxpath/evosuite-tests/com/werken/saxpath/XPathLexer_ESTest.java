/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:22:20 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('#');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(3, int0);
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.identifier();
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&eo8sd?7%&f`pP,");
      xPathLexer0.consume();
      xPathLexer0.setXPath("\"j:GjQ3;_");
      xPathLexer0.consume();
      xPathLexer0.div();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("j", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("En0Zu}N4'egaI");
      xPathLexer1.setPreviousToken(token0);
      assertEquals(15, token0.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("En0Zu}N4'egaI", token2.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("");
      xPathLexer1.and();
      Token token1 = xPathLexer0.notEquals();
      xPathLexer1.div();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer1.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("OQc>E-O-ce9#~M'$zS");
      xPathLexer1.nextToken();
      xPathLexer1.setPreviousToken(token1);
      assertEquals(22, token1.getTokenType());
      
      xPathLexer2.setPreviousToken((Token) null);
      xPathLexer2.setPreviousToken(token3);
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      int int0 = xPathLexer3.currentPosition();
      assertEquals(0, int0);
      
      Token token5 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6ZvsO;Gj1xM0H#l/s");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("6Z", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("v", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("O", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.setXPath("OHU\"F>&,=");
      String string0 = token4.toString();
      assertEquals("[ (30) ()", string0);
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.setPreviousToken(token2);
      assertEquals("s", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals("O", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      xPathLexer0.setPreviousToken(token4);
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      assertEquals("H", token6.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D}E-U%l+I");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("D}", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      assertEquals("E-U", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.not();
      assertEquals(")", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.setXPath("]|eJX|i&,LTH");
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("]", token1.getTokenText());
      
      Token token2 = xPathLexer0.literal();
      assertEquals(27, token2.getTokenType());
      assertEquals("eJX", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("i", token3.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("En0Zu}N4'egaI");
      Token token0 = xPathLexer0.dots();
      assertEquals("E", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("n0Zu", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals("}", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(">Ag2+b3");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(">", token1.getTokenText());
      assertEquals(9, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("V@zyq=8,RQp:%");
      Token token1 = xPathLexer1.nextToken();
      assertEquals("V", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer1.not();
      assertEquals("@", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("En0Zl}N4*egaI");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.dots();
      assertEquals("n", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(30, token1.getTokenType());
      assertEquals("0", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals("Z", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      char char0 = xPathLexer0.LA(541);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7.E{6.");
      Token token0 = xPathLexer0.number();
      assertEquals("7.", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-a?wO`]cG[Etu+q67bs");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (6) (-)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("a", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("?", token2.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(19, int0);
      
      Token token3 = xPathLexer0.plus();
      assertEquals("w", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("O", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("i?}issj");
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.and();
      xPathLexer0.setXPath("i?}issj");
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("i?}issj");
      Token token1 = xPathLexer1.slashes();
      xPathLexer1.colon();
      token1.toString();
      token1.toString();
      xPathLexer0.dollar();
      token0.toString();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.consume();
      assertEquals("i?}issj", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("FtoEPM>68Pg2=");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("Ft", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("oEPM", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals(">", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "u{oZij[=";
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.setXPath("u{oZij[=");
      xPathLexer0.star();
      xPathLexer0.dollar();
      xPathLexer0.operatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("&eo8sd?7{&f`pP,");
      xPathLexer0.getPreviousToken();
      xPathLexer1.nextToken();
      xPathLexer1.pipe();
      Token token0 = xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("V@zyq=8,RQp:%");
      xPathLexer1.slashes();
      xPathLexer1.dollar();
      xPathLexer1.nextToken();
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AQc>E-O-ce9#~M'$zw");
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.or();
      Token token2 = xPathLexer1.operatorName();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "/N`WgBj7`";
      XPathLexer xPathLexer1 = new XPathLexer("/N`WgBj7`");
      xPathLexer1.slashes();
      Token token0 = xPathLexer0.dots();
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b.IWs\"3");
      Token token0 = xPathLexer0.dots();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      token2.toString();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (17) (\")", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (17) (\")");
      Token token3 = xPathLexer0.nextToken();
      assertEquals("3", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      xPathLexer1.setPreviousToken(token0);
      assertEquals(14, token0.getTokenType());
      assertEquals("b.", token0.getTokenText());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer1.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("[", token4.getTokenText());
      
      Token token5 = xPathLexer1.colon();
      assertEquals(" ", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer(">Ag2+b3");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer1.nextToken();
      assertEquals(">", token0.getTokenText());
      assertEquals(9, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("Ag2", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b.Ws\"3");
      xPathLexer0.consume();
      xPathLexer0.dots();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      Token token0 = xPathLexer0.dollar();
      token0.toString();
      Token token1 = xPathLexer0.equals();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b.Ws\"3");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.pipe();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      token0.toString();
      token1.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("b.Ws\"3");
      xPathLexer1.number();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.nextToken();
      xPathLexer1.currentPosition();
      // Undeclared exception!
      try { 
        xPathLexer1.LA(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("Gl(=");
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("G", token1.getTokenText());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("l", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("(", token3.getTokenText());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("=", token4.getTokenText());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(")", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(1, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b.Ws\"3");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.number();
      Token token1 = xPathLexer0.pipe();
      xPathLexer0.whitespace();
      token0.toString();
      token1.toString();
      XPathLexer xPathLexer1 = new XPathLexer("<BB,nf$P1wS,qDe");
      Token token2 = xPathLexer0.nextToken();
      xPathLexer1.setPreviousToken(token2);
      xPathLexer0.minus();
      Token token3 = xPathLexer1.mod();
      assertNull(token3);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      xPathLexer0.setXPath("]|eJX|i&,LTH");
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("]", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("|", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b.Ws\"3");
      Token token0 = xPathLexer0.dots();
      Token token1 = xPathLexer0.number();
      xPathLexer0.whitespace();
      token1.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.nextToken();
      xPathLexer1.setPreviousToken(token2);
      xPathLexer0.minus();
      Token token3 = xPathLexer1.mod();
      assertNull(token3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "/N`WgBj7`";
      XPathLexer xPathLexer1 = new XPathLexer("/N`WgBj7`");
      Token token0 = xPathLexer0.dots();
      xPathLexer1.nextToken();
      xPathLexer0.whitespace();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.number();
      Token token1 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(3, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer1.leftBracket();
      char char0 = xPathLexer1.LA(62);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftParen();
      Token token1 = xPathLexer0.colon();
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.div();
      xPathLexer1.slashes();
      xPathLexer1.dollar();
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer2.setPreviousToken(token1);
      String string0 = "";
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer2.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer3.currentPosition();
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.div();
      xPathLexer4.dollar();
      Token token2 = xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.setXPath("u{oZij=");
      xPathLexer0.setPreviousToken(token0);
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.comma();
      assertEquals("u", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token3);
      assertEquals("{oZij=", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("V}I)WJqEp_-9M!");
      xPathLexer0.or();
      Token token4 = xPathLexer1.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("V", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?;{.zw9:=y");
      Token token0 = xPathLexer0.comma();
      assertEquals("?", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals(";{", token1.getTokenText());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.getPreviousToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("w9", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(18, token5.getTokenType());
      assertEquals(":", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("=", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("y", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "c.HR1Nw eY]o|k82";
      XPathLexer xPathLexer0 = new XPathLexer("c.HR1Nw eY]o|k82");
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("c.HR1Nw eY]o|k82");
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(")", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer("U47^M-Xh3o");
      Token token2 = xPathLexer1.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer2.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("U47", token3.getTokenText());
      
      xPathLexer1.setPreviousToken(token1);
      assertEquals(26, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?;{.jw9:=y");
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.at();
      xPathLexer0.whitespace();
      xPathLexer0.doubleColon();
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AQc>E-O-ce9#~M'$w");
      xPathLexer0.notEquals();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.rightBracket();
      token0.toString();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("0tG\"S:W1 nLumX");
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("0tG\"S:W1 nLumX");
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.nextToken();
      int int0 = xPathLexer1.currentPosition();
      xPathLexer0.leftParen();
      xPathLexer0.operatorName();
      int int1 = xPathLexer0.endPosition();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("arZ&@,n");
      xPathLexer0.dots();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.isIdentifierStartChar('-');
      xPathLexer1.equals();
      xPathLexer1.colon();
      xPathLexer1.minus();
      xPathLexer1.plus();
      Token token0 = xPathLexer1.nextToken();
      assertEquals((-1), token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.comma();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.div();
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer("7^o@%9@O<");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("");
      assertEquals("", xPathLexer3.getXPath());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{e");
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.at();
      xPathLexer3.equals();
      xPathLexer3.number();
      xPathLexer4.colon();
      xPathLexer2.or();
      xPathLexer4.consume();
      assertFalse(xPathLexer4.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Q!@d]?Hu|&'Yr(");
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer1.rightBracket();
      token0.toString();
      xPathLexer1.slashes();
      xPathLexer0.setXPath("0tG\"S:W1 nLumX");
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("M%cEXjPUVP");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("M", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.consume(93);
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.isIdentifierStartChar('W');
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      xPathLexer0.setXPath("M%cEXjPUVP");
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifier();
      assertEquals("", token7.getTokenText());
      
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      assertEquals("%", token8.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ptk");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("Ptk", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?;{.jw9:=y");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.comma();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (2) (?)");
      xPathLexer1.dollar();
      xPathLexer0.or();
      xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.rightBracket();
      Token token2 = xPathLexer2.dollar();
      xPathLexer2.setPreviousToken(token1);
      xPathLexer1.consume();
      xPathLexer2.endPosition();
      xPathLexer2.div();
      xPathLexer1.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer1.dots();
      token0.toString();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("q");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.dots();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<BB,nf$P1wS,qDe");
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.leftBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AQc>E-O-ce9#~M'$w");
      Token token0 = xPathLexer0.notEquals();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      Token token3 = xPathLexer0.whitespace();
      String string0 = token3.toString();
      assertEquals("[ (-2) ()", string0);
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("-", token4.getTokenText());
      
      String string1 = token2.toString();
      assertEquals("[ (9) (>)", string1);
      
      Token token5 = xPathLexer0.slashes();
      String string2 = token0.toString();
      assertEquals("[ (22) (AQ)", string2);
      
      String string3 = token5.toString();
      assertEquals("[ (11) (O)", string3);
      
      XPathLexer xPathLexer1 = new XPathLexer("%|");
      xPathLexer0.getPreviousToken();
      xPathLexer0.slashes();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      Token token6 = xPathLexer1.nextToken();
      assertEquals("%|", token6.getTokenText());
      
      xPathLexer2.setPreviousToken(token0);
      Token token7 = xPathLexer1.pipe();
      assertEquals("%", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.whitespace();
      xPathLexer0.consume((-1040));
      assertEquals(") (", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.comma();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.setXPath("lZ5y$");
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.at();
      assertEquals("Z", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("y$", token4.getTokenText());
      assertNotSame(token4, token0);
      
      Token token5 = xPathLexer0.comma();
      assertEquals("y", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("w%v3[t#FaE$o ");
      Token token0 = xPathLexer0.identifier();
      assertEquals("w", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("%", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (21) (v)", string0);
      
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("3[", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      assertEquals("t", token4.getTokenText());
      
      Token token5 = xPathLexer0.star();
      assertEquals("#", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.minus();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      assertEquals("E", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("6ZvsO;Gj1xM0H#l/s");
      Token token0 = xPathLexer0.not();
      assertEquals("6", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      token1.toString();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("vsO", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (18) (Z)", string0);
      
      Token token3 = xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.setXPath("OHU\"F>&,=");
      String string1 = token3.toString();
      assertEquals("[ (30) ()", string1);
      
      xPathLexer0.hasMoreChars();
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      assertEquals("O", token4.getTokenText());
      
      xPathLexer0.setPreviousToken(token3);
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("H", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.isIdentifierChar('z');
      Token token6 = xPathLexer0.dots();
      assertEquals("U", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("\"F", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?SSE]TKZKNF`");
      xPathLexer0.star();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("");
      assertEquals("", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "/N`WgBj7`";
      XPathLexer xPathLexer1 = new XPathLexer("/N`WgBj7`");
      xPathLexer1.slashes();
      xPathLexer1.slashes();
      Token token0 = xPathLexer0.dots();
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "[ (";
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.dots();
      token0.toString();
      Token token1 = xPathLexer0.rightBracket();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AQc>E-O-ce9#~M'$w");
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.colon();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("d'!6");
      xPathLexer0.mod();
      xPathLexer1.pipe();
      xPathLexer1.and();
      xPathLexer0.or();
      xPathLexer1.nextToken();
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setPreviousToken((Token) null);
      xPathLexer0.not();
      xPathLexer3.currentPosition();
      Token token1 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer1.or();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("");
      xPathLexer1.setXPath("");
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.div();
      Token token1 = xPathLexer1.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer1.dollar();
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer2.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("^x(I1Wr^5&BfL5|6RW");
      Token token4 = xPathLexer3.at();
      assertEquals("^", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer3.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("x", token5.getTokenText());
      
      Token token6 = xPathLexer2.identifierOrOperatorName();
      assertNull(token6);
      
      Token token7 = xPathLexer3.rightBracket();
      assertEquals("(", token7.getTokenText());
      assertEquals(4, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      boolean boolean0 = xPathLexer1.isIdentifierChar('.');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("F9;or6o7h:@+<}kl%U");
      xPathLexer1.nextToken();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("{&g");
      xPathLexer0.consume();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.comma();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      Token token3 = xPathLexer1.minus();
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer1.leftBracket();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("Csw[Q");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.dots();
      assertEquals(13, token6.getTokenType());
      
      xPathLexer2.and();
      xPathLexer1.setPreviousToken(token3);
      assertEquals(6, token3.getTokenType());
      assertEquals("[", token3.getTokenText());
      
      xPathLexer3.setXPath("");
      xPathLexer0.or();
      xPathLexer3.equals();
      Token token7 = xPathLexer2.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("C", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer4.notEquals();
      assertEquals(22, token8.getTokenType());
      
      xPathLexer2.and();
      Token token9 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("|X=Ckj/PqNou");
      Token token1 = xPathLexer1.rightParen();
      assertEquals("|", token1.getTokenText());
      
      xPathLexer0.number();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.notEquals();
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("X", token3.getTokenText());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer1.notEquals();
      assertEquals("=C", token6.getTokenText());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.slashes();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer1.nextToken();
      xPathLexer0.currentPosition();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer1.nextToken();
      xPathLexer1.plus();
      xPathLexer1.rightParen();
      xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",c;{.zw9:=y");
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer(",c;{.zw9:=y");
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("AhE Y};*F#?xD<3P");
      xPathLexer3.setXPath(") (");
      xPathLexer3.whitespace();
      xPathLexer1.endPosition();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer2.identifier();
      xPathLexer3.equals();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      xPathLexer0.isIdentifierStartChar('Y');
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.hasMoreChars();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.LA(108);
      xPathLexer0.equals();
      xPathLexer0.plus();
      xPathLexer0.getPreviousToken();
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.or();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.plus();
      assertEquals(")", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token2);
      assertEquals("", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("iY;$Ru-y=");
      xPathLexer0.star();
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.leftParen();
      xPathLexer0.operatorName();
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.mod();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-43));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.setXPath("]|eJ2X|i&,LTH");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("]", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("F9;or6o7h:@+<}kl%U");
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("b.Ws\"3");
      Token token0 = xPathLexer0.dots();
      Token token1 = xPathLexer0.pipe();
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.plus();
      token1.toString();
      xPathLexer0.leftParen();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer("b.Ws\"3");
      xPathLexer1.number();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.nextToken();
      xPathLexer1.currentPosition();
      xPathLexer1.currentPosition();
      xPathLexer1.operatorName();
      // Undeclared exception!
      try { 
        xPathLexer1.LA(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("-}YPl:Ul[WJH)Jk{'R");
      xPathLexer1.and();
      xPathLexer0.mod();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.not();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("En0Zl}N4*egaI");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.plus();
      token1.toString();
      Token token2 = xPathLexer0.rightBracket();
      String string0 = token2.toString();
      assertEquals("[ (4) (Z)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (5) (0)");
      String string1 = token1.toString();
      assertEquals("[ (5) (0)", string1);
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("[", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.getPreviousToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("l", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.and();
      Token token1 = xPathLexer1.rightParen();
      assertEquals(2, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("L[mdLIC");
      Token token2 = xPathLexer3.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("L", token2.getTokenText());
      
      Token token3 = xPathLexer3.dots();
      assertEquals("[", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "c.9HRE1NwYY]o|k2";
      XPathLexer xPathLexer0 = new XPathLexer("c.9HRE1NwYY]o|k2");
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer1.whitespace();
      xPathLexer1.rightBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      xPathLexer0.and();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("f");
      Token token3 = xPathLexer1.nextToken();
      assertEquals("f", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("pq");
      xPathLexer3.setPreviousToken(token1);
      assertEquals(4, token1.getTokenType());
      
      xPathLexer2.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      Token token4 = xPathLexer3.rightParen();
      assertEquals("p", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer3.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("");
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer5.doubleColon();
      XPathLexer xPathLexer9 = new XPathLexer();
      XPathLexer xPathLexer10 = new XPathLexer();
      Token token6 = xPathLexer9.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer7.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer10.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer7.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer4.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer9.minus();
      assertEquals(6, token11.getTokenType());
      
      int int0 = xPathLexer5.currentPosition();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("<>TGUh1>#Ej q");
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer3.slashes();
      XPathLexer xPathLexer4 = new XPathLexer("<>TGUh1>#Ej q");
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      xPathLexer3.pipe();
      xPathLexer1.isIdentifierChar('X');
      Token token0 = xPathLexer2.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Rc85m}0JgyPn{X");
      xPathLexer0.getPreviousToken();
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.leftParen();
      xPathLexer0.operatorName();
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.hasMoreChars();
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.mod();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-43));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mhRMBGD#RQ");
      Token token0 = new Token(85, "O", 97, (-2099));
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer2.notEquals();
      assertEquals(22, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("mhRMBGD#RQ");
      Token token3 = xPathLexer3.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("m", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer4.nextToken();
      assertEquals((-1), token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("D>TLU1EZjlq");
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("D", token2.getTokenText());
      
      Token token3 = xPathLexer1.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.setXPath("");
      xPathLexer1.consume((-1922));
      xPathLexer0.mod();
      xPathLexer2.slashes();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.not();
      xPathLexer3.notEquals();
      xPathLexer1.at();
      xPathLexer0.and();
      xPathLexer2.slashes();
      Token token4 = xPathLexer2.not();
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer3.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer2.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer2.slashes();
      assertEquals(11, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      xPathLexer0.setXPath("E6rNBWGuW");
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token9 = xPathLexer3.pipe();
      assertEquals(17, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@/|`UqsMG4");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("@", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("/", token1.getTokenText());
      
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("qs", token2.getTokenText());
      
      xPathLexer0.endPosition();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("M", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("4", token5.getTokenText());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.isIdentifierStartChar('d');
      xPathLexer0.setXPath("@/|`UqsMG4");
      Token token7 = xPathLexer0.star();
      assertEquals("@", token7.getTokenText());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('r');
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("");
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('d');
      assertTrue(boolean0);
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.literal();
      Token token10 = xPathLexer0.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      xPathLexer0.getPreviousToken();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("F9;or6o7h:3+<}klyU");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.colon();
      token0.toString();
      token0.toString();
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      token0.toString();
      Token token1 = xPathLexer1.rightBracket();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
