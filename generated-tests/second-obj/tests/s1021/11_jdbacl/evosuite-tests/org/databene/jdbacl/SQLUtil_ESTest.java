/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:36:25 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.math.BigInteger;
import java.sql.JDBCType;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDictionary;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.SYSSEQUENCESRowFactory;
import org.apache.derby.impl.store.access.btree.BTree;
import org.apache.derby.impl.store.raw.RawStore;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.jdbc.FBClob;
import org.h2.value.ValueDecimal;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.isDML("No property '");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("W/6GZ");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("No property '");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "No property '";
      String string0 = SQLUtil.join("No property '", "No property '", stringArray0, "No property '", "sKZVOqw$~M-K+mNN\"n", stringArray0);
      assertEquals("No property ' join No property ' as sKZVOqw$~M-K+mNN\"n on No property '.No property ' = sKZVOqw$~M-K+mNN\"n.No property '", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "<!";
      stringArray0[2] = "<!";
      stringArray0[3] = "<!";
      stringArray0[4] = "<!";
      String string0 = SQLUtil.renderColumnListWithTableName("<!", stringArray0);
      assertEquals("<!.null, <!.<!, <!.<!, <!.<!, <!.<!", string0);
      
      String string1 = SQLUtil.join("<!.null, <!.<!, <!.<!, <!.<!, <!.<!", "z", stringArray0, " NOT", "w>eS", stringArray0);
      assertEquals("<!.null, <!.<!, <!.<!, <!.<!, <!.<! join  NOT as w>eS on z.null = w>eS.null and z.<! = w>eS.<! and z.<! = w>eS.<! and z.<! = w>eS.<! and z.<! = w>eS.<!", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.isProcedureCall("{oLbJ+p~`t:L-IHy");
      SQLUtil.removeComments("");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.normalize("g+jr", false);
      Boolean.valueOf(false);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("g+jr", true, "z}N.PM!?DL.O) !X&", "g+jr");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT g+jr ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = DataDictionary.PROPERTY_CONGLOMERATE_VERSION;
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.removeComments("PropertyConglomerateVersion");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCatalog dBCatalog0 = new DBCatalog("execute");
      dBCatalog0.getSchema("*2PkU^pr}n");
      DBDataType dBDataType0 = DBDataType.getInstance(1, "VU7B`}XM8deP7Icod");
      TableContainer tableContainer0 = new TableContainer("VU7B`}XM8deP7Icod");
      tableContainer0.getTable("inner");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("VU7B`}XM8DEP7ICOD(1)", string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("{oLbJ+p~`t:L-IHy");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("{oLbJ+p~`t:L-IHy", false);
      assertEquals("{ oLbJ + p ~ ` t  : L - IH  y", string0);
      
      DBSchema dBSchema0 = new DBSchema("{oLbJ+p~`t:L-IHy");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{ oLbJ + p ~ ` t  : L - IH  y", dBSchema0);
      DBPackage dBPackage0 = new DBPackage("{ oLbJ + p ~ ` t  : L - IH  y", dBSchema0);
      dBSchema0.addPackage(dBPackage0);
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";'SW69%ax~$prSn]";
      stringArray0[1] = ";'SW69%ax~$prSn]";
      stringArray0[2] = "{oLbJ+p~`t:L-IHy";
      String string1 = SQLUtil.renderColumnListWithTableName(";'SW69%ax~$prSn]", stringArray0);
      assertEquals(";'SW69%ax~$prSn].;'SW69%ax~$prSn], ;'SW69%ax~$prSn].;'SW69%ax~$prSn], ;'SW69%ax~$prSn].{oLbJ+p~`t:L-IHy", string1);
      
      DBDataType dBDataType0 = DBDataType.getInstance(126, "G+C");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(";'SW69%ax~$prSn]", defaultDBTable0, dBDataType0);
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(";'SW69%ax~$prSn] G+C NULL", string2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = SQLUtil.normalize("l =Io'U", true);
      assertEquals("l = Io 'U'", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("left");
      defaultDBTable0.setDoc("l  = Io 'U'");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.firebirdsql.gds.impl.wire.BlobParameterBufferImp", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT org.firebirdsql.gds.impl.wire.BlobParameterBufferImp PRIMARY KEY ()", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = stringBuilder0.append(1318.78F);
      SQLUtil.addOptionalCondition("o)d%]b0w", stringBuilder1);
      assertEquals("1318.78 or o)d%]b0w", stringBuilder1.toString());
      assertEquals("1318.78 or o)d%]b0w", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SEPARATOR");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SEPARATOR";
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      String string0 = SQLUtil.substituteMarkers("", "c>KsSP57s&", valueDecimal0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "e1O@*oLb WX[,?H;L#";
      String string0 = SQLUtil.renderColumnListWithTableName("e1O@*oLb WX[,?H;L#", stringArray0);
      assertEquals("e1O@*oLb WX[,?H;L#.e1O@*oLb WX[,?H;L#", string0);
      
      DBSchema dBSchema0 = new DBSchema("/*");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index", dBSchema0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "e1O@*oLb WX[,?H;L#.e1O@*oLb WX[,?H;L#";
      objectArray0[1] = (Object) "e1O@*oLb WX[,?H;L#";
      objectArray0[2] = (Object) "e1O@*oLb WX[,?H;L#";
      objectArray0[3] = (Object) dBSchema0;
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
      assertEquals("SELECT * FROM drop index WHERE e1O@*oLb WX[,?H;L# = 'e1O@*oLb WX[,?H;L#.e1O@*oLb WX[,?H;L#'", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBCatalog dBCatalog1 = new DBCatalog("BLOB");
      String string0 = SQLUtil.ownerDotComponent(dBCatalog1);
      assertEquals("BLOB", string0);
      
      System.setCurrentTimeMillis(7L);
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = SQLUtil.mutatesStructure("D <'084HEoQ]`w");
      assertFalse(boolean0);
      
      boolean boolean1 = FileUtil.fsIsIgnoreCase;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      String string2 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.isProcedureCall("{oLbJ+p~`t:L-IHy");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{oLbJ+p~`t:L-IHy");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 1404, "Illegal column type format: ");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      defaultDBColumn0.getForeignKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("delete#j.z%wk*)obtp:3qo',");
      SQLUtil.normalize("delete#j.z%wk*)obtp:3qo',", false);
      SQLUtil.mutatesDataOrStructure("delete # j.z % wk *) obtp : 3qo ','");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("(_#+", true, "renamedrop index-1#(y$sccr7<#s[", "(_#+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_SWITCH_TO_NEWKEY;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.setDoc((String) null);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.firebirdsql.gds.impl.wire.BlobParameterBufferImp", false, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      String string1 = SQLUtil.leftJoin("jtwvIk", stringArray0, "b", "jtwvIk", stringArray0);
      assertEquals("left join b as jtwvIk on ", string1);
      
      String string2 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT org.firebirdsql.gds.impl.wire.BlobParameterBufferImp ", string2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("delete#j.z%wk*)obtp:3qo',");
      DBCatalog dBCatalog0 = new DBCatalog("o\"\"7IK?SbN6Hh>Fs(");
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("o\"\"7IK?SbN6Hh>Fs(", string0);
      
      System.setCurrentTimeMillis(7L);
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = SQLUtil.isQuery("o\"\"7IK?SbN6Hh>Fs(");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.toString();
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string1);
      assertEquals("table null", string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = " join ";
      stringArray0[1] = "o\"\"7IK?SbN6Hh>Fs(";
      stringArray0[2] = "";
      stringArray0[3] = "call";
      stringArray0[4] = "";
      stringArray0[5] = null;
      stringArray0[6] = "";
      stringArray0[7] = "table null";
      stringArray0[8] = "table null";
      String string2 = SQLUtil.join("", " join ", stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on  join . join  = null. join  and  join .o\"\"7IK?SbN6Hh>Fs( = null.o\"\"7IK?SbN6Hh>Fs( and  join . = null. and  join .call = null.call and  join . = null. and  join .null = null.null and  join . = null. and  join .table null = null.table null and  join .table null = null.table null", string2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("o)d%]b0w");
      StringBuilder stringBuilder1 = stringBuilder0.append(1318.78F);
      SQLUtil.addOptionalCondition("o)d%]b0w", stringBuilder1);
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) stringBuilder0);
      SQLUtil.addRequiredCondition("nI545h", stringBuilder2);
      assertEquals("o)d%]b0w1318.78 or o)d%]b0wo)d%]b0w1318.78 or o)d%]b0w and nI545h", stringBuilder2.toString());
      assertEquals("o)d%]b0w1318.78 or o)d%]b0wo)d%]b0w1318.78 or o)d%]b0w and nI545h", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery(" or ");
      SQLUtil.parseColumnTypeAndSize("g+jr");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "g+jr";
      stringArray0[1] = " or ";
      String string0 = SQLUtil.normalize("j$'#'MBYoqT", false);
      assertEquals("j $ '#' MBYoqT", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("g+jr", false, "j $ '#' MBYoqT", "g+jr");
      dBCheckConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK g+jr", string1);
      
      boolean boolean1 = SQLUtil.isDDL("3w6KI%");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("-1#(Y$sCcr7<w#s[", dBCatalog0);
      SQLUtil.isDDL("-1#(Y$sCcr7<w#s[");
      SQLUtil.isDML("-1#(Y$sCcr7<w#s[");
      SQLUtil.ownerDotComponent(dBCatalog0);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("-1#(Y$sCcr7<w#s[", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SEPARATOR");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SEPARATOR";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  PRIMARY KEY (SEPARATOR)", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("CONSTRAINT  PRIMARY KEY (SEPARATOR)");
      assertFalse(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(0, "K?,Lhw;g7TAxzM2");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_el=A8R", defaultDBTable0, dBDataType0, integer0, integer0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "F#wd#Ahbu@exIy", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBUniqueConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("&", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex1.getTable();
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("@jn`l+&]*BL$gZHAQ", dBTable0, dBDataType0, integer1, integer1);
      defaultDBColumn0.getNotNullConstraint();
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT F#wd#Ahbu@exIy ", string1);
      
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("SEPARATOR", dBTable0, dBDataType0, integer1, integer1);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn1;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("@jn`l+&]*BL$gZHAQ, _el=A8R, SEPARATOR, @jn`l+&]*BL$gZHAQ", string2);
      
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("delete#j.z%wk*)obtp:3qo',");
      DBCatalog dBCatalog0 = new DBCatalog("execute");
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("execute", string0);
      
      System.setCurrentTimeMillis(7L);
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = SQLUtil.isQuery("execute");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/`=%}@5ap2~P";
      String string0 = SQLUtil.renderColumnListWithTableName("/`=%}@5ap2~P", stringArray0);
      assertEquals("/`=%}@5ap2~P./`=%}@5ap2~P", string0);
      
      System.setCurrentTimeMillis(1197L);
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = SQLUtil.isQuery("/`=%}@5ap2~P");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "/`=%}@5ap2~P", false, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      String string1 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertNotNull(string1);
      assertEquals("unique constraint /`=%}@5ap2~P", string1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("execconstraint primary key (separator)", stringBuilder0);
      assertEquals("execconstraint primary key (separator)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/`=%}@5ap2~P";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4~VMZ!*");
      defaultDBTable0.getComponents();
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(" (", defaultDBTable0, 191, " (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format:  (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SEPARATOR");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SEPARATOR";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)9;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      TableContainer tableContainer0 = new TableContainer("", defaultDBTable0);
      tableContainer0.getSchema();
      bigInteger0.signum();
      DBSequence dBSequence0 = new DBSequence("SEPARATOR", (DBSchema) null);
      dBSequence0.setMaxValue(bigInteger0);
      BigInteger bigInteger1 = BigInteger.TEN;
      String string0 = SQLUtil.substituteMarkers("@jn`l+&", "\u0006b~wIFk'[O_ 3.", "@jn`l+&");
      assertEquals("@jn`l+&", string0);
      
      String string1 = SQLUtil.innerJoin("", stringArray0, "", "*/", stringArray0);
      assertEquals(" as */ on .SEPARATOR = */.SEPARATOR", string1);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (SEPARATOR)", string2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("g+jr", stringBuilder0);
      assertEquals("g+jr", stringBuilder0.toString());
      
      SQLUtil.normalize("<!O", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("dJ]I+e");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Estimating cost of conglomerate: ", false, defaultDBTable0, "g+jr");
      SQLUtil.constraintName(dBCheckConstraint0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("renamedrop index-1#(y$sccr7<#s[");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = SQLUtil.mutatesStructure("execconstraint primary key (separator)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.isProcedureCall("{oLbJ+p~`t:L-IHy");
      SQLUtil.removeComments("");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("", stringBuilder0);
      char[] charArray0 = new char[0];
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = DataDictionary.PROPERTY_CONGLOMERATE_VERSION;
      SQLUtil sQLUtil0 = new SQLUtil();
      String string1 = "*2PkU^pr}n";
      SQLUtil.removeComments("PropertyConglomerateVersion");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = Page.DIAG_MINROWSIZE;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "updatelanguage java", "g+jr");
      TableContainer tableContainer0 = new TableContainer(" ADD ");
      tableContainer0.getTable(" ADD ");
      dBCheckConstraint0.setTable((DBTable) null);
      dBCheckConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.isDDL("g+jr");
      SQLUtil.typeAndName(tableContainer0);
      DBSchema dBSchema0 = new DBSchema("j$'#'MBYoqT");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("create table-1#(y$sccr7<#s[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'create table-1#(y$sccr7<#s[' not found in table 'DATE'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("g+jr", stringBuilder0);
      assertEquals("g+jr", stringBuilder0.toString());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("dJ]I+e");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<!O";
      stringArray0[1] = "alter materialized view";
      stringArray0[2] = "Estimating cost of conglomerate: ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("dJ]I+e", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT dJ]I+e FOREIGN KEY (<!O, alter materialized view, Estimating cost of conglomerate: ) REFERENCES dJ]I+e(<!O, alter materialized view, Estimating cost of conglomerate: )", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = DataDictionary.PROPERTY_CONGLOMERATE_VERSION;
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = SQLUtil.isDDL("select");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      SQLUtil.parseColumnTypeAndSize("");
      String string0 = SQLUtil.normalize("*9ptHOpxD_?^p$", true);
      assertEquals("* 9ptHOpxD_ ? ^ p $", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "*9ptHOpxD_?^p$";
      String string1 = SQLUtil.renderColumnListWithTableName("XSDAK.S", stringArray0);
      assertEquals("XSDAK.S.null, XSDAK.S.*9ptHOpxD_?^p$, XSDAK.S.null, XSDAK.S.null, XSDAK.S.null, XSDAK.S.null, XSDAK.S.null", string1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = BTree.PROPERTY_NKEYFIELDS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("dJ]I+e");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Estimating cost of conglomerate: ", false, defaultDBTable0, "g+jr");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("renamedrop index-1#(y$sccr7<#s[");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("!O");
      SQLUtil.addRequiredCondition("g+jr", stringBuilder0);
      String string0 = LogToFile.DUMP_LOG_FROM_LOG_FILE;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" unknown type ", false, " unknown type ", " WHERE ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.normalize("getTime(String)", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Q_(ZA%T,o{&O");
      DBCheckConstraint dBCheckConstraint1 = null;
      try {
        dBCheckConstraint1 = new DBCheckConstraint("g+jr", false, defaultDBTable0, "CONSTRAINT \" unknown type \" CHECK  WHERE ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("Unknown constraint type: ", "Q~~}T;j\"Gm", "Unknown constraint type: ");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("Q~~}T;j\"Gm", false);
      SQLUtil.removeComments("org.databene.jdbacl.SQLUtil");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*20k6pr}n";
      stringArray0[1] = "";
      stringArray0[2] = "delete";
      stringArray0[3] = "";
      stringArray0[4] = "Q~~}T;j\"Gm";
      stringArray0[5] = "delete";
      stringArray0[6] = "&no3@a4sb}";
      stringArray0[7] = "delete";
      stringArray0[8] = "Q ~ ~ } T ; j \"Gm\"";
      SQLUtil.leftJoin("delete", stringArray0, "&no3@a4sb}", "delete", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.normalize("drop table1n+qi/]2{z", false);
      assertEquals("drop table1n + qi / ] 2 { z", string0);
      
      DBSchema dBSchema0 = new DBSchema("drop table1n+qi/]2{z");
      DBPackage dBPackage0 = new DBPackage("drop table1n+qi/]2{z", dBSchema0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getComponents();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "drop table1n+qi/]2{z";
      String[] stringArray1 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop table1n + qi / ] 2 { z", true, stringArray1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SQLUtil.typeAndName(dBSchema0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string1 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema drop table1n+qi/]2{z", string1);
      assertNotNull(string1);
      
      boolean boolean1 = SQLUtil.isQuery("drop table1n+qi/]2{z");
      assertFalse(boolean1);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-1741), "t");
      dBDataType0.isAlpha();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer0 = new Integer(3001);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("schema drop table1n+qi/]2{z", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.equals(dBUniqueConstraint0);
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop table1n + qi / ] 2 { z\" UNIQUE ()", string2);
      
      String string3 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"drop table1n + qi / ] 2 { z\" ", string3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SEPARATOR");
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  PRIMARY KEY ()", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("CONSTRAINT  PRIMARY KEY ()");
      assertFalse(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(0, "K?,Lhw;g7TAxzM2");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SEPARATOR", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBPrimaryKeyConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("&", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex1.setDoc("F#wd#Ahbu@exIy");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "&", false, stringArray0);
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT  ", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      String string2 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string2);
      
      String string3 = SQLUtil.ownerDotComponent(dBUniqueIndex0);
      assertEquals("SEPARATOR.", string3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.normalize("g+jr", false);
      assertEquals("g + jr", string0);
      
      stringBuilder0.append(0L);
      Boolean.valueOf(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      SQLUtil.typeAndName((DBObject) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.typeAndName((DBObject) null);
      boolean boolean0 = SQLUtil.isQuery("EJ'OW*5K6\u0006EfM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = SQLUtil.normalize("drop table1n+qi/]2{z", false);
      assertEquals("drop table1n + qi / ] 2 { z", string0);
      
      DBSchema dBSchema0 = new DBSchema("drop table1n+qi/]2{z");
      DBPackage dBPackage0 = new DBPackage("jR:>^K%RA])pV-", dBSchema0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getComponents();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "drop table1n+qi/]2{z";
      stringArray0[1] = "jR:>^K%RA])pV-";
      stringArray0[3] = "\"";
      String string1 = SQLUtil.innerJoin("\"", stringArray0, "\"", "\"", stringArray0);
      assertEquals("\" as \" on \".drop table1n+qi/]2{z = \".drop table1n+qi/]2{z and \".jR:>^K%RA])pV- = \".jR:>^K%RA])pV- and \".null = \".null and \".\" = \".\" and \".null = \".null", string1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "truncatelanguage java";
      stringArray0[2] = "<!";
      stringArray0[3] = "<!";
      stringArray0[4] = "<!";
      String string0 = SQLUtil.renderColumnListWithTableName("<!", stringArray0);
      assertEquals("<!.null, <!.truncatelanguage java, <!.<!, <!.<!, <!.<!", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncatelanguage java");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      String string1 = SQLUtil.join("<!.null, <!.truncatelanguage java, <!.<!, <!.<!, <!.<!", "z", stringArray0, " NOT", "w>eS", stringArray0);
      assertEquals("<!.null, <!.truncatelanguage java, <!.<!, <!.<!, <!.<! join  NOT as w>eS on z.null = w>eS.null and z.truncatelanguage java = w>eS.truncatelanguage java and z.<! = w>eS.<! and z.<! = w>eS.<! and z.<! = w>eS.<!", string1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("{oLbJ+p~`t:L-IHy");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", false, " NOT", "z$36Y");
      dBCheckConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z$36Y");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DBDataType dBDataType0 = DBDataType.getInstance(192, "CONSTRAINT CHECK z$36Y");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile(" NOT");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) dBDataType0;
      objectArray0[2] = (Object) defaultDBColumn0;
      objectArray0[3] = (Object) nameSpec1;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) defaultDBColumn0;
      PrintWriter printWriter0 = mockPrintWriter0.format("z$36Y", objectArray0);
      NameSpec nameSpec2 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec2, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.mutatesDataOrStructure("select");
      SQLUtil.isDDL("nc'`}kUHf;&DKGp");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.ensureCapacity(1432);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil.removeComments("es, ");
      SQLUtil.removeComments("es, ");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("*20k6pr}n", false);
      SQLUtil.removeComments("es, ");
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "es, ";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-87);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.normalize("es, ", false);
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_SWITCH_TO_NEWKEY;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.setDoc((String) null);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string1);
      
      String[] stringArray1 = new String[2];
      stringArray1[0] = "trunca";
      stringArray1[1] = "R#Sev(@#t6_b>9B'O[";
      String string2 = SQLUtil.innerJoin("b", stringArray1, (String) null, "trunca", stringArray1);
      assertEquals("null as trunca on b.trunca = trunca.trunca and b.R#Sev(@#t6_b>9B'O[ = trunca.R#Sev(@#t6_b>9B'O[", string2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SEPARATOR");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "SEPARATOR";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Integer integer3 = RawTransaction.ABORT;
      FBClob fBClob0 = new FBClob();
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("{olbj+p");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      boolean boolean0 = SQLUtil.isQuery("8bGKs2?>pRAOZf[q");
      assertFalse(boolean0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable1, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(SEPARATOR, , , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SEPARATOR");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "SEPARATOR";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SEPARATOR", true, stringArray0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.ABORT;
      Integer integer3 = RawTransaction.ABORT;
      FBClob fBClob0 = new FBClob();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("{olbj+p");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "nc'`}kuhf;";
      stringArray1[1] = "SEPARATOR";
      stringArray1[2] = "{olbj+p";
      stringArray1[3] = "create unique index";
      boolean boolean0 = SQLUtil.isQuery("8bGKs2?>pRAOZf[q");
      assertFalse(boolean0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(SEPARATOR, , , , , , , , )", string0);
      
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT SEPARATOR ", string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SEPARATOR");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)9;
      TableContainer tableContainer0 = new TableContainer("", defaultDBTable0);
      BigInteger bigInteger0 = BigInteger.TEN;
      tableContainer0.getSchema();
      DBSequence dBSequence0 = new DBSequence("SEPARATOR", (DBSchema) null);
      BigInteger bigInteger1 = BigInteger.TEN;
      DBDataType dBDataType0 = DBDataType.getInstance((int) (byte)9, "");
      JDBCType jDBCType0 = JDBCType.ROWID;
      Integer integer0 = jDBCType0.getVendorTypeNumber();
      Integer.compare((-94556626), (byte)45);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SEPARATOR", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SYSSEQUENCESRowFactory.TABLENAME_STRING;
      FBClob fBClob0 = new FBClob();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SYSSEQUENCES";
      stringArray0[1] = "SYSSEQUENCES";
      stringArray0[2] = "SYSSEQUENCES";
      boolean boolean0 = SQLUtil.isQuery("oj ");
      assertFalse(boolean0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = MockFile.createTempFile("EventHandle: internal id = ", "execute");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(SYSSEQUENCES, SYSSEQUENCES, SYSSEQUENCES, , , , )", string1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.isProcedureCall("{oLbJ+p~`t:L-IHy");
      SQLUtil.normalize("{oLbJ+p~`t:L-IHy", false);
      DBSchema dBSchema0 = new DBSchema("{oLbJ+p~`t:L-IHy");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{ oLbJ + p ~ ` t  : L - IH  y", dBSchema0);
      String[] stringArray0 = new String[4];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "delete", false, stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, "sqrt", false, stringArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      SQLUtil.isQuery("{oLbJ+p~`t:L-IHy");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("{ oLbJ + p ~ ` t  : L - IH  y", "{ oLbJ + p ~ ` t  : L - IH  y");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.mutatesDataOrStructure("remove() is not supported by ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuilder stringBuilder0 = new StringBuilder("SEQUENCES");
      DBSchema dBSchema0 = new DBSchema("remove() is not supported by ");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(39);
      ThreadFactory threadFactory0 = scheduledThreadPoolExecutor0.getThreadFactory();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(93, threadFactory0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SEQUENCES";
      DBNonUniqueIndex dBNonUniqueIndex0 = new DBNonUniqueIndex("SEQUENCES", false, defaultDBTable0, stringArray0);
      Callable<DBNonUniqueIndex> callable0 = (Callable<DBNonUniqueIndex>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn(dBNonUniqueIndex0).when(callable0).call();
      scheduledThreadPoolExecutor0.schedule(callable0, 2524L, timeUnit0);
      SQLUtil.renderValue((Object) null);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("@kr.K7X", defaultDBTable0, 36, ":-\"~()JL[U1!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SEPARATOR");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      defaultDBTable0.getPrimaryKeyConstraint();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      BigInteger bigInteger0 = BigInteger.TEN;
      DBDataType dBDataType0 = DBDataType.getInstance(47, "");
      JDBCType jDBCType0 = JDBCType.ROWID;
      jDBCType0.getVendorTypeNumber();
      Integer.compare((-94556626), 47);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      FBClob fBClob0 = new FBClob();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      SQLUtil.isQuery("Y31{&=f");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = MockFile.createTempFile("EventHandle: internal id = ", "create unique index");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.print((float) 47);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      String string0 = "C}Z==[+Xr\\`";
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "C}Z==[+Xr`");
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.isDML("EventHandle: internal id = ");
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
