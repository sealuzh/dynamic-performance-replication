/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:57:22 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic2DMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toRowMajorSparseMatrix();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2429, 2429, 2429);
      cCSMatrix0.maxInColumn(2429);
      cCSMatrix0.removeLastRow();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.min();
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceTopLeft(1728, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 1239, doubleArray0);
      cCSMatrix0.nonZeroAt((byte) (-19), 13);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 2429;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2429);
      cCSMatrix0.foldNonZeroInRows((VectorAccumulator) null);
      cCSMatrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(32L);
      assertNotNull(mockRandom0);
      
      double[][] doubleArray0 = new double[2][4];
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      assertNotNull(cCSMatrix1);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(4, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(2, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1657.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1512.02878);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1657.0;
      doubleArray2[1] = 1657.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 1657.0;
      doubleArray4[2] = (-1512.02878);
      doubleArray4[3] = 1657.0;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1018, 1018, 1018);
      assertNotNull(cCSMatrix0);
      assertEquals(1018, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(1018, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      int int0 = 0;
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(0, 1018);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(1018, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(1018, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(1018, cCSMatrix1.columns());
      
      Basic2DMatrix basic2DMatrix0 = (Basic2DMatrix)cCSMatrix1.subtract((double) 1018);
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(basic2DMatrix0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(1018, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(1018, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(1018, cCSMatrix1.columns());
      assertEquals(0, basic2DMatrix0.columns());
      assertEquals(0, basic2DMatrix0.rows());
      
      double[] doubleArray0 = new double[0];
      CCSMatrix.from1DArray(1018, 1018, doubleArray0);
      double double0 = new Integer(int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1016);
      Matrix matrix0 = cCSMatrix0.copyOfShape(0, 1016);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      double double0 = new Integer(0);
      cCSMatrix1.swapRows(32, 1016);
      matrix0.set(32, 895, (-516.56290423));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 0, (double[]) null);
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      
      VectorIterator vectorIterator0 = cCSMatrix0.nonZeroIteratorOfColumn(0);
      assertNotNull(vectorIterator0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      assertNotNull(cCSMatrix0);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random((-1799), (-1799), (double) (-1799), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      assertNotNull(cCSMatrix0);
      assertEquals(0.3333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(3, cCSMatrix0.cardinality());
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(3, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.blank();
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertEquals(0.3333333333333333, cCSMatrix0.density(), 0.01);
      assertEquals(3, cCSMatrix0.cardinality());
      assertEquals(3, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(3, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(3, cCSMatrix1.rows());
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(3, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      CompressedVector compressedVector0 = (CompressedVector)SparseVector.zero(121);
      assertNotNull(compressedVector0);
      assertEquals(121, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      int int0 = 40;
      // Undeclared exception!
      try { 
        cCSMatrix0.swapRows((-26), 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-26' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 996;
      CCSMatrix.identity(996);
      CCSMatrix.from1DArray(996, 996, (double[]) null);
      int int1 = (-2763);
      int int2 = 0;
      CCSMatrix.zero(int1, int2, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      Matrix matrix0 = cCSMatrix0.transpose();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow((-3158), vectorProcedure0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.block((Matrix) null, matrix0, matrix0, (Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)17;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn((-541), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -541
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.transpose();
      int int1 = 234;
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1016;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 13;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(13);
      int int2 = 73;
      int int3 = 4;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(73, 4, matrixFunction0);
      Integer integer0 = new Integer(4);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix1.toBinary();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix1, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix.zero(1016, 6, 6);
      MockRandom mockRandom0 = new MockRandom();
      ColumnMajorSparseMatrix.random(0, 4412, (double) 1016, (Random) mockRandom0);
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      CCSMatrix cCSMatrix0 = new CCSMatrix();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2;
      double double0 = 1639.405017332963;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-43);
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.iteratorOrNonZeroColumns();
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt((byte) (-43), (byte)92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 92
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 1016;
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 13;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(13);
      int int2 = 73;
      int int3 = 4;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)4).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(73, 4, matrixFunction0);
      Integer integer0 = new Integer(4);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix1.toBinary();
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix1, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2130, 2179.71395735);
      cCSMatrix0.maxInColumn(1032);
      int int0 = 984;
      cCSMatrix0.maxInColumn(984);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      org.evosuite.runtime.Random.setNextRandom((-1820));
      CCSMatrix.fromBinary((byte[]) null);
      int int1 = (-241);
      int int2 = 1431;
      CCSMatrix.zero(int0, int1, int2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(9995L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(241, 241, 0.0, (Random) mockRandom0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 241;
      doubleArray0[1] = (double) 579;
      doubleArray0[2] = (double) 2871;
      doubleArray0[3] = (double) 579;
      doubleArray0[4] = 2496.227550111;
      doubleArray0[5] = (double) 2871;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 2871;
      doubleArray0[8] = (double) 579;
      Matrix.from1DArray(594, 2871, doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(579, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) (-5);
      doubleArray0[2] = (double) (-5);
      doubleArray0[3] = (double) (-5);
      doubleArray0[4] = (double) (-5);
      doubleArray0[5] = (double) (-5);
      doubleArray0[6] = (double) (-5);
      doubleArray0[7] = (double) (-5);
      doubleArray0[2] = (double) (-5);
      SparseMatrix.identity(3);
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(2, 1, 1.0, (Random) mockRandom0);
      cCSMatrix0.max();
      // Undeclared exception!
      try { 
        CCSMatrix.identity((-335));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-5);
      doubleArray0[1] = (double) (-5);
      doubleArray0[2] = (double) (-5);
      doubleArray0[3] = (double) (-5);
      doubleArray0[4] = (double) (-5);
      doubleArray0[5] = (double) (-5);
      doubleArray0[6] = (double) (-5);
      doubleArray0[7] = (double) (-5);
      doubleArray0[2] = (double) (-5);
      int int0 = 3;
      SparseMatrix.identity(3);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(2, 1, 1.0, (Random) mockRandom0);
      cCSMatrix0.max();
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 2715;
      cCSMatrix0.setAll(0.0);
      cCSMatrix0.columnMajorIterator();
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("%F G8D 4}+VzdaHE!Tz");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      SparseVector.zero(4);
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.identity(220);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1018);
      int int0 = 0;
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      int int1 = 43;
      SparseVector.zero(43);
      int[] intArray0 = new int[0];
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.add(matrix0);
      Matrix.identity(int0);
      String string0 = "";
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV(string0);
      cCSMatrix1.copyOfColumns(int1);
      int int2 = 1;
      cCSMatrix1.maxInColumn(int2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      double double0 = new Integer(3);
      cCSMatrix0.setAll(3);
      cCSMatrix0.toRowMajorSparseMatrix();
      byte[] byteArray0 = new byte[13];
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)66, (byte)66);
      cCSMatrix0.setAll(Double.NEGATIVE_INFINITY);
      cCSMatrix0.columnMajorIterator();
      int int0 = 70;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(70, vectorProcedure0);
      double double0 = cCSMatrix0.minInColumn(int0);
      cCSMatrix0.set(byteArray0[0], byteArray0[0], double0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      Matrix matrix0 = cCSMatrix0.copyOfRows(32);
      matrix0.iteratorOfRow((-1743));
      byte[] byteArray0 = matrix0.toBinary();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
      CCSMatrix.fromBinary(byteArray0);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1018);
      int[] intArray0 = new int[1];
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix0, matrix0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      matrix0.toRowMajorSparseMatrix();
      int int0 = (-198);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.eachInColumn(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 4;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 4;
      doubleArray0[8] = (double) 4;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(4, 4, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, (-3146.1356), (-3146.1356), (-3146.1356)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.blankOfShape(234, 234);
      double[][] doubleArray0 = new double[0][0];
      CCSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MockRandom mockRandom1 = new MockRandom();
      // Undeclared exception!
      try { 
        cCSMatrix0.foldNonZero((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 963;
      CCSMatrix cCSMatrix0 = new CCSMatrix(963, 963);
      cCSMatrix0.min();
      int int1 = (-2963);
      // Undeclared exception!
      try { 
        cCSMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      CCSMatrix.diagonal(1, 1);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.removeFirstColumn();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-844.674)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix0.trace();
      // Undeclared exception!
      try { 
        cCSMatrix1.foldNonZero((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      CCSMatrix.diagonal(1, 1);
      cCSMatrix1.removeFirstColumn();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-844.674), 0.0, (-844.674)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        cCSMatrix1.update(matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 1);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal(1, 1);
      cCSMatrix1.removeFirstColumn();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-844.674)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix2.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        cCSMatrix0.foldNonZero((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 787;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = 1814.5864;
      doubleArray0[3] = (double) 787;
      int[] intArray0 = new int[2];
      intArray0[0] = 8;
      intArray0[1] = 8;
      CCSMatrix cCSMatrix0 = new CCSMatrix(787, 8, 8, doubleArray0, intArray0, intArray0);
      int int0 = 3141;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((long) 787);
      Matrix.random(3141, 2, mockRandom0);
      MatrixOperation<String> matrixOperation0 = (MatrixOperation<String>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(matrixOperation0).apply(any(org.la4j.matrix.ColumnMajorSparseMatrix.class));
      String string0 = cCSMatrix0.apply(matrixOperation0);
      cCSMatrix0.multiply((double) 2);
      int int1 = 2291;
      cCSMatrix0.maxInColumn(int1);
      int int2 = 687;
      cCSMatrix0.blankOfShape(int2, intArray0[1]);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInRow(int2, vectorProcedure0);
      cCSMatrix0.max();
      cCSMatrix0.max();
      int int3 = 1694;
      int int4 = 622;
      double double0 = (-1.0);
      cCSMatrix0.set(int3, int4, double0);
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV(string0);
      org.evosuite.runtime.Random.setNextRandom(int0);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZeroInColumn(int0, vectorProcedure1);
      int int5 = (-1575);
      cCSMatrix1.nonZeroIteratorOfColumn(int5);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      Matrix matrix0 = cCSMatrix0.copyOfRows(32);
      matrix0.iteratorOfRow((-1743));
      CCSMatrix.identity(32);
      matrix0.swapRows(5, 32);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      Matrix matrix0 = cCSMatrix0.copyOfRows(32);
      matrix0.iteratorOfRow((-1743));
      matrix0.max();
      CCSMatrix.fromCSV("M1}+7B]/");
      int int0 = (-530);
      matrix0.copyOfShape(int0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3147);
      int int0 = 943;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(3147, 943);
      cCSMatrix0.columnMajorIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInColumn(70, vectorProcedure0);
      cCSMatrix1.minInColumn(943);
      CCSMatrix.from2DArray((double[][]) null);
      cCSMatrix1.getRow(int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 1027;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1027);
      Matrix matrix0 = cCSMatrix0.blank();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      SparseVector.zero(121);
      MockRandom mockRandom0 = new MockRandom();
      matrix0.eachInColumn(121, (VectorProcedure) null);
      int int1 = 1192;
      cCSMatrix0.minInColumn(int1);
      double[][] doubleArrayArray0 = null;
      CCSMatrix.from2DArray(doubleArrayArray0);
      int int2 = Integer.MAX_VALUE;
      double double0 = 236.772904;
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(int0, (double) int2, (Random) mockRandom0);
      Matrix.from2DArray(doubleArrayArray0);
      matrix0.setAll(double0);
      int int3 = 1589;
      int int4 = 1000;
      CCSMatrix.zero(int3, int4);
      int int5 = 3618;
      cCSMatrix1.maxInColumn(int5);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 12;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(12);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.removeFirstColumn();
      cCSMatrix0.determinant();
      ColumnMajorSparseMatrix.zero(12, 998, 12);
      Matrix.constant(2130, 2130, 2179.71395735);
      cCSMatrix1.insert(matrix0);
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 234;
      cCSMatrix0.blankOfShape(int0, int1);
      int int2 = 32;
      cCSMatrix0.maxInColumn(int2);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-124);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte)17;
      byteArray0[2] = byte2;
      CCSMatrix.fromBinary(byteArray0);
      int int3 = (-1789569705);
      CCSMatrix.zero((int) byteArray0[1], int0, int3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1018);
      int[] intArray0 = new int[1];
      cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(1018, 1018);
      cCSMatrix0.copyOfShape(9, 1018);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)17;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.toColumnMajorSparseMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int int0 = (-392);
      MockRandom mockRandom0 = new MockRandom(374L);
      // Undeclared exception!
      try { 
        CCSMatrix.random((int) (byte)17, (-392), (-2892.91), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3147);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(3147, 943);
      cCSMatrix0.columnMajorIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInColumn(70, vectorProcedure0);
      cCSMatrix1.minInColumn(943);
      MockRandom mockRandom1 = new MockRandom(1L);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZeroInColumn(669, vectorProcedure1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 1767;
      CCSMatrix.identity(1767);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1767, (-3375.3641479));
      cCSMatrix0.columnMajorIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(70, vectorProcedure0);
      cCSMatrix0.minInColumn(943);
      double[][] doubleArrayArray0 = null;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray((double[][]) null);
      int int1 = 1016;
      CCSMatrix.randomSymmetric(int1, (double) int0, (Random) mockRandom0);
      int int2 = 32;
      Matrix.from2DArray(doubleArrayArray0);
      int int3 = (-461);
      double double0 = 933.73111;
      cCSMatrix1.set(int2, int3, double0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 1639.405017332963);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      int int1 = 994;
      MockRandom mockRandom0 = new MockRandom(994);
      // Undeclared exception!
      try { 
        CCSMatrix.randomSymmetric(3, (double) 3, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 9.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2130, 2179.71395735);
      cCSMatrix0.min();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.fromMatrixMarket("Sides of blocks are incompatible!");
      double[][] doubleArray0 = new double[3][5];
      SparseMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      VectorProcedure vectorProcedure0 = null;
      int int0 = 3131;
      cCSMatrix0.eachNonZeroInColumn(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(3147, 3147);
      cCSMatrix0.isColumnMajor();
      int int0 = 1007;
      cCSMatrix0.maxInColumn(1007);
      int int1 = 6;
      CCSMatrix.identity(6);
      double double0 = 339.736999211522;
      // Undeclared exception!
      try { 
        Matrix.identity((-1361));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3147);
      MockRandom mockRandom3 = new MockRandom();
      cCSMatrix0.foldNonZero((MatrixAccumulator) null);
      cCSMatrix0.iteratorOrNonZeroColumns();
      int int0 = 2;
      Matrix.unit(int0, int0);
      cCSMatrix0.removeLastRow();
      cCSMatrix0.update(matrixFunction0);
      MockRandom mockRandom4 = new MockRandom();
      cCSMatrix0.trace();
      int int1 = (-2439);
      int int2 = 843;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int1, int2);
      int int3 = 846;
      cCSMatrix1.updateRow(int0, vectorFunction0);
      cCSMatrix1.nonZeroRowMajorIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZeroInColumn(int3, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3, 3);
      cCSMatrix0.transpose();
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom((-1L));
      // Undeclared exception!
      try { 
        Matrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3147);
      cCSMatrix0.nonZeroColumnMajorIterator();
      cCSMatrix0.copyOfShape(3147, 17);
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      mockRandom2.setSeed(1004);
      mockRandom2.nextInt(17);
      mockRandom0.nextInt((-153));
      org.evosuite.runtime.Random.setNextRandom(1004);
      MockRandom mockRandom3 = new MockRandom(1004);
      int int0 = 990;
      CCSMatrix.randomSymmetric(990, (-2913.194), (Random) mockRandom2);
      String string0 = "";
      Matrix.fromCSV(string0);
      double double0 = Double.POSITIVE_INFINITY;
      cCSMatrix0.setAll(double0);
      int int1 = (-2973);
      double double1 = (-964.5);
      cCSMatrix0.set(int0, int1, double1);
      int int2 = 541;
      double double2 = 1764.7734666;
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(int2, double2);
      cCSMatrix1.iteratorOrNonZeroColumns();
      cCSMatrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 3147;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3147);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(3147, 943);
      cCSMatrix0.columnMajorIterator();
      int int1 = 28;
      int int2 = 13;
      cCSMatrix1.transformColumn(13, (VectorFunction) null);
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal(int0, int1);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      cCSMatrix1.maxInColumn(int0);
      CCSMatrix.identity(int0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.foldColumns(vectorAccumulator0);
      long long0 = 4L;
      MockRandom mockRandom2 = new MockRandom(long0);
      String string0 = "";
      CCSMatrix.fromCSV(string0);
      CCSMatrix cCSMatrix3 = new CCSMatrix();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.eachNonZeroInColumn(int2, vectorProcedure0);
      VectorProcedure vectorProcedure1 = null;
      int int3 = 42;
      cCSMatrix2.eachNonZeroInColumn(int3, vectorProcedure1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 3147;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3147, 3147, 3147);
      cCSMatrix0.transpose();
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 17;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.transformColumn(17, vectorFunction0);
      MockRandom mockRandom1 = new MockRandom();
      Matrix matrix1 = null;
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix1, cCSMatrix0);
      cCSMatrix0.minInColumn(int0);
      cCSMatrix1.columnMajorIterator();
      int int2 = 1636;
      matrix0.removeRow(int2);
      cCSMatrix1.swapRows(int0, int0);
      int int3 = 1000;
      double double0 = (-643.7049572272889);
      matrix0.set(int3, int1, double0);
      CCSMatrix.block(matrix0, matrix0, cCSMatrix0, matrix1);
      MockRandom mockRandom2 = new MockRandom();
      CCSMatrix.randomSymmetric(int0, (double) int2, (Random) mockRandom2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3, 3);
      cCSMatrix0.transpose();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3.677014025291917), (-3.677014025291917), (-3146.1356), (-3146.1356), (-3146.1356)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt(3);
      org.evosuite.runtime.Random.setNextRandom(0);
      MockRandom mockRandom1 = new MockRandom(1103L);
      CCSMatrix cCSMatrix1 = CCSMatrix.randomSymmetric(11, 1.0, (Random) mockRandom0);
      Matrix.fromCSV("");
      cCSMatrix1.setAll(2240.27);
      int int0 = 3147;
      // Undeclared exception!
      try { 
        cCSMatrix1.set(3147, 6, 3147);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '3147' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 3;
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3, 3);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      cCSMatrix0.kroneckerProduct(matrix0);
      cCSMatrix0.transpose();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-3.677014025291917), (-3.677014025291917), (-3146.1356), (-3146.1356), (-3146.1356)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix0.trace();
      // Undeclared exception!
      try { 
        cCSMatrix0.foldNonZero((MatrixAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrices$33", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 2385, 176);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformColumn(1, vectorFunction0);
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      cCSMatrix0.isZeroAt(1, 1132);
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix0.copy();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix1.trace();
      Double double0 = new Double(819.0479);
      cCSMatrix0.blankOfColumns((-3743));
      int int1 = 2393;
      CCSMatrix cCSMatrix2 = CCSMatrix.identity(int1);
      cCSMatrix2.nonZeroColumnMajorIterator();
      CCSMatrix cCSMatrix3 = new CCSMatrix();
      cCSMatrix1.toMatrixMarket();
      cCSMatrix0.subtract((Matrix) cCSMatrix2);
      cCSMatrix2.toBinary();
      cCSMatrix1.getRow(int0);
      cCSMatrix1.columnMajorIterator();
      String string0 = "";
      CCSMatrix.fromMatrixMarket(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 59;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(59);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(49, 49);
      int int1 = 1532;
      Matrix matrix0 = cCSMatrix0.power(1532);
      int int2 = (-1743);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SQUARE_ROOT;
      cCSMatrix1.withSolver(linearAlgebra_SolverFactory0);
      String string0 = null;
      Matrix matrix1 = Matrix.fromCSV(string0);
      CCSMatrix.block(cCSMatrix0, matrix1, matrix0, cCSMatrix0);
      cCSMatrix0.toMatrixMarket();
      cCSMatrix0.determinant();
      int int3 = 1364;
      CCSMatrix cCSMatrix2 = new CCSMatrix(int3, int0, int1);
      cCSMatrix2.blankOfShape(int2, int3);
      long long0 = 32L;
      MockRandom mockRandom0 = new MockRandom(long0);
      String string1 = "liu_E_\\v0";
      Matrix.fromCSV(string1);
      CCSMatrix.identity(int0);
      cCSMatrix2.nonZeroColumnMajorIterator();
      CCSMatrix cCSMatrix3 = new CCSMatrix();
      cCSMatrix0.toMatrixMarket();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.fromCSV(string1);
      cCSMatrix3.subtract((Matrix) rowMajorSparseMatrix0);
      cCSMatrix2.toBinary();
      int int4 = 809;
      cCSMatrix2.getRow(int4);
      cCSMatrix3.columnMajorIterator();
      String string2 = "";
      CCSMatrix.fromMatrixMarket(string2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 1018;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1018, 1018);
      int[] intArray0 = new int[1];
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix cCSMatrix2 = new CCSMatrix(1018, 1018);
      int int1 = 9;
      CCSMatrix cCSMatrix3 = (CCSMatrix)cCSMatrix0.copyOfShape(9, 1018);
      int int2 = 48;
      cCSMatrix1.getOrElse(48, 48, 48);
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix3.minInColumn(int1);
      mockRandom0.nextFloat();
      cCSMatrix2.columnMajorIterator();
      mockRandom0.ints();
      MockRandom mockRandom1 = new MockRandom();
      long long0 = (-730L);
      mockRandom1.setSeed(long0);
      long long1 = 1000L;
      mockRandom1.setSeed(long1);
      int int3 = 1000;
      cCSMatrix2.getRow(int3);
      CCSMatrix.randomSymmetric(int0, (double) int0, (Random) mockRandom1);
      CCSMatrix cCSMatrix4 = new CCSMatrix();
      int int4 = 2670;
      CCSMatrix cCSMatrix5 = CCSMatrix.zero(int2, int3, int4);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cCSMatrix5.to(matrixFactory0);
      cCSMatrix1.toMatrixMarket();
      cCSMatrix0.toBinary();
      int int5 = 311;
      int int6 = 215;
      double[] doubleArray0 = new double[0];
      CCSMatrix.from1DArray(int5, int6, doubleArray0);
  }
}
