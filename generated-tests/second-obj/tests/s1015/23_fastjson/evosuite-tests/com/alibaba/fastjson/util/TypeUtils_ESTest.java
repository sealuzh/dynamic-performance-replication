/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:58:31 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.FieldDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.Currency;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.SortedSet;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.LongBinaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils.isNumber("_");
      MockThread mockThread0 = new MockThread((Runnable) null);
      HashMap<Thread, StackTraceElement[]> hashMap0 = new HashMap<Thread, StackTraceElement[]>();
      ParserConfig.getGlobalInstance();
      LinkedHashSet<NoSuchMethodException> linkedHashSet0 = new LinkedHashSet<NoSuchMethodException>();
      ParserConfig parserConfig0 = new ParserConfig(true);
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(mockThread0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : Thread[MockThread-0,5,Test_Execution_Group]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<IndexOutOfBoundsException> class0 = IndexOutOfBoundsException.class;
      TypeUtils.getSerializeFeatures(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<?> class1 = TypeUtils.loadClass("([a<A\"r1-{hd", classLoader0);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      String string0 = ", minimumCapacity=";
      MockThread.getAllStackTraces();
      Class<MapDeserializer> class1 = MapDeserializer.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.getKoltinConstructorParameters(class1);
      TypeUtils.loadClass("Ljava.awt.Point");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("gethashs{Code", false);
      Class<MessageFormat> class0 = MessageFormat.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Float float0 = new Float(0.0F);
      TypeUtils.castToByte(float0);
      Class<Double> class1 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      aSMDeserializerFactory1.classLoader.getParent();
      Type[] typeArray0 = new Type[2];
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[0]);
      parameterizedTypeImpl0.getTypeName();
      HashSet<NoSuchMethodException> hashSet0 = new HashSet<NoSuchMethodException>();
      ParserConfig parserConfig0 = new ParserConfig();
      String string0 = "IjzD)0a&";
      InterruptedException interruptedException0 = new InterruptedException("IjzD)0a&");
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(interruptedException0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalArgumentException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@a2a78cf3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.isGenericParamType(class0);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException("z");
      InterruptedException interruptedException0 = new InterruptedException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      Class<SQLWarning> class1 = SQLWarning.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class1, jSONType0);
      Type type0 = TypeUtils.unwrapOptional(class0);
      TypeUtils.isGenericParamType(type0);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(noSuchMethodException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      Map<String, String> map0 = null;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@99
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      treeMap0.put("org.springframework.remoting.support.RemoteInvocation", "java/lang/Character");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
      WeakHashMap<Timestamp, SQLClientInfoException> weakHashMap0 = new WeakHashMap<Timestamp, SQLClientInfoException>();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("<Txl%@wj#s_KeaY!");
      Boolean boolean0 = Boolean.TRUE;
      TypeUtils.castToInt(boolean0);
      TypeUtils.loadClass("<Txl%@wj#s_KeaY!", (ClassLoader) null);
      TypeUtils.loadClass("<Txl%@wj#s_KeaY!", (ClassLoader) null, true);
      TypeUtils.loadClass("com.alibaba.fastjson.serializer.BigIntegerCodec");
      Class<?> class2 = TypeUtils.getCollectionItemClass(class0);
      assertEquals("class java.lang.Object", class2.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<MockDateFormat> class0 = MockDateFormat.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.toLocale("[short");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("[short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : [short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("syntax error : ");
      LinkedHashMap<ChoiceFormat, FieldInfo> linkedHashMap0 = new LinkedHashMap<ChoiceFormat, FieldInfo>();
      Class<MockDate> class0 = MockDate.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
      
      String string0 = TypeUtils.decapitalize("syntax error : ");
      assertEquals("syntax error : ", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      Class<InternalError> class0 = InternalError.class;
      Class<LinkageError> class1 = LinkageError.class;
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      TypeUtils.getSuperMethodAnnotation(class2, (Method) null);
      FieldInfo fieldInfo0 = null;
      try {
        fieldInfo0 = new FieldInfo("d_u>0;", (Method) null, (Field) null, class1, class0, 37, 37, (-1977), (JSONField) null, (JSONField) null, "d_u>0;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.FieldInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put((String) null, (String) null);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getRawClass(class0);
      TypeUtils.decapitalize("z");
      TypeUtils.isHibernateInitialized("z");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("syntax error : ");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(noSuchFieldError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.NoSuchFieldError: syntax error : 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      long long0 = TypeUtils.fnv1a_64("!Pk 9(x/r2.");
      assertEquals((-391449510978596944L), long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.isHibernateInitialized((Object) null);
      Class<Exception> class0 = Exception.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup0 = new ThreadGroup("get");
      MockThread mockThread0 = new MockThread(threadGroup0, ".000000");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      parserConfig0.createJavaBeanDeserializer(class0, (Type) null);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("B7Mqk[XP/Loq");
      PrintWriter printWriter0 = mockPrintWriter0.format("get", (Object[]) null);
      mockRuntimeException0.printStackTrace(printWriter0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<MockDateFormat> class0 = MockDateFormat.class;
      TypeUtils.getParserFeatures(class0);
      Class<Rectangle> class1 = Rectangle.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      treeMap0.higherEntry("toS");
      treeMap0.put("toS", "org.springframework.remoting.support.RemoteInvocation");
      TypeUtils.getClass((Type) class0);
      TypeUtils.getCollectionItemType(class1);
      Class<Double> class2 = Double.class;
      boolean boolean0 = TypeUtils.isPath(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.pollFirstEntry();
      treeMap0.values();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      TypeUtils.getGenericParamType(class0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) concurrentHashMap0, (Map<String, Field>) null, true, propertyNamingStrategy1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      TypeUtils.getClass((Type) class1);
      TypeUtils.getCollectionItemType(class0);
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TypeUtils.castToBigDecimal((Object) null);
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException("hBs]Q'W^s>t7Vt,");
      mockNullPointerException0.toString();
      mockNullPointerException0.getMessage();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) mockNullPointerException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.DecimalFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("Ljava.awt.Point");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ljava.awt.Point");
      Locale locale0 = Locale.US;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      Class<FieldInfo> class0 = FieldInfo.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isNumber("Ljava.awt.Point");
      MockThread mockThread0 = new MockThread((Runnable) null, "-2147483648");
      MockThread.getAllStackTraces();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setPackageAssertionStatus("Ljava.awt.Point", false);
      TypeUtils.loadClass((String) null, classLoader0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(noSuchMethodError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.NoSuchMethodError: Ljava.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("Ljava.awt.Point", classLoader0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("Ljava.awt.Point");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getParserFeatures(class0);
      BigDecimal bigDecimal0 = new BigDecimal(2278L);
      bigDecimal0.toPlainString();
      BigDecimal.valueOf((long) 0, 0);
      TypeUtils.castToSqlTime(bigDecimal0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("2278");
      sQLTimeoutException0.printStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("2278");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : 2278
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      TypeUtils.getParserFeatures(class0);
      Locale locale0 = TypeUtils.toLocale("[short");
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.text.DateFormatSymbols@eae8aecc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getSuppressed();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      parserConfig0.compatibleWithJavaBean = true;
      parserConfig0.setAutoTypeSupport(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) hashtable0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, public com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer(com.alibaba.fastjson.parser.ParserConfig,java.lang.Class<?>)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Class<Locale> class0 = Locale.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.Locale
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("PWK%S,`8Kt;(s7C0f", classLoader1);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONObject jSONObject0 = new JSONObject(false);
      classLoader1.setPackageAssertionStatus("yyyy-MM-dd HH:mm:ss", false);
      classLoader1.setDefaultAssertionStatus(true);
      classLoader1.setDefaultAssertionStatus(false);
      Class<Throwable> class0 = Throwable.class;
      ParserConfig parserConfig0 = null;
      classLoader1.getParent();
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, (ParserConfig) null);
      Hashtable<Byte, Jdk8DateCodec> hashtable0 = new Hashtable<Byte, Jdk8DateCodec>();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "Ljava.awt.Point";
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCaEpacity=");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      classLoader0.setClassAssertionStatus("java.awt.Color", true);
      ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("istoString", true);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(", minimumCaEpacity=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)48;
      byteArray0[0] = (byte)48;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.divideAndRemainder(bigInteger1);
      TypeUtils.castToFloat(bigInteger0);
      Class<StackTraceElement> class0 = StackTraceElement.class;
      String string0 = "?X)[]";
      Type type0 = null;
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("illegal getter", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getRawClass(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.isGenericParamType(class0);
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "net.sf.cglib.proxy.Factory");
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      LinkedHashMap<TypeNotPresentException, MapDeserializer> linkedHashMap0 = new LinkedHashMap<TypeNotPresentException, MapDeserializer>();
      TypeUtils.isHibernateInitialized((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(numberDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Constructor<DataTruncation>[] constructorArray0 = (Constructor<DataTruncation>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      TypeUtils.getParserFeatures(class0);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.getCollectionItemType(class1);
      boolean boolean0 = new Boolean("toS");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      mockIllegalAccessException0.getSuppressed();
      mockIllegalAccessException0.getStackTrace();
      Type type0 = null;
      Type type1 = TypeUtils.getCollectionItemType((Type) null);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      TypeUtils.isProxy(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(type1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      MockThread.getAllStackTraces();
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      TypeUtils.getCollectionItemType(type0);
      boolean boolean1 = TypeUtils.compatibleWithJavaBean;
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      TreeSet<MockDate> treeSet0 = new TreeSet<MockDate>();
      TreeSet<MockDate> treeSet1 = new TreeSet<MockDate>((SortedSet<MockDate>) treeSet0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(treeSet1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class com.alibaba.fastjson.parser.deserializer.NumberDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TypeUtils.decapitalize("getstream");
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      linkedHashMap0.put("getstream", "Ljava.lang.AutoCloseable");
      linkedHashMap0.put("getstream", "Ljava.lang.AutoCloseable");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      Class<Properties> class1 = Properties.class;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
      TypeUtils.getClass((Type) class1);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isNumber("Mjava.awt.Point");
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      MockThread.getAllStackTraces();
      mockThread0.getContextClassLoader();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put((String) null, (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Character> class1 = Character.class;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      TypeUtils.toLocale("istoLocalizedPattern");
      Class<MockThaiBuddhistDate> class2 = MockThaiBuddhistDate.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class2);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isNumber("9Z)N6U|wa");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(0);
      String string0 = null;
      identityHashMap0.replace(", minimumCapacity=", (String) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.addAccept((String) null);
      Class<SQLException> class1 = SQLException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) null, false, (PropertyNamingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils.isNumber("9Z)N6U|wa");
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      MockThread.getAllStackTraces();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.setPackageAssertionStatus("Ljava.awt.Rectangle", false);
      TypeUtils.loadClass(", minimumCapacity=", classLoader0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@1d528e44
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      TypeUtils.getCollectionItemType(class0);
      Class<AtomicInteger> class1 = AtomicInteger.class;
      TypeUtils.isProxy(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Type type1 = TypeUtils.getGenericParamType(type0);
      TypeUtils.getClass(type1);
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      TypeUtils.isKotlin(class0);
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      SQLTransientException sQLTransientException0 = new SQLTransientException("Ljava.awt.Color", "|lW45k)'_zr(~x");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("xRi~756=q[Kti}hslW", "|lW45k)'_zr(~x", (-750), sQLTransientException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      InternalError internalError0 = new InternalError("Ljava.awt.Color", sQLNonTransientConnectionException0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Ljava.awt.Color", internalError0);
      concurrentHashMap0.replace("xRi~756=q[Kti}hslW", (Object) sQLFeatureNotSupportedException0, (Object) "|lW45k)'_zr(~x");
      JSONObject jSONObject0 = new JSONObject(concurrentHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      Hashtable<Thread, StackTraceElement[]> hashtable0 = new Hashtable<Thread, StackTraceElement[]>();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("Ljava.:tawt.oint", classLoader0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashtable0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.castToDate((Object) null);
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertEquals(0, linkedHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.isGenericParamType(class0);
      TypeUtils.castToString("z");
      Class<ChoiceFormat> class2 = ChoiceFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(jSONType0).builder();
      Class<?> class3 = JavaBeanInfo.getBuilderClass(class1, jSONType0);
      TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(true);
      String string0 = "com.alibaba.fastjson.util.TypeUtils";
      TypeUtils.loadClass("com.alibaba.fastjson.util.TypeUtils", classLoader0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.text.SimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null);
      Class<TypeNotPresentException> class0 = TypeNotPresentException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<SQLNonTransientConnectionException> class1 = SQLNonTransientConnectionException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLRecoverableException0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLNonTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.isGenericParamType(class0);
      TypeUtils.castToString("z");
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.unwrapOptional(class0);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<ThrowableDeserializer> class2 = ThrowableDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      TypeUtils typeUtils0 = new TypeUtils();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MockDate mockDate0 = new MockDate(825, 825, 825, 825, 1976, 2775);
      assertNotNull(mockDate0);
      assertEquals("Wed Feb 07 18:42:15 GMT 2796", mockDate0.toString());
      
      Date date0 = TypeUtils.castToSqlDate(mockDate0);
      assertNotNull(date0);
      assertEquals("Wed Feb 07 18:42:15 GMT 2796", mockDate0.toString());
      
      Constructor<SecurityException>[] constructorArray0 = (Constructor<SecurityException>[]) Array.newInstance(Constructor.class, 4);
      constructorArray0[0] = (Constructor<SecurityException>) constructorArray0;
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      Class<TimeZone> class0 = TimeZone.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Integer integer1 = new Integer((-1674));
      assertEquals((-1674), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.getInteger("2d\tdRV", integer1);
      assertEquals((-1674), (int)integer2);
      assertNotNull(integer2);
      
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0, true);
      assertNotNull(list0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertNotNull(imageCapabilities0);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertTrue(imageCapabilities0.isAccelerated());
      
      Integer integer3 = TypeUtils.castToInt((Object) null);
      assertNull(integer3);
      
      Locale locale0 = TypeUtils.toLocale("[char");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("[char", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("[char", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("q>");
      assertNull(class0);
      
      Vector<SQLTransientException> vector0 = new Vector<SQLTransientException>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      ThreadGroup threadGroup0 = new ThreadGroup("(T-p}~tZ[2YFe=.4dp");
      assertNotNull(threadGroup0);
      assertEquals("(T-p}~tZ[2YFe=.4dp", threadGroup0.getName());
      
      Class<Field> class1 = Field.class;
      JSONType jSONType0 = null;
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class1, (JSONType) null);
      assertNull(class2);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      Class class3 = (Class)TypeUtils.getCollectionItemType(class1);
      assertNotNull(class3);
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(1, class3.getModifiers());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      assertNotNull(stringIndexOutOfBoundsException0);
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      assertNotNull(optionalCodec0);
      assertEquals(12, optionalCodec0.getFastMatchToken());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) hashtable0, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("Ljava.awt.Point");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      MockThread mockThread1 = new MockThread("NyP_ly+o");
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap1);
      assertTrue(identityHashMap1.equals((Object)identityHashMap0));
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.isEmpty());
      
      String string0 = identityHashMap1.put("NyP_ly+o", "java.time.LocalTime");
      assertNotSame(identityHashMap1, identityHashMap0);
      assertNull(string0);
      assertFalse(identityHashMap1.equals((Object)identityHashMap0));
      assertFalse(identityHashMap1.isEmpty());
      assertEquals(1, identityHashMap1.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Object> class0 = Object.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotSame(identityHashMap0, identityHashMap1);
      assertNotNull(serializeBeanInfo0);
      assertFalse(identityHashMap0.equals((Object)identityHashMap1));
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      Locale locale0 = TypeUtils.toLocale("0001-01-01T00:00:00+08:00");
      assertNotNull(locale0);
      assertEquals("0001-01-01t00:00:00+08:00", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("0001-01-01t00:00:00+08:00", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("Lorg.springframework.util.LinkedMultiValueMap", classLoader0, true);
      assertNull(class1);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Class<?> class2 = TypeUtils.getCollectionItemClass(type0);
      assertNotNull(class2);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals("class java.lang.Object", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      
      long long1 = TypeUtils.fnv1a_64_lower("U3^3yK$u(1Ehv[.X");
      assertEquals(2969407693317098386L, long1);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertNotNull(imageCapabilities0);
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      
      TreeMap<TimeZone, SQLRecoverableException> treeMap0 = new TreeMap<TimeZone, SQLRecoverableException>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      classLoader1.setClassAssertionStatus("gethashCode", false);
      assertSame(classLoader1, classLoader0);
      
      Class<MessageFormat> class0 = MessageFormat.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Byte byte0 = TypeUtils.castToByte(float0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Class<Float> class1 = Float.class;
      Class<Double> class2 = Double.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertEquals("double", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(genericArrayType0).getGenericComponentType();
      Class class3 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class3);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertEquals("double", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isPrimitive());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertEquals("class [D", class3.toString());
      assertFalse(class3.isInterface());
      
      Class<?> class4 = TypeUtils.getCollectionItemClass(class1);
      assertNotNull(class4);
      assertFalse(class4.isEnum());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isPrimitive());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isArray());
      assertFalse(class4.isInterface());
      assertEquals("class java.lang.Object", class4.toString());
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      assertSame(aSMClassLoader1, aSMClassLoader0);
      assertNotNull(aSMClassLoader1);
      
      ClassLoader classLoader2 = aSMDeserializerFactory1.classLoader.getParent();
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader2, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertSame(classLoader1, classLoader2);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory0);
      assertNotNull(classLoader2);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(classLoader2);
      assertNotNull(aSMDeserializerFactory2);
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory0));
      assertFalse(aSMDeserializerFactory2.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory2));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<Currency> class5 = Currency.class;
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertNotSame(parserConfig1, parserConfig0);
      assertNotNull(parserConfig1);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      assertNotNull(timeDeserializer0);
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) class3, class5, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Currency
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class1);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals("class [C", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertNull(type0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("char", class0.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertEquals("class [C", class1.toString());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Class<BigDecimal> class0 = BigDecimal.class;
      Class<ImageCapabilities> class1 = ImageCapabilities.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertEquals("class java.awt.ImageCapabilities", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      Type type1 = TypeUtils.getGenericParamType(class2);
      assertNull(type1);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertEquals("class java.awt.ImageCapabilities", class2.toString());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      
      boolean boolean1 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      assertNotNull(stringIndexOutOfBoundsException0);
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      LinkedHashMap<SQLTransientException, GridBagConstraints> linkedHashMap0 = new LinkedHashMap<SQLTransientException, GridBagConstraints>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isNumber("9Z)N6U|wa");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertEquals(17, map0.size());
      assertFalse(map0.isEmpty());
      
      mockThread0.run();
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader0.setPackageAssertionStatus("Ljava.awt.Rectangle", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      Class<?> class1 = TypeUtils.loadClass(", minimumCapacity=", classLoader0);
      assertNull(class1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isNumber("Ljava.awt.Point");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      classLoader0.setPackageAssertionStatus(", minimumCapacity=", false);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      Class<?> class1 = TypeUtils.loadClass("E:D|WI)oMv", classLoader0);
      assertNull(class1);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Boolean boolean1 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("Lorg.springframework.util.LinkedMultiValueMap");
      assertNotNull(threadGroup0);
      assertEquals("Lorg.springframework.util.LinkedMultiValueMap", threadGroup0.getName());
      
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      Class<StringCharacterIterator> class1 = StringCharacterIterator.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNotNull(class2);
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.text.StringCharacterIterator", class2.toString());
      assertFalse(class2.isAnnotation());
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class2);
      assertNotNull(class3);
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.text.StringCharacterIterator", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals("class java.text.StringCharacterIterator", class3.toString());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertEquals(17, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      
      Class class4 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotSame(class4, class3);
      assertNotNull(class4);
      assertFalse(class4.equals((Object)class3));
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals("class java.text.ChoiceFormat", class4.toString());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      assertNotNull(illegalMonitorStateException0);
      assertEquals("java.lang.IllegalMonitorStateException", illegalMonitorStateException0.toString());
      assertNull(illegalMonitorStateException0.getMessage());
      
      Class<PropertyNamingStrategy> class5 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) illegalMonitorStateException0, class5, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Type[] typeArray0 = new Type[3];
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      
      typeArray0[0] = null;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "b/i{d4Z#;yBK";
      stringArray0[1] = ".%|R4R";
      stringArray0[2] = "[";
      stringArray0[3] = "lastZoneIndex";
      stringArray0[4] = "PATTERN_DAY_OF_MONTH";
      stringArray0[5] = "Ljava.awt.Point";
      stringArray0[6] = "-";
      stringArray0[7] = "java.";
      stringArray0[8] = "aN|+}2/{0_mY/v";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      assertNotNull(javaBeanSerializer0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      
      Class<?> class1 = javaBeanSerializer0.getType();
      assertNotNull(class1);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("byte", class1.toString());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      typeArray0[1] = (Type) class1;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      Class<?> class2 = TypeUtils.loadClass(".%|R4R", classLoader1);
      assertSame(classLoader0, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertNull(class2);
      
      typeArray0[2] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], class0);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      InterruptedException interruptedException0 = TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      assertSame(classLoader0, classLoader1);
      assertNull(interruptedException0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class long
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("Ljava.awt.Point");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertEquals(17, map0.size());
      assertFalse(map0.isEmpty());
      
      MockThread mockThread1 = new MockThread("NyP_ly+o");
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      
      classLoader0.setPackageAssertionStatus("Ljava.awt.Font", false);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      
      PageAttributes pageAttributes0 = new PageAttributes();
      assertNotNull(pageAttributes0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      long long0 = TypeUtils.fnv1a_64_lower("Ljava.awt.Point");
      assertEquals((-5733317832858507079L), long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<TimeUnit> class0 = TimeUnit.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertNotNull(throwableDeserializer0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.awt.Font", parserConfig0);
      assertNotNull(defaultJSONParser0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      
      Object object0 = throwableDeserializer0.createInstance(defaultJSONParser0, (Type) class0);
      assertNull(object0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Class<?> class2 = TypeUtils.loadClass("]#i)qru&SzUVQce");
      assertNull(class2);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      assertNotNull(dateFormatSymbols0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      identityHashMap0.forEach(biConsumer0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Collection<String> collection0 = identityHashMap0.values();
      assertNotNull(collection0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap1);
      assertTrue(identityHashMap1.equals((Object)identityHashMap0));
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.isEmpty());
      
      String string0 = identityHashMap0.put("X0Xq}", "]#i)qru&SzUVQce");
      assertNotSame(identityHashMap0, identityHashMap1);
      assertNull(string0);
      assertFalse(identityHashMap0.equals((Object)identityHashMap1));
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      String string1 = identityHashMap1.put((String) null, (String) null);
      assertNotSame(identityHashMap1, identityHashMap0);
      assertNull(string1);
      assertFalse(identityHashMap1.equals((Object)identityHashMap0));
      assertEquals(1, identityHashMap1.size());
      assertFalse(identityHashMap1.isEmpty());
      
      String string2 = identityHashMap1.put("getDeclaringClass", "]#i)qru&SzUVQce");
      assertNotSame(identityHashMap1, identityHashMap0);
      assertNull(string2);
      assertFalse(identityHashMap1.equals((Object)identityHashMap0));
      assertFalse(identityHashMap1.isEmpty());
      assertEquals(2, identityHashMap1.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Byte> class3 = Byte.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class3, (Map<String, String>) identityHashMap1, propertyNamingStrategy0);
      assertNotSame(identityHashMap1, identityHashMap0);
      assertNotNull(serializeBeanInfo0);
      assertFalse(identityHashMap1.equals((Object)identityHashMap0));
      assertFalse(identityHashMap1.isEmpty());
      assertEquals(2, identityHashMap1.size());
      
      Locale locale1 = TypeUtils.toLocale("yyyy/MM/dd HH:mm:ss");
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("yyyy/mm/dd hh:mm:ss", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("yyyy/mm/dd hh:mm:ss", locale1.toString());
      assertEquals("", locale1.getCountry());
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      Type type0 = TypeUtils.getGenericParamType(class1);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("Ljava.awt.Point");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Point", classLoader0);
      assertNull(class0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : org.evosuite.instrumentation.InstrumentingClassLoader@1da42e3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("Ljava.awt.Point");
      assertNotNull(noSuchMethodError0);
      assertEquals("Ljava.awt.Point", noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError: Ljava.awt.Point", noSuchMethodError0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ljava.awt.Point");
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      assertNotNull(dateFormatSymbols0);
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      DateFormatSymbols dateFormatSymbols1 = (DateFormatSymbols)dateFormatSymbols0.clone();
      assertNotSame(dateFormatSymbols0, dateFormatSymbols1);
      assertNotSame(dateFormatSymbols1, dateFormatSymbols0);
      assertNotNull(dateFormatSymbols1);
      assertTrue(dateFormatSymbols1.equals((Object)dateFormatSymbols0));
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols1.getLocalPatternChars());
      
      String[][] stringArray0 = dateFormatSymbols0.getZoneStrings();
      assertNotSame(dateFormatSymbols0, dateFormatSymbols1);
      assertNotNull(stringArray0);
      assertTrue(dateFormatSymbols0.equals((Object)dateFormatSymbols1));
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      
      Type[] typeArray0 = new Type[1];
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNotNull(class2);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertEquals("class java.awt.BufferCapabilities", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<?> class3 = parserConfig0.checkAutoType("javassist.util.proxy.ProxyObject", class2, (-88516351));
      assertNull(class3);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertEquals("class java.awt.BufferCapabilities", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class class4 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class4);
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals(1, class4.getModifiers());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer", class4.toString());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, class4);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals(1, class4.getModifiers());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer", class4.toString());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertSame(parserConfig1, parserConfig0);
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      
      parserConfig0.setAutoTypeSupport(true);
      assertSame(parserConfig0, parserConfig1);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      HashSet<NoSuchMethodException> hashSet0 = new HashSet<NoSuchMethodException>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ParserConfig parserConfig2 = new ParserConfig();
      assertNotNull(parserConfig2);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertTrue(parserConfig2.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "javassist.util.proxy.ProxyObject", (ParameterizedType) parameterizedTypeImpl0, parserConfig2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("Ljava.awt.oint");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Map<Thread, StackTraceElement[]> map0 = new Hashtable<Thread, StackTraceElement[]>();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.oint", classLoader0);
      assertNull(class0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      classLoader0.clearAssertionStatus();
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      classLoader0.setPackageAssertionStatus(", minimumCapacity=", false);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(classLoader0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Class<Time> class1 = Time.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Constructor<DataTruncation>[] constructorArray0 = (Constructor<DataTruncation>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
      
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      String string0 = "bJ";
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "syntax error : ", class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      String string0 = identityHashMap0.put("Ljava.awt.Point", ", minimumCapacity=");
      assertNull(string0);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      
      Locale locale0 = TypeUtils.toLocale(", minimumCapacity=");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(", minimumcapacity=", locale0.toString());
      assertEquals(", minimumcapacity=", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      boolean boolean0 = TypeUtils.isNumber("}H#}Yw%Vja=1u6");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      String string0 = "IL\"{`_>bJG";
      MockThread mockThread1 = new MockThread("}H#}Yw%Vja=1u6");
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap1);
      assertTrue(identityHashMap1.equals((Object)identityHashMap0));
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      
      String string1 = identityHashMap1.put(" ult?-JSONAreato", "hetgetID");
      assertNotSame(identityHashMap1, identityHashMap0);
      assertNull(string1);
      assertFalse(identityHashMap1.equals((Object)identityHashMap0));
      assertEquals(1, identityHashMap1.size());
      assertFalse(identityHashMap1.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotSame(identityHashMap0, identityHashMap1);
      assertNotNull(serializeBeanInfo0);
      assertFalse(identityHashMap0.equals((Object)identityHashMap1));
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      Locale locale0 = TypeUtils.toLocale("IL\"{`_>bJG");
      assertNotNull(locale0);
      assertEquals(">BJG", locale0.getCountry());
      assertEquals("il\"{`", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("il\"{`_>BJG", locale0.toString());
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("null");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : null
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = TypeUtils.loadClass("#i)qru&SzUVQce");
      assertNull(class1);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      assertNotNull(dateFormatSymbols0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      assertNotNull(noSuchMethodError0);
      assertNull(noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Map<String, String> map0 = new WeakHashMap<String, String>();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0, true);
      assertNotNull(list0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        Date.valueOf("#i)qru&SzUVQce");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Locale locale0 = TypeUtils.toLocale(", minimumCapacity=");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals(", minimumcapacity=", locale0.getLanguage());
      assertEquals(", minimumcapacity=", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      Class<SQLWarning> class0 = SQLWarning.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      Hashtable<Thread, StackTraceElement[]> hashtable0 = new Hashtable<Thread, StackTraceElement[]>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      String string0 = "$;lg)r4k>";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$;lg)r4k>");
      assertFalse(boolean0);
      
      Class<Double> class0 = Double.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
      assertNotNull(javaBeanSerializer0);
      
      PipedWriter pipedWriter0 = null;
      try {
        pipedWriter0 = new PipedWriter((PipedReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("z:4#4n*s\"]qbVx", (ClassLoader) aSMClassLoader0);
      assertNull(class0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("z:4#4n*s\"]qbVx");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"z:4#4n*s\"]qbVx\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      MockThread mockThread1 = new MockThread();
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap1);
      assertTrue(identityHashMap1.equals((Object)identityHashMap0));
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      
      String string0 = identityHashMap1.put(" ult?-JSONAreato", "hetgetID");
      assertNotSame(identityHashMap1, identityHashMap0);
      assertNull(string0);
      assertFalse(identityHashMap1.equals((Object)identityHashMap0));
      assertEquals(1, identityHashMap1.size());
      assertFalse(identityHashMap1.isEmpty());
      
      Locale locale0 = TypeUtils.toLocale("IL\"{`_>bJG");
      assertNotNull(locale0);
      assertEquals("il\"{`", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(">BJG", locale0.getCountry());
      assertEquals("il\"{`_>BJG", locale0.toString());
      
      UUID uUID0 = MockUUID.fromString("0k,_-lu");
      assertNotNull(uUID0);
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(uUID0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : 00000000-0100-4000-8200-000003000000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNull(class1);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(parameterizedTypeImpl0, parameterizedTypeImpl1);
      assertSame(type0, parameterizedTypeImpl1);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      boolean boolean0 = TypeUtils.isGenericParamType(parameterizedTypeImpl1);
      assertTrue(boolean0);
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl1, type0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      assertNotNull(stringIndexOutOfBoundsException0);
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      LinkedHashMap<SQLTransientException, GridBagConstraints> linkedHashMap0 = new LinkedHashMap<SQLTransientException, GridBagConstraints>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Class<?> class2 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(parameterizedTypeImpl0, parameterizedTypeImpl1);
      assertNotNull(class2);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isArray());
      assertEquals(1537, class2.getModifiers());
      assertEquals("interface java.util.List", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertTrue(class2.isInterface());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("Ljava.awt.Point");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      MockThread mockThread1 = new MockThread("NyP_ly+o");
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      classLoader0.setDefaultAssertionStatus(true);
      assertNotSame(mockThread1, mockThread0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<Point> class0 = Point.class;
      Class<Short> class1 = Short.TYPE;
      assertNotNull(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      ObjectDeserializer objectDeserializer0 = parserConfig0.createJavaBeanDeserializer(class0, class1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(objectDeserializer0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("short", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      
      Class<MessageFormat> class2 = MessageFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.MessageFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class1);
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class [J", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertNotNull(class2);
      assertFalse(class2.equals((Object)class1));
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class [J", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType1).toString();
      doReturn(class2).when(genericArrayType1).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertNotNull(type0);
      assertFalse(class1.equals((Object)class2));
      assertFalse(class2.equals((Object)class1));
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class [J", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      Type type1 = TypeUtils.getGenericParamType(type0);
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertSame(type0, type1);
      assertSame(type1, type0);
      assertNotNull(type1);
      assertFalse(class1.equals((Object)class2));
      assertFalse(class2.equals((Object)class1));
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class [J", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      Class<?> class3 = TypeUtils.getClass(type1);
      assertNotSame(class1, class2);
      assertNotSame(class2, class1);
      assertSame(type0, type1);
      assertSame(type1, type0);
      assertNotNull(class3);
      assertFalse(class1.equals((Object)class2));
      assertFalse(class2.equals((Object)class1));
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("long", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class [J", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class2.isPrimitive());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      
      Class<NoSuchFieldError> class4 = NoSuchFieldError.class;
      boolean boolean0 = TypeUtils.isKotlin(class4);
      assertFalse(boolean0);
      
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      SQLTransientException sQLTransientException0 = new SQLTransientException("Ljava.awt.Color", "|lW45k)'_zr(~x");
      assertNotNull(sQLTransientException0);
      assertEquals("|lW45k)'_zr(~x", sQLTransientException0.getSQLState());
      assertEquals("Ljava.awt.Color", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Ljava.awt.Color", sQLTransientException0.toString());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("xRi~756=q[Kti}hslW", "|lW45k)'_zr(~x", (-750), sQLTransientException0);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals("|lW45k)'_zr(~x", sQLTransientException0.getSQLState());
      assertEquals("Ljava.awt.Color", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Ljava.awt.Color", sQLTransientException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.toString());
      assertEquals("|lW45k)'_zr(~x", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-750), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.getMessage());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(sQLSyntaxErrorException0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("|lW45k)'_zr(~x", sQLTransientException0.getSQLState());
      assertEquals("Ljava.awt.Color", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Ljava.awt.Color", sQLTransientException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.toString());
      assertEquals("|lW45k)'_zr(~x", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-750), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLNonTransientConnectionException0.toString());
      
      InternalError internalError0 = new InternalError("Ljava.awt.Color", sQLNonTransientConnectionException0);
      assertNotNull(internalError0);
      assertEquals("|lW45k)'_zr(~x", sQLTransientException0.getSQLState());
      assertEquals("Ljava.awt.Color", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Ljava.awt.Color", sQLTransientException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.toString());
      assertEquals("|lW45k)'_zr(~x", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-750), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLNonTransientConnectionException0.toString());
      assertEquals("Ljava.awt.Color", internalError0.getMessage());
      assertEquals("java.lang.InternalError: Ljava.awt.Color", internalError0.toString());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Ljava.awt.Color", internalError0);
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("|lW45k)'_zr(~x", sQLTransientException0.getSQLState());
      assertEquals("Ljava.awt.Color", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Ljava.awt.Color", sQLTransientException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.toString());
      assertEquals("|lW45k)'_zr(~x", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-750), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLNonTransientConnectionException0.toString());
      assertEquals("Ljava.awt.Color", internalError0.getMessage());
      assertEquals("java.lang.InternalError: Ljava.awt.Color", internalError0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Ljava.awt.Color", sQLFeatureNotSupportedException0.toString());
      assertEquals("Ljava.awt.Color", sQLFeatureNotSupportedException0.getMessage());
      
      boolean boolean1 = concurrentHashMap0.replace("xRi~756=q[Kti}hslW", (Object) sQLFeatureNotSupportedException0, (Object) "|lW45k)'_zr(~x");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals("|lW45k)'_zr(~x", sQLTransientException0.getSQLState());
      assertEquals("Ljava.awt.Color", sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: Ljava.awt.Color", sQLTransientException0.toString());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.toString());
      assertEquals("|lW45k)'_zr(~x", sQLSyntaxErrorException0.getSQLState());
      assertEquals((-750), sQLSyntaxErrorException0.getErrorCode());
      assertEquals("xRi~756=q[Kti}hslW", sQLSyntaxErrorException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientConnectionException: java.sql.SQLSyntaxErrorException: xRi~756=q[Kti}hslW", sQLNonTransientConnectionException0.toString());
      assertEquals("Ljava.awt.Color", internalError0.getMessage());
      assertEquals("java.lang.InternalError: Ljava.awt.Color", internalError0.toString());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: Ljava.awt.Color", sQLFeatureNotSupportedException0.toString());
      assertEquals("Ljava.awt.Color", sQLFeatureNotSupportedException0.getMessage());
      
      JSONObject jSONObject0 = new JSONObject(concurrentHashMap0);
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertTrue(concurrentHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("YHtz{xAER~tZc&Uf_");
      assertNull(class0);
      
      Class<BreakIterator> class1 = BreakIterator.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertNotNull(class2);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.Object", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertEquals(1, class2.getModifiers());
      
      Class<Long> class3 = Long.class;
      boolean boolean0 = TypeUtils.isPath(class3);
      assertFalse(boolean0);
      
      Class<SQLInvalidAuthorizationSpecException> class4 = SQLInvalidAuthorizationSpecException.class;
      boolean boolean1 = TypeUtils.isPath(class4);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      assertNotNull(decimalFormatSymbols0);
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals('.', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      
      DecimalFormat decimalFormat0 = new DecimalFormat("pC");
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("pC#", decimalFormat0.toPattern());
      assertEquals("-pC", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("pC", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("pC#", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      
      decimalFormatSymbols0.setDecimalSeparator('{');
      assertEquals('0', decimalFormatSymbols0.getZeroDigit());
      assertEquals('%', decimalFormatSymbols0.getPercent());
      assertEquals('.', decimalFormatSymbols0.getMonetaryDecimalSeparator());
      assertEquals("\uFFFD", decimalFormatSymbols0.getNaN());
      assertEquals("XXX", decimalFormatSymbols0.getInternationalCurrencySymbol());
      assertEquals("\u221E", decimalFormatSymbols0.getInfinity());
      assertEquals('#', decimalFormatSymbols0.getDigit());
      assertEquals(';', decimalFormatSymbols0.getPatternSeparator());
      assertEquals('\u2030', decimalFormatSymbols0.getPerMill());
      assertEquals('-', decimalFormatSymbols0.getMinusSign());
      assertEquals('{', decimalFormatSymbols0.getDecimalSeparator());
      assertEquals("E", decimalFormatSymbols0.getExponentSeparator());
      assertEquals(',', decimalFormatSymbols0.getGroupingSeparator());
      assertEquals("\u00A4", decimalFormatSymbols0.getCurrencySymbol());
      
      Class<MockHijrahDate> class5 = MockHijrahDate.class;
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) decimalFormat0, class5, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(", minimumCaEpacity=");
      assertNotNull(mockPrintWriter0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Double> class0 = Double.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap1);
      assertTrue(identityHashMap1.equals((Object)identityHashMap0));
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.isEmpty());
      
      String string0 = identityHashMap1.put("Ljava.awt.Point", "=6Slgw=7M*#D='691O");
      assertNotSame(identityHashMap1, identityHashMap0);
      assertNull(string0);
      assertFalse(identityHashMap1.equals((Object)identityHashMap0));
      assertEquals(1, identityHashMap1.size());
      assertFalse(identityHashMap1.isEmpty());
      
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy0);
      assertNotSame(identityHashMap0, identityHashMap1);
      assertNotNull(list0);
      assertFalse(identityHashMap0.equals((Object)identityHashMap1));
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      int int0 = (-1933437815);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-64213136), (-1933437815), 95, 8064, 101);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-64213136,MONTH=-1933437815,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=95,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=8064,HOUR_OF_DAY=8064,MINUTE=101,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      // Undeclared exception!
      try { 
        Timestamp.valueOf("ENn~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertNotNull(class1);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(1, class1.getModifiers());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isPrimitive());
      
      System.setCurrentTimeMillis(4647432019745535567L);
      java.util.IdentityHashMap<String, ClientInfoStatus> identityHashMap0 = new java.util.IdentityHashMap<String, ClientInfoStatus>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("[C", "([C)I", identityHashMap0);
      assertNotNull(sQLClientInfoException0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals("([C)I", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("[C", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: [C", sQLClientInfoException0.toString());
      
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(" n", "yyyy-MM-dd HH:mm:ss.SSS", 818, identityHashMap0, sQLClientInfoException0);
      assertNotNull(sQLClientInfoException1);
      assertFalse(sQLClientInfoException1.equals((Object)sQLClientInfoException0));
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals("([C)I", sQLClientInfoException0.getSQLState());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("[C", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: [C", sQLClientInfoException0.toString());
      assertEquals(" n", sQLClientInfoException1.getMessage());
      assertEquals("yyyy-MM-dd HH:mm:ss.SSS", sQLClientInfoException1.getSQLState());
      assertEquals("java.sql.SQLClientInfoException:  n", sQLClientInfoException1.toString());
      assertEquals(818, sQLClientInfoException1.getErrorCode());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(sQLClientInfoException1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLClientInfoException:  n
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("G");
      assertNotNull(noSuchFieldError0);
      assertEquals("G", noSuchFieldError0.getMessage());
      assertEquals("java.lang.NoSuchFieldError: G", noSuchFieldError0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(noSuchFieldError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.NoSuchFieldError: G
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      boolean boolean0 = TypeUtils.isPath(class0);
      assertFalse(boolean0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(4, list0.size());
      
      TypeUtils.clearClassMapping();
      boolean boolean1 = TypeUtils.isNumber("Tml}");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = "";
      ThreadGroup threadGroup0 = new ThreadGroup("");
      assertNotNull(threadGroup0);
      assertEquals("", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = threadGroup0.getParent();
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("", threadGroup0.getName());
      assertEquals("Test_Execution_Group", threadGroup1.getName());
      
      MockThread mockThread0 = new MockThread("");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      classLoader0.setDefaultAssertionStatus(true);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      threadGroup0.interrupt();
      assertNotSame(threadGroup0, threadGroup1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertEquals("", threadGroup0.getName());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      List<FieldInfo> list1 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, (PropertyNamingStrategy) null);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertEquals(4, list1.size());
      assertFalse(list1.isEmpty());
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<Integer> class1 = Integer.TYPE;
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("int", class1.toString());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class1, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("can not cast to : ");
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLTimeoutException: can not cast to : ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("can not cast to : ", sQLTimeoutException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException1);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException1.getMessage());
      
      sQLTimeoutException1.printStackTrace();
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException1.getMessage());
      
      MockThread mockThread0 = new MockThread((Runnable) null, "scanFieldDouble");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertEquals(17, map0.size());
      assertFalse(map0.isEmpty());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      Class<?> class0 = TypeUtils.loadClass("[float", classLoader0);
      assertNotNull(class0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertTrue(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class [F", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException1);
      assertNotNull(sQLRecoverableException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertNull(sQLTimeoutException1.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLTimeoutException", sQLRecoverableException0.getMessage());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<SimpleTimeZone> class1 = SimpleTimeZone.class;
      ThrowableDeserializer throwableDeserializer0 = null;
      try {
        throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertNotNull(class1);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = treeMap0.put("org.springframework.remoting.support.RemoteInvocation", "java/lang/Character");
      assertNull(string0);
      assertEquals(1, treeMap0.size());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isAnnotation());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("short", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      WeakHashMap<Timestamp, SQLClientInfoException> weakHashMap0 = new WeakHashMap<Timestamp, SQLClientInfoException>();
      assertNotNull(weakHashMap0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertNotNull(imageCapabilities0);
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError("<Txl%@wj#s_KeaY!");
      assertNotNull(outOfMemoryError0);
      assertEquals("java.lang.OutOfMemoryError: <Txl%@wj#s_KeaY!", outOfMemoryError0.toString());
      assertEquals("<Txl%@wj#s_KeaY!", outOfMemoryError0.getMessage());
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertNotNull(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      Integer integer0 = TypeUtils.castToInt(boolean2);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      
      Class<?> class2 = TypeUtils.loadClass("<Txl%@wj#s_KeaY!", (ClassLoader) null, true);
      assertNull(class2);
      
      Short short0 = new Short((short)701);
      assertEquals((short)701, (short)short0);
      assertNotNull(short0);
      
      int int0 = Short.toUnsignedInt((short) (-483));
      assertEquals(65053, int0);
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      boolean boolean0 = TypeUtils.isNumber("Ljava.awt.Point");
      assertFalse(boolean0);
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertEquals(17, map0.size());
      assertFalse(map0.isEmpty());
      
      MockThread mockThread0 = new MockThread("~6Wb0]vy`oI-{p{Qs");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      assertNotNull(threadGroup0);
      assertNull(threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup((String) null);
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNull(threadGroup1.getName());
      
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, "Ljava.awt.Point");
      assertNotNull(threadGroup2);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertNull(threadGroup1.getName());
      assertEquals("Ljava.awt.Point", threadGroup2.getName());
      
      ThreadGroup threadGroup3 = new ThreadGroup(threadGroup0, "\u0000");
      assertNotNull(threadGroup3);
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup3.equals((Object)threadGroup1));
      assertFalse(threadGroup3.equals((Object)threadGroup2));
      assertFalse(threadGroup3.equals((Object)threadGroup0));
      assertNull(threadGroup0.getName());
      assertEquals("\u0000", threadGroup3.getName());
      
      ThreadGroup threadGroup4 = new ThreadGroup(threadGroup1, "(");
      assertNotNull(threadGroup4);
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup3));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup4.equals((Object)threadGroup3));
      assertFalse(threadGroup4.equals((Object)threadGroup2));
      assertFalse(threadGroup4.equals((Object)threadGroup1));
      assertFalse(threadGroup4.equals((Object)threadGroup0));
      assertNull(threadGroup1.getName());
      assertEquals("(", threadGroup4.getName());
      
      ThreadGroup threadGroup5 = new ThreadGroup(threadGroup4, (String) null);
      assertNotNull(threadGroup5);
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup3));
      assertFalse(threadGroup1.equals((Object)threadGroup4));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup4.equals((Object)threadGroup3));
      assertFalse(threadGroup4.equals((Object)threadGroup2));
      assertFalse(threadGroup4.equals((Object)threadGroup1));
      assertFalse(threadGroup4.equals((Object)threadGroup0));
      assertFalse(threadGroup5.equals((Object)threadGroup0));
      assertFalse(threadGroup5.equals((Object)threadGroup1));
      assertFalse(threadGroup5.equals((Object)threadGroup3));
      assertFalse(threadGroup5.equals((Object)threadGroup2));
      assertFalse(threadGroup5.equals((Object)threadGroup4));
      assertNull(threadGroup1.getName());
      assertEquals("(", threadGroup4.getName());
      assertNull(threadGroup5.getName());
      
      MockThread mockThread1 = new MockThread();
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      MockThread mockThread2 = new MockThread(threadGroup1, (Runnable) null);
      assertNotNull(mockThread2);
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup5));
      assertFalse(threadGroup1.equals((Object)threadGroup3));
      assertFalse(threadGroup1.equals((Object)threadGroup4));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertNull(threadGroup1.getName());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      classLoader0.setDefaultAssertionStatus(true);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread2);
      assertSame(classLoader0, classLoader1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ParserConfig parserConfig1 = new ParserConfig(false);
      assertNotNull(parserConfig1);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      ObjectDeserializer objectDeserializer0 = parserConfig1.createJavaBeanDeserializer(class0, class1);
      assertNotSame(parserConfig1, parserConfig0);
      assertNotNull(objectDeserializer0);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      
      Class<MessageFormat> class2 = MessageFormat.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) threadGroup5, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.text.MessageFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      assertEquals("fastjson.parser.autoTypeSupport", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isNumber("(9NIO;=L1");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("time");
      assertNotNull(mockPrintWriter0);
      
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      String string1 = TypeUtils.castToString("N");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      assertNotNull(stringIndexOutOfBoundsException0);
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      InterruptedException interruptedException0 = new InterruptedException();
      assertNotNull(interruptedException0);
      assertNull(interruptedException0.getMessage());
      assertEquals("java.lang.InterruptedException", interruptedException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fastjson.parser.autoTypeSupport\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      BigDecimal bigDecimal0 = new BigDecimal(2278L);
      assertNotNull(bigDecimal0);
      assertEquals((short)2278, bigDecimal0.shortValue());
      assertEquals((byte) (-26), bigDecimal0.byteValue());
      
      String string0 = bigDecimal0.toPlainString();
      assertEquals("2278", string0);
      assertNotNull(string0);
      assertEquals((short)2278, bigDecimal0.shortValue());
      assertEquals((byte) (-26), bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.valueOf((long) 0, 0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      
      Time time0 = TypeUtils.castToSqlTime(bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotNull(time0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((short)2278, bigDecimal0.shortValue());
      assertEquals((byte) (-26), bigDecimal0.byteValue());
      assertEquals("00:00:02", time0.toString());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(3138);
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      String string1 = identityHashMap0.put("m_UEU]z{x", "2278");
      assertNull(string1);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      
      String string2 = identityHashMap0.put("m_UEU]z{x", "list_item_value");
      assertNull(string2);
      assertEquals(2, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      String string3 = identityHashMap0.put("[J", "m_UEU]z{x");
      assertNull(string3);
      assertEquals(3, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class1, identityHashMap0, false, propertyNamingStrategy0);
      assertSame(class1, class0);
      assertNotNull(list0);
      assertEquals(3, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(true);
      Class<?> class2 = TypeUtils.loadClass("2278", classLoader0, false);
      assertNull(class2);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertSame(class1, class0);
      assertNotNull(type0);
      
      Class<?> class3 = TypeUtils.getCollectionItemClass((Type) null);
      assertNotNull(class3);
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isAnnotation());
      
      Class<BigInteger> class4 = BigInteger.class;
      boolean boolean0 = TypeUtils.isProxy(class4);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("getDeclaringClass");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      assertNotNull(mockPrintWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      PrintWriter printWriter0 = mockPrintWriter0.append('N');
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("N", charArrayWriter0.toString());
      
      batchUpdateException0.printStackTrace(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(1089, charArrayWriter0.size());
      
      Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      parserConfig0.compatibleWithJavaBean = true;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      assertNotNull(threadGroup0);
      assertNull(threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "fastjson.parser.autoTypeSupport");
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNull(threadGroup0.getName());
      assertEquals("fastjson.parser.autoTypeSupport", threadGroup1.getName());
      
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, "RPH(");
      assertNotNull(threadGroup2);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertNull(threadGroup0.getName());
      assertEquals("fastjson.parser.autoTypeSupport", threadGroup1.getName());
      assertEquals("RPH(", threadGroup2.getName());
      
      ThreadGroup threadGroup3 = new ThreadGroup(threadGroup1, "RPH(");
      assertNotNull(threadGroup3);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup3.equals((Object)threadGroup0));
      assertFalse(threadGroup3.equals((Object)threadGroup2));
      assertFalse(threadGroup3.equals((Object)threadGroup1));
      assertNull(threadGroup0.getName());
      assertEquals("fastjson.parser.autoTypeSupport", threadGroup1.getName());
      assertEquals("RPH(", threadGroup3.getName());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      
      MockThread mockThread1 = new MockThread(threadGroup1, (Runnable) null);
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(threadGroup0.equals((Object)threadGroup3));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup1.equals((Object)threadGroup3));
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertNull(threadGroup0.getName());
      assertEquals("fastjson.parser.autoTypeSupport", threadGroup1.getName());
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(threadGroup0, threadGroup3);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup1, threadGroup2);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(threadGroup1, threadGroup3);
      assertNotNull(classLoader0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(threadGroup0.equals((Object)threadGroup3));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup1.equals((Object)threadGroup3));
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertNull(threadGroup0.getName());
      assertEquals("fastjson.parser.autoTypeSupport", threadGroup1.getName());
      
      aSMDeserializerFactory0.classLoader.setDefaultAssertionStatus(true);
      ParserConfig parserConfig1 = ParserConfig.global;
      assertNotSame(parserConfig1, parserConfig0);
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      ParserConfig parserConfig2 = new ParserConfig(true);
      assertNotNull(parserConfig2);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig2.fieldBased);
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.isAutoTypeSupport());
      
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      ObjectDeserializer objectDeserializer0 = parserConfig2.createJavaBeanDeserializer(class1, class0);
      assertNotSame(parserConfig2, parserConfig1);
      assertNotSame(parserConfig2, parserConfig0);
      assertNotNull(objectDeserializer0);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig2.fieldBased);
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertTrue(parserConfig2.isAsmEnable());
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertEquals(12, objectDeserializer0.getFastMatchToken());
      
      Class<SQLException> class2 = SQLException.class;
      boolean boolean0 = TypeUtils.isProxy(class2);
      assertFalse(boolean0);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      MockThread mockThread0 = new MockThread("~6Wb0]vy`oI-{p{Qs");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      assertNotNull(threadGroup0);
      assertNull(threadGroup0.getName());
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNotNull(class1);
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.text.SimpleDateFormat", class1.toString());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(type0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(type0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isPrimitive());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      boolean boolean1 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      assertNotNull(stringIndexOutOfBoundsException0);
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      Class<PropertyProcessable> class3 = PropertyProcessable.class;
      Class<?> class4 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      assertNotSame(class4, class1);
      assertSame(parameterizedTypeImpl0, type0);
      assertNotNull(class4);
      assertFalse(class4.equals((Object)class1));
      assertEquals(1537, class4.getModifiers());
      assertEquals("interface java.util.List", class4.toString());
      assertFalse(class4.isArray());
      assertFalse(class4.isPrimitive());
      assertTrue(class4.isInterface());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isAnnotation());
      
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class3);
      assertNotNull(propertyProcessableDeserializer0);
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(propertyProcessableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      String string0 = identityHashMap0.put("N", "N");
      assertNull(string0);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      ThreadGroup threadGroup0 = new ThreadGroup("(9NIO;=L1");
      assertNotNull(threadGroup0);
      assertEquals("(9NIO;=L1", threadGroup0.getName());
      
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      assertNull(class1);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(class2);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("class java.lang.Object", class2.toString());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isAnnotation());
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      assertNotNull(stringIndexOutOfBoundsException0);
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap1);
      assertFalse(identityHashMap1.equals((Object)identityHashMap0));
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotSame(identityHashMap0, identityHashMap1);
      assertNotNull(serializeBeanInfo0);
      assertFalse(identityHashMap0.equals((Object)identityHashMap1));
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      boolean boolean0 = TypeUtils.isNumber("Ljava.awt.Point");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      parserConfig0.setAutoTypeSupport(true);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      HashSet<NoSuchMethodException> hashSet0 = new HashSet<NoSuchMethodException>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      Class class1 = (Class)TypeUtils.getCollectionItemType(typeArray0[0]);
      assertNotNull(class1);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class1);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(1, class1.getModifiers());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class1);
      assertFalse(class0.isAnnotation());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class1.isAnnotation());
      assertEquals("class [J", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("(T-p}~tZ[2YFe=.4dp");
      assertNotNull(threadGroup0);
      assertEquals("(T-p}~tZ[2YFe=.4dp", threadGroup0.getName());
      
      Class<Field> class2 = Field.class;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QuoteFieldNames");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) concurrentHashMap0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@9c044f4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(true);
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader2, classLoader0);
      assertNotNull(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader1));
      
      Class<?> class0 = TypeUtils.loadClass("field_", classLoader1, true);
      assertSame(classLoader0, classLoader2);
      assertNull(class0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(classLoader1.equals((Object)classLoader2));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("can not cast to : ");
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: can not cast to : ", sQLTimeoutException0.toString());
      assertEquals("can not cast to : ", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException();
      assertNotNull(sQLTimeoutException1);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNull(sQLTimeoutException1.getSQLState());
      assertNull(sQLTimeoutException1.getMessage());
      
      sQLTimeoutException1.printStackTrace();
      assertNotSame(sQLTimeoutException1, sQLTimeoutException0);
      assertFalse(sQLTimeoutException1.equals((Object)sQLTimeoutException0));
      assertEquals("java.sql.SQLTimeoutException", sQLTimeoutException1.toString());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertNull(sQLTimeoutException1.getSQLState());
      assertNull(sQLTimeoutException1.getMessage());
      
      MockThread mockThread0 = new MockThread((Runnable) null, "clone");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertEquals(17, map0.size());
      assertFalse(map0.isEmpty());
      
      ClassLoader classLoader3 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader3);
      assertFalse(classLoader3.equals((Object)classLoader1));
      assertFalse(classLoader3.equals((Object)classLoader2));
      assertFalse(classLoader3.equals((Object)classLoader0));
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      Class<?> class1 = TypeUtils.loadClass("field_", classLoader3);
      assertNull(class1);
      assertFalse(classLoader3.equals((Object)classLoader1));
      assertFalse(classLoader3.equals((Object)classLoader2));
      assertFalse(classLoader3.equals((Object)classLoader0));
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      assertNotNull(sQLRecoverableException0);
      assertFalse(sQLTimeoutException0.equals((Object)sQLTimeoutException1));
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: can not cast to : ", sQLTimeoutException0.toString());
      assertEquals("can not cast to : ", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException: can not cast to : ", sQLRecoverableException0.toString());
      assertEquals("java.sql.SQLTimeoutException: can not cast to : ", sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader3));
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(classLoader0.equals((Object)classLoader3));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class2);
      assertNotNull(throwableDeserializer0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(classLoader0.equals((Object)classLoader3));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@97
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      String string0 = identityHashMap0.put("N", "N");
      assertNull(string0);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      boolean boolean1 = TypeUtils.isNumber("(9NIO;=L1");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockThread mockThread0 = new MockThread((Runnable) null, "(9NIO;=L1");
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader2 = classLoader0.getParent();
      assertNotNull(classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      
      classLoader0.setClassAssertionStatus("'*+uv", false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader0.equals((Object)classLoader2));
      
      Class<?> class0 = TypeUtils.loadClass("Y", classLoader0);
      assertNull(class0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader0.equals((Object)classLoader2));
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      assertEquals(PropertyNamingStrategy.PascalCase, propertyNamingStrategy0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : PascalCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("kotlin.jvm.internal.DefaultConstructorMarker", true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      AtomicLong atomicLong0 = new AtomicLong(0L);
      assertNotNull(atomicLong0);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals("0", atomicLong0.toString());
      assertEquals((short)0, atomicLong0.shortValue());
      
      Byte byte0 = TypeUtils.castToByte(atomicLong0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals("0", atomicLong0.toString());
      assertEquals((short)0, atomicLong0.shortValue());
      
      Class<Byte> class0 = Byte.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNotNull(class1);
      assertEquals("class java.lang.Byte", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      assertNotNull(stringIndexOutOfBoundsException0);
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      InterruptedException interruptedException0 = new InterruptedException();
      assertNotNull(interruptedException0);
      assertNull(interruptedException0.getMessage());
      assertEquals("java.lang.InterruptedException", interruptedException0.toString());
      
      Boolean boolean0 = TypeUtils.castToBoolean(byte0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals("0", atomicLong0.toString());
      assertEquals((short)0, atomicLong0.shortValue());
      
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError("e6!Tc.hD?<ZR=3");
      assertNotNull(noSuchMethodError0);
      assertEquals("e6!Tc.hD?<ZR=3", noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError: e6!Tc.hD?<ZR=3", noSuchMethodError0.toString());
      
      String string0 = TypeUtils.castToString(noSuchMethodError0);
      assertNotNull(string0);
      assertEquals("e6!Tc.hD?<ZR=3", noSuchMethodError0.getMessage());
      assertEquals("java.lang.NoSuchMethodError: e6!Tc.hD?<ZR=3", noSuchMethodError0.toString());
      
      HashMap<String, String> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, String>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("kotlin.jvm.internal.DefaultConstructorMarker", true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      AtomicLong atomicLong0 = new AtomicLong(0L);
      assertNotNull(atomicLong0);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals("0", atomicLong0.toString());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      
      Byte byte0 = TypeUtils.castToByte(atomicLong0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals("0", atomicLong0.toString());
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.get());
      
      Class<Byte> class0 = Byte.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNotNull(class1);
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.Byte", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class2);
      assertEquals("class java.lang.Byte", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      Type type0 = TypeUtils.getGenericParamType(class2);
      assertNull(type0);
      assertEquals("class java.lang.Byte", class2.toString());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertEquals(17, map0.size());
      assertFalse(map0.isEmpty());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      aSMClassLoader0.setPackageAssertionStatus((String) null, true);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      assertNotSame(aSMClassLoader1, aSMClassLoader0);
      assertNotNull(aSMClassLoader1);
      assertFalse(aSMClassLoader1.equals((Object)aSMClassLoader0));
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      Class<Byte> class0 = Byte.class;
      Class<NoSuchFieldException> class1 = NoSuchFieldException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class1, jSONType0);
      assertNull(class2);
      
      Class class3 = (Class)TypeUtils.unwrapOptional(class1);
      assertNotNull(class3);
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isInterface());
      assertEquals(1, class3.getModifiers());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isArray());
      assertEquals("class java.lang.NoSuchFieldException", class3.toString());
      assertFalse(class3.isAnnotation());
      
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
      
      Type type1 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type1);
      
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      assertNotNull(stringIndexOutOfBoundsException0);
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      InterruptedException interruptedException0 = new InterruptedException();
      assertNotNull(interruptedException0);
      assertNull(interruptedException0.getMessage());
      assertEquals("java.lang.InterruptedException", interruptedException0.toString());
      
      Boolean boolean1 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean1);
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
      
      HashMap<String, String> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, String>((-2161));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2161
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertEquals("long", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("(T-p}~tZ[2YFe=.4dp");
      assertNotNull(threadGroup0);
      assertEquals("(T-p}~tZ[2YFe=.4dp", threadGroup0.getName());
      
      Class<Field> class1 = Field.class;
      AtomicLong atomicLong0 = new AtomicLong(0L);
      assertNotNull(atomicLong0);
      assertEquals(0L, atomicLong0.get());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0, atomicLong0.intValue());
      
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class2 = JavaBeanInfo.getBuilderClass(class1, jSONType0);
      assertNull(class2);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(noSuchMethodException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      assertNotNull(mockPrintWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      batchUpdateException0.printStackTrace((PrintWriter) mockPrintWriter0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertEquals(1088, charArrayWriter0.size());
      
      Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertNull(batchUpdateException0.getMessage());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      parserConfig0.compatibleWithJavaBean = true;
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      long long0 = TypeUtils.fnv1a_64_lower("P^ P%d'9a*Q-pU%");
      assertEquals((-3674706025108751874L), long0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertNotNull(imageCapabilities0);
      assertTrue(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      
      TreeMap<TimeZone, SQLRecoverableException> treeMap0 = new TreeMap<TimeZone, SQLRecoverableException>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("P^ P%d'9a*Q-pU%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : P^ P%d'9a*Q-pU%
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Point", classLoader0);
      assertNull(class0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = Character.getName(1596);
      assertEquals("ARABIC LETTER KEHEH WITH THREE DOTS BELOW", string0);
      assertNotNull(string0);
      
      Class<Locale> class0 = Locale.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      java.util.IdentityHashMap<MockSimpleDateFormat, SQLTimeoutException> identityHashMap0 = new java.util.IdentityHashMap<MockSimpleDateFormat, SQLTimeoutException>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) identityHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.util.Locale
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(true);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>(identityHashMap0);
      assertNotNull(hashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      long long0 = TypeUtils.fnv1a_64_lower("U3^3yK$u(1Ehv[.X");
      assertEquals(2969407693317098386L, long0);
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      String string0 = identityHashMap0.put("U3^3yK$u(1Ehv[.X", "yyyy-MM-dd HH:mm:ss");
      assertNull(string0);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      assertNotNull(mockIllegalAccessException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("<UsTV", mockIllegalAccessException0);
      assertNotNull(sQLTimeoutException0);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("<UsTV", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: <UsTV", sQLTimeoutException0.toString());
      
      SQLTimeoutException sQLTimeoutException1 = TypeUtils.castToJavaBean((Object) sQLTimeoutException0, class0);
      assertSame(sQLTimeoutException0, sQLTimeoutException1);
      assertSame(sQLTimeoutException1, sQLTimeoutException0);
      assertNotNull(sQLTimeoutException1);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("<UsTV", sQLTimeoutException0.getMessage());
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: <UsTV", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException1.getSQLState());
      assertEquals(0, sQLTimeoutException1.getErrorCode());
      assertEquals("<UsTV", sQLTimeoutException1.getMessage());
      assertEquals("java.sql.SQLTimeoutException: <UsTV", sQLTimeoutException1.toString());
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("getgetFileName");
      assertNotNull(noSuchFieldError0);
      assertEquals("getgetFileName", noSuchFieldError0.getMessage());
      assertEquals("java.lang.NoSuchFieldError: getgetFileName", noSuchFieldError0.toString());
      
      SqlDateDeserializer sqlDateDeserializer0 = SqlDateDeserializer.instance;
      assertNotNull(sqlDateDeserializer0);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(sqlDateDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      Class<MockDateFormat> class0 = MockDateFormat.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
      
      HashSet<NoSuchMethodException> hashSet0 = new HashSet<NoSuchMethodException>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      assertNotNull(noClassDefFoundError0);
      assertNull(noClassDefFoundError0.getMessage());
      assertEquals("java.lang.NoClassDefFoundError", noClassDefFoundError0.toString());
      
      SqlDateDeserializer sqlDateDeserializer0 = new SqlDateDeserializer();
      assertNotNull(sqlDateDeserializer0);
      assertEquals(2, sqlDateDeserializer0.getFastMatchToken());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(hashSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      MockThread mockThread0 = new MockThread((Runnable) null, "isN");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) concurrentHashMap0, true, propertyNamingStrategy0);
      assertNotNull(list0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
      
      BigDecimal bigDecimal0 = new BigDecimal(520);
      assertNotNull(bigDecimal0);
      assertEquals((short)520, bigDecimal0.shortValue());
      assertEquals((byte)8, bigDecimal0.byteValue());
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("FErtV#&G3+ieK,", "l7$)&kt", sQLFeatureNotSupportedException0);
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("l7$)&kt", sQLTransientConnectionException0.getSQLState());
      assertEquals("FErtV#&G3+ieK,", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: FErtV#&G3+ieK,", sQLTransientConnectionException0.toString());
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(sQLTransientConnectionException0);
      assertNotNull(batchUpdateException0);
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("l7$)&kt", sQLTransientConnectionException0.getSQLState());
      assertEquals("FErtV#&G3+ieK,", sQLTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLTransientConnectionException: FErtV#&G3+ieK,", sQLTransientConnectionException0.toString());
      assertEquals("java.sql.BatchUpdateException: java.sql.SQLTransientConnectionException: FErtV#&G3+ieK,", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException: FErtV#&G3+ieK,", batchUpdateException0.getMessage());
      assertEquals(0, batchUpdateException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.BatchUpdateException: java.sql.SQLTransientConnectionException: FErtV#&G3+ieK,
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      String string0 = TypeUtils.castToString(class0);
      assertNotNull(string0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("java.lang.Class@0000000001");
      assertNotNull(threadGroup0);
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      String string1 = "Ljava.util.concurrent.ConcurrentSkipListMap";
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "Ljava.util.concurrent.ConcurrentSkipListMap", (-436L));
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "0J\"Wg");
      assertNotNull(mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      
      MockThread mockThread3 = new MockThread(mockThread2, "0J\"Wg");
      assertNotNull(mockThread3);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isInterrupted());
      assertFalse(mockThread3.isDaemon());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertEquals(17, map0.size());
      assertFalse(map0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Point> class2 = Point.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) concurrentHashMap0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      assertTrue(concurrentHashMap0.isEmpty());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : CamelCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      String string0 = TypeUtils.castToString(class0);
      assertNotNull(string0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(1596);
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      String string1 = identityHashMap0.put("java.lang.Class@0000000001", "list_item_value");
      assertNull(string1);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      String string2 = identityHashMap0.put("java.lang.Class@0000000001", "java.lang.Class@0000000001");
      assertNull(string2);
      assertEquals(2, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      String string3 = identityHashMap0.put("list_item_value", "getDeclaringClass");
      assertNull(string3);
      assertEquals(3, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertEquals(3, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(true);
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      MockThread mockThread1 = new MockThread(mockThread0, "getDeclaringClass");
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      assertNotSame(mockThread0, mockThread1);
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class2 = TypeUtils.loadClass("yyyy-MM-dd'T'HH:mm:ss", (ClassLoader) aSMClassLoader0);
      assertNull(class2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("list_item_value");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(mockGregorianCalendar0);
      assertNotNull(timestamp0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(320000000, timestamp0.getNanos());
      assertEquals("2014-02-14 20:21:21.32", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = classLoader0.getParent();
      assertSame(classLoader2, classLoader1);
      assertNotNull(classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      
      ClassLoader classLoader3 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader3, classLoader0);
      assertNotNull(classLoader3);
      assertFalse(classLoader3.equals((Object)classLoader2));
      assertFalse(classLoader3.equals((Object)classLoader1));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("can not cast to : ");
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("can not cast to : ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: can not cast to : ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      sQLTimeoutException0.printStackTrace();
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("can not cast to : ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: can not cast to : ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      
      TreeMap<Thread, StackTraceElement[]> treeMap0 = new TreeMap<Thread, StackTraceElement[]>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      ClassLoader classLoader4 = classLoader2.getParent();
      assertSame(classLoader0, classLoader3);
      assertSame(classLoader2, classLoader1);
      assertNull(classLoader4);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader3));
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(sQLTimeoutException0);
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("can not cast to : ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: can not cast to : ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: java.sql.SQLTimeoutException: can not cast to : ", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: can not cast to : ", sQLRecoverableException0.getMessage());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader0.equals((Object)classLoader2));
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      ParserConfig.global = parserConfig0;
      assertFalse(ParserConfig.global.isAutoTypeSupport());
      assertTrue(ParserConfig.global.isAsmEnable());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertNotNull(throwableDeserializer0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(488);
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      String string0 = Character.getName(61);
      assertEquals("EQUALS SIGN", string0);
      assertNotNull(string0);
      
      String string1 = identityHashMap0.put("vUEA", (String) null);
      assertNull(string1);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertNotNull(parserConfig1);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      java.util.IdentityHashMap<MockSimpleDateFormat, SQLTimeoutException> identityHashMap1 = new java.util.IdentityHashMap<MockSimpleDateFormat, SQLTimeoutException>();
      assertNotNull(identityHashMap1);
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      
      Class<Locale> class1 = Locale.class;
      Locale locale0 = TypeUtils.cast((Object) "", class1, parserConfig0);
      assertSame(classLoader0, classLoader3);
      assertNotSame(parserConfig0, parserConfig1);
      assertNull(locale0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(parserConfig0.equals((Object)parserConfig1));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale1);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      
      String string2 = locale1.getDisplayScript();
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("_");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread((Runnable) null);
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      HashMap<Thread, StackTraceElement[]> hashMap0 = new HashMap<Thread, StackTraceElement[]>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ParserConfig parserConfig0 = new ParserConfig(false);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      boolean boolean1 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("i#j+O\"JW6 :s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : i#j+O\"JW6 :s
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("Ljava.awt.Point");
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("rlz{vi4)DT(k");
      assertNotNull(threadGroup0);
      assertEquals("rlz{vi4)DT(k", threadGroup0.getName());
      
      Class<Field> class0 = Field.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertSame(parserConfig1, parserConfig0);
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      parserConfig0.setAutoTypeSupport(false);
      assertSame(parserConfig0, parserConfig1);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      HashSet<NoSuchMethodException> hashSet0 = new HashSet<NoSuchMethodException>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ParserConfig parserConfig2 = new ParserConfig();
      assertNotNull(parserConfig2);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig2.compatibleWithJavaBean);
      assertFalse(parserConfig2.fieldBased);
      assertFalse(parserConfig2.equals((Object)parserConfig0));
      assertFalse(parserConfig2.equals((Object)parserConfig1));
      assertFalse(parserConfig2.isAutoTypeSupport());
      assertTrue(parserConfig2.isAsmEnable());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i#j+O\"JW6 :s");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Character character0 = TypeUtils.castToChar("j");
      assertEquals('j', (char)character0);
      assertNotNull(character0);
      
      Class<PropertyProcessable> class1 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class1);
      assertNotNull(propertyProcessableDeserializer0);
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(propertyProcessableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("LjKva.a!wb.ount");
      assertFalse(boolean0);
      
      MockThread mockThread0 = new MockThread((Runnable) null, ", minimumCapacity=");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class<Double> class0 = Double.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Set<String> set0 = identityHashMap0.keySet();
      assertNotNull(set0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) concurrentHashMap0, false, propertyNamingStrategy0);
      assertNotNull(list0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(concurrentHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("Ljava.awt.oint;", (ClassLoader) aSMClassLoader0);
      assertNull(class1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("LjKva.a!wb.ount");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : LjKva.a!wb.ount
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      String string0 = TypeUtils.castToString(class0);
      assertNotNull(string0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(1596);
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      String string1 = identityHashMap0.put("java.lang.Class@0000000001", "list_item_value");
      assertNull(string1);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      
      String string2 = TypeUtils.decapitalize((String) null);
      assertNull(string2);
      
      String string3 = identityHashMap0.put((String) null, "etDeclarngClass");
      assertNull(string3);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(2, identityHashMap0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<SQLTimeoutException> class2 = SQLTimeoutException.class;
      SQLTimeoutException sQLTimeoutException0 = TypeUtils.castToJavaBean((Object) null, class2);
      assertNull(sQLTimeoutException0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError((String) null);
      assertNotNull(noSuchFieldError0);
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      assertNull(noSuchFieldError0.getMessage());
      
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("etDeclarngClass");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : etDeclarngClass
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      
      String string0 = "z";
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      boolean boolean1 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class1);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("short", class0.toString());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("short", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      assertNotNull(stringIndexOutOfBoundsException0);
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)mockSimpleDateFormat0.getNumberFormat();
      assertNotNull(decimalFormat0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertEquals("###0", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("###0", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("*", (Map<String, ClientInfoStatus>) null);
      assertNotNull(sQLClientInfoException0);
      assertEquals("*", sQLClientInfoException0.getMessage());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("java.sql.SQLClientInfoException: *", sQLClientInfoException0.toString());
      assertNull(sQLClientInfoException0.getSQLState());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(sQLClientInfoException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("Ljava.awt.Point");
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      String string0 = identityHashMap0.put("(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Type;", "ZN^^6-");
      assertNull(string0);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      boolean boolean1 = TypeUtils.isNumber("WriteBigDecimalAsPlain");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("WriteBigDecimalAsPlain");
      assertNotNull(mockPrintWriter0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap1);
      assertFalse(identityHashMap1.equals((Object)identityHashMap0));
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Class<MapDeserializer> class0 = MapDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap1, (Map<String, Field>) concurrentHashMap0, false, propertyNamingStrategy0);
      assertNotSame(identityHashMap1, identityHashMap0);
      assertNotNull(list0);
      assertFalse(identityHashMap1.equals((Object)identityHashMap0));
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      assertTrue(concurrentHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3462), 144, 101);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3462,MONTH=144,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=101,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      Double double0 = new Double(101);
      assertEquals(101.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/reflect/Type;");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(double0);
      assertNotNull(timestamp0);
      assertEquals(101000000, timestamp0.getNanos());
      assertEquals("1970-01-01 00:00:00.101", timestamp0.toString());
      
      mockGregorianCalendar0.clear();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      BigDecimal bigDecimal0 = new BigDecimal((-154));
      assertNotNull(bigDecimal0);
      assertEquals((byte)102, bigDecimal0.byteValue());
      assertEquals((short) (-154), bigDecimal0.shortValue());
      
      java.util.Date date0 = TypeUtils.castToDate(mockGregorianCalendar0);
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      
      String string0 = TypeUtils.castToString(class0);
      assertNotNull(string0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(1596);
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      String string1 = identityHashMap0.put("getRoundingMode", "-NG?@M;ZEJ':l=5^scy");
      assertNull(string1);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      
      String string2 = identityHashMap0.put("Ljaa.awt.oin", "DisableCheckSpecialChar");
      assertNull(string2);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(2, identityHashMap0.size());
      
      String string3 = identityHashMap0.put("getRoundingMode", (String) null);
      assertNull(string3);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(3, identityHashMap0.size());
      
      String string4 = ParserConfig.AUTOTYPE_ACCEPT;
      assertEquals("fastjson.parser.autoTypeAccept", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      
      String string5 = identityHashMap0.put("getRoundingMode", "java.lang.Class@0000000001");
      assertNull(string5);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(4, identityHashMap0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      assertNotNull(noSuchFieldError0);
      assertNull(noSuchFieldError0.getMessage());
      assertEquals("java.lang.NoSuchFieldError", noSuchFieldError0.toString());
      
      Integer integer0 = new Integer(1596);
      assertEquals(1596, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = TypeUtils.isNumber("rOvQa?'l");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(integer0);
      assertNotNull(timestamp0);
      assertEquals(596000000, timestamp0.getNanos());
      assertEquals("1970-01-01 00:00:01.596", timestamp0.toString());
      
      Class<Rectangle> class2 = Rectangle.class;
      Class<PropertyNamingStrategy> class3 = PropertyNamingStrategy.class;
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.autoTypeAccept", class2, class3, class3, (Field) null, 34, 1931, 1931);
      assertNotNull(fieldInfo0);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(1931, fieldInfo0.parserFeatures);
      assertTrue(fieldInfo0.isEnum);
      assertEquals(1931, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals("fastjson.parser.autoTypeAccept", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertNotNull(beanContext0);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(1931, fieldInfo0.parserFeatures);
      assertTrue(fieldInfo0.isEnum);
      assertEquals(1931, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals("fastjson.parser.autoTypeAccept", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(1931, beanContext0.getFeatures());
      assertNull(beanContext0.getFormat());
      assertEquals("fastjson.parser.autoTypeAccept", beanContext0.getName());
      assertEquals("", beanContext0.getLabel());
      
      Method method0 = beanContext0.getMethod();
      assertNull(method0);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.jsonDirect);
      assertEquals(1931, fieldInfo0.parserFeatures);
      assertTrue(fieldInfo0.isEnum);
      assertEquals(1931, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.unwrapped);
      assertEquals("fastjson.parser.autoTypeAccept", fieldInfo0.toString());
      assertNull(fieldInfo0.getFormat());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(1931, beanContext0.getFeatures());
      assertNull(beanContext0.getFormat());
      assertEquals("fastjson.parser.autoTypeAccept", beanContext0.getName());
      assertEquals("", beanContext0.getLabel());
      
      boolean boolean2 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("[char");
      assertNotNull(threadGroup0);
      assertEquals("[char", threadGroup0.getName());
      
      Class<String> class0 = String.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
      assertNull(class1);
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class2);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.lang.String", class2.toString());
      assertFalse(class2.isEnum());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isSynthetic());
      
      Class class3 = (Class)TypeUtils.getCollectionItemType((Type) null);
      assertNotSame(class3, class2);
      assertNotNull(class3);
      assertFalse(class3.equals((Object)class2));
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertEquals(1, class3.getModifiers());
      assertEquals("class java.lang.Object", class3.toString());
      assertFalse(class3.isPrimitive());
      
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      assertNotNull(stringIndexOutOfBoundsException0);
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<AtomicInteger> class4 = AtomicInteger.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class4, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("[char");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[char\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      assertNotNull(batchUpdateException0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, true);
      assertNotNull(mockPrintWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      PrintWriter printWriter0 = mockPrintWriter0.append('N');
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      assertEquals("N", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      
      batchUpdateException0.printStackTrace(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      assertEquals(1089, charArrayWriter0.size());
      
      Throwable[] throwableArray0 = batchUpdateException0.getSuppressed();
      assertNotNull(throwableArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertNull(batchUpdateException0.getMessage());
      
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      assertNotNull(threadGroup0);
      assertNull(threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = classLoader0.getParent();
      assertSame(classLoader2, classLoader1);
      assertNotNull(classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      String string0 = TypeUtils.decapitalize("fastjson.parser.autoTypeAccept");
      assertEquals("fastjson.parser.autoTypeAccept", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[] byteArray0 = TypeUtils.castToBytes("`;k7J.fp1CD*");
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte)126, (byte) (-99), (byte)66}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "Ljava.:tawt.oint";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Hashtable<Thread, StackTraceElement[]> hashtable0 = new Hashtable<Thread, StackTraceElement[]>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("Ljava.:tawt.oint");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : Ljava.:tawt.oint
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      BigDecimal bigDecimal0 = new BigDecimal(2278L);
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-26), bigDecimal0.byteValue());
      assertEquals((short)2278, bigDecimal0.shortValue());
      
      String string0 = bigDecimal0.toPlainString();
      assertEquals("2278", string0);
      assertNotNull(string0);
      assertEquals((byte) (-26), bigDecimal0.byteValue());
      assertEquals((short)2278, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = BigDecimal.valueOf((long) 0, 0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      
      Time time0 = TypeUtils.castToSqlTime(bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotNull(time0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte) (-26), bigDecimal0.byteValue());
      assertEquals((short)2278, bigDecimal0.shortValue());
      assertEquals("00:00:02", time0.toString());
      
      String string1 = "Yu";
      Class<NoSuchFieldError> class1 = NoSuchFieldError.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      java.util.Date date0 = TypeUtils.castToDate("2278");
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", date0.toString());
      
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Hashtable<String, Field> hashtable1 = new Hashtable<String, Field>();
      assertNotNull(hashtable1);
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      
      Field field0 = ParserConfig.getFieldFromCache("B", hashtable1);
      assertNull(field0);
      assertEquals(0, hashtable1.size());
      assertTrue(hashtable1.isEmpty());
      
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      FieldInfo fieldInfo0 = new FieldInfo("B", class2, class0, class0, (Field) null, 1422, 1422, (-1639));
      assertNotNull(fieldInfo0);
      assertTrue(fieldInfo0.isEnum);
      assertEquals((-1639), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(1422, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertNull(fieldInfo0.getFormat());
      assertEquals("B", fieldInfo0.toString());
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertNotNull(beanContext0);
      assertTrue(fieldInfo0.isEnum);
      assertEquals((-1639), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(1422, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertNull(fieldInfo0.getFormat());
      assertEquals("B", fieldInfo0.toString());
      assertEquals("", beanContext0.getLabel());
      assertEquals("B", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(1422, beanContext0.getFeatures());
      assertNull(beanContext0.getFormat());
      
      Class<BigDecimal> class3 = BigDecimal.class;
      Class class4 = (Class)FieldInfo.getFieldType(class0, fieldInfo0.declaringClass, class1);
      assertNotNull(class4);
      assertTrue(fieldInfo0.isEnum);
      assertEquals((-1639), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(1422, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertNull(fieldInfo0.getFormat());
      assertEquals("B", fieldInfo0.toString());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isEnum());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isSynthetic());
      assertEquals("class java.lang.NoSuchFieldError", class4.toString());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      
      BeanContext beanContext1 = new BeanContext(class3, fieldInfo0);
      assertNotNull(beanContext1);
      assertTrue(fieldInfo0.isEnum);
      assertEquals((-1639), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(1422, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(beanContext1.equals((Object)beanContext0));
      assertNull(fieldInfo0.getFormat());
      assertEquals("B", fieldInfo0.toString());
      assertNull(beanContext1.getFormat());
      assertEquals(1422, beanContext1.getFeatures());
      assertFalse(beanContext1.isJsonDirect());
      assertEquals("", beanContext1.getLabel());
      assertEquals("B", beanContext1.getName());
      
      Field field1 = beanContext1.getField();
      assertNotSame(beanContext1, beanContext0);
      assertNull(field1);
      assertTrue(fieldInfo0.isEnum);
      assertEquals((-1639), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(1422, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.getOnly);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(beanContext1.equals((Object)beanContext0));
      assertNull(fieldInfo0.getFormat());
      assertEquals("B", fieldInfo0.toString());
      assertNull(beanContext1.getFormat());
      assertEquals(1422, beanContext1.getFeatures());
      assertFalse(beanContext1.isJsonDirect());
      assertEquals("", beanContext1.getLabel());
      assertEquals("B", beanContext1.getName());
      
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      BigDecimal bigDecimal0 = BigDecimal.valueOf((long) 0, 0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      String string0 = identityHashMap0.put("ji", "ji");
      assertNull(string0);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, true, propertyNamingStrategy0);
      assertNotNull(list0);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      java.util.IdentityHashMap<NoSuchMethodException, Long> identityHashMap1 = new java.util.IdentityHashMap<NoSuchMethodException, Long>();
      assertNotNull(identityHashMap1);
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(identityHashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "expect string");
      assertFalse(boolean0);
      
      Class<?> class0 = TypeUtils.loadClass(";\"");
      assertNull(class0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      InstantiationError instantiationError0 = new InstantiationError();
      assertNotNull(instantiationError0);
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      assertNull(instantiationError0.getMessage());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string0 = instantiationError0.getLocalizedMessage();
      assertNull(string0);
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      assertNull(instantiationError0.getMessage());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "expect string");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertNotSame(parserConfig1, parserConfig0);
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class1, (Type) class1, propertyNamingStrategy0, false, true);
      assertNotNull(javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      Class<TimeUnit> class2 = TimeUnit.class;
      Class<TypeNotPresentException> class3 = TypeNotPresentException.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class3, ";\"", fieldArray0);
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("[C", class1, class2, class1, (Field) null, 5324, 0, (-1364));
      assertNotNull(fieldInfo0);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals((-1364), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertTrue(fieldInfo0.isEnum);
      assertEquals(0, fieldInfo0.serialzeFeatures);
      assertNull(fieldInfo0.getFormat());
      assertEquals("[C", fieldInfo0.toString());
      
      FieldDeserializer fieldDeserializer0 = parserConfig0.createFieldDeserializer(parserConfig1, javaBeanInfo0, fieldInfo0);
      assertNotSame(parserConfig0, parserConfig1);
      assertNotSame(parserConfig1, parserConfig0);
      assertNotNull(fieldDeserializer0);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.fieldTransient);
      assertEquals((-1364), fieldInfo0.parserFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertFalse(fieldInfo0.getOnly);
      assertTrue(fieldInfo0.isEnum);
      assertEquals(0, fieldInfo0.serialzeFeatures);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertEquals(0, javaBeanInfo0.defaultConstructorParameterSize);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      assertFalse(parserConfig0.equals((Object)parserConfig1));
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertNull(fieldInfo0.getFormat());
      assertEquals("[C", fieldInfo0.toString());
      assertEquals(2, fieldDeserializer0.getFastMatchToken());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      StackTraceElement[] stackTraceElementArray0 = instantiationError0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals("java.lang.InstantiationError", instantiationError0.toString());
      assertNull(instantiationError0.getMessage());
      
      Class<Float> class4 = Float.class;
      // Undeclared exception!
      try { 
        JavaBeanInfo.build((Class<?>) class4, (Type) class4, (PropertyNamingStrategy) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Float
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(0L);
      assertNotNull(atomicLong0);
      assertEquals(0L, atomicLong0.get());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals((byte)0, atomicLong0.byteValue());
      
      long long0 = atomicLong0.getAndDecrement();
      assertEquals(0L, long0);
      assertEquals((-1L), atomicLong0.get());
      assertEquals("-1", atomicLong0.toString());
      assertEquals((-1L), atomicLong0.longValue());
      assertEquals((-1.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-1.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((short) (-1), atomicLong0.shortValue());
      assertEquals((byte) (-1), atomicLong0.byteValue());
      assertEquals((-1), atomicLong0.intValue());
      
      atomicLong0.lazySet(0L);
      assertEquals(0L, atomicLong0.get());
      assertEquals(0L, atomicLong0.longValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0, atomicLong0.intValue());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals((byte)0, atomicLong0.byteValue());
      
      long long1 = atomicLong0.decrementAndGet();
      assertEquals((-1L), long1);
      assertFalse(long1 == long0);
      assertEquals((-1L), atomicLong0.get());
      assertEquals("-1", atomicLong0.toString());
      assertEquals((-1L), atomicLong0.longValue());
      assertEquals((-1.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-1.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((short) (-1), atomicLong0.shortValue());
      assertEquals((byte) (-1), atomicLong0.byteValue());
      assertEquals((-1), atomicLong0.intValue());
      
      Long long2 = TypeUtils.castToLong(atomicLong0);
      assertEquals((-1L), (long)long2);
      assertNotNull(long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertEquals((-1L), atomicLong0.get());
      assertEquals("-1", atomicLong0.toString());
      assertEquals((-1L), atomicLong0.longValue());
      assertEquals((-1.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-1.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((short) (-1), atomicLong0.shortValue());
      assertEquals((byte) (-1), atomicLong0.byteValue());
      assertEquals((-1), atomicLong0.intValue());
      
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Class<?> class1 = TypeUtils.loadClass("Ljava.awt.Point");
      assertNull(class1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)45;
      byteArray0[5] = (byte) (-105);
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      assertNotNull(dateFormatSymbols0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      DateFormatSymbols dateFormatSymbols1 = DateFormatSymbols.getInstance();
      assertNotSame(dateFormatSymbols1, dateFormatSymbols0);
      assertNotNull(dateFormatSymbols1);
      assertFalse(dateFormatSymbols1.equals((Object)dateFormatSymbols0));
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols1.getLocalPatternChars());
      
      Double double0 = TypeUtils.castToDouble(atomicLong0);
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals((-1L), atomicLong0.get());
      assertEquals("-1", atomicLong0.toString());
      assertEquals((-1L), atomicLong0.longValue());
      assertEquals((-1.0), atomicLong0.doubleValue(), 0.01);
      assertEquals((-1.0F), atomicLong0.floatValue(), 0.01F);
      assertEquals((short) (-1), atomicLong0.shortValue());
      assertEquals((byte) (-1), atomicLong0.byteValue());
      assertEquals((-1), atomicLong0.intValue());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("N2vKuR", dateFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = Character.getName(1596);
      assertEquals("ARABIC LETTER KEHEH WITH THREE DOTS BELOW", string0);
      assertNotNull(string0);
      
      java.util.IdentityHashMap<MockSimpleDateFormat, SQLTimeoutException> identityHashMap0 = new java.util.IdentityHashMap<MockSimpleDateFormat, SQLTimeoutException>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(properties0);
      assertTrue(boolean0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Byte byte0 = new Byte((byte) (-19));
      assertEquals((byte) (-19), (byte)byte0);
      assertNotNull(byte0);
      
      java.util.Date date0 = TypeUtils.castToDate(byte0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", date0.toString());
      
      PageAttributes pageAttributes0 = new PageAttributes();
      assertNotNull(pageAttributes0);
      
      JSONArray jSONArray0 = new JSONArray(854);
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(30);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 30, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      Class<MockDate> class0 = MockDate.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Class<Short> class2 = Short.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class2);
      assertNull(stringArray0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      assertNotNull(throwableDeserializer0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      
      String string0 = TypeUtils.castToString(throwableDeserializer0);
      assertNotNull(string0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals(12, throwableDeserializer0.getFastMatchToken());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(34);
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      String string1 = Character.getName(34);
      assertEquals("QUOTATION MARK", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = identityHashMap0.put("e~zlwF-S;eI:=;", "e~zlwF-S;eI:=;");
      assertNull(string2);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      Class<Locale> class3 = Locale.class;
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertNotSame(parserConfig1, parserConfig0);
      assertNotNull(parserConfig1);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      
      java.util.IdentityHashMap<MockSimpleDateFormat, SQLTimeoutException> identityHashMap1 = new java.util.IdentityHashMap<MockSimpleDateFormat, SQLTimeoutException>();
      assertNotNull(identityHashMap1);
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      
      Locale locale0 = TypeUtils.cast((Object) "e~zlwF-S;eI:=;", class3, parserConfig1);
      assertNotSame(parserConfig1, parserConfig0);
      assertNotNull(locale0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertEquals("e~zlwf-s;ei:=;", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("e~zlwf-s;ei:=;", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      assertNotNull(dateFormatSymbols0);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertEquals("e~zlwf-s;ei:=;", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("e~zlwf-s;ei:=;", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("fastjson.parser.autoTypeAccept", dateFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'f'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertNotNull(class1);
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("short", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = treeMap0.put("org.springframework.remoting.support.RemoteInvocation", "java/lang/Character");
      assertNull(string0);
      assertEquals(1, treeMap0.size());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertEquals("short", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      WeakHashMap<Timestamp, SQLClientInfoException> weakHashMap0 = new WeakHashMap<Timestamp, SQLClientInfoException>();
      assertNotNull(weakHashMap0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertNotNull(imageCapabilities0);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertTrue(imageCapabilities0.isAccelerated());
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertNotNull(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      
      Class<?> class2 = TypeUtils.loadClass("");
      assertNull(class2);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(weakHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      AtomicLong atomicLong0 = new AtomicLong(0);
      assertNotNull(atomicLong0);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0L, atomicLong0.get());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.longValue());
      
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      long long0 = atomicLong0.accumulateAndGet(3794316665763266033L, longBinaryOperator0);
      assertEquals(0L, long0);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0L, atomicLong0.get());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.longValue());
      
      Short short0 = TypeUtils.castToShort(atomicLong0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      assertEquals((byte)0, atomicLong0.byteValue());
      assertEquals(0, atomicLong0.intValue());
      assertEquals("0", atomicLong0.toString());
      assertEquals(0L, atomicLong0.get());
      assertEquals((short)0, atomicLong0.shortValue());
      assertEquals(0.0F, atomicLong0.floatValue(), 0.01F);
      assertEquals(0.0, atomicLong0.doubleValue(), 0.01);
      assertEquals(0L, atomicLong0.longValue());
      
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      String string0 = TypeUtils.castToString(class0);
      assertNotNull(string0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.lang.Class@0000000001");
      assertFalse(boolean0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      String string1 = Character.getName(1596);
      assertEquals("ARABIC LETTER KEHEH WITH THREE DOTS BELOW", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap1);
      assertTrue(identityHashMap1.equals((Object)identityHashMap0));
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, identityHashMap1.size());
      
      String string2 = identityHashMap0.putIfAbsent("java.lang.Class@0000000001", "java.lang.Class@0000000001");
      assertNotSame(identityHashMap0, identityHashMap1);
      assertNull(string2);
      assertFalse(identityHashMap0.equals((Object)identityHashMap1));
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      String string3 = identityHashMap0.put("getClass", "getClass");
      assertNotSame(identityHashMap0, identityHashMap1);
      assertNull(string3);
      assertFalse(identityHashMap0.equals((Object)identityHashMap1));
      assertEquals(2, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      assertNotSame(identityHashMap0, identityHashMap1);
      assertNotNull(list0);
      assertFalse(identityHashMap0.equals((Object)identityHashMap1));
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(2, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      java.util.IdentityHashMap<NoSuchMethodException, Long> identityHashMap2 = new java.util.IdentityHashMap<NoSuchMethodException, Long>();
      assertNotNull(identityHashMap2);
      assertTrue(identityHashMap2.isEmpty());
      assertEquals(0, identityHashMap2.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {getClass=getClass, java.lang.Class@0000000001=java.lang.Class@0000000001}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("NOT_BETWEEN", "toS");
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("NOT_BETWEEN", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: NOT_BETWEEN", sQLSyntaxErrorException0.toString());
      assertEquals("toS", sQLSyntaxErrorException0.getSQLState());
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = new SQLSyntaxErrorException("toS", "toS", 17, sQLSyntaxErrorException0);
      assertNotNull(sQLSyntaxErrorException1);
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("NOT_BETWEEN", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: NOT_BETWEEN", sQLSyntaxErrorException0.toString());
      assertEquals("toS", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: toS", sQLSyntaxErrorException1.toString());
      assertEquals("toS", sQLSyntaxErrorException1.getMessage());
      assertEquals("toS", sQLSyntaxErrorException1.getSQLState());
      assertEquals(17, sQLSyntaxErrorException1.getErrorCode());
      
      SQLSyntaxErrorException sQLSyntaxErrorException2 = new SQLSyntaxErrorException("toS", sQLSyntaxErrorException1);
      assertNotNull(sQLSyntaxErrorException2);
      assertFalse(sQLSyntaxErrorException0.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException1.equals((Object)sQLSyntaxErrorException0));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException1));
      assertFalse(sQLSyntaxErrorException2.equals((Object)sQLSyntaxErrorException0));
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("NOT_BETWEEN", sQLSyntaxErrorException0.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: NOT_BETWEEN", sQLSyntaxErrorException0.toString());
      assertEquals("toS", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: toS", sQLSyntaxErrorException1.toString());
      assertEquals("toS", sQLSyntaxErrorException1.getMessage());
      assertEquals("toS", sQLSyntaxErrorException1.getSQLState());
      assertEquals(17, sQLSyntaxErrorException1.getErrorCode());
      assertEquals("toS", sQLSyntaxErrorException2.getMessage());
      assertEquals("java.sql.SQLSyntaxErrorException: toS", sQLSyntaxErrorException2.toString());
      assertNull(sQLSyntaxErrorException2.getSQLState());
      assertEquals(0, sQLSyntaxErrorException2.getErrorCode());
      
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("MapSortField", "w'", "w'", 0);
      assertNotNull(stackTraceElement0);
      assertEquals("MapSortField", stackTraceElement0.getClassName());
      assertEquals("MapSortField.w'(w':0)", stackTraceElement0.toString());
      assertEquals("w'", stackTraceElement0.getFileName());
      assertEquals(0, stackTraceElement0.getLineNumber());
      assertEquals("w'", stackTraceElement0.getMethodName());
      assertFalse(stackTraceElement0.isNativeMethod());
      
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("w'", "toS", "0s%,73-bcG*%H%%BPzp", 10);
      assertNotNull(stackTraceElement1);
      assertFalse(stackTraceElement1.equals((Object)stackTraceElement0));
      assertEquals("0s%,73-bcG*%H%%BPzp", stackTraceElement1.getFileName());
      assertEquals("w'.toS(0s%,73-bcG*%H%%BPzp:10)", stackTraceElement1.toString());
      assertEquals("w'", stackTraceElement1.getClassName());
      assertEquals("toS", stackTraceElement1.getMethodName());
      assertEquals(10, stackTraceElement1.getLineNumber());
      assertFalse(stackTraceElement1.isNativeMethod());
      
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("getName", "0s%,73-bcG*%H%%BPzp", "w'", 0);
      assertNotNull(stackTraceElement2);
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement1));
      assertFalse(stackTraceElement2.equals((Object)stackTraceElement0));
      assertEquals("w'", stackTraceElement2.getFileName());
      assertEquals(0, stackTraceElement2.getLineNumber());
      assertEquals("getName.0s%,73-bcG*%H%%BPzp(w':0)", stackTraceElement2.toString());
      assertFalse(stackTraceElement2.isNativeMethod());
      assertEquals("0s%,73-bcG*%H%%BPzp", stackTraceElement2.getMethodName());
      assertEquals("getName", stackTraceElement2.getClassName());
      
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = null;
      try {
        stackTraceElement3 = new StackTraceElement("toS", (String) null, "xI7<#:(t", 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Method name is null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      Class<?> class1 = TypeUtils.getRawClass(class0);
      assertNotNull(class1);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertTrue(class1.isPrimitive());
      assertEquals("short", class1.toString());
      assertFalse(class1.isAnnotation());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      boolean boolean2 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("short", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      MockThread mockThread0 = new MockThread("A+GEz?6evEMtLKIK");
      assertNotNull(mockThread0);
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0);
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread1, mockThread0);
      assertNotNull(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      assertNotNull(threadGroup0);
      assertNull(threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "net.sf.cglib.proxy.Factory");
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNull(threadGroup0.getName());
      assertEquals("net.sf.cglib.proxy.Factory", threadGroup1.getName());
      
      MockThread mockThread2 = new MockThread((ThreadGroup) null, mockThread1);
      assertNotNull(mockThread2);
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread2.isInterrupted());
      assertFalse(mockThread2.isDaemon());
      assertEquals(0, mockThread2.countStackFrames());
      
      MockThread mockThread3 = new MockThread(mockThread1);
      assertNotNull(mockThread3);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread1));
      assertFalse(mockThread3.equals((Object)mockThread0));
      assertFalse(mockThread3.equals((Object)mockThread2));
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread3.isDaemon());
      assertEquals(0, mockThread3.countStackFrames());
      assertFalse(mockThread3.isInterrupted());
      
      MockThread mockThread4 = new MockThread((ThreadGroup) null, mockThread1, "mv~'\"~[in[e)><5n2.", 3138L);
      assertNotNull(mockThread4);
      assertFalse(mockThread4.equals((Object)mockThread0));
      assertFalse(mockThread4.equals((Object)mockThread2));
      assertFalse(mockThread4.equals((Object)mockThread3));
      assertFalse(mockThread4.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread4.isInterrupted());
      assertEquals(0, mockThread4.countStackFrames());
      assertFalse(mockThread4.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      ClassLoader classLoader1 = mockThread4.getContextClassLoader();
      assertNotSame(mockThread4, mockThread0);
      assertNotSame(mockThread4, mockThread2);
      assertNotSame(mockThread4, mockThread3);
      assertNotSame(mockThread4, mockThread1);
      assertSame(classLoader1, classLoader0);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread4);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread4);
      assertNotNull(classLoader1);
      assertFalse(mockThread4.equals((Object)mockThread0));
      assertFalse(mockThread4.equals((Object)mockThread2));
      assertFalse(mockThread4.equals((Object)mockThread3));
      assertFalse(mockThread4.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread4));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread4));
      assertFalse(mockThread4.isInterrupted());
      assertEquals(0, mockThread4.countStackFrames());
      assertFalse(mockThread4.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertNotSame(mockThread4, mockThread0);
      assertNotSame(mockThread4, mockThread2);
      assertNotSame(mockThread4, mockThread3);
      assertNotSame(mockThread4, mockThread1);
      assertSame(classLoader1, classLoader0);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread4);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread4);
      assertNotNull(classLoader2);
      assertFalse(mockThread4.equals((Object)mockThread0));
      assertFalse(mockThread4.equals((Object)mockThread2));
      assertFalse(mockThread4.equals((Object)mockThread3));
      assertFalse(mockThread4.equals((Object)mockThread1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread4));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread4));
      assertFalse(mockThread4.isInterrupted());
      assertEquals(0, mockThread4.countStackFrames());
      assertFalse(mockThread4.isDaemon());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      Class<?> class2 = TypeUtils.loadClass("net.sf.cglib.proxy.Factory", classLoader0);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread4);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread4);
      assertSame(classLoader0, classLoader1);
      assertNull(class2);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread4));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread4));
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      
      String string0 = TypeUtils.castToString(parserConfig0);
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotSame(mockThread0, mockThread3);
      assertNotSame(mockThread0, mockThread4);
      assertNotSame(mockThread1, mockThread3);
      assertNotSame(mockThread1, mockThread2);
      assertNotSame(mockThread1, mockThread0);
      assertNotSame(mockThread1, mockThread4);
      assertSame(classLoader0, classLoader1);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory0);
      assertNotNull(string0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(mockThread0.equals((Object)mockThread3));
      assertFalse(mockThread0.equals((Object)mockThread4));
      assertFalse(mockThread1.equals((Object)mockThread3));
      assertFalse(mockThread1.equals((Object)mockThread2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.equals((Object)mockThread4));
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      assertNotNull(numberDeserializer0);
      assertEquals(2, numberDeserializer0.getFastMatchToken());
      
      LinkedHashMap<TypeNotPresentException, MapDeserializer> linkedHashMap0 = new LinkedHashMap<TypeNotPresentException, MapDeserializer>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      boolean boolean3 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "A+GEz?6evEMtLKIK", (Type) class1, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"A+GEz?6evEMtLKIK\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      String string0 = identityHashMap0.put("N", "N");
      assertNull(string0);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isNumber("(9NIO;=L1");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("time");
      assertNotNull(mockPrintWriter0);
      
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, identityHashMap0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      
      Class<?> class1 = javaBeanSerializer0.getType();
      assertNotNull(class1);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.IllegalMonitorStateException", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      
      Class<?> class2 = TypeUtils.getClass((Type) class1);
      assertSame(class1, class2);
      assertSame(class2, class1);
      assertNotNull(class2);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.IllegalMonitorStateException", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertEquals("class java.lang.IllegalMonitorStateException", class2.toString());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      
      long long0 = TypeUtils.fnv1a_64("time");
      assertEquals(2185518981507421060L, long0);
      
      Class<PropertyProcessableDeserializer> class3 = PropertyProcessableDeserializer.class;
      Class<StackTraceElementDeserializer> class4 = StackTraceElementDeserializer.class;
      FieldInfo fieldInfo0 = new FieldInfo("can not cast to byte, value : ", class4, class3, class1, (Field) null, 9, 9, 974);
      assertNotNull(fieldInfo0);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(974, fieldInfo0.parserFeatures);
      assertEquals(9, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.IllegalMonitorStateException", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertNull(fieldInfo0.getFormat());
      assertEquals("can not cast to byte, value : ", fieldInfo0.toString());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)101;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)44, (byte)101, (byte) (-62), (byte) (-2), (byte)101, (byte)101}, byteArray0);
      
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      assertNotNull(beanContext0);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(974, fieldInfo0.parserFeatures);
      assertEquals(9, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertNull(beanContext0.getFormat());
      assertEquals(9, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertEquals("can not cast to byte, value : ", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.IllegalMonitorStateException", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertNull(fieldInfo0.getFormat());
      assertEquals("can not cast to byte, value : ", fieldInfo0.toString());
      
      Method method0 = beanContext0.getMethod();
      assertSame(class1, class2);
      assertNull(method0);
      assertFalse(fieldInfo0.jsonDirect);
      assertFalse(fieldInfo0.unwrapped);
      assertFalse(fieldInfo0.fieldTransient);
      assertFalse(fieldInfo0.isEnum);
      assertFalse(fieldInfo0.getOnly);
      assertEquals(974, fieldInfo0.parserFeatures);
      assertEquals(9, fieldInfo0.serialzeFeatures);
      assertFalse(fieldInfo0.fieldAccess);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertNull(beanContext0.getFormat());
      assertEquals(9, beanContext0.getFeatures());
      assertEquals("", beanContext0.getLabel());
      assertEquals("can not cast to byte, value : ", beanContext0.getName());
      assertFalse(beanContext0.isJsonDirect());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.IllegalMonitorStateException", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertNull(fieldInfo0.getFormat());
      assertEquals("can not cast to byte, value : ", fieldInfo0.toString());
      
      boolean boolean3 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean4);
      assertSame(class1, class2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertEquals(1, identityHashMap0.size());
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.IllegalMonitorStateException", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
          assertNotNull(noSuchMethodError0);
          assertNull(noSuchMethodError0.getMessage());
          assertEquals("java.lang.NoSuchMethodError", noSuchMethodError0.toString());
          
          Locale locale0 = Locale.US;
          assertNotNull(locale0);
          assertEquals("", locale0.getVariant());
          assertEquals("US", locale0.getCountry());
          assertEquals("eng", locale0.getISO3Language());
          assertEquals("en", locale0.getLanguage());
          assertEquals("USA", locale0.getISO3Country());
          assertEquals("en_US", locale0.toString());
          
          DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
          assertNotNull(dateFormatSymbols0);
          assertEquals("", locale0.getVariant());
          assertEquals("US", locale0.getCountry());
          assertEquals("eng", locale0.getISO3Language());
          assertEquals("en", locale0.getLanguage());
          assertEquals("USA", locale0.getISO3Country());
          assertEquals("en_US", locale0.toString());
          assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
          
          DateFormatSymbols dateFormatSymbols1 = (DateFormatSymbols)dateFormatSymbols0.clone();
          assertNotSame(dateFormatSymbols0, dateFormatSymbols1);
          assertNotSame(dateFormatSymbols1, dateFormatSymbols0);
          assertNotNull(dateFormatSymbols1);
          assertTrue(dateFormatSymbols1.equals((Object)dateFormatSymbols0));
          assertEquals("", locale0.getVariant());
          assertEquals("US", locale0.getCountry());
          assertEquals("eng", locale0.getISO3Language());
          assertEquals("en", locale0.getLanguage());
          assertEquals("USA", locale0.getISO3Country());
          assertEquals("en_US", locale0.toString());
          assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
          assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols1.getLocalPatternChars());
          
          String[][] stringArray0 = dateFormatSymbols0.getZoneStrings();
          assertNotSame(dateFormatSymbols0, dateFormatSymbols1);
          assertNotNull(stringArray0);
          assertTrue(dateFormatSymbols0.equals((Object)dateFormatSymbols1));
          assertEquals("", locale0.getVariant());
          assertEquals("US", locale0.getCountry());
          assertEquals("eng", locale0.getISO3Language());
          assertEquals("en", locale0.getLanguage());
          assertEquals("USA", locale0.getISO3Country());
          assertEquals("en_US", locale0.toString());
          assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
          
          String[] stringArray1 = Locale.getISOCountries();
          assertNotNull(stringArray1);
          
          Type[] typeArray0 = new Type[1];
          Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
          Class<BufferCapabilities> class1 = BufferCapabilities.class;
          JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
          doReturn(class1).when(jSONType0).builder();
          Class<?> class2 = JavaBeanInfo.getBuilderClass(class0, jSONType0);
          assertNotNull(class2);
          assertFalse(class2.isAnnotation());
          assertEquals(1, class2.getModifiers());
          assertFalse(class2.isEnum());
          assertFalse(class2.isSynthetic());
          assertFalse(class2.isInterface());
          assertFalse(class2.isArray());
          assertFalse(class2.isPrimitive());
          assertEquals("class java.awt.BufferCapabilities", class2.toString());
          
          ParserConfig parserConfig0 = ParserConfig.global;
          assertNotNull(parserConfig0);
          assertTrue(parserConfig0.compatibleWithJavaBean);
          assertFalse(parserConfig0.fieldBased);
          assertFalse(ParserConfig.AUTO_SUPPORT);
          assertTrue(parserConfig0.isAsmEnable());
          assertFalse(parserConfig0.isAutoTypeSupport());
          
          Class<?> class3 = parserConfig0.checkAutoType((String) null, class1, (-88516351));
          assertNull(class3);
          assertTrue(parserConfig0.compatibleWithJavaBean);
          assertFalse(parserConfig0.fieldBased);
          assertFalse(ParserConfig.AUTO_SUPPORT);
          assertTrue(parserConfig0.isAsmEnable());
          assertFalse(parserConfig0.isAutoTypeSupport());
          
          Type type0 = TypeUtils.unwrapOptional((Type) null);
          assertNull(type0);
          
          ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
          assertNotNull(parameterizedTypeImpl0);
          
          boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
          assertFalse(boolean0);
          
          String string0 = parameterizedTypeImpl0.getTypeName();
          assertNotNull(string0);
          
          ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
          assertSame(parserConfig1, parserConfig0);
          assertNotNull(parserConfig1);
          assertFalse(ParserConfig.AUTO_SUPPORT);
          assertTrue(parserConfig1.compatibleWithJavaBean);
          assertFalse(parserConfig1.fieldBased);
          assertFalse(parserConfig1.isAutoTypeSupport());
          assertTrue(parserConfig1.isAsmEnable());
          
          String string1 = parameterizedTypeImpl0.getTypeName();
          assertNotNull(string1);
          assertTrue(string1.equals((Object)string0));
          
          parserConfig0.setAutoTypeSupport(false);
          assertSame(parserConfig0, parserConfig1);
          assertTrue(parserConfig0.compatibleWithJavaBean);
          assertFalse(parserConfig0.fieldBased);
          assertFalse(ParserConfig.AUTO_SUPPORT);
          assertTrue(parserConfig0.isAsmEnable());
          assertFalse(parserConfig0.isAutoTypeSupport());
          
          ParserConfig parserConfig2 = new ParserConfig();
          assertNotNull(parserConfig2);
          assertFalse(ParserConfig.AUTO_SUPPORT);
          assertTrue(parserConfig2.compatibleWithJavaBean);
          assertFalse(parserConfig2.fieldBased);
          assertFalse(parserConfig2.equals((Object)parserConfig1));
          assertFalse(parserConfig2.equals((Object)parserConfig0));
          assertFalse(parserConfig2.isAutoTypeSupport());
          assertTrue(parserConfig2.isAsmEnable());
          
          // Undeclared exception!
          try { 
            TypeUtils.cast((Object) parameterizedTypeImpl0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // write javaBean error, fastjson version 1.2.46, class com.alibaba.fastjson.util.ParameterizedTypeImpl, create asm serializer error, class class java.lang.Class
             //
             verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      classLoader1.setClassAssertionStatus("gethashs{Code", false);
      assertSame(classLoader1, classLoader0);
      
      Class<MessageFormat> class0 = MessageFormat.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Byte byte0 = TypeUtils.castToByte(float0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Class<Float> class1 = Float.TYPE;
      assertNotNull(class1);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("float", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      
      Class<Double> class2 = Double.TYPE;
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("double", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(genericArrayType0).getGenericComponentType();
      Class class3 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class3);
      assertFalse(class2.isAnnotation());
      assertTrue(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals("double", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class3.isAnnotation());
      assertTrue(class3.isArray());
      assertFalse(class3.isInterface());
      assertEquals("class [D", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isPrimitive());
      
      Class<?> class4 = TypeUtils.getCollectionItemClass(class1);
      assertNotNull(class4);
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("float", class1.toString());
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class4.isInterface());
      assertEquals("class java.lang.Object", class4.toString());
      assertFalse(class4.isArray());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertEquals(1, class4.getModifiers());
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory1.classLoader;
      assertSame(aSMClassLoader1, aSMClassLoader0);
      assertNotNull(aSMClassLoader1);
      
      ClassLoader classLoader2 = aSMDeserializerFactory1.classLoader.getParent();
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader2, classLoader1);
      assertSame(classLoader1, classLoader2);
      assertSame(classLoader1, classLoader0);
      assertNotSame(aSMDeserializerFactory0, aSMDeserializerFactory1);
      assertNotSame(aSMDeserializerFactory1, aSMDeserializerFactory0);
      assertNotNull(classLoader2);
      assertFalse(aSMDeserializerFactory0.equals((Object)aSMDeserializerFactory1));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[0]);
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = parameterizedTypeImpl0.getTypeName();
      assertNotNull(string0);
      
      HashSet<NoSuchMethodException> hashSet0 = new HashSet<NoSuchMethodException>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      InterruptedException interruptedException0 = new InterruptedException("IjzD)0a&");
      assertNotNull(interruptedException0);
      assertEquals("IjzD)0a&", interruptedException0.getMessage());
      assertEquals("java.lang.InterruptedException: IjzD)0a&", interruptedException0.toString());
      
      MockIllegalArgumentException mockIllegalArgumentException0 = new MockIllegalArgumentException(interruptedException0);
      assertNotNull(mockIllegalArgumentException0);
      assertEquals("IjzD)0a&", interruptedException0.getMessage());
      assertEquals("java.lang.InterruptedException: IjzD)0a&", interruptedException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalArgumentException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.FloatCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      String string0 = identityHashMap0.put("byte", "byte");
      assertNull(string0);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      
      TypeUtils.clearClassMapping();
      boolean boolean0 = TypeUtils.isNumber("TmJY");
      assertFalse(boolean0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("[*|X");
      assertNotNull(threadGroup0);
      assertEquals("[*|X", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = threadGroup0.getParent();
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("[*|X", threadGroup0.getName());
      assertEquals("Test_Execution_Group", threadGroup1.getName());
      
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup0, "isfillInStackTrace");
      assertNotNull(threadGroup2);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertEquals("[*|X", threadGroup0.getName());
      assertEquals("isfillInStackTrace", threadGroup2.getName());
      
      MockThread mockThread0 = new MockThread();
      assertNotNull(mockThread0);
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      MockThread mockThread1 = new MockThread(threadGroup2, mockThread0);
      assertNotNull(mockThread1);
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("[*|X", threadGroup0.getName());
      assertEquals("isfillInStackTrace", threadGroup2.getName());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      
      ThreadGroup[] threadGroupArray0 = new ThreadGroup[2];
      Thread[] threadArray0 = new Thread[5];
      threadArray0[0] = (Thread) mockThread0;
      threadArray0[1] = (Thread) mockThread0;
      threadArray0[2] = (Thread) mockThread1;
      threadArray0[4] = (Thread) mockThread1;
      int int0 = MockThread.enumerate(threadArray0);
      assertEquals(1, int0);
      
      int int1 = MockThread.enumerate(threadArray0);
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      threadGroupArray0[0] = threadGroup2;
      threadGroupArray0[1] = threadGroup1;
      int int2 = threadGroup0.enumerate(threadGroupArray0);
      assertEquals(1, int2);
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup0, threadGroup1);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertEquals("[*|X", threadGroup0.getName());
      
      Map<Thread, StackTraceElement[]> map0 = MockThread.getAllStackTraces();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
      
      MockThread mockThread2 = new MockThread(threadGroup1, threadArray0[2]);
      assertNotNull(mockThread2);
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(mockThread2.equals((Object)mockThread1));
      assertFalse(mockThread2.equals((Object)mockThread0));
      assertEquals("[*|X", threadGroup0.getName());
      assertEquals("Test_Execution_Group", threadGroup1.getName());
      assertFalse(mockThread2.isDaemon());
      assertFalse(mockThread2.isInterrupted());
      assertEquals(0, mockThread2.countStackFrames());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotSame(mockThread0, mockThread2);
      assertNotSame(mockThread0, mockThread1);
      assertNotNull(classLoader0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(mockThread0.equals((Object)mockThread2));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Locale locale0 = JSON.defaultLocale;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      LinkedHashMap<ChoiceFormat, FieldInfo> linkedHashMap0 = new LinkedHashMap<ChoiceFormat, FieldInfo>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      long long1 = TypeUtils.fnv1a_64_lower("O_$5mv$aGk$p#e@hV!");
      assertEquals((-2362203212244203018L), long1);
      
      Class<?> class0 = TypeUtils.loadClass("byte");
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[6], class0);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@37e2049f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      String string0 = TypeUtils.castToString(class0);
      assertNotNull(string0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(1596);
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isNumber("seconds");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("seconds");
      assertNotNull(mockPrintWriter0);
      
      Class<IllegalMonitorStateException> class2 = IllegalMonitorStateException.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class2, identityHashMap0);
      assertNotNull(javaBeanSerializer0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Class<?> class3 = javaBeanSerializer0.getType();
      assertNotNull(class3);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertEquals("class java.lang.IllegalMonitorStateException", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      
      Class<?> class4 = TypeUtils.getClass((Type) class3);
      assertSame(class3, class4);
      assertSame(class4, class3);
      assertNotNull(class4);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertEquals(1, class3.getModifiers());
      assertEquals("class java.lang.IllegalMonitorStateException", class3.toString());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      assertFalse(class4.isAnnotation());
      assertEquals("class java.lang.IllegalMonitorStateException", class4.toString());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      
      String string1 = TypeUtils.castToString("list_item_value");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Class class5 = (Class)TypeUtils.getCollectionItemType(class2);
      assertNotNull(class5);
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isAnnotation());
      assertFalse(class5.isEnum());
      assertFalse(class5.isSynthetic());
      assertEquals(1, class5.getModifiers());
      assertEquals("class java.lang.Object", class5.toString());
      assertFalse(class5.isInterface());
      assertFalse(class5.isArray());
      
      Class class6 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotSame(class6, class5);
      assertNotNull(class6);
      assertFalse(class6.equals((Object)class5));
      assertEquals("class java.lang.Boolean", class6.toString());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertEquals(17, class6.getModifiers());
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      assertFalse(class6.isPrimitive());
      assertFalse(class6.isAnnotation());
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/23_fastjson/time");
      boolean boolean2 = FileSystemHandling.appendLineToFile(evoSuiteFile0, " -> ");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      assertNotNull(stringIndexOutOfBoundsException0);
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      MockJapaneseDate mockJapaneseDate0 = TypeUtils.cast((Object) null, (Type) class6, parserConfig0);
      assertNotSame(class6, class5);
      assertNull(mockJapaneseDate0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(class6.equals((Object)class5));
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertEquals("class java.lang.Boolean", class6.toString());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertEquals(17, class6.getModifiers());
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      assertFalse(class6.isPrimitive());
      assertFalse(class6.isAnnotation());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      String string0 = ".~2taTP^ALQa";
      String string1 = identityHashMap0.put(".~2taTP^ALQa", "N");
      assertNull(string1);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isNumber("NULL");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("dpXR^");
      assertNotNull(mockPrintWriter0);
      
      Class<IllegalMonitorStateException> class1 = IllegalMonitorStateException.class;
      Class<OutOfMemoryError> class2 = OutOfMemoryError.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class2, identityHashMap0);
      assertNotNull(javaBeanSerializer0);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      
      Class<?> class3 = javaBeanSerializer0.getType();
      assertNotNull(class3);
      assertFalse(identityHashMap0.isEmpty());
      assertEquals(1, identityHashMap0.size());
      assertFalse(class3.isEnum());
      assertEquals(1, class3.getModifiers());
      assertEquals("class java.lang.OutOfMemoryError", class3.toString());
      assertFalse(class3.isSynthetic());
      assertFalse(class3.isPrimitive());
      assertFalse(class3.isAnnotation());
      assertFalse(class3.isInterface());
      assertFalse(class3.isArray());
      
      Class<?> class4 = TypeUtils.getClass((Type) class1);
      assertNotSame(class4, class3);
      assertNotNull(class4);
      assertFalse(class4.equals((Object)class3));
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isAnnotation());
      assertFalse(class4.isInterface());
      assertFalse(class4.isArray());
      assertFalse(class4.isSynthetic());
      assertEquals(1, class4.getModifiers());
      assertEquals("class java.lang.IllegalMonitorStateException", class4.toString());
      assertFalse(class4.isEnum());
      
      Class class5 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class5);
      assertFalse(class5.isArray());
      assertFalse(class5.isInterface());
      assertEquals(16385, class5.getModifiers());
      assertFalse(class5.isAnnotation());
      assertTrue(class5.isEnum());
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class5.toString());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isSynthetic());
      
      Class class6 = (Class)TypeUtils.unwrapOptional(class5);
      assertSame(class5, class6);
      assertSame(class6, class5);
      assertNotNull(class6);
      assertFalse(class5.isArray());
      assertFalse(class5.isInterface());
      assertEquals(16385, class5.getModifiers());
      assertFalse(class5.isAnnotation());
      assertTrue(class5.isEnum());
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class5.toString());
      assertFalse(class5.isPrimitive());
      assertFalse(class5.isSynthetic());
      assertFalse(class6.isSynthetic());
      assertEquals("class com.alibaba.fastjson.PropertyNamingStrategy", class6.toString());
      assertFalse(class6.isPrimitive());
      assertTrue(class6.isEnum());
      assertEquals(16385, class6.getModifiers());
      assertFalse(class6.isAnnotation());
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/23_fastjson/time");
      boolean boolean2 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "CLxF[");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      assertNotNull(stringIndexOutOfBoundsException0);
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class3, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class2);
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isAnnotation());
      assertEquals(17, class2.getModifiers());
      assertEquals("class java.lang.Boolean", class2.toString());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      assertNotNull(stringIndexOutOfBoundsException0);
      assertNull(stringIndexOutOfBoundsException0.getMessage());
      assertEquals("java.lang.StringIndexOutOfBoundsException", stringIndexOutOfBoundsException0.toString());
      
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)mockSimpleDateFormat0.getNumberFormat();
      assertNotNull(decimalFormat0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("###0", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("###0", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      
      String string0 = "*";
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("KZ", (Map<String, ClientInfoStatus>) null);
      assertNotNull(sQLClientInfoException0);
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("KZ", sQLClientInfoException0.getMessage());
      assertEquals("java.sql.SQLClientInfoException: KZ", sQLClientInfoException0.toString());
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      
      HashMap<SQLWarning, MapDeserializer> hashMap0 = new HashMap<SQLWarning, MapDeserializer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(hashMap0);
      assertNull(bigDecimal0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      String string1 = "u8=*x/\\uBj3";
      Class<?> class3 = TypeUtils.getClassFromMapping(string1);
      assertNull(class3);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
