/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:58:56 GMT 2018
 */

package org.javathena.login;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.util.Calendar;
import javolution.util.FastComparator;
import javolution.util.FastMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromChar;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      Login login0 = new Login();
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      Login.logUnknownPackets(socket_data0);
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      // Undeclared exception!
      try { 
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Login login0 = new Login();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      login0.check_ip(inetAddress0);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Login login0 = new Login();
      login0.setAuth_max(2103);
      assertEquals(2103, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Login login0 = new Login();
      int int0 = login0.getAuth_num();
      assertEquals(0, int0);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Login.setPASSWORDENC(85);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initXML();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      login_Timer_interval_check_auth_sync0.run();
      login_Timer_interval_check_auth_sync0.run();
      assertEquals(0L, login_Timer_interval_check_auth_sync0.scheduledExecutionTime());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Login login0 = new Login();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("conf/subnet_athena.conf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Login login0 = new Login();
      login0.getLog_fp();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Login login0 = new Login();
      login0.setOut((PrintWriter) null);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Login login0 = new Login();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.utiles.ConfigurationManagement", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Login login0 = new Login();
      Login login1 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login1.new ConnectionListener();
      login_ConnectionListener0.close();
      login_ConnectionListener0.run();
      assertEquals(0, login1.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IDBManagementLogin iDBManagementLogin0 = Login.getDbManagemtType();
      assertNull(iDBManagementLogin0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Login.display_title();
      byte[] byteArray0 = new byte[0];
      Login.showTab(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      Login.showTab(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      
      ConfigurationManagement.setAccess_denynum(2);
      // Undeclared exception!
      try { 
        login0.parse_console("end");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      login0.save_config_in_log();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      int int0 = login0.getAuth_max();
      assertEquals(0, int0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Login.login_log((String) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Login.version((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      int int0 = login0.check_ipmask(967, "F>DLpO7,@3");
      assertEquals(0, int0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      login0.do_initTXT();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      int int0 = login0.parse_console("conf/subnet_athena.conf");
      assertEquals(0, int0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      PrintWriter printWriter0 = login0.getOut();
      assertNull(printWriter0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      
      FromClient fromClient0 = new FromClient();
      assertNotNull(fromClient0);
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertEquals(30000, FromClient.VERSION);
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromClient0);
      assertNotNull(socket_data0);
      assertEquals((-257), FromClient.PACKAGE_TO_SMALL);
      assertEquals(631, FromClient.NEW_CONNECTION_OF_CLIENT);
      assertEquals(10000, FromClient.CONNECTION_OF_CHAR_SERVER);
      assertEquals(31002, FromClient.CODING_KEY_ADMINISTRATION);
      assertEquals(512, FromClient.ALIVE_PACKET);
      assertEquals(31000, FromClient.CONNECTION_OF_LOGIN_ADMINISTRATION);
      assertEquals(475, FromClient.CODING_KEY);
      assertEquals(100, FromClient.CONNECTION_OF_CLIENT);
      assertEquals(30000, FromClient.VERSION);
      assertEquals(30002, FromClient.END_OF_CONNECTION);
      assertEquals(516, FromClient.ALIVE_PACKET_ENCRYPTED);
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isClosed());
      assertNull(socket_data0.getName());
      assertNull(socket_data0.getMd5key());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getMaintenance());
      assertNull(socket_data0.getType());
      assertEquals(0, socket_data0.getEof());
      assertEquals(0, (int)socket_data0.getAccount_id());
      
      // Undeclared exception!
      try { 
        login0.parse_admin((-1070), socket_data0, login0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = Login.getPASSWORDENC();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      Login.mmo_auth_syncXML();
      int[] intArray0 = login0.getServer_fd();
      assertNotNull(intArray0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      // Undeclared exception!
      try { 
        Login.mmo_auth_initXML();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  : Content is not allowed in prolog.
         //
         verifyException("com.thoughtworks.xstream.io.xml.DomDriver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      login0.do_initTXT();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      int int0 = login0.parse_console("help");
      assertEquals(0, int0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      ConfigurationManagement.setAccess_denynum(2);
      login0.do_initXML();
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      // Undeclared exception!
      try { 
        login0.parse_console("shutdown");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      login0.do_initTXT();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      
      int int0 = login0.parse_console("alive");
      assertEquals(0, int0);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      login0.do_initTXT();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      // Undeclared exception!
      try { 
        login0.parse_console("quit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      boolean boolean0 = login0.yesNoOnOffToBoolean("NO");
      assertFalse(boolean0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      assertNotNull(mockSocket0);
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      assertNotNull(socket_data0);
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getNew_());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getMaintenance());
      assertNull(socket_data0.getType());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getUsers());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getName());
      
      byte[] byteArray0 = new byte[2];
      mockSocket0.setSoLinger(true, 9962);
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-7);
      boolean boolean0 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-45), (byte) (-7)}, byteArray0);
      
      mockSocket0.setOOBInline(true);
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      
      socket_data0.setUsers((-307));
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getNew_());
      assertNull(socket_data0.getMd5key());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getMaintenance());
      assertNull(socket_data0.getType());
      assertEquals((-307), socket_data0.getUsers());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getName());
      
      byte[] byteArray1 = Login.getMd5Data(socket_data0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getMaintenance());
      assertNull(socket_data0.getType());
      assertEquals((-307), socket_data0.getUsers());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals(0, socket_data0.getEof());
      assertNull(socket_data0.getName());
      assertEquals("2345678910111213", socket_data0.getMd5key());
      assertNotSame(byteArray1, byteArray0);
      
      byte[] byteArray2 = Login.getMd5Data(socket_data0);
      assertNotNull(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertEquals("Socket[unconnected]", mockSocket0.toString());
      assertFalse(mockSocket0.isConnected());
      assertFalse(mockSocket0.isClosed());
      assertFalse(mockSocket0.isOutputShutdown());
      assertFalse(mockSocket0.isBound());
      assertFalse(mockSocket0.isInputShutdown());
      assertEquals(0, socket_data0.getListenPort());
      assertEquals(0, socket_data0.getNew_());
      assertEquals(0, (int)socket_data0.getAccount_id());
      assertEquals(0, socket_data0.getMaintenance());
      assertNull(socket_data0.getType());
      assertEquals((-307), socket_data0.getUsers());
      assertEquals(0L, socket_data0.scheduledExecutionTime());
      assertEquals("15161718192021222324252627", socket_data0.getMd5key());
      assertEquals(1, socket_data0.getEof());
      assertNull(socket_data0.getName());
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      MockInetSocketAddress mockInetSocketAddress0 = null;
      try {
        mockInetSocketAddress0 = new MockInetSocketAddress((-378778791));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-378778791
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initXML();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      assertEquals(2, login0.getPASSWORDENC());
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      boolean boolean0 = login0.yesNoOnOffToBoolean("YES");
      assertTrue(boolean0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      Auth_data auth_data0 = UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 'r');
      assertNotNull(auth_data0);
      assertEquals(2000000, (int)auth_data0.getAccount_id());
      assertEquals("-", auth_data0.getEmail());
      assertEquals(0L, auth_data0.getBan_until_time());
      assertNull(auth_data0.getLast_ip());
      assertEquals(0, auth_data0.getState());
      assertEquals(0, auth_data0.getLogin_id2());
      assertEquals((-1), auth_data0.getCharserver());
      assertEquals('r', auth_data0.getSex());
      assertEquals(0, auth_data0.getVersion());
      assertEquals(0, auth_data0.getAccount_reg2_num());
      assertEquals(0, auth_data0.getLogin_id1());
      assertEquals(0, auth_data0.getDelflag());
      assertEquals("conf/subnet_athena.conf", auth_data0.getUserid());
      assertEquals(0, auth_data0.getLogincount());
      assertFalse(auth_data0.isResetLogincoun());
      assertEquals("conf/subnet_athena.conf", auth_data0.getPass());
      assertEquals(0L, auth_data0.getConnect_until_time());
      assertEquals(0, auth_data0.getLevel());
      assertEquals(0, auth_data0.getClientType());
      
      Login.mmo_auth_syncTXT();
      login0.do_initXML();
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      login0.do_initTXT();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      // Undeclared exception!
      try { 
        login0.parse_console("exit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      Auth_data auth_data0 = UserManagement.addUserTXT("conf/subnet_athena.conf", "conf/subnet_athena.conf", "conf/subnet_athena.conf", 't');
      assertNotNull(auth_data0);
      assertEquals(0, auth_data0.getAccount_reg2_num());
      assertEquals(0, auth_data0.getVersion());
      assertEquals((-1), auth_data0.getCharserver());
      assertEquals("conf/subnet_athena.conf", auth_data0.getUserid());
      assertNull(auth_data0.getLast_ip());
      assertEquals(2000000, (int)auth_data0.getAccount_id());
      assertEquals("-", auth_data0.getEmail());
      assertEquals("conf/subnet_athena.conf", auth_data0.getPass());
      assertEquals('t', auth_data0.getSex());
      assertEquals(0L, auth_data0.getConnect_until_time());
      assertEquals(0, auth_data0.getClientType());
      assertEquals(0, auth_data0.getLogincount());
      assertEquals(0, auth_data0.getLogin_id1());
      assertEquals(0, auth_data0.getState());
      assertEquals(0, auth_data0.getLogin_id2());
      assertEquals(0, auth_data0.getLevel());
      assertEquals(0L, auth_data0.getBan_until_time());
      assertEquals(0, auth_data0.getDelflag());
      assertFalse(auth_data0.isResetLogincoun());
      
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        login0.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initXML();
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_allownum(50);
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initXML();
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      assertEquals(2, login0.getPASSWORDENC());
      
      int int0 = Calendar.NARROW_FORMAT;
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      ConfigurationManagement.setAccess_allownum(50);
      login0.do_final();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      ACO aCO0 = ACO.STRSIZE;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initXML();
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_max());
      assertEquals(0, login0.getAuth_num());
      
      Auth_data auth_data0 = UserManagement.addUserTXT("FINISHED.", "conf/subnet_athena.conf", "FINISHED.", 'j');
      assertNotNull(auth_data0);
      assertEquals(0, auth_data0.getState());
      assertEquals(0, auth_data0.getLogin_id2());
      assertFalse(auth_data0.isResetLogincoun());
      assertEquals(0, auth_data0.getLogin_id1());
      assertEquals(0, auth_data0.getAccount_reg2_num());
      assertEquals("conf/subnet_athena.conf", auth_data0.getPass());
      assertEquals("FINISHED.", auth_data0.getUserid());
      assertEquals(0, auth_data0.getVersion());
      assertEquals(2000000, (int)auth_data0.getAccount_id());
      assertEquals("-", auth_data0.getEmail());
      assertEquals((-1), auth_data0.getCharserver());
      assertEquals('j', auth_data0.getSex());
      assertNull(auth_data0.getLast_ip());
      assertEquals(0L, auth_data0.getBan_until_time());
      assertEquals(0, auth_data0.getDelflag());
      assertEquals(0, auth_data0.getClientType());
      assertEquals(0L, auth_data0.getConnect_until_time());
      assertEquals(0, auth_data0.getLevel());
      assertEquals(0, auth_data0.getLogincount());
      
      Login.mmo_auth_syncTXT();
      Login login1 = new Login();
      assertNotNull(login1);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      
      // Undeclared exception!
      try { 
        login1.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Login login0 = new Login();
      assertNotNull(login0);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertEquals(2, login0.getPASSWORDENC());
      assertEquals(0, login0.getAuth_num());
      assertEquals(0, login0.getAuth_max());
      
      Auth_data auth_data0 = UserManagement.addUserTXT("conf/subnet_athena.conf", ">*kc8ht8AB2FEW(O3>U", "@UJ?h1", 'R');
      assertNotNull(auth_data0);
      assertEquals('R', auth_data0.getSex());
      assertEquals(2000000, (int)auth_data0.getAccount_id());
      assertEquals(0L, auth_data0.getBan_until_time());
      assertEquals(0, auth_data0.getLogincount());
      assertEquals(0, auth_data0.getVersion());
      assertEquals(0L, auth_data0.getConnect_until_time());
      assertEquals(">*kc8ht8AB2FEW(O3>U", auth_data0.getPass());
      assertEquals(0, auth_data0.getLevel());
      assertEquals(0, auth_data0.getClientType());
      assertEquals(0, auth_data0.getDelflag());
      assertEquals("conf/subnet_athena.conf", auth_data0.getUserid());
      assertNull(auth_data0.getLast_ip());
      assertFalse(auth_data0.isResetLogincoun());
      assertEquals(0, auth_data0.getLogin_id1());
      assertEquals((-1), auth_data0.getCharserver());
      assertEquals(0, auth_data0.getState());
      assertEquals(0, auth_data0.getLogin_id2());
      assertEquals(0, auth_data0.getAccount_reg2_num());
      assertEquals("-", auth_data0.getEmail());
      
      Login.mmo_auth_syncTXT();
      Login login1 = new Login();
      assertNotNull(login1);
      assertEquals(2, Login.DEFAULT_PASSWORDENC);
      assertEquals(50, Login.AUTH_SAVE_FILE_DIVIDER);
      assertEquals(100000000, Login.END_ACCOUNT_NUM);
      assertEquals(10, Login.AUTH_BEFORE_SAVE_FILE);
      assertEquals(30, Login.MAX_SERVERS);
      assertEquals(2000000, Login.START_ACCOUNT_NUM);
      assertFalse(login1.equals((Object)login0));
      assertEquals(2, login1.getPASSWORDENC());
      assertEquals(0, login1.getAuth_num());
      assertEquals(0, login1.getAuth_max());
      
      FastMap<Integer, Auth_data> fastMap0 = FastMap.newInstance();
      assertNotNull(fastMap0);
      assertFalse(fastMap0.isShared());
      assertEquals(0, fastMap0.size());
      assertTrue(fastMap0.isEmpty());
      
      FastComparator<Integer> fastComparator0 = (FastComparator<Integer>) mock(FastComparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(fastComparator0).hashCodeOf(anyInt());
      FastMap<Integer, Auth_data> fastMap1 = fastMap0.setKeyComparator(fastComparator0);
      assertNotNull(fastMap1);
      assertFalse(fastMap0.isShared());
      assertEquals(0, fastMap0.size());
      assertTrue(fastMap0.isEmpty());
      assertTrue(fastMap1.isEmpty());
      assertFalse(fastMap1.isShared());
      assertEquals(0, fastMap1.size());
      assertSame(fastMap0, fastMap1);
      assertSame(fastMap1, fastMap0);
      
      UserManagement.setAuth_dats(fastMap1);
      assertFalse(fastMap0.isShared());
      assertEquals(0, fastMap0.size());
      assertTrue(fastMap0.isEmpty());
      assertTrue(fastMap1.isEmpty());
      assertFalse(fastMap1.isShared());
      assertEquals(0, fastMap1.size());
      assertSame(fastMap0, fastMap1);
      assertSame(fastMap1, fastMap0);
      
      // Undeclared exception!
      try { 
        login1.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
