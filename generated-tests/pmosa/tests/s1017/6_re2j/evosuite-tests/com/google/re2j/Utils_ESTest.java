/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 13:07:10 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Utils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utils_ESTest extends Utils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = Utils.runeToString(0);
      assertEquals("\u0000", string0);
      
      int int0 = Utils.emptyOpContext(0, (-1392));
      assertEquals(42, int0);
      
      int int1 = Utils.emptyOpContext(1, 0);
      assertEquals(32, int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Utils.isalnum((-759));
      Utils.runeToString((-1474));
      int[] intArray0 = new int[1];
      intArray0[0] = (-1474);
      int[] intArray1 = Utils.subarray(intArray0, (-1474), (-1474));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = Utils.emptyOpContext(528, 0);
      assertEquals(32, int0);
      
      byte[] byteArray0 = new byte[0];
      int int1 = Utils.indexOf(byteArray0, byteArray0, 0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = Utils.unhex(127);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Utils.isalnum((-568));
      boolean boolean1 = Utils.isWordRune((-1227));
      assertTrue(boolean1 == boolean0);
      
      int int0 = Utils.unhex((-568));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int[] intArray0 = Utils.stringToRunes("");
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      int int0 = Utils.indexOf(byteArray0, byteArray0, (byte)38);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Utils.isWordRune(1179);
      Utils.isalnum(1179);
      Utils.unhex(122);
      Utils.emptyOpContext((-983), 2732);
      int[] intArray0 = new int[8];
      intArray0[0] = 1179;
      intArray0[1] = 1179;
      intArray0[2] = 34;
      intArray0[3] = 122;
      intArray0[4] = (-1);
      intArray0[5] = 37;
      intArray0[6] = 37;
      intArray0[7] = (-2053);
      int[] intArray1 = Utils.subarray(intArray0, 37, 37);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = Utils.indexOf(byteArray0, byteArray0, (-7));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte)68;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-52);
      byteArray0[5] = (byte)28;
      Utils.indexOf(byteArray0, byteArray0, (byte)0);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)68;
      intArray0[4] = (int) (byte)28;
      // Undeclared exception!
      try { 
        Utils.subarray(intArray0, (-1196), (byte)28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1196
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int[] intArray0 = Utils.stringToRunes("");
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[1];
      int int0 = Utils.indexOf(byteArray0, byteArray0, (byte)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      int int0 = Utils.indexOf(byteArray0, byteArray0, (byte) (-126));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      Utils.indexOf(byteArray0, byteArray0, (-3874));
      Utils.isWordRune((byte)0);
      Utils.isalnum(0);
      Utils.stringToRunes("");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.insert((int) (byte)0, 0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, 0.0);
      StringBuilder stringBuilder3 = stringBuilder2.append('M');
      // Undeclared exception!
      try { 
        stringBuilder3.insert((int) (byte)1, (CharSequence) stringBuilder1, (int) (byte)0, (-3874));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 0, end -3874, s.length() 5
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Utils.stringToRunes("");
      int int0 = (-3378);
      Utils.isalnum((-3378));
      Utils.emptyOpContext(2279, 1440);
      Utils.isalnum(0);
      Utils.unhex(2279);
      Utils.isalnum(2279);
      Utils.isalnum((-2173));
      Utils.runeToString(0);
      Utils.stringToRunes("\u0000");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)0;
      Utils.indexOf(byteArray0, byteArray0, 3061);
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray0, 48, (byte)4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 2472;
      Utils.escapeRune(stringBuilder0, 2472);
      // Undeclared exception!
      try { 
        stringBuilder0.delete(256, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Utils.unhex(1);
      Utils.isalnum((-1));
      Utils.isWordRune(1);
      StringBuilder stringBuilder0 = new StringBuilder("RL7Gc");
      StringBuilder stringBuilder1 = stringBuilder0.append((double) (-1));
      Object object0 = new Object();
      StringBuilder stringBuilder2 = stringBuilder1.append(object0);
      StringBuilder stringBuilder3 = stringBuilder2.append(3396L);
      StringBuilder stringBuilder4 = stringBuilder3.insert(1, false);
      Utils.escapeRune(stringBuilder4, 29);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)7;
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)0;
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = '2';
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-82), charArray0, (-1), (-498));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -82
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Utils.stringToRunes("aFcjPR8N");
      int int0 = 2889;
      Utils.runeToString(2889);
      Utils.isWordRune(0);
      Utils.isWordRune(0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-108);
      byteArray0[0] = (byte) (-108);
      byte[] byteArray1 = Utils.subarray(byteArray0, 0, 0);
      Utils.indexOf(byteArray0, byteArray1, (byte) (-108));
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utils.isalnum(991);
      int int0 = (-998);
      Utils.emptyOpContext(991, (-998));
      Utils.unhex(42);
      Utils.unhex(4);
      Utils.runeToString((-1344));
      StringBuilder stringBuilder0 = new StringBuilder("\uFAC0");
      char[] charArray0 = new char[1];
      stringBuilder0.reverse();
      charArray0[0] = '$';
      // Undeclared exception!
      try { 
        stringBuilder0.insert(42, charArray0, 4998, (-5555));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 42
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-20);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-20);
      int int0 = Utils.indexOf(byteArray0, byteArray1, (byte)0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = Utils.isalnum(3886);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte) (-56);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-53);
      byteArray1[3] = (byte) (-56);
      byteArray1[4] = (byte)37;
      byteArray1[5] = (byte) (-53);
      byteArray1[6] = (byte) (-53);
      byteArray1[7] = (byte)41;
      int int0 = Utils.indexOf(byteArray0, byteArray1, (byte) (-56));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-92);
      Utils.indexOf(byteArray0, byteArray0, 870);
      Utils.isWordRune(90);
      Utils.isalnum(870);
      Utils.stringToRunes("");
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.insert(870, 57);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 870
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-2);
      byteArray0[4] = (byte) (-2);
      byte[] byteArray1 = new byte[3];
      int int0 = Utils.indexOf(byteArray0, byteArray1, (byte) (-2));
      int int1 = Utils.unhex((byte) (-2));
      assertTrue(int1 == int0);
      
      Utils.subarray(byteArray0, (byte)0, (byte)0);
      String string0 = Utils.runeToString(113);
      assertEquals("q", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = Utils.EMPTY_INTS;
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)34;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Lycian");
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuilder0.append(stringBuffer0);
      int int0 = Utils.emptyOpContext(51, 51);
      assertEquals(32, int0);
      
      Utils.indexOf(byteArray0, byteArray0, 3886);
      boolean boolean0 = Utils.isalnum(97);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = Utils.stringToRunes("Lycian");
      assertArrayEquals(new int[] {76, 121, 99, 105, 97, 110}, intArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-53);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)37;
      byteArray1[2] = (byte) (-56);
      int int0 = Utils.indexOf(byteArray0, byteArray1, (-989));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Utils.stringToRunes("Lycian");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)82;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Lycian");
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuilder0.append(stringBuffer0);
      Utils.escapeRune(stringBuilder0, 4);
      assertEquals("Lycian\\x04", stringBuilder0.toString());
      
      Utils.emptyOpContext((byte)0, 158);
      Utils.isalnum((byte)82);
      boolean boolean0 = Utils.isalnum((-514));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Lycian");
      Utils.escapeRune(stringBuilder0, 4);
      Utils.emptyOpContext((byte)0, 158);
      Utils.indexOf(byteArray0, byteArray0, (byte)0);
      Utils.escapeRune(stringBuilder0, 10);
      assertEquals("Lycian\\x04\\n", stringBuilder0.toString());
      
      boolean boolean0 = Utils.isalnum((-4573));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)0;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Lycian");
      int int0 = Utils.emptyOpContext((byte)0, 158);
      assertEquals(32, int0);
      
      int int1 = Utils.emptyOpContext(7212, 122);
      assertEquals(16, int1);
      
      int int2 = Utils.indexOf(byteArray0, byteArray0, 122);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)0;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Ly-i,");
      Utils.escapeRune(stringBuilder0, 2147);
      int int0 = Utils.emptyOpContext((byte)0, (byte)0);
      assertEquals(32, int0);
      
      int int1 = Utils.indexOf(byteArray0, byteArray0, (-152));
      assertEquals(0, int1);
      
      Utils.escapeRune(stringBuilder0, (-4143));
      boolean boolean0 = Utils.isalnum(2224);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Lin");
      StringBuilder stringBuilder1 = new StringBuilder(stringBuilder0);
      stringBuilder0.append((int) (byte)0);
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append((Object) "~");
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint((byte)0);
      stringBuilder2.chars();
      stringBuilder2.append(stringBuffer0);
      Utils.emptyOpContext(2571, 51);
      Utils.emptyOpContext(737, 51);
      Utils.indexOf(byteArray0, byteArray0, (-1));
      Utils.escapeRune(stringBuilder1, 13);
      assertEquals("Lin\u0000~\\r", stringBuilder1.toString());
      
      boolean boolean0 = Utils.isalnum(2571);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Lycian");
      Utils.escapeRune(stringBuilder0, 4);
      Utils.emptyOpContext(4, 4);
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder0);
      stringBuilder0.append(stringBuffer0);
      int int0 = Utils.EMPTY_BEGIN_TEXT;
      Utils.isalnum(57);
      Utils.isWordRune(256);
      Utils.runeToString(9141);
      int[] intArray0 = Utils.stringToRunes("Lycian");
      Utils.stringToRunes("\u23B5");
      // Undeclared exception!
      try { 
        Utils.subarray(intArray0, (-1277), 57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1277
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Lycian");
      stringBuilder0.append((CharSequence) "Lycian");
      Utils.escapeRune(stringBuilder0, 4);
      Utils.emptyOpContext((byte)0, 168);
      Utils.indexOf(byteArray0, byteArray0, (byte)0);
      int int0 = Utils.EMPTY_ALL;
      Utils.escapeRune(stringBuilder0, 9);
      assertEquals("LycianLycian\\x04\\t", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)0;
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("|)");
      Utils.escapeRune(stringBuilder0, 7);
      StringBuilder stringBuilder2 = stringBuilder0.delete((byte)0, (byte)0);
      Utils.indexOf(byteArray0, byteArray0, 8);
      Utils.escapeRune(stringBuilder1, 29);
      Utils.isalnum(29);
      StringBuilder stringBuilder3 = stringBuilder2.append("|)");
      Utils.escapeRune(stringBuilder3, 8);
      assertEquals("|)\\x07\\x1d|)\\b", stringBuilder3.toString());
      assertEquals("|)\\x07\\x1d|)\\b", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Utils.escapeRune(stringBuilder0, 14);
      Utils.emptyOpContext(14, 14);
      Utils.escapeRune(stringBuilder0, 29);
      Utils.isalnum(14);
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      stringBuilder1.append("");
      Utils.escapeRune(stringBuilder1, 12);
      assertEquals("\\x0e\\x1dfalse\\f", stringBuilder1.toString());
      assertEquals("\\x0e\\x1dfalse\\f", stringBuilder0.toString());
  }
}
