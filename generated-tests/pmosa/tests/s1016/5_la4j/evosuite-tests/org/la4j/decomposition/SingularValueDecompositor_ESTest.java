/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 09:22:06 GMT 2018
 */

package org.la4j.decomposition;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.decomposition.SingularValueDecompositor;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SingularValueDecompositor_ESTest extends SingularValueDecompositor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(rowMajorSparseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1, 1);
      Locale locale0 = Locale.ENGLISH;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      sparseMatrix0.toCSV((NumberFormat) decimalFormat0);
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      ColumnMajorSparseMatrix.diagonal(1, 330.87610000000006);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 8);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(denseMatrix0, sparseMatrix0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.decompose();
      singularValueDecompositor0.applicableTo(matrix0);
      singularValueDecompositor0.decompose();
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      ColumnMajorSparseMatrix.diagonal(1, 1);
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 8);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      Matrix[] matrixArray1 = singularValueDecompositor0.decompose();
      assertNotSame(matrixArray1, matrixArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(3, 18.19);
      ooPlaceMatricesMultiplication0.partiallyApply(rowMajorSparseMatrix0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-673.2212043047366), (-673.2212043047366), (-673.2212043047366), (-2.6457513110645907), 18.19).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix1 = matrix0.transform(matrixFunction0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      singularValueDecompositor0.decompose();
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(matrix1);
      singularValueDecompositor1.decompose();
      singularValueDecompositor1.decompose();
      Random.setNextRandom(716);
      boolean boolean0 = singularValueDecompositor1.applicableTo(rowMajorSparseMatrix0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      ooPlaceMatricesMultiplication0.partiallyApply(rowMajorSparseMatrix0);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(17.49977597442112, 2.0, (double)3, (double)3, (double)3).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = rowMajorSparseMatrix0.transform(matrixFunction0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      assertNotNull(matrixArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      ooPlaceMatricesMultiplication0.partiallyApply(rowMajorSparseMatrix0);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = rowMajorSparseMatrix0.transform(matrixFunction0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      Matrix[] matrixArray1 = singularValueDecompositor0.decompose();
      assertNotSame(matrixArray1, matrixArray0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      ooPlaceMatricesMultiplication0.partiallyApply(rowMajorSparseMatrix0);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.840165521701213, (-2.6457513110645907), (double)3, (-2.6457513110645907), (double)3).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = rowMajorSparseMatrix0.transform(matrixFunction0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      Matrix[] matrixArray1 = singularValueDecompositor0.decompose();
      assertNotSame(matrixArray1, matrixArray0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.78597168734, (-2.6457513110645907), (double)3, (-2.6457513110645907), (double)3).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = rowMajorSparseMatrix0.transform(matrixFunction0);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(matrix0);
      singularValueDecompositor0.decompose();
      Random.setNextRandom(3);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(10);
      DenseMatrix denseMatrix1 = DenseMatrix.unit(8, 1);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      Matrix[] matrixArray0 = singularValueDecompositor0.decompose();
      SingularValueDecompositor singularValueDecompositor1 = new SingularValueDecompositor(denseMatrix1);
      singularValueDecompositor1.decompose();
      Matrix[] matrixArray1 = singularValueDecompositor1.decompose();
      assertNotSame(matrixArray1, matrixArray0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      int int0 = 22;
      DenseMatrix denseMatrix0 = DenseMatrix.unit(22, 22);
      SingularValueDecompositor singularValueDecompositor0 = new SingularValueDecompositor(denseMatrix0);
      singularValueDecompositor0.decompose();
      // Undeclared exception!
      try { 
        singularValueDecompositor0.fail("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 
         //
         verifyException("org.la4j.decomposition.AbstractDecompositor", e);
      }
  }
}
