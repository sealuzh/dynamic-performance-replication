/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 08:44:09 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      cCSMatrix0.multiplyByItsTranspose();
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(1202);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1202
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.subtract(2000.1070993);
      cCSMatrix0.setAll(772.21026272742);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-18);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt((-2870), (-167), matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -167
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = (-3114);
      double double0 = 2000.1070993;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.randomSymmetric((-2102), 186.35690779418, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2102x-2102
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2180L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(3, 1, matrixFunction0);
      assertEquals(0.2, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2024.2405739);
      doubleArray1[3] = 1599.2624632;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-2024.2405739);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-2024.2405739);
      doubleArray3[2] = 1599.2624632;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 926.0;
      doubleArray4[1] = (-2024.2405739);
      doubleArray4[2] = 1599.2624632;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (-2024.2405739);
      doubleArray4[5] = 1599.2624632;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 1599.2624632;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 828.87602;
      doubleArray5[4] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = 828.87602;
      doubleArray6[1] = 1599.2624632;
      doubleArray6[2] = 0.0;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceTopLeft(224, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(0);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.random(0, 0, 0.0, (Random) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      cCSMatrix0.trace();
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(1, 1, doubleArray0);
      cCSMatrix0.iteratorOfColumn(0);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(283, 283, 283);
      int[] intArray0 = new int[6];
      intArray0[1] = 283;
      intArray0[2] = 0;
      intArray0[3] = 283;
      intArray0[4] = 283;
      cCSMatrix0.select(intArray0, intArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(intArray0[3], vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(4, 4, 4);
      // Undeclared exception!
      try { 
        CCSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1655;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1655);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      int int1 = 0;
      int int2 = 1953;
      CCSMatrix cCSMatrix2 = CCSMatrix.diagonal(int2, int1);
      CCSMatrix cCSMatrix3 = CCSMatrix.block(cCSMatrix0, cCSMatrix2, cCSMatrix0, cCSMatrix2);
      int int3 = (-641);
      int int4 = 1199;
      double double0 = Double.POSITIVE_INFINITY;
      cCSMatrix1.getOrElse(int3, int4, double0);
      int int5 = 1967;
      double double1 = 99.05328075891;
      cCSMatrix1.set(int5, int2, double1);
      SparseMatrix sparseMatrix0 = cCSMatrix1.toSparseMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix1.transformColumn(int1, vectorFunction0);
      CCSMatrix.block(cCSMatrix3, sparseMatrix0, cCSMatrix2, matrix0);
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateColumn(int0, vectorFunction1);
      cCSMatrix3.min();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll(4);
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse(0, 0, 187.5633404);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(283, 283);
      int[] intArray0 = new int[6];
      intArray0[0] = 283;
      intArray0[1] = 283;
      intArray0[2] = 0;
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      intArray0[3] = 283;
      intArray0[4] = 283;
      intArray0[5] = 283;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '283' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      org.evosuite.runtime.Random.setNextRandom(250);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(1, vectorProcedure0);
      assertEquals(0.2, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4, 940);
      int int0 = 0;
      SparseMatrix.identity(4);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(0, vectorProcedure0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      double double0 = cCSMatrix0.minInColumn(1632);
      long long0 = (-1227L);
      MockRandom mockRandom0 = new MockRandom(long0);
      int int1 = 331;
      CCSMatrix.random(int1, int0, double0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2180L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      cCSMatrix0.sum();
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      cCSMatrix0.mkString(numberFormat0, "WCNAWi-2DL=", "WCNAWi-2DL=");
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket(" yvH)Fw{r;J$yO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.subtract(2000.1070993);
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(283, (-961.246));
      cCSMatrix0.toBinary();
      int[] intArray0 = new int[3];
      intArray0[0] = 283;
      intArray0[1] = 17;
      intArray0[2] = 283;
      org.evosuite.runtime.Random.setNextRandom(32);
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(8, 213);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 213;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.random((-432), 1717986918, (-12.53), (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(8, 0.0, (Random) mockRandom0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 8;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      byte byte0 = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 604;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray((byte)0, 130, doubleArray0);
      cCSMatrix0.max();
      // Undeclared exception!
      try { 
        cCSMatrix1.eachNonZeroInColumn(3723, (VectorProcedure) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3723
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 940;
      CCSMatrix cCSMatrix0 = new CCSMatrix(940, 940, 940);
      cCSMatrix0.setAll(4);
      double double0 = 187.5633404;
      cCSMatrix0.getOrElse(int0, int0, double0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(2);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      cCSMatrix0.setAll(2);
      assertEquals(4, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(639, 639);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformColumn(639, vectorFunction0);
      int int0 = 0;
      cCSMatrix0.maxInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.blank();
      cCSMatrix0.getRow(4);
      cCSMatrix0.setAll(4);
      matrix0.setAll((-2806.3353));
      cCSMatrix0.copyOfShape(2786, 2786);
      CCSMatrix.diagonal(3693, (-1.0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1063, 9, 2752);
      cCSMatrix0.min();
      cCSMatrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.min();
      int[] intArray0 = new int[2];
      intArray0[0] = 13;
      intArray0[1] = 2;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      MockRandom mockRandom0 = new MockRandom(1213L);
      mockRandom0.ints(37L);
      // Undeclared exception!
      try { 
        CCSMatrix.random(1, 1, (-2024.4266623359), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(8);
      assertEquals(0.125, cCSMatrix0.density(), 0.01);
      
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cCSMatrix0.foldNonZero(matrixAccumulator0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2183;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[4] = (-2100799219);
      intArray0[6] = 0;
      intArray0[7] = 8;
      intArray0[8] = 8;
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.removeLastColumn();
      assertEquals(0.125, cCSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int int0 = (-3114);
      cCSMatrix0.subtract(2000.1070993);
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn((-3114));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3114
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(1, 1, 1);
      // Undeclared exception!
      try { 
        cCSMatrix1.transform((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.blank();
      cCSMatrix0.getRow(1970);
      cCSMatrix0.setAll(169.5856886);
      Integer integer0 = new Integer(1970);
      org.evosuite.runtime.Random.setNextRandom(120);
      byte[] byteArray0 = cCSMatrix0.toBinary();
      CCSMatrix cCSMatrix1 = CCSMatrix.fromBinary(byteArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix1.updateAt(1970, (-4170), matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4170
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.blank();
      Matrix matrix1 = matrix0.copy();
      cCSMatrix0.getRow(4);
      cCSMatrix0.setAll(4);
      int int0 = 0;
      cCSMatrix0.columnMajorIterator();
      Matrix matrix2 = matrix1.blankOfRows(0);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix2, matrix1);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(3, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.blank();
      cCSMatrix0.getRow(4);
      cCSMatrix0.setAll(4);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(4, 4, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(3, vectorProcedure0);
      org.evosuite.runtime.Random.setNextRandom(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(487, (-3925), matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3925
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = new CCSMatrix(3, 3, 3);
      cCSMatrix0.toCSV();
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(1, (VectorProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.setColumn(1, (double) 1);
      cCSMatrix0.maxInColumn(0);
      // Undeclared exception!
      try { 
        CCSMatrix.zero((-4050), 0, (-4050));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -4050x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.removeLastColumn();
      int int0 = 272;
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(272);
      cCSMatrix1.removeLastColumn();
      cCSMatrix0.minInColumn(int0);
      cCSMatrix1.toBinary();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2180L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2674.6079402804885).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(3, 1, matrixFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This matrix can't grow up.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.shuffle();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertTrue(decimalFormat0.isGroupingUsed());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer(2);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1953, 0);
      cCSMatrix0.shuffle();
      int int0 = 1967;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      int int1 = (-472);
      double double0 = (-1463.496171708102);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(int1, int0, double0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(3, vectorProcedure0);
      org.evosuite.runtime.Random.setNextRandom(3);
      cCSMatrix0.minInColumn(3);
      cCSMatrix0.toBinary();
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn((-876), vectorProcedure1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -876
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(2, vectorProcedure0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      double double0 = cCSMatrix0.minInColumn(1);
      assertEquals(0.0, double0, 0.01);
      
      cCSMatrix0.toBinary();
      assertEquals(0.2, cCSMatrix0.max(), 0.01);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1931, 0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix0.minInColumn(0);
      cCSMatrix0.eachInColumn(1925, (VectorProcedure) null);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = cCSMatrix0.blankOfRows(0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(matrix0, matrix0, cCSMatrix0, cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix1.removeLastColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow(1230, vectorAccumulator0);
      cCSMatrix0.max();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 48;
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceTopLeft(Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2180L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      double[][] doubleArray0 = new double[0][2];
      Matrix.from2DArray(doubleArray0);
      cCSMatrix0.getRow(1);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 29
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1228);
      cCSMatrix0.blankOfRows(1228);
      cCSMatrix0.toBinary();
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1228;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 1228;
      doubleArray2[1] = (double) 1228;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (double) 1228;
      doubleArray4[1] = (double) 1228;
      doubleArray4[2] = (double) 1228;
      doubleArray4[3] = (double) 1228;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (double) 1228;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (double) 1228;
      doubleArray6[1] = 1219.0;
      doubleArray6[2] = (double) 1228;
      doubleArray6[3] = (double) 1228;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = 1219.0;
      doubleArray7[1] = (double) 1228;
      doubleArray0[6] = doubleArray7;
      Matrix.from2DArray(doubleArray0);
      cCSMatrix0.getRow(1228);
      cCSMatrix0.diagonalProduct();
      cCSMatrix0.minInColumn(1228);
      cCSMatrix0.max();
      int int0 = 1204;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(int0, vectorProcedure0);
      double double0 = 138.747264;
      cCSMatrix0.setAll(double0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (-183.16313844831336);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 3;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 3;
      doubleArray2[4] = (double) 3;
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 3;
      doubleArray3[1] = (-183.16313844831336);
      doubleArray3[2] = (double) 3;
      doubleArray0[3] = doubleArray3;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(0, 1, (MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      cCSMatrix0.nonZeroIteratorOfRow(2);
      cCSMatrix0.max();
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1228);
      Matrix matrix0 = cCSMatrix0.blankOfRows(1228);
      cCSMatrix0.toBinary();
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1228;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 1228;
      doubleArray2[1] = (double) 1228;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      Matrix.from2DArray(doubleArray0);
      matrix0.getRow(1046);
      cCSMatrix0.diagonalProduct();
      matrix0.minInColumn(1222);
      cCSMatrix0.max();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(1046, vectorProcedure0);
      CCSMatrix cCSMatrix1 = new CCSMatrix(0, (-1622), (-3));
      double double0 = Double.NEGATIVE_INFINITY;
      cCSMatrix1.setAll(double0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom((-1699L));
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(2, vectorProcedure0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow((-1), vectorAccumulator0);
      cCSMatrix0.max();
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceTopLeft((-1), 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1][0..14].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom((-1699L));
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow((-1), vectorAccumulator0);
      cCSMatrix0.max();
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        cCSMatrix0.sliceTopLeft((-1), 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [0..-1][0..14].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 0;
      int int1 = 1946;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1946, 0);
      cCSMatrix0.nonZeroIteratorOfColumn(0);
      Matrix matrix0 = Matrix.from1DArray(1946, 0, (double[]) null);
      int int2 = 0;
      int int3 = 37;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-111);
      CCSMatrix.fromBinary(byteArray0);
      cCSMatrix0.insert(matrix0, int1, int1, int0, int2, int3, int0);
      Matrix matrix1 = cCSMatrix0.shuffle();
      CCSMatrix.block(matrix1, matrix1, matrix1, matrix1);
      MockRandom mockRandom0 = new MockRandom();
      int int4 = (-1095);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int4, int1, int0);
      int int5 = (-2220);
      cCSMatrix1.divide(int4);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateAt(int1, int5, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = cCSMatrix0.blankOfRows(0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(matrix0, matrix0, cCSMatrix0, cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix1, cCSMatrix0, matrix0, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double[][] doubleArray0 = new double[3][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 100.0;
      doubleArray3[1] = (double) 2190L;
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = (double) 1;
      doubleArray3[4] = (double) 1;
      doubleArray0[2] = doubleArray3;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.min();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 13;
      intArray0[2] = 13;
      intArray0[3] = 1;
      intArray0[4] = 13;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '13' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      double double0 = cCSMatrix0.maxInColumn(2);
      assertEquals(0.2, double0, 0.01);
      
      double double1 = cCSMatrix0.min();
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 7;
      DenseVector denseVector0 = DenseVector.fromMap(hashMap0, 7);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      double[][] doubleArray0 = new double[5][7];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = cCSMatrix0.blankOfRows(0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double[][] doubleArray0 = new double[10][7];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.min();
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.transform(matrixFunction0);
      assertEquals(0, cCSMatrix1.cardinality());
      
      int[] intArray1 = new int[7];
      intArray1[0] = 3;
      intArray1[1] = 3;
      intArray1[2] = 3;
      intArray1[3] = 3;
      intArray1[4] = 3;
      cCSMatrix0.iterator();
      intArray1[5] = 3;
      intArray1[6] = 3;
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix0.select(intArray0, intArray1);
      assertEquals(10, cCSMatrix0.rows());
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
      assertEquals(0.0, cCSMatrix2.density(), 0.01);
      assertEquals(7, cCSMatrix2.columns());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      double double0 = cCSMatrix0.maxInColumn(0);
      assertEquals(1.0, double0, 0.01);
      
      cCSMatrix0.iteratorOrNonZeroColumns();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldRow(0, vectorAccumulator0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Matrix matrix0 = cCSMatrix0.select(intArray0, intArray0);
      assertEquals(1.0, matrix0.max(), 0.01);
      assertEquals(3, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(5);
      double double0 = cCSMatrix0.maxInColumn(0);
      assertEquals(1.0, double0, 0.01);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfRows(0);
      assertEquals(0, cCSMatrix1.cardinality());
      
      cCSMatrix0.toBinary();
      assertEquals(5, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1931, 0);
      Matrix matrix0 = cCSMatrix0.copyOfRows(0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(1931, 1931, 0);
      cCSMatrix2.divide(1931);
      CCSMatrix.identity(13);
      CCSMatrix.block(cCSMatrix1, cCSMatrix2, cCSMatrix2, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2716, 2716, 32);
      cCSMatrix0.toRowMajorSparseMatrix();
      Matrix matrix0 = cCSMatrix0.copyOfShape(2, 4);
      assertEquals(2, matrix0.rows());
      assertEquals(4, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      cCSMatrix0.toRowVector();
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      matrix0.setAll(2898.7995895329);
      matrix0.euclideanNorm();
      // Undeclared exception!
      try { 
        Matrix.block(cCSMatrix0, cCSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 2;
      Integer integer0 = new Integer(2);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      cCSMatrix0.trace();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      DenseVector denseVector0 = DenseVector.fromCSV("");
      // Undeclared exception!
      try { 
        ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.dense.BasicVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 1;
      int int1 = 3;
      double[][] doubleArray0 = new double[4][6];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (-183.16313844831336);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 3;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 3;
      doubleArray2[4] = (double) 3;
      doubleArray0[2] = doubleArray2;
      doubleArray0[3] = doubleArray2;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.updateAt(1, 1, (MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(226);
      cCSMatrix1.sum();
      DecimalFormat decimalFormat0 = new DecimalFormat();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double[][] doubleArray0 = new double[10][7];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      double double0 = cCSMatrix0.maxInColumn(2);
      assertEquals(0.0, double0, 0.01);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      String string0 = cCSMatrix1.toCSV();
      assertEquals("0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n", string0);
      
      cCSMatrix1.toBinary();
      assertEquals(7, cCSMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(9, 9);
      cCSMatrix0.rank();
      cCSMatrix0.getColumn(9);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = 3103;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3103);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(3103);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.SMART;
      cCSMatrix0.withSolver(linearAlgebra_SolverFactory0);
      double double0 = cCSMatrix0.product();
      cCSMatrix0.toBinary();
      int int1 = 376;
      int int2 = 1;
      int int3 = 5;
      int int4 = (-191);
      cCSMatrix0.slice(int2, int1, int3, int4);
      cCSMatrix1.getOrElse(int1, int0, double0);
      int int5 = 58;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(int5, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 12;
      doubleArray2[1] = (double) 12;
      doubleArray2[2] = (double) 12;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 12;
      doubleArray3[1] = (double) 12;
      doubleArray3[2] = (-3231.694182671653);
      doubleArray3[3] = (double) 12;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (double) 12;
      doubleArray4[1] = (-3231.694182671653);
      doubleArray4[2] = (double) 12;
      doubleArray4[3] = (-3231.694182671653);
      doubleArray4[4] = (-3231.694182671653);
      doubleArray4[5] = (double) 12;
      doubleArray4[6] = (double) 12;
      doubleArray0[3] = doubleArray4;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1931, 0);
      Matrix matrix0 = cCSMatrix0.copyOfRows(0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      int int1 = 1235;
      int int2 = 6;
      matrix0.insert((Matrix) cCSMatrix0, int0, int1, int2, int1);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      matrix0.shuffle();
      DecimalFormat decimalFormat0 = new DecimalFormat();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      double[][] doubleArray0 = new double[10][7];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.maxInColumn(2);
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix1.toCSV();
      cCSMatrix1.copyOfColumns(2);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix1.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      cCSMatrix0.maxInColumn(0);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1931, 5);
      Matrix matrix0 = cCSMatrix0.copyOfRows(5);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.eachInColumn((-1471), vectorProcedure0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2579.91419285624;
      doubleArray1[1] = 2980.93;
      doubleArray1[2] = 2460.543175;
      doubleArray1[3] = 2200.706186;
      doubleArray1[4] = 2588.7125627;
      doubleArray1[5] = 0.2;
      doubleArray1[6] = 2.0;
      doubleArray1[7] = 0.6;
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals((-1.0), cCSMatrix0.min(), 0.01);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.iteratorOfColumn(1);
      assertEquals(0, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2180L);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      mockRandom0.longs((long) 1);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cCSMatrix0.toRowMajorSparseMatrix();
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.removeFirstRow();
      DenseMatrix denseMatrix0 = DenseMatrix.random(1902, 3, mockRandom0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(denseMatrix0, rowMajorSparseMatrix0, denseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      double[][] doubleArray0 = new double[10][7];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.maxInColumn(2);
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix.from2DArray(doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      cCSMatrix0.iteratorOfColumn(2);
      assertEquals(10, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2579.91419285624;
      doubleArray1[1] = 2980.93;
      doubleArray1[2] = 2460.543175;
      doubleArray1[3] = 2200.706186;
      doubleArray1[4] = 2588.7125627;
      doubleArray1[5] = 0.2;
      doubleArray1[6] = 2.0;
      doubleArray1[7] = 0.6;
      doubleArray1[8] = (-1.0);
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(2579.91419285624, 2579.91419285624, 186.538816464, 1.0, 0.6).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.iteratorOfColumn(1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(1, 3, (double) 1, (Random) mockRandom0);
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 3;
      doubleArray1[5] = (-1959.16669);
      doubleArray1[6] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 2;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = 1557.15;
      doubleArray2[7] = (double) 2;
      doubleArray2[8] = (double) 2;
      doubleArray0[1] = doubleArray2;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      cCSMatrix0.getRow((-2675));
      cCSMatrix0.minInColumn(1);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, matrix0, matrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1214;
      int[] intArray0 = new int[9];
      intArray0[0] = 1214;
      intArray0[1] = 1214;
      intArray0[2] = 1214;
      intArray0[3] = (-1372);
      intArray0[4] = (-1431655764);
      intArray0[6] = 1214;
      intArray0[7] = 1214;
      intArray0[8] = 1214;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(4, vectorFunction0);
      cCSMatrix0.max();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1214).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt((-1132), 4, matrixFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroAt(1214, 1214);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1214
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1931, 0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      int int0 = 4;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(0, vectorFunction0);
      cCSMatrix0.max();
      int int1 = (-1132);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateAt(0, 3739, matrixFunction0);
      cCSMatrix0.nonZeroAt(int1, int0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1931, 0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      int int0 = 4;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(307.26638750737, 1.0, 1972.7558161598815, (double)4, 1972.7558161598815).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(0, vectorFunction0);
      cCSMatrix0.max();
      int int1 = 4;
      int int2 = (-212);
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(int1, int1, int2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix2.update(matrixFunction0);
      cCSMatrix2.iteratorOfColumn(int0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1931, 0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1931, (double)0, Double.POSITIVE_INFINITY, (double)0, (double)0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(0, vectorFunction0);
      cCSMatrix0.max();
      cCSMatrix0.minInColumn(0);
      cCSMatrix1.maxInColumn((-2691));
      int int0 = 825;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(int0, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2053, 2053);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(539, vectorFunction0);
      MockRandom mockRandom0 = new MockRandom(3050L);
      CCSMatrix cCSMatrix2 = CCSMatrix.random(539, 3420, 0.003, (Random) mockRandom0);
      cCSMatrix2.max();
      int int0 = (-1132);
      int int1 = 1906;
      cCSMatrix1.updateAt(1906, (-429), (MatrixFunction) null);
      cCSMatrix1.nonZeroAt(int0, int1);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.product();
      cCSMatrix0.maxInColumn(0);
      cCSMatrix0.nonZeroAt(597, 2);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(2);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, matrix0, matrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      cCSMatrix0.multiplyByItsTranspose();
      cCSMatrix0.setColumn(1, (double) 1);
      cCSMatrix0.maxInColumn(0);
      cCSMatrix0.columnMajorIterator();
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = (double) 1;
      doubleArray0[1] = doubleArray1;
      cCSMatrix0.maxInColumn(1);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }
}
