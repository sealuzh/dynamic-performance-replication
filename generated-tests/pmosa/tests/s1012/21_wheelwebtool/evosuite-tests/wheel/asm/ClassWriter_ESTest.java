/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 23:21:00 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassAdapter;
import wheel.asm.ClassReader;
import wheel.asm.ClassVisitor;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.Frame;
import wheel.asm.Item;
import wheel.asm.Label;
import wheel.asm.MethodVisitor;
import wheel.asm.MethodWriter;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-6));
      Item item0 = classWriter0.key;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[0];
      classWriter0.visit(0, 0, "urC$#Sx? -@\"O^!$jz", "{vxFCAfRL", "urC$#Sx? -@\"O^!$jz", stringArray0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        classWriter0.visitField(0, "urC$#Sx? -@\"O^!$jz", "", "", mockThaiBuddhistDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@62dcad6e
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1573, 821);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-546));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      classWriter0.visit((-546), (-546), "N!hBzAE7uaRLy", "N!hBzAE7uaRLy", (String) null, (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-6));
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("En=Y9je:yB", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.newClass("");
      String string0 = ")+{!hdG_i";
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass(")+{!hdG_i", ")+{!hdG_i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class ')+{!hdG_i.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-451));
      classWriter0.index = (-451);
      String[] stringArray0 = new String[0];
      classWriter0.visit(742, 15, "", "", (String) null, stringArray0);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-451), (-451));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(169);
      // Undeclared exception!
      try { 
        classWriter0.newMethod("The wildcard must not be null", "The wildcard must not be null", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-136));
      classWriter0.newNameType("#1Fi.0>g/BHbpc2v", "#1Fi.0>g/BHbpc2v");
      String[] stringArray0 = new String[8];
      classWriter0.newMethod("EnclosingMethod", "#1Fi.0>g/BHbpc2v", "", true);
      stringArray0[0] = "#1Fi.0>g/BHbpc2v";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "#1Fi.0>g/BHbpc2v";
      stringArray0[4] = "#1Fi.0>g/BHbpc2v";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "<init>";
      MethodVisitor methodVisitor0 = classWriter0.visitMethod((-136), "#1Fi.0>g/BHbpc2v", "#1Fi.0>g/BHbpc2v", "", stringArray0);
      assertNotNull(methodVisitor0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!{gmEF5.>vO|pG@y}");
      ClassWriter classWriter0 = new ClassWriter((-2));
      classWriter0.toByteArray();
      int int0 = classWriter0.addType("!{gmEF5.>vO|pG@y}");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-451);
      ClassWriter classWriter0 = new ClassWriter((-451));
      classWriter0.index = (-451);
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        classWriter0.visit(742, 15, "", "", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-6));
      int int0 = Type.BOOLEAN;
      classWriter0.visitInnerClass((String) null, (String) null, "", 1);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.CanReadFileFilter");
      classWriter0.addUninitializedType("org.apache.commons.io.filefilter.CanReadFileFilter", 0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4461);
      classWriter0.toByteArray();
      classWriter0.newConst("t9npde!ro^/vV8<");
      classWriter0.visitInnerClass("t9npde!ro^/vV8<", "keCz_tq^)", "t9npde!ro^/vV8<", 99);
      classWriter0.newMethodItem("", "t9npde!ro^/vV8<", "2}{$c", false);
      classWriter0.newInteger(4461);
      classWriter0.addType("^v9Xr,d4");
      classWriter0.newField("Wt]:,=8+EM{a!q.g", "", "dCvz~|Xcvo=G~lB=");
      classWriter0.addUninitializedType("^v9Xr,d4", 2);
      classWriter0.newNameType("Deprecated", "^v9Xr,d4");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "t9npde!ro^/vV8<";
      stringArray0[1] = "keCz_tq^)";
      stringArray0[2] = "";
      classWriter0.visit((-1271), 90, "", "K3Vn<J2k)?ag ", "Wt]:,=8+EM{a!q.g", stringArray0);
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem("dCvz~|Xcvo=G~lB=", "InnerClasses", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2213));
      int int0 = classWriter0.newField("$Uml%o\"ZVFcEYpC", "$Uml%o\"ZVFcEYpC", "$Uml%o\"ZVFcEYpC");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3591);
      Item item0 = classWriter0.newConstItem("InnerClasses");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(643);
      Item item0 = classWriter0.key;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      Short short0 = new Short((short)107);
      Item item1 = classWriter0.newConstItem(short0);
      assertNotNull(item1);
      assertNotSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(8, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-6));
      classWriter0.newLong((-6));
      int int0 = Type.BOOLEAN;
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1865);
      classWriter0.newNameType("!)8,_9~h<~", ";f6n 5\"rx");
      classWriter0.newClassItem("");
      classWriter0.newLong(708L);
      classWriter0.newConst("");
      FieldVisitor fieldVisitor0 = classWriter0.visitField(65535, "!)8,_9~h<~", "", "Xav2eoA1z?YoY^", "");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 0);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("wheel.asm.ClassWriter", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 0);
      classWriter0.newMethod("wheel.asm.ClassWriter", "JSR/RET are not supported with computeFrames option", "JSR/RET are not supported with computeFrames option", false);
      Item item0 = classWriter0.newInteger(13);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4));
      Item item0 = new Item(2);
      classWriter0.toByteArray();
      Item item1 = classWriter0.newDouble((-4));
      assertFalse(item1.equals((Object)item0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-646);
      ClassWriter classWriter0 = new ClassWriter((-646));
      String string0 = "";
      classWriter0.addType("");
      classWriter0.newConstItem("");
      classWriter0.addType("");
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(14);
      ClassWriter classWriter1 = new ClassWriter(2);
      AnnotationVisitor annotationVisitor0 = classWriter1.visitAnnotation("", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-480));
      int int0 = Character.MIN_CODE_POINT;
      Boolean boolean0 = Boolean.TRUE;
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(188);
      classWriter0.newNameType("!)8,_9~h<~", "");
      classWriter0.newClassItem("j\"nGr|V_*W&O8");
      classWriter0.newLong((-1772L));
      classWriter0.newConst("");
      Boolean boolean0 = Boolean.FALSE;
      classWriter0.visitField(8, "", "=MB7|U4\"", "", boolean0);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("cti?:k[Hd3.^", "The wildcard array must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: cti?:k[Hd3/^
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-445));
      classWriter0.visitOuterClass("M(", (String) null, "M(");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-445), (-445));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4313));
      classWriter0.visitOuterClass("PIF>h]1kAY:8", "", (String) null);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-4313), (-4313));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      classWriter0.toByteArray();
      String string0 = classWriter0.getCommonSuperClass("java/lang/String", "wheel.asm.ClassWriter");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(780);
      int int0 = classWriter0.newClass("");
      assertEquals(2, int0);
      
      Attribute attribute0 = new Attribute("");
      classWriter0.visitAttribute(attribute0);
      classWriter0.newInteger(780);
      classWriter0.newMethod("InnerClasses", "InnerClasses", ")+{!hdG_i", true);
      int int1 = classWriter0.newField("wheel.asm.Edge", "^7iymN:n${f-/<]S[", "Synthetic");
      assertEquals(14, int1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.newFloat(4);
      classWriter0.visitOuterClass("", (String) null, (String) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Float float0 = new Float((-701.1093F));
      classWriter0.newConst(float0);
      classWriter0.newFloat((-701.1093F));
      ClassWriter classWriter1 = new ClassWriter(classReader0, 4);
      classWriter1.newDouble(8);
      classWriter0.newMethod("r'Gy%'P)ty|A", "r'Gy%'P)ty|A", "A.J0y=c\t{;k3TD-bT", true);
      // Undeclared exception!
      try { 
        classWriter1.newClassItem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 0);
      classReader0.accept((ClassVisitor) classWriter0, 16777220);
      // Undeclared exception!
      try { 
        classWriter0.newMethod("wheel.asm.ClassWriter", "&UXTHE,Vp", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-6));
      classWriter0.visitSource("<init>", "<init>");
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(1);
      String string0 = "zkP7cr6q]Hx`*G";
      classWriter0.visitOuterClass("", "zkP7cr6q]Hx`*G", (String) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        classWriter0.newConst(mockThaiBuddhistDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@773a687
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter((-1786));
      ClassAdapter classAdapter0 = new ClassAdapter(classWriter0);
      classReader0.accept((ClassVisitor) classAdapter0, 192);
      ClassWriter classWriter1 = new ClassWriter(classReader0, 8);
      classWriter1.visitInnerClass("wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "UhX1$Vy", 26);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2));
      int int0 = Type.VOID;
      Type type0 = Type.SHORT_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      Attribute[] attributeArray0 = new Attribute[0];
      int int0 = classWriter0.addUninitializedType("wheel.asm.ClassWriter", (-2185));
      assertEquals(1, int0);
      
      classReader0.accept((ClassVisitor) classWriter0, attributeArray0, 481);
      Type type0 = Type.BYTE_TYPE;
      int int1 = classWriter0.newConst(type0);
      assertEquals(641, int1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.getCommonSuperClass("java/lang/String", "wheel.asm.ClassWriter");
      classWriter0.visitSource("x)PjRdZ?#S,", "wheel.asm.ClassWriter");
      Double double0 = new Double((-1032.153));
      // Undeclared exception!
      try { 
        classWriter0.newConst((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3591);
      classWriter0.toByteArray();
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.Opcodes", "java/lang/String");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 283);
      classWriter0.visitInnerClass("wheel.asm.ClassWriter", "wheel.asm.ClassWriter", "XdA0iiF:J).ux73X IO", (-1500));
      Attribute attribute0 = new Attribute((String) null);
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = '(';
      classWriter0.newLong(31);
      classWriter0.toByteArray();
      classWriter0.visitInnerClass("RuntimeVisibleAnnotations", "wheel.asm.ClassWriter", "B5ta", 8);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("hHnzDu", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'hHnzDu.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1862);
      classWriter0.newLong(540L);
      classWriter0.visitSource((String) null, "U(\":");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-2), 1862);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(285212675);
      Item item0 = classWriter0.newLong(285212675);
      classWriter0.toByteArray();
      int int0 = classWriter0.newClass("");
      assertEquals(4, int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Item item1 = classWriter0.newLong(285212675);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2213));
      classWriter0.toByteArray();
      classWriter0.visit(645, (-1), "", " ", "46", (String[]) null);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(44, 997);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1307));
      classWriter0.newFloat(565.55F);
      classWriter0.visit((-295), (-1307), "jJ'O]]ejl5M", "jJ'O]]ejl5M", "", (String[]) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.ClassWriter");
      ClassWriter classWriter0 = new ClassWriter(1);
      classWriter0.getCommonSuperClass("java/lang/String", "wheel.asm.ClassWriter");
      classWriter0.getCommonSuperClass("wheel.asm.ClassWriter", "java/lang/String");
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.EmptyFileFilter", "wheel.asm.ClassWriter");
      assertEquals("java/lang/Object", string0);
      
      int int0 = classWriter0.newMethod("EnclosingMethod", "The size must be non-negative", "org.apache.commons.io.filefilter.EmptyFileFilter", true);
      assertEquals(6, int0);
  }
}
