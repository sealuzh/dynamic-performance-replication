/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 07:31:26 GMT 2018
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FunctionGradient;
import org.freehep.math.minuit.MinimumError;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnFcn;
import org.freehep.math.minuit.MnHesse;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnHesse_ESTest extends MnHesse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = null;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      FCNBase fCNBase1 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, (double[]) null, (double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserTransformation", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1526.30546;
      doubleArray0[2] = (-905.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-544.5131822992955);
      doubleArray0[5] = 8.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-1485.33011181405);
      doubleArray0[8] = (-5902.21696);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-5902.21696);
      doubleArray1[2] = (-5902.21696);
      doubleArray1[3] = 1526.30546;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 8.0;
      doubleArray1[6] = 8.0;
      doubleArray1[7] = (-5902.21696);
      doubleArray1[8] = (-905.0);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      mnHesse0.calculate(fCNBase0, mnUserParameters0, 5);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-2467.35495476082);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.5;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase1, doubleArray2, doubleArray2);
      assertEquals(26, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnUserCovariance0.clone();
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray0, doubleArray0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters1, (MnUserCovariance) null);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(16, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1835;
      MnStrategy mnStrategy0 = new MnStrategy(1835);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((MnStrategy) null);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase1 = null;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.errors();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      int int0 = 200;
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameters0, mnUserCovariance0, 200);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnFcn", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1273.93), 2.8421709430404007E-14, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4084.0607061521;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 1.0);
      mnFcn0.theNumCall = 2247;
      MinimumState minimumState0 = new MinimumState(100);
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-128));
      MnUserTransformation mnUserTransformation1 = new MnUserTransformation();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState1, mnUserTransformation1, 2251);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1273.93), 2.8421709430404007E-14, (-1273.93), (-1273.93), (-1273.93)).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4084.0607061521;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 4084.0607061521);
      mnFcn0.theNumCall = 2247;
      MinimumState minimumState0 = new MinimumState(100);
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation1, 2251);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (-856.1), (-3899.273338), (-1.6347472226263182), (-1.6347472226263182)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      int int0 = (-83);
      mnStrategy0.setHessianGradientNCycles((-83));
      mnStrategy0.setGradientNCycles((-83));
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, (-1262));
      FCNBase fCNBase1 = null;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = null;
      try {
        mnUserCovariance0 = new MnUserCovariance(doubleArray0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inconsistent arguments
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (-856.1), (-3899.273338), 0.5, 0.5).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      mnStrategy0.setHessianGradientNCycles((-83));
      mnStrategy0.setGradientNCycles(0);
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 0);
      FCNBase fCNBase1 = null;
      int int1 = 2339;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(2339);
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.4578256355233694E-5, 1.4578256355233694E-5, (-2203.17243535), (double)0, (double)0).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.setLowerLimit(0, 2082.9400110339548);
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnUserCovariance0.clone();
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      mnHesse1.calculate(fCNBase1, mnUserParameters0, mnUserCovariance1);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 2147388585;
      doubleArray1[1] = (double) 6;
      doubleArray1[2] = (double) 6;
      doubleArray1[3] = 8.0;
      doubleArray1[4] = 1.4578256355233694E-5;
      doubleArray1[5] = 1.4578256355233694E-5;
      doubleArray1[6] = (-2203.17243535);
      doubleArray1[7] = (double) 6;
      doubleArray1[8] = (-2203.17243535);
      MnUserCovariance mnUserCovariance2 = new MnUserCovariance(420);
      // Undeclared exception!
      try { 
        mnHesse1.calculate(fCNBase0, doubleArray1, mnUserCovariance2, 1615);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-2364));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-2364), (-856.1), (-3899.273338), 0.5, 0.5).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      mnStrategy0.setHessianGradientNCycles((-83));
      mnStrategy0.setGradientNCycles((-2364));
      doubleArray0[0] = (double) (-2364);
      doubleArray0[1] = (double) (-83);
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, (-2364));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      assertFalse(mnUserParameterState0.isValid());
  }
}
