/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:59:14 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.ObjectStreamConstants;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        HttpUrl.getChecked("@:");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for @:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("H_v^rK]2MzZyho");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(1415);
      // Undeclared exception!
      try { 
        httpUrl_Builder2.removePathSegment(1415);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1415, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("-><*vp107bn2HM_xLU");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("Ki`.5&!vN3il}V");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("[text%3D", 112, 112);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("%2e%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("%j9/=>`{@X@;P=#;So");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("/7\n");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = "%2e.";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "jrZU,Thc5<$mZlT<:";
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "%s: actual 0x%08x != expected 03%08x";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("::");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("%s: actual 0x%08x != expected 03%08x", "::");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.scheme("::");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: ::
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(2780, "[\u0000-\u001F-\u009Fp{javaWhitespace}]");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2780, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, "/");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("3");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("6Axku/sl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: 6Axku/sl
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "Unexpected%20hex%20string:%20";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedUsername("Unexpected%20hex%20string:%20");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("Unexpected%20hex%20string:%20");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: Unexpected%20hex%20string:%20
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.host("TA");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('\"');
      assertEquals((-1), int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("%pRq$\"BM>/!_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %pRq$\"BM>/!_
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("\u2026");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      StringBuilder stringBuilder0 = new StringBuilder("Rwmy]");
      assertNotNull(stringBuilder0);
      assertEquals("Rwmy]", stringBuilder0.toString());
      
      List<String> list0 = httpUrl_Builder0.encodedPathSegments;
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      int int0 = HttpUrl.decodeHexDigit(')');
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("5.:T}9C*P7N2Q9E0mj", (String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("okio.Timeout");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("okio.Timeout");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.removeAllQueryParameters("okio.Timeout");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('6');
      assertEquals(6, int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("Fz>s0|7%c\"c7oGW");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      int int0 = 1002;
      String string0 = "%2F";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(1002, "%2F");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1002, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-3835));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -3835
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedQueryParameter(";g", ";g");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.removeAllEncodedQueryParameters("%40");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "[9&1fMG-80";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("[9&1fMG-80");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("[9&1fMG-80");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: [9&1fMG-80
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addQueryParameter("@y+K2Tn\r'IOO", "@y+K2Tn\r'IOO");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      boolean boolean0 = HttpUrl.percentEncoded("https:", 1871, 1871);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("5:", "5:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("http");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "!Z_y5+K*B";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("!Z_y5+K*B");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("!Z_y5+K*B");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder2.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegments("..");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/http:16783");
      assertNotNull(httpUrl0);
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("http", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(16783, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("https://http:16783/", httpUrl0.toString());
      
      String string0 = httpUrl0.encodedPath();
      assertEquals("/", string0);
      assertNotNull(string0);
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("http", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(16783, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("https://http:16783/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      
      try { 
        HttpUrl.getChecked("http:/");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:/
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "http", 2, "");
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals(2, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://http:2", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals(2, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://http:2", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.host());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("");
      assertNotNull(httpUrl_Builder0);
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals(2, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://http:2", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.host());
      
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded("ug8", (-378), 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("http:257b79@x\"gtp");
      assertNotNull(httpUrl0);
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("257b79", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("x\"gtp", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://257b79@x\"gtp/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("J|&.");
      assertNotNull(httpUrl_Builder0);
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("257b79", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("x\"gtp", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://257b79@x\"gtp/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("J|&.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: J|&.
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      try { 
        HttpUrl.getChecked("kirPw");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for kirPw
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      try { 
        HttpUrl.getChecked("Ivq U|");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Ivq U|
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        HttpUrl.getChecked("R8T,E%7FGLmx");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for R8T,E%7FGLmx
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('C');
      assertEquals(12, int0);
      
      try { 
        HttpUrl.getChecked("Fz>s0|7c\"c7oGW");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for Fz>s0|7c\"c7oGW
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      
      Set<String> set0 = httpUrl1.queryParameterNames();
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(set0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(80, httpUrl1.port());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals(1, httpUrl1.pathSize());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      
      int int1 = httpUrl0.querySize();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      
      String string0 = httpUrl0.encodedFragment();
      assertNull(string0);
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      
      String string1 = httpUrl0.encodedPassword();
      assertEquals("", string1);
      assertNotNull(string1);
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        HttpUrl.getChecked("xP:y6P+_:4_7");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for xP:y6P+_:4_7
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        HttpUrl.getChecked("`0zw,}vdM");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for `0zw,}vdM
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-98459394), "{IWB?sy#O|h'");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Locale.LanguageRange> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("<J+sz|J*zsWltV");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      httpUrl_Builder0.encodedPassword = "<J+sz|J*zsWltV";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("<J+sz|J*zsWltV");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      int int0 = 83;
      String string0 = "%+$&sq0&pb_A |dpiD";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(83, "%+$&sq0&pb_A |dpiD");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 83, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "5.:T}9C*P7N2Q9E0mj";
      String string1 = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("5.:T}9C*P7N2Q9E0mj", (String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.LanguageRange locale_LanguageRange0 = linkedList0.pollFirst();
      assertNull(locale_LanguageRange0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        HttpUrl.queryStringToNamesAndValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("5.:T}9C*P7N2Q9E0mj");
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("5.:T}9C*P7N2Q9E0mj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 5.:T}9C*P7N2Q9E0mj
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host(":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: :
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "@";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("@");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      try { 
        MockURI.URI("@", "%2F", "@", 12, "...", "\u2026", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: @://%252F@@:12...?\u2026#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/7\n");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(219);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "w;8SO8k57E";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("w;8SO8k57E");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("w;8SO8k57E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: w;8SO8k57E
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("uwj5eea+~2");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = "[::";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[::");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [::
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("t3+S3z-t'yf`T");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = "5.:T}9C*P7N2Q9E0mj";
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(17, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment((-1337), "=Ny:)+R}.2jqj9_+C3");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.parse("https:/http:16783");
      assertNotNull(httpUrl0);
      assertEquals("https://http:16783/", httpUrl0.toString());
      assertTrue(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals(16783, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(45);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("password == null", 5, 8);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|q u'kp");
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      
      String string0 = httpUrl0.fragment();
      assertNull(string0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "https:/www.somefakebuEw\\llformedurl.org/..";
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.somefakebuEwllformedurl.org/..");
      assertNotNull(httpUrl0);
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("https://www.somefakebuewllformedurl.org/", httpUrl0.toString());
      assertEquals("www.somefakebuewllformedurl.org", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      
      List<String> list0 = httpUrl0.pathSegments();
      assertNotNull(list0);
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("https://www.somefakebuewllformedurl.org/", httpUrl0.toString());
      assertEquals("www.somefakebuewllformedurl.org", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "RF@~", "http");
      assertNotNull(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:RF@~#http", uRI0.toString());
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getRawFragment());
      
      HttpUrl httpUrl0 = HttpUrl.parse("Y|?");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('}');
      assertEquals((-1), int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("http:/");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.query("r 58?xlJH}7['6`4");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.encodedPath("r 58?xlJH}7['6`4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: r 58?xlJH}7['6`4
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("TA");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      int int0 = HttpUrl.defaultPort("TA");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("5.:T}9C*P7N2Q9E0mj", (String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      Iterator<Locale.LanguageRange> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("5.:T}9C*P7N2Q9E0mj");
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('}');
      assertEquals((-1), int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("'2JWL[/6[Z0IQ[|");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removePathSegment(0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.addQueryParameter("[,", "[,");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.host("LtOZ_RI%+ViqG^A\"I3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: LtOZ_RI%+ViqG^A\"I3
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("https:/www.somefakebutwellformedurl.org/..");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(98);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = "fffe";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('6');
      assertEquals(6, int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllEncodedQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("%%");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("%%");
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("%%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %%
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = "\r";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("7c6N");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      String string1 = "::1.);h1$\"";
      String string2 = "UAPVRXve0r8g(%4vG";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("UAPVRXve0r8g(%4vG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: UAPVRXve0r8g(%4vG
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.query((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.setEncodedPathSegment(0, "ht");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder3);
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      
      String string0 = httpUrl0.query();
      assertNull(string0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      
      String string1 = httpUrl0.toString();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", string1);
      assertNotNull(string1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "Unexpected hex string: ";
      String string1 = "%2e";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.removePathSegment(7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "R~";
      String string1 = "http";
      URI uRI0 = MockURI.URI("http", "R~", "http");
      assertNotNull(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http:R~#http", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment(".");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "%2e%2e";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("%2e%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("/7\n", "/7\n");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      URI uRI0 = MockURI.create("MNOA-8B8LQH+ur");
      assertNotNull(uRI0);
      assertNull(uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("MNOA-8B8LQH+ur", uRI0.getRawPath());
      assertEquals("MNOA-8B8LQH+ur", uRI0.toString());
      
      URI uRI1 = MockURI.resolve(uRI0, "MNOA-8B8LQH+ur");
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertNotNull(uRI1);
      assertTrue(uRI1.equals((Object)uRI0));
      assertNull(uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("MNOA-8B8LQH+ur", uRI0.getRawPath());
      assertEquals("MNOA-8B8LQH+ur", uRI0.toString());
      assertEquals("MNOA-8B8LQH+ur", uRI1.toString());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getScheme());
      assertFalse(uRI1.isOpaque());
      assertEquals((-1), uRI1.getPort());
      assertEquals("MNOA-8B8LQH+ur", uRI1.getRawPath());
      assertNull(uRI1.getRawAuthority());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI1);
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertNull(httpUrl0);
      assertTrue(uRI0.equals((Object)uRI1));
      assertTrue(uRI1.equals((Object)uRI0));
      assertNull(uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertEquals("MNOA-8B8LQH+ur", uRI0.getRawPath());
      assertEquals("MNOA-8B8LQH+ur", uRI0.toString());
      assertEquals("MNOA-8B8LQH+ur", uRI1.toString());
      assertNull(uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertFalse(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getScheme());
      assertFalse(uRI1.isOpaque());
      assertEquals((-1), uRI1.getPort());
      assertEquals("MNOA-8B8LQH+ur", uRI1.getRawPath());
      assertNull(uRI1.getRawAuthority());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:hxj~#http");
      assertNotNull(httpUrl0);
      assertEquals("http", httpUrl0.fragment());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertEquals("hxj~", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://hxj~/#http", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("5@:T}9CNP7Nb19B0mj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 5@:T}9CNP7Nb19B0mj
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = "y";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?ABu=i/");
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertNotNull(httpUrl_Builder0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:hxjA~#http");
      assertNotNull(httpUrl0);
      assertEquals("", httpUrl0.password());
      assertEquals("https://hxja~/#http", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("hxja~", httpUrl0.host());
      
      String string0 = httpUrl0.encodedQuery();
      assertNull(string0);
      assertEquals("", httpUrl0.password());
      assertEquals("https://hxja~/#http", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("hxja~", httpUrl0.host());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = httpUrl0.scheme();
      assertEquals("https", string1);
      assertNotNull(string1);
      assertEquals("", httpUrl0.password());
      assertEquals("https://hxja~/#http", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("hxja~", httpUrl0.host());
      
      try { 
        MockURI.URI("encodedName == null", "https:hxjA~#http", "okio.buffer", "https:hxjA~#http", "QtWZqF>8\"oux");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: encodedName == null://https:hxjA~%23httpokio.buffer?https:hxjA~%23http#QtWZqF%3E8%22oux
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URI uRI0 = MockURI.URI("http", "R~", "http");
      assertNotNull(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http", uRI0.getRawFragment());
      assertEquals("http:R~#http", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http", uRI0.getRawFragment());
      assertEquals("http:R~#http", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://r~/#http", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("r~", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      
      List<String> list0 = httpUrl0.pathSegments();
      assertNotNull(list0);
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http", uRI0.getRawFragment());
      assertEquals("http:R~#http", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://r~/#http", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("r~", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      String string0 = HttpUrl.canonicalize("INmALI_POR", ",_Of(fUrX", false, false, false, false);
      assertEquals("INmALI%5FP%4FR", string0);
      assertNotNull(string0);
      
      String string1 = httpUrl0.password();
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http", uRI0.getRawFragment());
      assertEquals("http:R~#http", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://r~/#http", httpUrl0.toString());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.fragment());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("r~", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("U p_f{G'O`,]");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.fragment((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "5.:T}9CNP7N2Q9E0mj";
      String string1 = "qkLwQ'4bFw),w:";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("qkLwQ'4bFw),w:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.port(1114111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 1114111
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "http", 2, "");
      assertNotNull(uRL0);
      assertEquals("http://http:2", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(2, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals("http:2", uRL0.getAuthority());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://http:2", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(2, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(2, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      
      URL uRL1 = httpUrl0.url();
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("http://http:2", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(2, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(2, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals("http", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://http:2/", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("http://http:2/", uRL1.toExternalForm());
      assertEquals(2, uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http:2", uRL1.getAuthority());
      
      int int0 = httpUrl0.querySize();
      assertEquals(0, int0);
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertEquals("http://http:2", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(2, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(2, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      
      String string0 = MockURL.getQuery(uRL0);
      assertNotSame(uRL0, uRL1);
      assertNull(string0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertEquals("http://http:2", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(2, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals("http:2", uRL0.getAuthority());
      
      String string1 = httpUrl0.scheme();
      assertEquals("http", string1);
      assertNotSame(uRL0, uRL1);
      assertNotNull(string1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertEquals("http://http:2", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals(2, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(2, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray1 = HttpUrl.Builder.ParseResult.values();
      assertNotSame(httpUrl_Builder_ParseResultArray1, httpUrl_Builder_ParseResultArray0);
      assertNotNull(httpUrl_Builder_ParseResultArray1);
      assertFalse(httpUrl_Builder_ParseResultArray1.equals((Object)httpUrl_Builder_ParseResultArray0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "http", 2, "");
      assertNotNull(uRL0);
      assertEquals("http://http:2", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals("http:2", uRL0.getAuthority());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://http:2", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(2, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      
      URL uRL1 = httpUrl0.url();
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("http://http:2", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(2, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(uRL1.getQuery());
      assertEquals("http:2", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://http:2/", uRL1.toExternalForm());
      assertEquals(2, uRL1.getPort());
      assertEquals("http", uRL1.getHost());
      assertEquals("http://http:2/", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      
      int int0 = httpUrl0.querySize();
      assertEquals(0, int0);
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertEquals("http://http:2", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(2, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      
      String string0 = HttpUrl.canonicalize("LV#", "http", true, false, true, true);
      assertEquals("LV#", string0);
      assertNotNull(string0);
      
      String string1 = MockURL.getAuthority(uRL1);
      assertEquals("http:2", string1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(string1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("http://http:2", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(2, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertNull(uRL1.getQuery());
      assertEquals("http:2", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://http:2/", uRL1.toExternalForm());
      assertEquals(2, uRL1.getPort());
      assertEquals("http", uRL1.getHost());
      assertEquals("http://http:2/", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray1 = HttpUrl.Builder.ParseResult.values();
      assertNotSame(httpUrl_Builder_ParseResultArray1, httpUrl_Builder_ParseResultArray0);
      assertNotNull(httpUrl_Builder_ParseResultArray1);
      assertFalse(httpUrl_Builder_ParseResultArray1.equals((Object)httpUrl_Builder_ParseResultArray0));
      
      List<String> list0 = httpUrl0.pathSegments();
      assertNotSame(uRL0, uRL1);
      assertNotNull(list0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertEquals("http://http:2", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertFalse(httpUrl0.isHttps());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(2, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Buffer buffer1 = new Buffer();
      assertNotNull(buffer1);
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      
      Buffer buffer2 = new Buffer();
      assertNotNull(buffer2);
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      String string0 = httpUrl0.host();
      assertEquals("www.somefakebutwellformedurl.org", string0);
      assertNotNull(string0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "!.D.@=^,L";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("Z><");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(10);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "!Z_y5+K*B";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllQueryParameters("!Z_y5+K*B");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      URI uRI0 = MockURI.URI("http", "RF@~", "http");
      assertNotNull(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:RF@~#http", uRI0.toString());
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getRawFragment());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:RF@~#http", uRI0.toString());
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getRawFragment());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("RF", httpUrl0.username());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("~", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("http://RF@~/#http", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      httpUrl0.hashCode();
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:RF@~#http", uRI0.toString());
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getRawFragment());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("RF", httpUrl0.username());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("~", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("http://RF@~/#http", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "http");
      assertFalse(boolean0);
      
      URI uRI0 = MockURI.URI("http", "RF@~", "http");
      assertNotNull(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http:RF@~#http", uRI0.toString());
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getRawFragment());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http:RF@~#http", uRI0.toString());
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getRawFragment());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertEquals("http://RF@~/#http", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http", httpUrl0.encodedFragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("RF", httpUrl0.username());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("~", httpUrl0.host());
      
      URI uRI1 = httpUrl0.uri();
      assertNotSame(uRI0, uRI1);
      assertNotSame(uRI1, uRI0);
      assertNotNull(uRI1);
      assertFalse(uRI1.equals((Object)uRI0));
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http:RF@~#http", uRI0.toString());
      assertNull(uRI0.getHost());
      assertEquals("http", uRI0.getRawFragment());
      assertNull(uRI0.getRawPath());
      assertTrue(uRI0.isOpaque());
      assertEquals("http://RF@~/#http", httpUrl0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http", httpUrl0.encodedFragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("RF", httpUrl0.username());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("~", httpUrl0.host());
      assertTrue(uRI1.isAbsolute());
      assertNull(uRI1.getRawUserInfo());
      assertEquals("/", uRI1.getRawPath());
      assertEquals("http", uRI1.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertNull(uRI1.getHost());
      assertEquals("http://RF@~/#http", uRI1.toString());
      assertEquals("RF@~", uRI1.getRawAuthority());
      assertEquals("http", uRI1.getScheme());
      assertFalse(uRI1.isOpaque());
      assertEquals((-1), uRI1.getPort());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('}');
      assertEquals((-1), int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("http:/");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.query("r 58?xlJH}7['6`4");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addEncodedQueryParameter("r 58?xlJH}7['6`4", "http:/");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.removeAllQueryParameters("r 58?xlJH}7['6`4");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder4);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "}ntL;,EIdA";
      try { 
        HttpUrl.getChecked("}ntL;,EIdA");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for }ntL;,EIdA
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "https:57b75@x#gtp";
      HttpUrl httpUrl0 = HttpUrl.parse("https:57b75@x#gtp");
      assertNotNull(httpUrl0);
      assertEquals("x", httpUrl0.host());
      assertEquals("gtp", httpUrl0.encodedFragment());
      assertEquals("gtp", httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://57b75@x/#gtp", httpUrl0.toString());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("57b75", httpUrl0.username());
      
      String string1 = "\"AJk[3A0YA~)?xwKRSO";
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("\"AJk[3A0YA~)?xwKRSO");
      assertNotNull(httpUrl_Builder0);
      assertEquals("x", httpUrl0.host());
      assertEquals("gtp", httpUrl0.encodedFragment());
      assertEquals("gtp", httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://57b75@x/#gtp", httpUrl0.toString());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("57b75", httpUrl0.username());
      
      String string2 = "!";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme("[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: [
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = HttpUrl.percentDecode("9", true);
      assertEquals("9", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      URI uRI0 = MockURI.URI("http", "C?q^kr]&T?@`N", "http");
      assertNotNull(uRI0);
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:C?q%5Ekr]&T?@%60N#http", uRI0.toString());
      assertNull(uRI0.getRawPath());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:C?q%5Ekr]&T?@%60N#http", uRI0.toString());
      assertNull(uRI0.getRawPath());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://c/?q%5Ekr]&T?@%60N#http", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("c", httpUrl0.host());
      assertEquals("http", httpUrl0.encodedFragment());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertNotNull(httpUrl_Builder0);
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getRawFragment());
      assertTrue(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http:C?q%5Ekr]&T?@%60N#http", uRI0.toString());
      assertNull(uRI0.getRawPath());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(2, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://c/?q%5Ekr]&T?@%60N#http", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("c", httpUrl0.host());
      assertEquals("http", httpUrl0.encodedFragment());
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment((-1377), "-9223372036854775808");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      httpUrl_Builder0.encodedFragment = ".inputStream()";
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("%2e.");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("%2e%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "out == null");
      assertNotNull(stringBuilder0);
      assertEquals("out == null", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((double) 46);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals("out == null46.0", stringBuilder0.toString());
      assertEquals("out == null46.0", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.append(".inputStream()");
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      assertNotNull(stringBuilder2);
      assertEquals("out == null46.0.inputStream()", stringBuilder0.toString());
      assertEquals("out == null46.0.inputStream()", stringBuilder1.toString());
      assertEquals("out == null46.0.inputStream()", stringBuilder2.toString());
      
      StringBuilder stringBuilder3 = stringBuilder2.append((float) (-511));
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertNotNull(stringBuilder3);
      assertEquals("out == null46.0.inputStream()-511.0", stringBuilder0.toString());
      assertEquals("out == null46.0.inputStream()-511.0", stringBuilder1.toString());
      assertEquals("out == null46.0.inputStream()-511.0", stringBuilder2.toString());
      assertEquals("out == null46.0.inputStream()-511.0", stringBuilder3.toString());
      
      HttpUrl.namesAndValuesToQueryString(stringBuilder3, list0);
      assertSame(stringBuilder0, stringBuilder3);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder3);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder3);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder2);
      assertSame(stringBuilder3, stringBuilder0);
      assertSame(stringBuilder3, stringBuilder1);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals("out == null46.0.inputStream()-511.0%2e.", stringBuilder0.toString());
      assertEquals("out == null46.0.inputStream()-511.0%2e.", stringBuilder1.toString());
      assertEquals("out == null46.0.inputStream()-511.0%2e.", stringBuilder2.toString());
      assertEquals("out == null46.0.inputStream()-511.0%2e.", stringBuilder3.toString());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(872);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = "%252e";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("%252e", "%252e");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%252e");
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("%252e");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "qmz;-q%60$spkacsqm";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("qmz;-q%60$spkacsqm");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.omefakebutwellformedurl.org/..");
      assertNotNull(httpUrl0);
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertNotNull(httpUrl_Builder0);
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("okioBuffer");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.password());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals(443, httpUrl1.port());
      assertTrue(httpUrl1.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/?okioBuffer", httpUrl1.toString());
      assertEquals(1, httpUrl1.querySize());
      
      List<String> list0 = httpUrl1.queryParameterValues("!hsjXPsgi7R");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(list0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.password());
      assertEquals("", httpUrl1.encodedPassword());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals(443, httpUrl1.port());
      assertTrue(httpUrl1.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/?okioBuffer", httpUrl1.toString());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("!hsjXPsgi7R");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = "\u2026";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("\u2026");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string1 = "::";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/http:2");
      assertNotNull(httpUrl0);
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://http:2/", httpUrl0.toString());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = httpUrl0.redact();
      assertEquals("https://http:2/...", string0);
      assertNotNull(string0);
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://http:2/", httpUrl0.toString());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      URI uRI0 = MockURI.URI("http", "$g%7b75:@x", "http");
      assertNotNull(uRI0);
      assertEquals("http", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http:$g%257b75:@x#http", uRI0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertEquals("http", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http:$g%257b75:@x#http", uRI0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("x", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("$g%7b75", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://$g%257b75@x/#http", httpUrl0.toString());
      
      List<String> list0 = httpUrl0.queryParameterValues("http");
      assertNotNull(list0);
      assertEquals("http", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http:$g%257b75:@x#http", uRI0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("x", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("$g%7b75", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://$g%257b75@x/#http", httpUrl0.toString());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$g%7b75:@x");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = httpUrl0.encodedPath();
      assertEquals("/", string0);
      assertNotNull(string0);
      assertEquals("http", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http:$g%257b75:@x#http", uRI0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("x", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("$g%7b75", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://$g%257b75@x/#http", httpUrl0.toString());
      
      String string1 = httpUrl0.encodedFragment();
      assertEquals("http", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("http", uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("http:$g%257b75:@x#http", uRI0.toString());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("x", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("$g%7b75", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http://$g%257b75@x/#http", httpUrl0.toString());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpUrl.Builder.ParseResult[] httpUrl_Builder_ParseResultArray0 = HttpUrl.Builder.ParseResult.values();
      assertNotNull(httpUrl_Builder_ParseResultArray0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      URI uRI0 = MockURI.create("http");
      assertNotNull(uRI0);
      assertEquals("http", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertEquals("http", uRI0.toString());
      assertFalse(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNull(httpUrl0);
      assertEquals("http", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertEquals("http", uRI0.toString());
      assertFalse(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      
      List<String> list0 = httpUrl_Builder0.encodedQueryNamesAndValues;
      assertNull(list0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery(",A%R^XJyf");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)16;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)16, (byte)56, (byte)16}, byteArray0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      String string0 = MockURI.getRawSchemeSpecificPart(uRI0);
      assertEquals("http", string0);
      assertNotNull(string0);
      assertEquals("http", uRI0.getRawPath());
      assertNull(uRI0.getScheme());
      assertEquals("http", uRI0.toString());
      assertFalse(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        HttpUrl.getChecked(",A%R^XJyf");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ,A%R^XJyf
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("::");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.encodedUsername("::");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.encodedQuery("%C]>g/uV%)hb");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder4);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = httpUrl_Builder1.encodedQueryNamesAndValues;
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.omefakebutwellformedurl.org/..");
      assertNotNull(httpUrl0);
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertNotNull(httpUrl_Builder0);
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("https:/www.omefakebutwellformedurl.org/..", "okio.Buffer");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "https:/www.omefakebutwellformedurl.org/..");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.password());
      assertEquals(443, httpUrl1.port());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("https://www.omefakebutwellformedurl.org/?https:/www.omefakebutwellformedurl.org/..=okio.Buffer", httpUrl1.toString());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(1, httpUrl1.querySize());
      assertTrue(httpUrl1.isHttps());
      
      String string0 = httpUrl_Builder1.toString();
      assertEquals("https://www.omefakebutwellformedurl.org/?https:/www.omefakebutwellformedurl.org/..=okio.Buffer", string0);
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(string0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setEncodedPathSegment(57, "okio.Buffer");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      
      String string0 = httpUrl0.queryParameter("http");
      assertNull(string0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("Expected leading [0-9] or '-' character but was 0x", 901, 1591, "Expected leading [0-9] or '-' character but was 0x", true, false, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("MISSINGSCHEM");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegments("%2e%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegment("MISSINGSCHEM");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpUrl_Builder1.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(2274);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedQueryParameter("@q*G*lv,[K+=sY4", ".:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      String string0 = "5::1.)Eh1Bm\"";
      HttpUrl.Builder httpUrl_Builder3 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder3);
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder2));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = "";
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/..");
      assertNotNull(httpUrl0);
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("$G{7':@x");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("https://www.somefakebutwellformedurl.org/$G%7B7':@x", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals(443, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("https", httpUrl1.scheme());
      
      String string0 = HttpUrl.percentDecode(":T (T}')", false);
      assertEquals(":T (T}')", string0);
      assertNotNull(string0);
      
      URI uRI0 = httpUrl1.uri();
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(uRI0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("https://www.somefakebutwellformedurl.org/$G%7B7':@x", httpUrl1.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals(443, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("https", httpUrl1.scheme());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("www.somefakebutwellformedurl.org", uRI0.getHost());
      assertEquals("https://www.somefakebutwellformedurl.org/$G%7B7':@x", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertEquals("/$G%7B7':@x", uRI0.getRawPath());
      assertEquals("https", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      HttpUrl httpUrl2 = httpUrl0.resolve("\n%20not%20found:%20size%3D");
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotNull(httpUrl2);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl2.encodedFragment());
      assertNull(httpUrl2.fragment());
      assertEquals("", httpUrl2.password());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.username());
      assertEquals("https", httpUrl2.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals(443, httpUrl2.port());
      assertTrue(httpUrl2.isHttps());
      assertEquals("https://www.somefakebutwellformedurl.org/%20not%20found:%20size%3D", httpUrl2.toString());
      assertEquals(1, httpUrl2.pathSize());
      
      String string1 = httpUrl2.encodedPath();
      assertEquals("/%20not%20found:%20size%3D", string1);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotNull(string1);
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl2.encodedFragment());
      assertNull(httpUrl2.fragment());
      assertEquals("", httpUrl2.password());
      assertEquals(0, httpUrl2.querySize());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.username());
      assertEquals("https", httpUrl2.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals(443, httpUrl2.port());
      assertTrue(httpUrl2.isHttps());
      assertEquals("https://www.somefakebutwellformedurl.org/%20not%20found:%20size%3D", httpUrl2.toString());
      assertEquals(1, httpUrl2.pathSize());
      
      int int0 = HttpUrl.decodeHexDigit('M');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "KD( ]K";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment("KD( ]K");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(614);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      String string1 = "www.smefakebuew";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.setQueryParameter("KD( ]K", "www.smefakebuew");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.fragment("BsQ^E4mOk7");
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder4);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setPathSegment(3281, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      
      int int0 = httpUrl0.port();
      assertEquals(80, int0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      
      String string0 = "5##2";
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("5##2", 80, (-111), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 2;
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.scheme("http");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setQueryParameter("", "");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      String string1 = "j_A";
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.password("j_A");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      int int1 = 61;
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.port(61);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder4);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder4.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(98);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      
      URL uRL1 = MockURL.URL(uRL0, "LmsM3<?uC]W}", (URLStreamHandler) null);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/LmsM3<?uC]W}", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/LmsM3<?uC]W}", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("uC]W}", uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("LmsM3<?uC]W}");
      assertNotSame(uRL0, uRL1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/LmsM3%3C?uC]W}", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      
      Set<String> set0 = httpUrl1.queryParameterNames();
      assertNotSame(uRL0, uRL1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(set0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.password());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl1.username());
      assertEquals("http", httpUrl1.scheme());
      assertNull(httpUrl1.encodedFragment());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://www.somefakebutwellformedurl.org/LmsM3%3C?uC]W}", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertNull(httpUrl1.fragment());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "http", 2, "");
      assertNotNull(uRL0);
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(2, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("http", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(2, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("http", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      
      URL uRL1 = httpUrl0.url();
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(2, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("http", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals(2, uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("http:2", uRL1.getAuthority());
      assertEquals("http://http:2/", uRL1.toExternalForm());
      assertEquals("http://http:2/", uRL1.toString());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      URL uRL2 = httpUrl0.url();
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL2, uRL0);
      assertNotSame(uRL2, uRL1);
      assertNotNull(uRL2);
      assertFalse(uRL0.equals((Object)uRL1));
      assertTrue(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(2, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("http", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertNull(uRL2.getQuery());
      assertNull(uRL2.getUserInfo());
      assertEquals("http", uRL2.getHost());
      assertEquals("http:2", uRL2.getAuthority());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("http://http:2/", uRL2.toExternalForm());
      assertNull(uRL2.getRef());
      assertEquals(2, uRL2.getPort());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals("http://http:2/", uRL2.toString());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Set<String> set0 = httpUrl0.queryParameterNames();
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertNotNull(set0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL0.equals((Object)uRL2));
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(2, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("http", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      StringBuilder stringBuilder0 = new StringBuilder(526);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      String string0 = MockURL.getProtocol(uRL1);
      assertEquals("http", string0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL1, uRL2);
      assertNotNull(string0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL1.equals((Object)uRL0));
      assertTrue(uRL1.equals((Object)uRL2));
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(2, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("http", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals(2, uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("http:2", uRL1.getAuthority());
      assertEquals("http://http:2/", uRL1.toExternalForm());
      assertEquals("http://http:2/", uRL1.toString());
      
      String string1 = httpUrl0.host();
      assertEquals("http", string1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertNotNull(string1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL0.equals((Object)uRL2));
      assertTrue(string1.equals((Object)string0));
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(2, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("http", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      
      boolean boolean1 = httpUrl0.equals((Object) null);
      assertFalse(boolean1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL0.equals((Object)uRL2));
      assertTrue(boolean1 == boolean0);
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(2, uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("http", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "http", (-2650), 6, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/..");
      assertNotNull(httpUrl0);
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https", httpUrl0.scheme());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("okio.Buffer");
      assertNotNull(httpUrl_Builder0);
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https", httpUrl0.scheme());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("okio.Buffer");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https", httpUrl0.scheme());
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https", httpUrl0.scheme());
      
      String string0 = "endIndex < beginIndex: ";
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder2);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl1.fragment());
      assertEquals("https://www.somefakebutwellformedurl.org/okio.Buffer?okio.Buffer", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(1, httpUrl1.querySize());
      assertTrue(httpUrl1.isHttps());
      assertEquals(443, httpUrl1.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HttpUrl httpUrl2 = HttpUrl.parse("endIndex < beginIndex: ");
      assertNull(httpUrl2);
      
      HttpUrl httpUrl3 = httpUrl_Builder1.build();
      assertNotSame(httpUrl0, httpUrl3);
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl3, httpUrl1);
      assertNotSame(httpUrl3, httpUrl0);
      assertNotNull(httpUrl3);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl3.equals((Object)httpUrl1));
      assertFalse(httpUrl3.equals((Object)httpUrl0));
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl3.isHttps());
      assertEquals(443, httpUrl3.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl3.host());
      assertEquals("https", httpUrl3.scheme());
      assertEquals("", httpUrl3.username());
      assertNull(httpUrl3.fragment());
      assertEquals("https://www.somefakebutwellformedurl.org/okio.Buffer?okio.Buffer", httpUrl3.toString());
      assertEquals("", httpUrl3.encodedPassword());
      assertEquals("", httpUrl3.password());
      assertNull(httpUrl3.encodedFragment());
      assertEquals(1, httpUrl3.querySize());
      assertEquals(1, httpUrl3.pathSize());
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.query("endIndex < beginIndex: ");
      assertNotSame(httpUrl0, httpUrl3);
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder3);
      assertFalse(httpUrl0.equals((Object)httpUrl3));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https", httpUrl0.scheme());
      
      String string1 = httpUrl3.query();
      assertEquals("okio.Buffer", string1);
      assertNotSame(httpUrl0, httpUrl3);
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl3, httpUrl1);
      assertNotSame(httpUrl3, httpUrl0);
      assertNotNull(string1);
      assertFalse(httpUrl0.equals((Object)httpUrl3));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl3.equals((Object)httpUrl1));
      assertFalse(httpUrl3.equals((Object)httpUrl0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl3.isHttps());
      assertEquals(443, httpUrl3.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl3.host());
      assertEquals("https", httpUrl3.scheme());
      assertEquals("", httpUrl3.username());
      assertNull(httpUrl3.fragment());
      assertEquals("https://www.somefakebutwellformedurl.org/okio.Buffer?okio.Buffer", httpUrl3.toString());
      assertEquals("", httpUrl3.encodedPassword());
      assertEquals("", httpUrl3.password());
      assertNull(httpUrl3.encodedFragment());
      assertEquals(1, httpUrl3.querySize());
      assertEquals(1, httpUrl3.pathSize());
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.host("https:/www.somefakebutwellformedurl.org/..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: https:/www.somefakebutwellformedurl.org/..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("$G%7B7':@x");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllEncodedQueryParameters("Expected leading [0-9] or '-' character but was 0x");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.setEncodedQueryParameter(".", "$G%7B7':@x");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.username("Expected leading [0-9] or '-' character but was %#x");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedQueryParameter(".", "Expected leading [0-9] or '-' character but was 0x");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotNull(httpUrl_Builder5);
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder5.scheme("https");
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder6);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder6);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder6);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("%2f...");
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.somefakebutwellformedurl.org/..");
      assertNotNull(httpUrl0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("$G{7':@x");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("https", httpUrl1.scheme());
      assertTrue(httpUrl1.isHttps());
      assertEquals(443, httpUrl1.port());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("https://www.somefakebutwellformedurl.org/$G%7B7':@x", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("okiqco.Buffer");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotNull(httpUrl_Builder0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("okiqco.Buffer");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      
      String string0 = "endIndex < beginIndex: ";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = httpUrl_Builder0.encodedQueryNamesAndValues;
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      HttpUrl httpUrl2 = httpUrl_Builder1.build();
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotNull(httpUrl2);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      assertEquals("https", httpUrl2.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl2.host());
      assertEquals("https://www.somefakebutwellformedurl.org/okiqco.Buffer?okiqco.Buffer", httpUrl2.toString());
      assertTrue(httpUrl2.isHttps());
      assertEquals(443, httpUrl2.port());
      assertEquals(1, httpUrl2.pathSize());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("", httpUrl2.password());
      assertNull(httpUrl2.fragment());
      assertEquals(1, httpUrl2.querySize());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.username());
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.query("endIndex < beginIndex: ");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      
      String string1 = httpUrl_Builder1.toString();
      assertEquals("https://www.somefakebutwellformedurl.org/okiqco.Buffer?endIndex%20%3C%20beginIndex:%20", string1);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotNull(string1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      
      List<String> list1 = HttpUrl.queryStringToNamesAndValues(" content=");
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.encodedUsername("-9223372036854775808");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl0, httpUrl2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder4);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("https://www.somefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertTrue(httpUrl0.isHttps());
      
      int int0 = 50;
      // Undeclared exception!
      try { 
        httpUrl2.queryParameterName(50);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 100, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "5::1.R)ahQBm\"";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("5::1.R)ahQBm\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 5::1.R)ahQBm\"
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "::";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("::");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.port(329);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('j');
      assertEquals((-1), int0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment("\r");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("eBe::2");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "https:/www.omefakebutwellformedurl.org/..");
      assertFalse(boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.omefakebutwellformedurl.org/..");
      assertNotNull(httpUrl0);
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertNotNull(httpUrl_Builder0);
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("okio.Buffer");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertTrue(httpUrl1.isHttps());
      assertEquals(443, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.password());
      assertEquals("https://www.omefakebutwellformedurl.org/?okio.Buffer", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.query("https:/www.omefakebutwellformedurl.org/..");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder0.port(57);
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder4);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      
      List<String> list0 = httpUrl1.queryParameterValues("4RcAA#'QcU?");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(list0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertTrue(httpUrl1.isHttps());
      assertEquals(443, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.password());
      assertEquals("https://www.omefakebutwellformedurl.org/?okio.Buffer", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string0 = httpUrl0.encodedUsername();
      assertEquals("", string0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotNull(string0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder0.port(57);
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder5);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder1.password("okio.Buffer");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder6);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      
      String string1 = httpUrl_Builder6.toString();
      assertEquals("https://:okio.Buffer@www.omefakebutwellformedurl.org:57/?https:/www.omefakebutwellformedurl.org/..", string1);
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertNotNull(string1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      
      List<String> list1 = httpUrl0.queryParameterValues("UTF-8");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotNull(list1);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = httpUrl0.encodedQuery();
      assertNotSame(httpUrl0, httpUrl1);
      assertNull(string2);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      
      String string3 = httpUrl1.toString();
      assertEquals("https://www.omefakebutwellformedurl.org/?okio.Buffer", string3);
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertTrue(httpUrl0.isHttps());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertTrue(httpUrl1.isHttps());
      assertEquals(443, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.password());
      assertEquals("https://www.omefakebutwellformedurl.org/?okio.Buffer", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("", httpUrl1.username());
      
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue(57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 115, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.URL("http", "http", 2, "");
      assertNotNull(uRL0);
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.host());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertNotNull(httpUrl_Builder0);
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.host());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      
      List<String> list0 = httpUrl0.encodedPathSegments();
      assertNotNull(list0);
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.host());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      List<String> list1 = httpUrl0.queryParameterValues("");
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.host());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      int int0 = httpUrl0.pathSize();
      assertEquals(1, int0);
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.host());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "::a1::)ahQBmO\"";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::a1::)ahQBmO\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::a1::)ahQBmO\"
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:57b75@x#gtp");
      assertNotNull(httpUrl0);
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://57b75@x/#gtp", httpUrl0.toString());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("57b75", httpUrl0.username());
      assertEquals("gtp", httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("gtp", httpUrl0.fragment());
      assertEquals("x", httpUrl0.host());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertNotNull(httpUrl_Builder0);
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://57b75@x/#gtp", httpUrl0.toString());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("57b75", httpUrl0.username());
      assertEquals("gtp", httpUrl0.encodedFragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("gtp", httpUrl0.fragment());
      assertEquals("x", httpUrl0.host());
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("https:57b75@x#gtp");
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder.ParseResult httpUrl_Builder_ParseResult0 = HttpUrl.Builder.ParseResult.UNSUPPORTED_SCHEME;
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "http", 2, "");
      assertNotNull(uRL0);
      assertEquals("", uRL0.getFile());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(2, uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getPath());
      assertEquals("http://http:2", uRL0.toString());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("", uRL0.getFile());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(2, uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getPath());
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(2, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      boolean boolean1 = httpUrl0.isHttps();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("", uRL0.getFile());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(2, uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getPath());
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(2, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      
      List<String> list0 = httpUrl0.queryParameterValues("{UxL=>w:@Y{qR");
      assertNotNull(list0);
      assertEquals("", uRL0.getFile());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(2, uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("http", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getPath());
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("", httpUrl0.username());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(httpUrl0.isHttps());
      assertEquals(2, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addQueryParameter("", " \"<>^`{}|/?#");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      List<String> list0 = HttpUrl.queryStringToNamesAndValues(" \"'<>#&=");
      assertNotNull(list0);
      assertEquals(4, list0.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " \"#<>^`{|}");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = HttpUrl.percentEncoded((String) null, 4669, 443);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.encodedFragment("y");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "http", 156, "5");
      assertNotNull(uRL0);
      assertEquals(156, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("5", uRL0.getPath());
      assertEquals("http://http:1565", uRL0.toString());
      assertEquals("http://http:1565", uRL0.toExternalForm());
      assertEquals("5", uRL0.getFile());
      assertEquals("http", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http:156", uRL0.getAuthority());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals(156, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("5", uRL0.getPath());
      assertEquals("http://http:1565", uRL0.toString());
      assertEquals("http://http:1565", uRL0.toExternalForm());
      assertEquals("5", uRL0.getFile());
      assertEquals("http", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http:156", uRL0.getAuthority());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1565, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://http:1565/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      
      Buffer buffer0 = new Buffer();
      assertNotNull(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HttpUrl httpUrl1 = HttpUrl.get(uRL0);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertEquals(156, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("5", uRL0.getPath());
      assertEquals("http://http:1565", uRL0.toString());
      assertEquals("http://http:1565", uRL0.toExternalForm());
      assertEquals("5", uRL0.getFile());
      assertEquals("http", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http:156", uRL0.getAuthority());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1565, httpUrl1.port());
      assertEquals("http", httpUrl1.host());
      assertEquals("http://http:1565/", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(0, httpUrl1.querySize());
      
      boolean boolean0 = httpUrl0.equals(httpUrl1);
      assertTrue(boolean0);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertEquals(156, uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("5", uRL0.getPath());
      assertEquals("http://http:1565", uRL0.toString());
      assertEquals("http://http:1565", uRL0.toExternalForm());
      assertEquals("5", uRL0.getFile());
      assertEquals("http", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http:156", uRL0.getAuthority());
      assertNull(httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("http", httpUrl0.host());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(1565, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://http:1565/", httpUrl0.toString());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertFalse(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1565, httpUrl1.port());
      assertEquals("http", httpUrl1.host());
      assertEquals("http://http:1565/", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(0, httpUrl1.querySize());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "https:/www.omefakebutwellformedurl.org/..";
      HttpUrl httpUrl0 = HttpUrl.parse("https:/www.omefakebutwellformedurl.org/..");
      assertNotNull(httpUrl0);
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      
      HttpUrl httpUrl1 = httpUrl0.resolve("https:/www.omefakebutwellformedurl.org/..");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl1.newBuilder();
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl_Builder0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("okio.Buffer");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("okio.Buffer");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.reencodeForUri();
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder3);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HttpUrl httpUrl2 = httpUrl_Builder2.build();
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotNull(httpUrl2);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl2.password());
      assertEquals("https://www.omefakebutwellformedurl.org/?okio.Buffer", httpUrl2.toString());
      assertEquals(1, httpUrl2.querySize());
      assertNull(httpUrl2.fragment());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.username());
      assertEquals(443, httpUrl2.port());
      assertEquals("https", httpUrl2.scheme());
      assertTrue(httpUrl2.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl2.host());
      assertEquals(1, httpUrl2.pathSize());
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.query("endIndGx < beginIndOx: ");
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder4);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      
      String string1 = httpUrl_Builder2.toString();
      assertEquals("https://www.omefakebutwellformedurl.org/?endIndGx%20%3C%20beginIndOx:%20", string1);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertNotNull(string1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(string1.equals((Object)string0));
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      
      List<String> list0 = httpUrl2.queryParameterValues("4RcAA#'QcU?");
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertNotNull(list0);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl2.password());
      assertEquals("https://www.omefakebutwellformedurl.org/?okio.Buffer", httpUrl2.toString());
      assertEquals(1, httpUrl2.querySize());
      assertNull(httpUrl2.fragment());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.username());
      assertEquals(443, httpUrl2.port());
      assertEquals("https", httpUrl2.scheme());
      assertTrue(httpUrl2.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl2.host());
      assertEquals(1, httpUrl2.pathSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<String> list1 = HttpUrl.queryStringToNamesAndValues("https://www.omefakebutwellformedurl.org/?endIndGx%20%3C%20beginIndOx:%20");
      assertNotNull(list1);
      assertFalse(list1.equals((Object)list0));
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      
      boolean boolean0 = httpUrl2.equals(httpUrl0);
      assertFalse(boolean0);
      assertNotSame(httpUrl0, httpUrl2);
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotSame(httpUrl1, httpUrl2);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertNotSame(httpUrl2, httpUrl0);
      assertNotSame(httpUrl2, httpUrl1);
      assertTrue(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl0.equals((Object)httpUrl2));
      assertTrue(httpUrl1.equals((Object)httpUrl0));
      assertFalse(httpUrl1.equals((Object)httpUrl2));
      assertFalse(httpUrl2.equals((Object)httpUrl0));
      assertFalse(httpUrl2.equals((Object)httpUrl1));
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals(0, httpUrl0.querySize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(0, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      assertTrue(httpUrl1.isHttps());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl1.toString());
      assertEquals("", httpUrl1.password());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl2.password());
      assertEquals("https://www.omefakebutwellformedurl.org/?okio.Buffer", httpUrl2.toString());
      assertEquals(1, httpUrl2.querySize());
      assertNull(httpUrl2.fragment());
      assertNull(httpUrl2.encodedFragment());
      assertEquals("", httpUrl2.encodedPassword());
      assertEquals("", httpUrl2.username());
      assertEquals(443, httpUrl2.port());
      assertEquals("https", httpUrl2.scheme());
      assertTrue(httpUrl2.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl2.host());
      assertEquals(1, httpUrl2.pathSize());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedQueryParameter("2B", (String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addEncodedPathSegment("%2e.");
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder3);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "d!.D.@=^,L", 72, "d!.D.@=^,L");
      assertNotNull(uRL0);
      assertEquals("d!.D.@=^,L", uRL0.getHost());
      assertEquals(72, uRL0.getPort());
      assertEquals("d!.D.@=^,L:72", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("d!.D.@=^,L", uRL0.getPath());
      assertEquals("http://d!.D.@=^,L:72d!.D.@=^,L", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://d!.D.@=^,L:72d!.D.@=^,L", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("d!.D.@=^,L", uRL0.getFile());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("d!.D.@=^,L", uRL0.getHost());
      assertEquals(72, uRL0.getPort());
      assertEquals("d!.D.@=^,L:72", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("d!.D.@=^,L", uRL0.getPath());
      assertEquals("http://d!.D.@=^,L:72d!.D.@=^,L", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://d!.D.@=^,L:72d!.D.@=^,L", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("d!.D.@=^,L", uRL0.getFile());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://d!.D.%40%3D%5E,L:72d!.D.@=^,l/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("72d!.D.", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("72d!.D.", httpUrl0.password());
      assertEquals("=^,l", httpUrl0.host());
      assertEquals("d!.D.@=^,L", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      
      String string0 = MockURL.getFile(uRL0);
      assertEquals("d!.D.@=^,L", string0);
      assertNotNull(string0);
      assertEquals("d!.D.@=^,L", uRL0.getHost());
      assertEquals(72, uRL0.getPort());
      assertEquals("d!.D.@=^,L:72", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("d!.D.@=^,L", uRL0.getPath());
      assertEquals("http://d!.D.@=^,L:72d!.D.@=^,L", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://d!.D.@=^,L:72d!.D.@=^,L", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("d!.D.@=^,L", uRL0.getFile());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("d!.D.@=^,L");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string1 = MockURL.toString(uRL0);
      assertEquals("http://d!.D.@=^,L:72d!.D.@=^,L", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("d!.D.@=^,L", uRL0.getHost());
      assertEquals(72, uRL0.getPort());
      assertEquals("d!.D.@=^,L:72", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("d!.D.@=^,L", uRL0.getPath());
      assertEquals("http://d!.D.@=^,L:72d!.D.@=^,L", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://d!.D.@=^,L:72d!.D.@=^,L", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("d!.D.@=^,L", uRL0.getFile());
      
      httpUrl_Builder0.parse(httpUrl0, "");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertEquals("d!.D.@=^,L", uRL0.getHost());
      assertEquals(72, uRL0.getPort());
      assertEquals("d!.D.@=^,L:72", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("d!.D.@=^,L", uRL0.getPath());
      assertEquals("http://d!.D.@=^,L:72d!.D.@=^,L", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://d!.D.@=^,L:72d!.D.@=^,L", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("d!.D.@=^,L", uRL0.getFile());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://d!.D.%40%3D%5E,L:72d!.D.@=^,l/", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("72d!.D.", httpUrl0.encodedPassword());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("72d!.D.", httpUrl0.password());
      assertEquals("=^,l", httpUrl0.host());
      assertEquals("d!.D.@=^,L", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "d!.Da@=^,L", 105, "d!.Da@=^,L");
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("d!.Da@=^,L:105", uRL0.getAuthority());
      assertEquals("http://d!.Da@=^,L:105d!.Da@=^,L", uRL0.toString());
      assertEquals("d!.Da@=^,L", uRL0.getPath());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("d!.Da@=^,L", uRL0.getHost());
      assertEquals("http://d!.Da@=^,L:105d!.Da@=^,L", uRL0.toExternalForm());
      assertEquals(105, uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("d!.Da@=^,L", uRL0.getFile());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getQuery());
      assertEquals("d!.Da@=^,L:105", uRL0.getAuthority());
      assertEquals("http://d!.Da@=^,L:105d!.Da@=^,L", uRL0.toString());
      assertEquals("d!.Da@=^,L", uRL0.getPath());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("d!.Da@=^,L", uRL0.getHost());
      assertEquals("http://d!.Da@=^,L:105d!.Da@=^,L", uRL0.toExternalForm());
      assertEquals(105, uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("d!.Da@=^,L", uRL0.getFile());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("105d!.Da", httpUrl0.password());
      assertEquals("http://d!.Da%40%3D%5E,L:105d!.Da@=^,l/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("105d!.Da", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("d!.Da@=^,L", httpUrl0.username());
      assertEquals("=^,l", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      
      URL uRL1 = httpUrl0.url();
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertNull(uRL0.getQuery());
      assertEquals("d!.Da@=^,L:105", uRL0.getAuthority());
      assertEquals("http://d!.Da@=^,L:105d!.Da@=^,L", uRL0.toString());
      assertEquals("d!.Da@=^,L", uRL0.getPath());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("d!.Da@=^,L", uRL0.getHost());
      assertEquals("http://d!.Da@=^,L:105d!.Da@=^,L", uRL0.toExternalForm());
      assertEquals(105, uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("d!.Da@=^,L", uRL0.getFile());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("105d!.Da", httpUrl0.password());
      assertEquals("http://d!.Da%40%3D%5E,L:105d!.Da@=^,l/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("105d!.Da", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("d!.Da@=^,L", httpUrl0.username());
      assertEquals("=^,l", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("=^,l", uRL1.getHost());
      assertEquals("d!.Da%40%3D%5E,L:105d!.Da", uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("d!.Da%40%3D%5E,L:105d!.Da@=^,l", uRL1.getAuthority());
      assertEquals("http://d!.Da%40%3D%5E,L:105d!.Da@=^,l/", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals("http://d!.Da%40%3D%5E,L:105d!.Da@=^,l/", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      
      String string0 = httpUrl0.encodedPath();
      assertEquals("/", string0);
      assertNotSame(uRL0, uRL1);
      assertNotNull(string0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertNull(uRL0.getQuery());
      assertEquals("d!.Da@=^,L:105", uRL0.getAuthority());
      assertEquals("http://d!.Da@=^,L:105d!.Da@=^,L", uRL0.toString());
      assertEquals("d!.Da@=^,L", uRL0.getPath());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("d!.Da@=^,L", uRL0.getHost());
      assertEquals("http://d!.Da@=^,L:105d!.Da@=^,L", uRL0.toExternalForm());
      assertEquals(105, uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("d!.Da@=^,L", uRL0.getFile());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("105d!.Da", httpUrl0.password());
      assertEquals("http://d!.Da%40%3D%5E,L:105d!.Da@=^,l/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertFalse(httpUrl0.isHttps());
      assertEquals(80, httpUrl0.port());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("105d!.Da", httpUrl0.encodedPassword());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("d!.Da@=^,L", httpUrl0.username());
      assertEquals("=^,l", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "unrxpected sceme: ";
      String string1 = "Invalid host: ";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment(".%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string2 = "::1.);h1$\"";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::1.);h1$\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::1.);h1$\"
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "http";
      URL uRL0 = MockURL.URL("http", "http", 2, "");
      assertNotNull(uRL0);
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      
      URL uRL1 = httpUrl0.url();
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals("http", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://http:2/", uRL1.toExternalForm());
      assertEquals("http://http:2/", uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals(2, uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http:2", uRL1.getAuthority());
      
      int int0 = httpUrl0.querySize();
      assertEquals(0, int0);
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(httpUrl0.fragment());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("http", httpUrl0.host());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("http");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string1 = "[:";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.setEncodedPathSegment(0, "[:");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.addPathSegments("http");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.removePathSegment(0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder4);
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder4.addEncodedPathSegments("");
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder5);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder5.setPathSegment(2, "[:");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      URI uRI0 = MockURI.URI("http", "http", "t 0S[rto<0Zf(|9j");
      assertNotNull(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http:http#t%200S[rto%3C0Zf(%7C9j", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertEquals("t%200S[rto%3C0Zf(%7C9j", uRI0.getRawFragment());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http:http#t%200S[rto%3C0Zf(%7C9j", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertEquals("t%200S[rto%3C0Zf(%7C9j", uRI0.getRawFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals("http://http/#t%200S[rto%3C0Zf(%7C9j", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("t 0S[rto<0Zf(|9j", httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("t%200S[rto%3C0Zf(%7C9j", httpUrl0.encodedFragment());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder1 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder1);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegment("http");
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder1));
      
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      assertSame(uRI0, uRI1);
      assertSame(uRI1, uRI0);
      assertNotNull(uRI1);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http:http#t%200S[rto%3C0Zf(%7C9j", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertEquals("t%200S[rto%3C0Zf(%7C9j", uRI0.getRawFragment());
      assertNull(uRI1.getRawQuery());
      assertEquals("http:http#t%200S[rto%3C0Zf(%7C9j", uRI1.toString());
      assertTrue(uRI1.isOpaque());
      assertNull(uRI1.getHost());
      assertNull(uRI1.getRawPath());
      assertEquals("t%200S[rto%3C0Zf(%7C9j", uRI1.getRawFragment());
      assertNull(uRI1.getRawUserInfo());
      assertTrue(uRI1.isAbsolute());
      assertEquals("http", uRI1.getScheme());
      assertEquals((-1), uRI1.getPort());
      assertNull(uRI1.getRawAuthority());
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder3);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder3.equals((Object)httpUrl_Builder1));
      
      String string0 = httpUrl0.username();
      assertEquals("", string0);
      assertSame(uRI0, uRI1);
      assertNotNull(string0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http:http#t%200S[rto%3C0Zf(%7C9j", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertEquals("t%200S[rto%3C0Zf(%7C9j", uRI0.getRawFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals("http://http/#t%200S[rto%3C0Zf(%7C9j", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("t 0S[rto<0Zf(|9j", httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("t%200S[rto%3C0Zf(%7C9j", httpUrl0.encodedFragment());
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder1.addQueryParameter(".%2e", "J@%w|K1U3");
      assertNotSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertNotSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder4);
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder2));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder1.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder3));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder0));
      assertFalse(httpUrl_Builder4.equals((Object)httpUrl_Builder2));
      
      String string1 = httpUrl0.query();
      assertSame(uRI0, uRI1);
      assertNull(string1);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http:http#t%200S[rto%3C0Zf(%7C9j", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertEquals("t%200S[rto%3C0Zf(%7C9j", uRI0.getRawFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals("http://http/#t%200S[rto%3C0Zf(%7C9j", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("t 0S[rto<0Zf(|9j", httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("t%200S[rto%3C0Zf(%7C9j", httpUrl0.encodedFragment());
      
      String string2 = httpUrl0.encodedFragment();
      assertEquals("t%200S[rto%3C0Zf(%7C9j", string2);
      assertSame(uRI0, uRI1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http:http#t%200S[rto%3C0Zf(%7C9j", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertEquals("t%200S[rto%3C0Zf(%7C9j", uRI0.getRawFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals("http://http/#t%200S[rto%3C0Zf(%7C9j", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("t 0S[rto<0Zf(|9j", httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("t%200S[rto%3C0Zf(%7C9j", httpUrl0.encodedFragment());
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.addEncodedQueryParameter("J@%w|K1U3", "https:eqkr]%23t?@%60n#t%200s[rto%3c0zf(%7c9j");
      assertNotSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertNotSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotNull(httpUrl_Builder5);
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder0.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder2.equals((Object)httpUrl_Builder4));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder1));
      assertFalse(httpUrl_Builder5.equals((Object)httpUrl_Builder4));
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl0.newBuilder("https:");
      assertSame(uRI0, uRI1);
      assertNull(httpUrl_Builder6);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isOpaque());
      assertEquals("http:http#t%200S[rto%3C0Zf(%7C9j", uRI0.toString());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawPath());
      assertEquals("t%200S[rto%3C0Zf(%7C9j", uRI0.getRawFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("http", httpUrl0.host());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("", httpUrl0.password());
      assertEquals("http://http/#t%200S[rto%3C0Zf(%7C9j", httpUrl0.toString());
      assertFalse(httpUrl0.isHttps());
      assertEquals("t 0S[rto<0Zf(|9j", httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("t%200S[rto%3C0Zf(%7C9j", httpUrl0.encodedFragment());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      URL uRL0 = MockURL.URL("http", "http", 2, "");
      assertNotNull(uRL0);
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertEquals("http", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertEquals("http", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://http:2/", httpUrl0.toString());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      List<String> list0 = httpUrl0.queryParameterValues("");
      assertNotNull(list0);
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertEquals("http", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://http:2/", httpUrl0.toString());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      int int0 = httpUrl0.pathSize();
      assertEquals(1, int0);
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertEquals("http", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://http:2/", httpUrl0.toString());
      
      String string0 = httpUrl0.username();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("http://http:2", uRL0.toString());
      assertEquals("http://http:2", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http:2", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertEquals("http", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals(2, uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(2, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertNull(httpUrl0.fragment());
      assertEquals("http", httpUrl0.host());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertEquals("http://http:2/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(181);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("ee:2");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      String string0 = "::1.);h1$\"";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.host("ee:2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ee:2
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.omefakebutwellformedurl.org/..");
      assertNotNull(httpUrl0);
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertNotNull(httpUrl_Builder0);
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      
      String string0 = "okio.Buffer";
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("okio.Buffer");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl httpUrl1 = httpUrl_Builder0.build();
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(1, httpUrl1.querySize());
      assertTrue(httpUrl1.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(443, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      assertEquals("https://www.omefakebutwellformedurl.org/?okio.Buffer", httpUrl1.toString());
      
      int int0 = httpUrl1.querySize();
      assertEquals(1, int0);
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertNotSame(httpUrl1, httpUrl0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNull(httpUrl0.encodedFragment());
      assertNull(httpUrl0.fragment());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("https", httpUrl0.scheme());
      assertEquals(443, httpUrl0.port());
      assertTrue(httpUrl0.isHttps());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(httpUrl1.fragment());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("", httpUrl1.username());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(1, httpUrl1.querySize());
      assertTrue(httpUrl1.isHttps());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(443, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      assertEquals("https://www.omefakebutwellformedurl.org/?okio.Buffer", httpUrl1.toString());
      
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, "/[`3ndz%zRK4rXg[</z", true, true, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("6DL<^>]");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string0 = "4ixi-h.(T+jn";
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.setQueryParameter("4ixi-h.(T+jn", "4ixi-h.(T+jn");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      int int0 = (-1635);
      String string1 = "..";
      // Undeclared exception!
      try { 
        httpUrl_Builder2.setPathSegment((-1635), "..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "::";
      String string1 = "5";
      URL uRL0 = MockURL.URL("http", "::", 127, "5");
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("5", uRL0.getFile());
      assertEquals("5", uRL0.getPath());
      assertEquals("http://[::]:1275", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("[::]", uRL0.getHost());
      assertEquals(127, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://[::]:1275", uRL0.toExternalForm());
      assertEquals("[::]:127", uRL0.getAuthority());
      
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "http";
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("5");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.password("http");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder0.host("http");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder3);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("5");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("http://www.somefakebutwellformedurl.org/5", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.encodedFragment());
      
      HttpUrl httpUrl2 = httpUrl1.resolve("https:/http:2http");
      assertNotSame(httpUrl0, httpUrl1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNull(httpUrl2);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", httpUrl0.scheme());
      assertEquals("", httpUrl0.username());
      assertNull(httpUrl0.encodedFragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertFalse(httpUrl0.isHttps());
      assertEquals("", httpUrl0.password());
      assertEquals(0, httpUrl0.querySize());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl0.host());
      assertNull(httpUrl0.fragment());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("http", httpUrl1.scheme());
      assertEquals("www.somefakebutwellformedurl.org", httpUrl1.host());
      assertFalse(httpUrl1.isHttps());
      assertEquals("", httpUrl1.password());
      assertEquals("http://www.somefakebutwellformedurl.org/5", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals(0, httpUrl1.querySize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertNull(httpUrl1.encodedFragment());
      
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "https:/www.omefakebutwellformedurl.org/..");
      assertFalse(boolean0);
      
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/www.omefakebutwellformedurl.org/..");
      assertNotNull(httpUrl0);
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder();
      assertNotNull(httpUrl_Builder0);
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("https:/www.omefakebutwellformedurl.org/..");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedQuery("Zg`74bi_GW@");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder1.addPathSegment("Zg`74bi_GW@");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder3);
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl httpUrl1 = httpUrl_Builder3.build();
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl1.username());
      assertEquals("https://:https%3A%2Fwww.omefakebutwellformedurl.org%2F..@www.omefakebutwellformedurl.org/Zg%6074bi_GW@?Zg`74bi_GW@", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      assertEquals("https:/www.omefakebutwellformedurl.org/..", httpUrl1.password());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("https%3A%2Fwww.omefakebutwellformedurl.org%2F..", httpUrl1.encodedPassword());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertTrue(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      
      HttpUrl.Builder httpUrl_Builder4 = httpUrl_Builder3.query("https:/www.omefakebutwellformedurl.org/..");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertNotNull(httpUrl_Builder4);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder5 = httpUrl_Builder2.encodedFragment("Zg`74bi_GW@");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder5);
      assertSame(httpUrl_Builder2, httpUrl_Builder4);
      assertSame(httpUrl_Builder2, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder1);
      assertSame(httpUrl_Builder5, httpUrl_Builder2);
      assertSame(httpUrl_Builder5, httpUrl_Builder0);
      assertSame(httpUrl_Builder5, httpUrl_Builder3);
      assertSame(httpUrl_Builder5, httpUrl_Builder4);
      assertNotNull(httpUrl_Builder5);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder6 = httpUrl_Builder0.encodedQuery("Zg`74bi_GW@");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder6, httpUrl_Builder2);
      assertSame(httpUrl_Builder6, httpUrl_Builder1);
      assertSame(httpUrl_Builder6, httpUrl_Builder0);
      assertSame(httpUrl_Builder6, httpUrl_Builder3);
      assertSame(httpUrl_Builder6, httpUrl_Builder4);
      assertSame(httpUrl_Builder6, httpUrl_Builder5);
      assertNotNull(httpUrl_Builder6);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      String string0 = "";
      HttpUrl.Builder httpUrl_Builder7 = httpUrl_Builder3.encodedUsername("");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder7, httpUrl_Builder3);
      assertSame(httpUrl_Builder7, httpUrl_Builder1);
      assertSame(httpUrl_Builder7, httpUrl_Builder2);
      assertSame(httpUrl_Builder7, httpUrl_Builder0);
      assertSame(httpUrl_Builder7, httpUrl_Builder5);
      assertSame(httpUrl_Builder7, httpUrl_Builder6);
      assertSame(httpUrl_Builder7, httpUrl_Builder4);
      assertNotNull(httpUrl_Builder7);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      List<String> list0 = httpUrl1.queryParameterValues("Zg`74bi_GW@");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertNotSame(httpUrl1, httpUrl0);
      assertNotNull(list0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl1.username());
      assertEquals("https://:https%3A%2Fwww.omefakebutwellformedurl.org%2F..@www.omefakebutwellformedurl.org/Zg%6074bi_GW@?Zg`74bi_GW@", httpUrl1.toString());
      assertNull(httpUrl1.encodedFragment());
      assertEquals(443, httpUrl1.port());
      assertNull(httpUrl1.fragment());
      assertEquals("https:/www.omefakebutwellformedurl.org/..", httpUrl1.password());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("https%3A%2Fwww.omefakebutwellformedurl.org%2F..", httpUrl1.encodedPassword());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl1.host());
      assertEquals("https", httpUrl1.scheme());
      assertTrue(httpUrl1.isHttps());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      HttpUrl.Builder httpUrl_Builder8 = httpUrl_Builder4.password("pathSegments == null");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder7);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder3);
      assertSame(httpUrl_Builder0, httpUrl_Builder8);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder6);
      assertSame(httpUrl_Builder0, httpUrl_Builder4);
      assertSame(httpUrl_Builder0, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder7);
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
      assertSame(httpUrl_Builder1, httpUrl_Builder5);
      assertSame(httpUrl_Builder1, httpUrl_Builder6);
      assertSame(httpUrl_Builder1, httpUrl_Builder4);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder1, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder0);
      assertSame(httpUrl_Builder3, httpUrl_Builder5);
      assertSame(httpUrl_Builder3, httpUrl_Builder6);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
      assertSame(httpUrl_Builder3, httpUrl_Builder8);
      assertSame(httpUrl_Builder3, httpUrl_Builder2);
      assertSame(httpUrl_Builder3, httpUrl_Builder7);
      assertSame(httpUrl_Builder3, httpUrl_Builder4);
      assertSame(httpUrl_Builder4, httpUrl_Builder6);
      assertSame(httpUrl_Builder4, httpUrl_Builder8);
      assertSame(httpUrl_Builder4, httpUrl_Builder0);
      assertSame(httpUrl_Builder4, httpUrl_Builder1);
      assertSame(httpUrl_Builder4, httpUrl_Builder3);
      assertSame(httpUrl_Builder4, httpUrl_Builder2);
      assertSame(httpUrl_Builder4, httpUrl_Builder7);
      assertSame(httpUrl_Builder4, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder4);
      assertSame(httpUrl_Builder8, httpUrl_Builder1);
      assertSame(httpUrl_Builder8, httpUrl_Builder0);
      assertSame(httpUrl_Builder8, httpUrl_Builder3);
      assertSame(httpUrl_Builder8, httpUrl_Builder7);
      assertSame(httpUrl_Builder8, httpUrl_Builder2);
      assertSame(httpUrl_Builder8, httpUrl_Builder5);
      assertSame(httpUrl_Builder8, httpUrl_Builder6);
      assertNotNull(httpUrl_Builder8);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertEquals(0, httpUrl0.querySize());
      assertEquals("https", httpUrl0.scheme());
      assertNull(httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("https://www.omefakebutwellformedurl.org/", httpUrl0.toString());
      assertNull(httpUrl0.fragment());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("www.omefakebutwellformedurl.org", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#&&p");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        httpUrl_Builder8.encodedPath("https:/www.omefakebutwellformedurl.org/..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: https:/www.omefakebutwellformedurl.org/..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:hxjA~#http");
      assertNotNull(httpUrl0);
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("https://hxja~/#http", httpUrl0.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("hxja~", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("https:hxjA~#http");
      assertNotNull(httpUrl_Builder0);
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("https://hxja~/#http", httpUrl0.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("hxja~", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("https:hxjA~#http");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("https://hxja~/#http", httpUrl0.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("hxja~", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("https://hxja~/#http", httpUrl0.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("hxja~", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http", httpUrl1.fragment());
      assertTrue(httpUrl1.isHttps());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("hxja~", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("https://hxja~/hxjA~?https:hxjA~%23http#http", httpUrl1.toString());
      assertEquals("http", httpUrl1.encodedFragment());
      assertEquals(443, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      
      String string0 = httpUrl1.queryParameter("https:hxjA~#http");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertNotSame(httpUrl1, httpUrl0);
      assertNull(string0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("https://hxja~/#http", httpUrl0.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("hxja~", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("http", httpUrl1.fragment());
      assertTrue(httpUrl1.isHttps());
      assertEquals("https", httpUrl1.scheme());
      assertEquals(1, httpUrl1.querySize());
      assertEquals("hxja~", httpUrl1.host());
      assertEquals("", httpUrl1.username());
      assertEquals("https://hxja~/hxjA~?https:hxjA~%23http#http", httpUrl1.toString());
      assertEquals("http", httpUrl1.encodedFragment());
      assertEquals(443, httpUrl1.port());
      assertEquals("", httpUrl1.password());
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegments("https:hxjA~#http");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertEquals(0, httpUrl0.querySize());
      assertEquals("http", httpUrl0.fragment());
      assertEquals("https://hxja~/#http", httpUrl0.toString());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("", httpUrl0.username());
      assertEquals("hxja~", httpUrl0.host());
      assertTrue(httpUrl0.isHttps());
      assertEquals(443, httpUrl0.port());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals("", httpUrl0.password());
      assertEquals(1, httpUrl0.pathSize());
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "https:.ttp:416783";
      try { 
        HttpUrl.getChecked("https:.ttp:416783");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for https:.ttp:416783
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6@Ub. |[^Ci");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "hn";
      String string1 = "qMz;-Q`$SpkACsQM";
      httpUrl_Builder0.encodedFragment = "qMz;-Q`$SpkACsQM";
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "qMz;-Q`$SpkACsQM");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery("qMz;-Q`$SpkACsQM");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      String string2 = "%2e.";
      // Undeclared exception!
      try { 
        httpUrl_Builder1.setEncodedPathSegment(0, "%2e.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: %2e.
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      String string0 = "%2e";
      String string1 = "fooexample";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(0, "%2e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: %2e
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:hxjA~#http");
      assertNotNull(httpUrl0);
      assertEquals("http", httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertEquals("hxja~", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://hxja~/#http", httpUrl0.toString());
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("z@c|xI{oz],");
      assertNotNull(httpUrl_Builder0);
      assertEquals("http", httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertEquals("hxja~", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://hxja~/#http", httpUrl0.toString());
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query("https:hxjA~#http");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      assertEquals("http", httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertEquals("hxja~", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://hxja~/#http", httpUrl0.toString());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      assertNotNull(httpUrl1);
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("http", httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertEquals("hxja~", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://hxja~/#http", httpUrl0.toString());
      assertEquals("https", httpUrl1.scheme());
      assertTrue(httpUrl1.isHttps());
      assertEquals(443, httpUrl1.port());
      assertEquals("https://hxja~/z@%7F%7Fc%7Cx%7FI%7Boz],?https:hxjA~%23http", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("hxja~", httpUrl1.host());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      
      String string0 = httpUrl1.queryParameter("\"q3=C.");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotSame(httpUrl1, httpUrl0);
      assertNull(string0);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertFalse(httpUrl1.equals((Object)httpUrl0));
      assertEquals("http", httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertEquals("hxja~", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://hxja~/#http", httpUrl0.toString());
      assertEquals("https", httpUrl1.scheme());
      assertTrue(httpUrl1.isHttps());
      assertEquals(443, httpUrl1.port());
      assertEquals("https://hxja~/z@%7F%7Fc%7Cx%7FI%7Boz],?https:hxjA~%23http", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedPassword());
      assertEquals("", httpUrl1.username());
      assertNull(httpUrl1.fragment());
      assertEquals("", httpUrl1.password());
      assertNull(httpUrl1.encodedFragment());
      assertEquals("hxja~", httpUrl1.host());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(1, httpUrl1.pathSize());
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.addEncodedPathSegments("\"q3=C.");
      assertNotSame(httpUrl0, httpUrl1);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder2);
      assertFalse(httpUrl0.equals((Object)httpUrl1));
      assertEquals("http", httpUrl0.fragment());
      assertEquals("https", httpUrl0.scheme());
      assertEquals("http", httpUrl0.encodedFragment());
      assertEquals(0, httpUrl0.querySize());
      assertEquals(1, httpUrl0.pathSize());
      assertTrue(httpUrl0.isHttps());
      assertEquals("", httpUrl0.username());
      assertEquals("hxja~", httpUrl0.host());
      assertEquals("", httpUrl0.password());
      assertEquals(443, httpUrl0.port());
      assertEquals("", httpUrl0.encodedPassword());
      assertEquals("https://hxja~/#http", httpUrl0.toString());
      
      // Undeclared exception!
      try { 
        httpUrl_Builder2.host("z@c|xI{oz],");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: z@c|xI{oz],
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertNotNull(httpUrl_Builder1);
      
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.encodedFragment(" \"<>^`{}|/?#");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder2);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder0);
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
      assertNotNull(httpUrl_Builder2);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = "5::1.5Eh1Bm\"";
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("5::1.5Eh1Bm\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 5::1.5Eh1Bm\"
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }
}
