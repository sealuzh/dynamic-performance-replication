/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 20:04:16 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      float float0 = rationalNumber0.floatValue();
      assertEquals(Integer.MAX_VALUE, rationalNumber0.numerator);
      assertEquals(2.14748365E9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(565.043886146964);
      long long0 = rationalNumber0.longValue();
      assertEquals(565L, long0);
      assertEquals(3553561, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2724.810402));
      assertEquals((-2724.8104020059855), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3228.834);
      assertEquals(1614417, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1358.9664695250842));
      String string0 = rationalNumber0.toString();
      assertEquals("-25047111/18431 (-1,358.966)", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-3398L), (-3398L));
      String string0 = rationalNumber0.toString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-3398L), (-3398L));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-3589.94056461));
      int int0 = rationalNumber0.intValue();
      assertEquals((-3589.9405646000146), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-3589), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      assertEquals(0.0, rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1358.9664695250842));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-1,358.966", string0);
      assertEquals((-25047111), rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483648L), 0L);
      String string0 = rationalNumber0.toString();
      assertEquals("Invalid rational (1/0)", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.5628142786187307);
      assertEquals(9399, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2448L, 2147483701L);
      assertEquals(59652325, rationalNumber0.divisor);
      assertEquals(1.1399388037264264E-6, rationalNumber0.doubleValue(), 0.01);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(59652325, 59652325);
      assertEquals(1, rationalNumber1.divisor);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483649L), (-2147483649L));
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483701L, 2147483701L);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((byte)1, rationalNumber0.byteValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483654L), (-1L));
      assertEquals((-2.147483642E9), rationalNumber0.doubleValue(), 0.01);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2147483648L));
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-1L), 2147483693L);
      RationalNumber rationalNumber1 = new RationalNumber(1, 1);
      String string0 = rationalNumber0.toString();
      assertEquals("1/2147483603 (0)", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2129L, (-2147483663L));
      assertEquals((-9.90927212007886E-7), rationalNumber0.doubleValue(), 0.01);
      assertEquals((-7064091), rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RationalNumber.factoryMethod((-2147483687L), 2L);
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483687L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483687, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.1474836465427296E9);
      String string0 = rationalNumber0.toString();
      assertEquals("2,147,483,647", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(2.14748365E9F, float0, 0.01F);
      assertEquals(2.147483647E9, rationalNumber0.doubleValue(), 0.01);
  }
}
