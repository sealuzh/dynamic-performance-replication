/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:43:57 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ChoiceFormat;
import java.util.HashMap;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll(0.964);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = Matrix.zero(39, 43);
      Matrix.identity(39);
      matrix0.setAll(39);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 91;
      CCSMatrix cCSMatrix0 = new CCSMatrix(91, 3);
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix0.multiplyByItsTranspose();
      cCSMatrix0.copyOfShape(3, 3);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(91);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 91
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1, 1);
      int int0 = 0;
      Matrix.zero(0, 0);
      cCSMatrix0.add(Double.POSITIVE_INFINITY);
      cCSMatrix0.setAll(1);
      cCSMatrix0.swapRows(424, 424);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.copyOfShape(1, 0);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(424);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 424
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(denseMatrix0, denseMatrix0, cCSMatrix0, cCSMatrix0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.each(matrixProcedure0);
      double[][] doubleArray0 = new double[0][3];
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.columnMajorIterator();
      // Undeclared exception!
      try { 
        cCSMatrix0.blankOfShape((-842), (-842));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -842x-842
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 1421);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1421;
      doubleArray0[2] = (double) (-1);
      cCSMatrix0.nonZeroAt(0, 0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = cCSMatrix0.toBinary();
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      CCSMatrix cCSMatrix0 = CCSMatrix.randomSymmetric(0, (-1421.5), (Random) mockRandom0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      mockRandom0.doubles();
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZeroInColumn(0, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(431, 431);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-1);
      MockRandom mockRandom0 = new MockRandom((-1));
      // Undeclared exception!
      try { 
        CCSMatrix.random((-1), (-1), (double) (-1), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 48;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(1, 48, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-538.09302);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-538.09302);
      doubleArray3[1] = (-538.09302);
      doubleArray3[2] = (-538.09302);
      doubleArray3[3] = (-538.09302);
      doubleArray3[4] = (-538.09302);
      doubleArray3[5] = (-538.09302);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(431, 431);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.getColumn((-545));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7, 7);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      
      int[] intArray0 = new int[1];
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.select(intArray0, intArray0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(1, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(1, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertArrayEquals(new int[] {0}, intArray0);
      
      // Undeclared exception!
      try { 
        cCSMatrix1.nonZeroIteratorOfColumn(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1401, 433.3603039);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt((-1099), 154, matrixFunction0);
      cCSMatrix0.each((MatrixProcedure) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0.14285714285714285, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(1, vectorProcedure0);
      assertNotNull(cCSMatrix1);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0.14285714285714285, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      VectorIterator vectorIterator0 = cCSMatrix0.nonZeroIteratorOfColumn(7);
      assertNotNull(vectorIterator0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0.14285714285714285, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      int[] intArray0 = new int[5];
      intArray0[1] = 1;
      intArray0[3] = 1;
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cCSMatrix0.nonZeroRowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0.14285714285714285, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      intArray0[4] = 7;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 7;
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7, 7);
      assertNotNull(cCSMatrix0);
      assertEquals(7, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      
      int[] intArray0 = new int[1];
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.select(intArray0, intArray0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(cCSMatrix1);
      assertEquals(7, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(1, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(1, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertArrayEquals(new int[] {0}, intArray0);
      
      VectorIterator vectorIterator0 = cCSMatrix1.iteratorOfRow(7);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertNotNull(vectorIterator0);
      assertEquals(7, cCSMatrix0.rows());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(1, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(1, cCSMatrix1.columns());
      assertFalse(cCSMatrix0.equals((Object)cCSMatrix1));
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertArrayEquals(new int[] {0}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 728;
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix1, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(7, 7, 7);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double0 = cCSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(7, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(7, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(1270);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1270
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1080;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(4909, 4909, 1080);
      assertNotNull(cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(4909, cCSMatrix0.rows());
      assertEquals(4909, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      
      cCSMatrix0.iteratorOrNonZeroColumns();
      double double0 = cCSMatrix0.infinityNorm();
      int int1 = (-271);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Matrix.constant(int1, int0, double0);
      cCSMatrix0.eachInColumn(int1, vectorProcedure0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 6);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.transformColumn(6, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1, 1);
      cCSMatrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse(2316, 2316, 111.59826);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2316' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(4, 4);
      cCSMatrix0.toSparseMatrix();
      double double0 = new Double(4);
      cCSMatrix0.nonZeroAt(2, 2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      Matrix matrix0 = cCSMatrix0.blankOfShape(7, 2);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 210;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(1175, 210, (double) 210, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(88);
      CCSMatrix cCSMatrix0 = CCSMatrix.random(88, 429, 0.1, (Random) mockRandom0);
      cCSMatrix0.iteratorOrNonZeroColumns();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      Matrix.zero(0, 0);
      cCSMatrix0.setAll(1);
      cCSMatrix0.swapRows(424, 424);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(0, vectorProcedure0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(23, 6);
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.toColumnMajorSparseMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(421);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 421
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(43, 43);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Matrix matrix1 = Matrix.zero(39, 43);
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix1, matrix1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '44' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.nonZeroRowMajorIterator();
      // Undeclared exception!
      try { 
        CCSMatrix.identity((-1396));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 3;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(3, 3, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int[] intArray0 = new int[13];
      intArray0[0] = (int) (byte) (-43);
      intArray0[1] = (int) (byte) (-43);
      intArray0[2] = (int) (byte) (-43);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(164, 1401);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-43)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt((byte) (-43), 3, matrixFunction0);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(1, 48, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 13;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(13, 13);
      cCSMatrix0.getRow(2105);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2105;
      doubleArray0[1] = (double) 13;
      doubleArray0[2] = (double) 8;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(13, 8, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int[] intArray0 = new int[13];
      intArray0[0] = (int) (byte) (-43);
      intArray0[1] = (int) (byte) (-43);
      intArray0[2] = (int) (byte) (-43);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(164, 1401);
      cCSMatrix0.toBinary();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-43)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt((byte) (-43), 3, matrixFunction0);
      cCSMatrix0.minInColumn((-1701));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 419.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = 2.0;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = 419.0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(2486, (-1700.133183));
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(20, 20, 61);
      cCSMatrix0.iteratorOrNonZeroColumns();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(6, vectorProcedure0);
      cCSMatrix0.nonZeroAt(20, 6);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 0, doubleArray0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      cCSMatrix0.setAll(1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("3");
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      // Undeclared exception!
      try { 
        cCSMatrix1.nonZeroAt(0, (-4092));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4092
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, 1, 1);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(0, vectorFunction0);
      byte byte0 = (byte)4;
      byte byte1 = (byte)43;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(2, vectorFunction0);
      byte byte0 = (byte)43;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7, 7);
      int[] intArray0 = new int[1];
      cCSMatrix0.nonZeroRowMajorIterator();
      cCSMatrix0.select(intArray0, intArray0);
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(7);
      cCSMatrix1.getRow(2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, (double)7, 709.18965161, 709.18965161, (double)2).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(2, vectorFunction0);
      byte byte0 = (byte)6;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      MockRandom mockRandom0 = new MockRandom();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)7, (double)7, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 67.79879714).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cCSMatrix0.setAll((-1.0));
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      cCSMatrix0.toMatrixMarket();
      CCSMatrix.diagonal(7, 7);
      cCSMatrix0.min();
      int int0 = (-1979);
      // Undeclared exception!
      try { 
        CCSMatrix.zero((-1979), 41, (-1979));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1979x41
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      Matrix.unit(3086, 2);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(110, 1288, 1);
      String string0 = "";
      DenseVector denseVector0 = DenseVector.fromCSV("");
      Vector vector0 = ooPlaceMatrixByVectorMultiplication0.apply(rowMajorSparseMatrix0, denseVector0);
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn(1, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 110. Should be: 2.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 32;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      Matrix.identity(32);
      int[] intArray0 = new int[0];
      cCSMatrix0.select(intArray0, intArray0);
      int int1 = 1;
      VectorProcedure vectorProcedure0 = null;
      cCSMatrix0.eachInColumn(int1, vectorProcedure0);
      int int2 = 418;
      cCSMatrix0.nonZeroIteratorOfColumn(int2);
      int[] intArray1 = new int[1];
      intArray1[0] = int0;
      cCSMatrix0.select(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      int int0 = 2;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 4725.3674727, (double)7, 1699.11899013, (double)7).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(2, vectorFunction0);
      int int1 = (-1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      cCSMatrix0.nonZeroAt(2, 2);
      // Undeclared exception!
      try { 
        CCSMatrix.identity((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
          int int0 = 2;
          cCSMatrix0.copyOfShape(666, 2);
          // Undeclared exception!
          try { 
            SparseMatrix.fromMatrixMarket((String) null);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("java.util.StringTokenizer", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 7;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      MockRandom mockRandom0 = new MockRandom();
      Matrix.randomSymmetric(7, mockRandom0);
      int int1 = 2;
      int int2 = 32;
      Matrix.zero(32, 2);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape(2, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1669, 6298, 48);
      cCSMatrix0.max();
      cCSMatrix0.setAll(0.0);
      cCSMatrix0.getOrElse(2, 48, (-0.040313859860463486));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      MockRandom mockRandom0 = new MockRandom();
      Matrix.zero(32, 2);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      cCSMatrix0.maxInColumn(2);
      cCSMatrix0.multiply((Matrix) cCSMatrix0);
      CCSMatrix.zero(7, 32, 2);
      cCSMatrix1.norm();
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      CCSMatrix cCSMatrix2 = (CCSMatrix)cCSMatrix0.select(intArray0, intArray0);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(3524.2922389637).when(matrixAccumulator0).accumulate();
      cCSMatrix2.foldNonZero(matrixAccumulator0);
      CCSMatrix.diagonal(2, 85.0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-126);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.each(matrixProcedure0);
      CCSMatrix cCSMatrix3 = CCSMatrix.randomSymmetric(1764, 0.11835034190722742, (Random) mockRandom0);
      int int0 = 33;
      cCSMatrix3.getRow(int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("3");
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.shuffle();
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((-2579.11)).when(vectorAccumulator0).accumulate();
      cCSMatrix1.foldNonZeroInColumns(vectorAccumulator0);
      double double0 = new Double((-2579.11));
      CCSMatrix cCSMatrix2 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)8;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((-1238.25943959), 0.23473823893078555);
      cCSMatrix2.rank();
      // Undeclared exception!
      try { 
        cCSMatrix2.updateAt(419, (byte)84, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 84
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      cCSMatrix0.minInColumn(2);
      MockRandom mockRandom0 = new MockRandom();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("3");
      cCSMatrix0.minInColumn(0);
      cCSMatrix0.columnMajorIterator();
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV("3");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      byte byte0 = (byte)13;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)112;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int[] intArray0 = new int[13];
      intArray0[0] = (int) (byte) (-43);
      intArray0[1] = (-1038);
      intArray0[2] = (int) (byte) (-43);
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(163, 1401);
      cCSMatrix0.nonZeroAt((-43), 30);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7, 7);
      cCSMatrix0.copyOfShape(305, 1507);
      cCSMatrix0.power(7);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(666, (-2422.4));
      cCSMatrix1.minInColumn(26);
      SparseMatrix.fromMatrixMarket("org.la4j.matrix.dense.Basic1DMatrix");
      int int0 = 4411;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateColumn(int0, vectorFunction0);
      MockRandom mockRandom0 = new MockRandom();
      cCSMatrix1.rank();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
      int[] intArray0 = new int[1];
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix1.multiply((Matrix) cCSMatrix1);
      cCSMatrix1.iterator();
      // Undeclared exception!
      try { 
        cCSMatrix1.maxInColumn(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = 7;
      CCSMatrix cCSMatrix0 = new CCSMatrix(7, 7, 7);
      int int1 = 2;
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(7, mockRandom0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.maxInColumn(2);
      double double0 = new Integer(2);
      Matrix matrix1 = null;
      Matrix matrix2 = cCSMatrix0.multiply(matrix0);
      // Undeclared exception!
      try { 
        matrix2.minInColumn(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("3");
      cCSMatrix0.minInColumn(0);
      cCSMatrix0.columnMajorIterator();
      CCSMatrix cCSMatrix1 = CCSMatrix.fromCSV("3");
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.4487014432478935)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom();
      byte byte0 = (byte)13;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)112;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 132;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix1 = CCSMatrix.random(3, 132, 0.9, (Random) mockRandom0);
      cCSMatrix1.iterator();
      cCSMatrix1.rank();
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.nonZeroColumnMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int int1 = 3;
      MockRandom mockRandom1 = new MockRandom();
      CCSMatrix cCSMatrix2 = CCSMatrix.random(int1, int0, (double) int0, (Random) mockRandom1);
      cCSMatrix1.update(matrixFunction0);
      byte byte0 = (byte)13;
      byte byte1 = (byte)112;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = byte0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-11);
      byteArray0[2] = byte2;
      CCSMatrix.fromBinary(byteArray0);
      VectorProcedure vectorProcedure0 = null;
      MockRandom mockRandom2 = new MockRandom(byteArray0[1]);
      cCSMatrix1.trace();
      int int2 = 290;
      int int3 = Integer.MAX_VALUE;
      double double0 = Double.POSITIVE_INFINITY;
      CCSMatrix.random(int2, int3, double0, (Random) mockRandom2);
      int int4 = 75;
      cCSMatrix2.eachInColumn(int4, vectorProcedure0);
      String string0 = "";
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("3");
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      SparseMatrix.identity(0);
      CCSMatrix cCSMatrix2 = new CCSMatrix(1984, 1984);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      Matrix.zero(13, 32);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      cCSMatrix1.copyOfShape(32, 1984);
      cCSMatrix1.withInverter(linearAlgebra_InverterFactory0);
      cCSMatrix1.maxInColumn(0);
      CCSMatrix.fromMatrixMarket("3");
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1, 4);
      cCSMatrix0.getRow(37);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 37;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 208;
      doubleArray0[3] = (double) 208;
      doubleArray0[4] = (double) 37;
      doubleArray0[5] = (double) 208;
      doubleArray0[6] = (double) 1;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1, 208, doubleArray0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("3");
      int int1 = 37;
      Matrix matrix0 = cCSMatrix0.power(37);
      cCSMatrix0.minInColumn(0);
      matrix0.add(6548.95);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.minInColumn(0);
      int int2 = 16;
      // Undeclared exception!
      try { 
        cCSMatrix1.maxInColumn(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      byteArray0[0] = (byte)48;
      CCSMatrix cCSMatrix0 = CCSMatrix.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.setColumn((int) (byte)48, 8.050261733357988E-4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          CCSMatrix cCSMatrix0 = CCSMatrix.identity(7);
          MockRandom mockRandom0 = new MockRandom();
          int int0 = 2;
          Matrix.zero(32, 2);
          LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.NO_PIVOT_GAUSS;
          cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
          Matrix matrix0 = cCSMatrix0.copyOfShape(7, 32);
          cCSMatrix0.shuffle();
          cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
          Integer integer0 = new Integer(32);
          cCSMatrix0.multiply((Matrix) cCSMatrix0);
          cCSMatrix0.blank();
          CCSMatrix.zero(7, 32, 2);
          matrix0.norm();
          int[] intArray0 = new int[1];
          intArray0[0] = 2;
          CCSMatrix cCSMatrix1 = new CCSMatrix();
          CCSMatrix.diagonal(2, 67.21475607981989);
          int[] intArray1 = new int[0];
          // Undeclared exception!
          try { 
            matrix0.select(intArray0, intArray1);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // No rows or columns selected.
             //
             verifyException("org.la4j.Matrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
