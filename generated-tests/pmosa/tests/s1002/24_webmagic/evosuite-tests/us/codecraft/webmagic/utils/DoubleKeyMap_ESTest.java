/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 19:12:12 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, String, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Object>((Map<Integer, Map<String, Object>>) null, class0);
      doubleKeyMap1.newMap();
      Integer integer0 = new Integer(1);
      doubleKeyMap1.get(integer0);
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap2 = new DoubleKeyMap<Object, String, String>(hashMap0);
      hashMap0.put("", (Map<String, String>) null);
      Map<String, String> map0 = doubleKeyMap2.newMap();
      doubleKeyMap2.get((Object) "");
      DoubleKeyMap<Object, Object, Object> doubleKeyMap3 = new DoubleKeyMap<Object, Object, Object>();
      Map<String, Object> map1 = doubleKeyMap3.newMap();
      doubleKeyMap3.remove((Object) null);
      Class<HashMap> class1 = HashMap.class;
      doubleKeyMap3.newMap();
      DoubleKeyMap<Integer, String, String> doubleKeyMap4 = new DoubleKeyMap<Integer, String, String>(class1);
      doubleKeyMap4.remove(integer0, (String) null);
      Integer integer1 = new Integer(1);
      doubleKeyMap4.get(integer1);
      doubleKeyMap3.get((Object) integer0, (Object) map0);
      DoubleKeyMap<String, String, Object> doubleKeyMap5 = new DoubleKeyMap<String, String, Object>((Map<String, Map<String, Object>>) null);
      // Undeclared exception!
      try { 
        doubleKeyMap5.put("", map1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(class0);
      doubleKeyMap1.remove("K", (Object) "K");
      DoubleKeyMap<String, String, Object> doubleKeyMap2 = new DoubleKeyMap<String, String, Object>(class0);
      Map<String, Map<String, String>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<String, String, String> doubleKeyMap3 = new DoubleKeyMap<String, String, String>(map0);
      doubleKeyMap3.put("K", "K", "n[9NE");
      doubleKeyMap3.put("K", "K", ";4h$(If,8cC|NunXx\"S");
      Class<HashMap> class1 = HashMap.class;
      doubleKeyMap2.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap4 = new DoubleKeyMap<String, Object, Object>(class1);
      doubleKeyMap4.remove("n[9NE");
      doubleKeyMap3.remove((String) null, "");
      HashMap<Object, Map<Object, Object>> hashMap1 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap5 = new DoubleKeyMap<Object, Object, Object>(hashMap1);
      Integer integer0 = new Integer((-502));
      hashMap1.put(integer0, (Map<Object, Object>) null);
      doubleKeyMap5.remove((Object) null);
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put("$ztg", (Map<Object, Integer>) hashMap2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      doubleKeyMap0.newMap();
      doubleKeyMap0.remove("");
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer((-1));
      doubleKeyMap1.put("wrong proto type map ", (Object) integer0, integer0);
      Object object0 = new Object();
      doubleKeyMap1.remove("wrong proto type map ", object0);
      DoubleKeyMap<String, Object, String> doubleKeyMap2 = new DoubleKeyMap<String, Object, String>((Map<String, Map<Object, String>>) null);
      doubleKeyMap0.put("us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) integer0, ";");
      DoubleKeyMap<String, Integer, Object> doubleKeyMap3 = new DoubleKeyMap<String, Integer, Object>();
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(0);
      Object object1 = doubleKeyMap3.get("", integer0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = new Object();
      Integer integer0 = new Integer((-2013));
      Object object1 = new Object();
      doubleKeyMap0.put((Object) integer0, object1, object1);
      Integer integer1 = new Integer((-2013));
      Object object2 = doubleKeyMap0.get((Object) integer1, (Object) integer1);
      assertNull(object2);
  }
}
