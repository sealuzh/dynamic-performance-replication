/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:33:19 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import okio.Segment;
import okio.SegmentPool;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Segment_ESTest extends Segment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = new Segment();
      segment0.writeTo(segment1, 7022);
      assertNotSame(segment0, segment1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Segment segment0 = new Segment();
      // Undeclared exception!
      try { 
        segment0.split(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Segment segment0 = new Segment();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-16);
      Segment segment1 = new Segment(byteArray0, (byte) (-16), 3206, true, false);
      // Undeclared exception!
      try { 
        segment0.writeTo(segment1, (byte) (-16));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Segment segment0 = new Segment();
      segment0.pos = 8203;
      // Undeclared exception!
      try { 
        segment0.split(8203);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Segment segment0 = new Segment();
      segment0.next = segment0;
      SegmentPool.next = segment0;
      SegmentPool.next.prev = segment0;
      Segment segment1 = new Segment();
      // Undeclared exception!
      try { 
        segment0.compact();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      int int0 = 8192;
      Segment segment0 = new Segment(byteArray0, (byte)0, 8192, false, true);
      // Undeclared exception!
      try { 
        segment0.split(167);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = new Segment();
      segment0.next = segment1;
      SegmentPool.next = segment0;
      SegmentPool.next.prev = segment1;
      Segment segment2 = new Segment();
      segment0.compact();
      assertNotSame(segment0, segment1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = segment0.unsharedCopy();
      // Undeclared exception!
      try { 
        segment1.writeTo(segment0, 8203);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Segment segment0 = new Segment();
      int int0 = 4873;
      boolean boolean0 = true;
      Segment segment1 = new Segment((byte[]) null, 1561, 4873, true, true);
      // Undeclared exception!
      try { 
        segment1.split(1561);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Segment segment0 = new Segment();
      int int0 = 0;
      segment0.sharedCopy();
      segment0.pos = 0;
      Segment segment1 = segment0.unsharedCopy();
      segment1.owner = false;
      // Undeclared exception!
      try { 
        segment1.writeTo(segment0, 8203);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Segment segment0 = new Segment();
      segment0.pos = 16;
      Segment segment1 = new Segment();
      // Undeclared exception!
      try { 
        segment1.writeTo(segment0, 8203);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = new Segment();
      segment0.writeTo(segment1, 537);
      SegmentPool.next = segment1;
      segment1.limit = 537;
      SegmentPool.next.prev = segment0;
      segment0.writeTo(segment1, 2724);
      segment0.limit = 3261;
      Segment segment2 = segment0.sharedCopy();
      Segment segment3 = new Segment();
      segment3.unsharedCopy();
      Segment segment4 = segment2.sharedCopy();
      SegmentPool.next.prev.sharedCopy();
      segment1.next = SegmentPool.next;
      segment1.compact();
      segment1.push(SegmentPool.next);
      // Undeclared exception!
      try { 
        segment4.compact();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = new Segment();
      segment0.writeTo(segment1, 537);
      SegmentPool.next = segment1;
      segment1.limit = 537;
      SegmentPool.next.prev = segment0;
      segment0.writeTo(segment1, 2724);
      segment0.limit = 3261;
      Segment segment2 = segment0.sharedCopy();
      Segment segment3 = new Segment();
      Segment segment4 = segment3.unsharedCopy();
      segment2.sharedCopy();
      SegmentPool.next.prev.sharedCopy();
      segment1.next = segment3;
      segment1.compact();
      segment1.push(SegmentPool.next);
      SegmentPool.next.push(segment2);
      SegmentPool.next.prev.unsharedCopy();
      Segment segment5 = new Segment();
      SegmentPool.next.compact();
      assertNotSame(SegmentPool.next, segment4);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Segment segment0 = new Segment();
      Segment segment1 = new Segment();
      SegmentPool.next = segment1;
      SegmentPool.next.prev = segment0;
      segment0.writeTo(segment1, 2750);
      segment0.limit = 2750;
      segment0.sharedCopy();
      Segment segment2 = new Segment();
      Segment segment3 = SegmentPool.next.prev.sharedCopy();
      // Undeclared exception!
      try { 
        segment3.writeTo(SegmentPool.next.prev, 5500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Segment", e);
      }
  }
}
