/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 05:28:31 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.InputStreamReader;
import java.io.PushbackInputStream;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReaderScanner_ESTest extends JSONReaderScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(pushbackInputStream0);
      JSONReaderScanner jSONReaderScanner0 = null;
      try {
        jSONReaderScanner0 = new JSONReaderScanner(inputStreamReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("T^o/k. e.E");
      int int0 = jSONReaderScanner0.scanType("T^o/k. e.E");
      assertEquals((-2), int0);
      
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertEquals('T', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[");
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals("", string0);
      
      char[] charArray0 = new char[0];
      jSONReaderScanner0.charArrayCompare(charArray0);
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[3];
      jSONReaderScanner0.stringDefaultValue = "";
      charArray0[0] = '%';
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanFieldString(charArray0);
      charArray0[1] = 'B';
      charArray0[2] = 'v';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy((-2155), charArray0, (-2155), (-2155));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 3165);
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertFalse(boolean0);
      
      jSONReaderScanner0.bytesValue();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state, textLength is zero");
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.isEOF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = ">@<I(jD";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(">@<I(jD", 657);
      jSONReaderScanner0.isBlankInput();
      JSON.DEFAULT_PARSER_FEATURE = 0;
      jSONReaderScanner0.close();
      SymbolTable symbolTable0 = new SymbolTable(44);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol(99, 0, 657, symbolTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'S';
      charArray0[1] = 'O';
      charArray0[2] = '!';
      charArray0[3] = '!';
      charArray0[4] = '\"';
      charArray0[5] = 'c';
      charArray0[6] = ';';
      charArray0[7] = 'u';
      charArray0[8] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 18);
      String string0 = jSONReaderScanner0.subString(1129, 0);
      assertEquals('S', jSONReaderScanner0.getCurrent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Wq", 2399);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-1), 2399);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = '\'';
      charArray0[2] = 'Q';
      charArray0[3] = 'x';
      charArray0[4] = ',';
      charArray0[5] = 'u';
      charArray0[6] = 'l';
      charArray0[7] = 's';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      jSONReaderScanner0.sp = 0;
      linkedList1.offerLast("4V");
      linkedList1.addLast("*:\"q~");
      jSONReaderScanner0.scanStringArray(linkedList1, 'S');
      jSONReaderScanner0.bytesValue();
      char char0 = jSONReaderScanner0.next();
      assertEquals('\u001A', char0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = 1317;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1317);
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.isBlankInput();
      int int1 = 0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = '.';
      charArray0[2] = '`';
      charArray0[3] = '\\';
      charArray0[4] = 'Y';
      charArray0[5] = 's';
      charArray0[6] = '~';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 164, 164);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      Class<Feature> class0 = Feature.class;
      jSONReaderScanner0.stringDefaultValue = "\u0000*no/l";
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, '0');
      jSONReaderScanner0.charAt(0);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$");
      char char0 = jSONReaderScanner0.charAt(26);
      assertEquals('\u0000', char0);
      
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(M2c3!J1EHa", 26);
      jSONReaderScanner0.charAt(26);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(26, 26, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 2008;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2008);
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.sub_chars(1702, 1702);
      char char0 = jSONReaderScanner0.charAt(704);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = '<';
      charArray0[2] = '7';
      charArray0[3] = 'h';
      charArray0[4] = 'B';
      charArray0[5] = '7';
      charArray0[6] = 'H';
      charArray0[7] = '9';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20);
      char[] charArray1 = jSONReaderScanner0.sub_chars(3, 3);
      assertArrayEquals(new char[] {'h', 'B', '7'}, charArray1);
      assertEquals('h', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 3165);
      assertTrue(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextToken();
      char char0 = jSONReaderScanner0.charAt(681);
      assertEquals('\u001A', char0);
      
      jSONReaderScanner0.isEOF();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SymbolTable symbolTable0 = new SymbolTable(15);
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 96);
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 0);
      jSONReaderScanner0.putChar('{');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2008);
      jSONReaderScanner0.stringVal();
      assertFalse(jSONReaderScanner0.isEOF());
      
      char char0 = jSONReaderScanner0.next();
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2008);
      int int0 = jSONReaderScanner0.indexOf('*', 2008);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      int int0 = jSONReaderScanner0.indexOf('C', 118);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("AllowISO8601DateFormat");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.charAt(1754);
      boolean boolean0 = jSONReaderScanner0.hasSpecial;
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^(\u0001f", 3165);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.eofPos = 23;
      jSONReaderScanner0.charAt(681);
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals(1, jSONReaderScanner0.token());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$");
      jSONReaderScanner0.scanLong('6');
      jSONReaderScanner0.putChar('6');
      assertEquals('$', jSONReaderScanner0.getCurrent());
      
      char char0 = jSONReaderScanner0.next();
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', char0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("T^o/k. e.E", 83);
      jSONReaderScanner0.putChar('v');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.sub_chars(2, 2);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("T^o/k. e.E");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("SupportArrayToBean", 78);
      jSONReaderScanner1.putChar(')');
      // Undeclared exception!
      try { 
        jSONReaderScanner1.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3EbUY%");
      jSONReaderScanner0.indexOf('M', 298);
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.close();
      jSONReaderScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.stringVal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("BT^[");
      jSONReaderScanner0.putChar('i');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("BT^[");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.putChar('n');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("encodeUTF8 error");
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.charAt(2067);
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'F';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'M';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3, (-2315));
      jSONReaderScanner0.putChar('M');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3EbUY%");
      jSONReaderScanner0.hasSpecial = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.scanFloat('8');
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("encodeUTF8 error");
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '#';
      charArray0[2] = 'L';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 49, 49);
      jSONReaderScanner1.matchField(charArray0);
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3EbUYS");
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "$";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("$");
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = ')';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, (-711));
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("\"", 34);
      jSONReaderScanner2.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner2.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)27;
      byteArray0[0] = (byte)27;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "x~LwRGW");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("alL&rCBMkr's4F", (-1834));
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }
}
