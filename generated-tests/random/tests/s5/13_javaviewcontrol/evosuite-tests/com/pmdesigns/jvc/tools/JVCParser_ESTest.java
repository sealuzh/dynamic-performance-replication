/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 13:28:29 GMT 2019
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParser;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParser_ESTest extends JVCParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("#LY@;hG^40pks;pC");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 100, 100, 100);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E4BiE|m@l");
      simpleCharStream0.inBuf = 100;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      jVCParser0.ReInit((InputStream) sequenceInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParser0.ReInit(jVCParserTokenManager0);
      jVCParser0.disable_tracing();
      jVCParser0.disable_tracing();
      simpleCharStream0.ReInit((Reader) stringReader0);
      jVCParser0.parse();
      JVCParser.main(jVCParserTokenManager0.jjstrLiteralImages);
      assertEquals(15, simpleCharStream0.bufpos);
      assertEquals(1, simpleCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "c8dfp!>/OQZ}$5=OQ\"m");
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JVCParser jVCParser0 = new JVCParser(pipedInputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      pipedOutputStream0.close();
      pipedInputStream0.mark(100);
      jVCParser0.getToken(100);
      jVCParser0.getNextToken();
      jVCParser0.enable_tracing();
      jVCParser0.getToken(32);
      jVCParser0.ReInit((InputStream) pipedInputStream0);
      jVCParser0.disable_tracing();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.markSupported();
      try { 
        pipedInputStream1.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("(&8W/WZ_\"iU!^_KF");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      JVCParser jVCParser0 = new JVCParser(jVCParserTokenManager0);
      jVCParser0.ReInit(jVCParserTokenManager0);
      stringReader0.ready();
      simpleCharStream0.prevCharIsLF = true;
      Token token0 = jVCParser0.getToken(510);
      jVCParser0.parse();
      jVCParserTokenManager0.curChar = '~';
      jVCParser0.token = token0;
      jVCParser0.getToken(0);
      char[] charArray0 = new char[8];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = '~';
      charArray0[6] = '~';
      charArray0[7] = '~';
      try { 
        stringReader0.read(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JVCParser.main(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1090);
      pipedInputStream0.skip((-1L));
      JVCParser jVCParser0 = new JVCParser(pipedInputStream0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "c8dfp!>/OQZ}$5=OQ\"m");
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JVCParser jVCParser0 = new JVCParser(pipedInputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      pipedOutputStream0.close();
      pipedInputStream0.mark((-2710));
      jVCParser0.getToken((-2710));
      jVCParser0.getNextToken();
      jVCParser0.enable_tracing();
      jVCParser0.getToken(32);
      jVCParser0.ReInit((InputStream) pipedInputStream0);
      jVCParser0.disable_tracing();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.markSupported();
      try { 
        pipedInputStream1.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$z>Me[ K._,s5g,yE");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      jVCParser0.ReInit((Reader) null);
      jVCParser0.ReInit((Reader) stringReader0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2474);
      jVCParser0.ReInit((InputStream) pipedInputStream0);
      jVCParser0.ReInit((Reader) stringReader0);
      jVCParser0.enable_tracing();
      jVCParser0.parse();
      jVCParser0.getToken((-1859));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        jVCParser0.ReInit((InputStream) pipedInputStream0, "\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: \t
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JVCParser jVCParser0 = new JVCParser(byteArrayInputStream0);
      jVCParser0.debugColumn = 914;
      jVCParser0.getToken(1100);
      StringReader stringReader0 = new StringReader("M\"RBqw=");
      jVCParser0.ReInit((Reader) stringReader0);
      assertEquals(914, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      JVCParser jVCParser0 = new JVCParser(jVCParserTokenManager0);
      Token token0 = new Token(Integer.MAX_VALUE);
      jVCParser0.jj_nt = token0;
      jVCParser0.disable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2096);
      String string0 = "r:`5|^m";
      JVCParser jVCParser0 = null;
      try {
        jVCParser0 = new JVCParser(pipedInputStream0, "r:`5|^m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: r:`5|^m
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      linkedHashSet1.stream();
      linkedHashSet0.addAll(linkedHashSet1);
      JVCParser jVCParser0 = null;
      try {
        jVCParser0 = new JVCParser("LJ/SDU<f\"@PDZ7g^)", linkedHashSet0, true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JVCParser jVCParser0 = null;
      try {
        jVCParser0 = new JVCParser((InputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "p_l_C\"(";
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "mO/.9ggQD|(4]}ec";
      StringReader stringReader0 = new StringReader("mO/.9ggQD|(4]}ec");
      stringReader0.markSupported();
      stringReader0.reset();
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      stringReader0.close();
      jVCParser0.ReInit((JVCParserTokenManager) null);
      // Undeclared exception!
      try { 
        jVCParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JVCParser jVCParser0 = null;
      try {
        jVCParser0 = new JVCParser("Warn: nested cache block in ", set0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-10);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-10), 2352);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2352);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2352. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q@ws <rEUSM4?I[f9Gk");
      stringReader0.markSupported();
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      jVCParser0.ReInit((InputStream) byteArrayInputStream0);
      jVCParser0.parse();
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      JVCParser jVCParser0 = new JVCParser(pushbackInputStream0);
      Token token0 = null;
      jVCParser0.parse();
      int int0 = (-3764);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)6;
      try { 
        mockFileInputStream0.read(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)94;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)97, 92);
      JVCParser jVCParser0 = new JVCParser(byteArrayInputStream0);
      jVCParser0.disable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Include file (";
      stringArray0[1] = "q>iL>";
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JVCParser jVCParser0 = null;
      try {
        jVCParser0 = new JVCParser(sequenceInputStream0, "!ZG[KqNa>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: !ZG[KqNa>
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8";
      stringArray0[1] = "'o}'e6slw*l";
      stringArray0[2] = "\r";
      stringArray0[3] = "";
      stringArray0[4] = ";= Nx(w`gV";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      stringArray0[5] = ".j~;ZHh,9:Xekd";
      stringArray0[6] = ":gN\"(";
      stringArray0[7] = "com.pmdesigns.jvc.tools.ParseException";
      stringArray0[8] = "[[!";
      JVCParser.main(stringArray0);
      StringReader stringReader0 = new StringReader("'o}'e6slw*l");
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      // Undeclared exception!
      try { 
        jVCParser0.generateParseException();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.ParseException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JVCParser jVCParser0 = new JVCParser((Reader) null);
      StringReader stringReader0 = new StringReader("@;q&g]W");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 100, 100);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)97;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 100, (byte)16);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 93);
      jVCParser0.ReInit((InputStream) pushbackInputStream0);
      assertEquals(100, jVCParser0.debugColumn);
      
      jVCParser0.jj_input_stream = simpleCharStream0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jVCParser0.debugColumn = 337;
      stringReader0.ready();
      jVCParser0.getToken(337);
      stringReader0.ready();
      stringReader0.read();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Token token0 = jVCParser0.getToken((-1562));
      token0.next = jVCParser0.token;
      Token.newToken(49, "@;q&g]W");
      jVCParser0.getToken(0);
      jVCParser0.generateParseException();
      String string0 = jVCParser0.parse();
      assertEquals("", string0);
  }
}
