/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 01:02:34 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-2531));
      DoubleKeyMap<String, Map<Integer, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, String>, Integer>();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Object>((Map<Integer, Map<Integer, Object>>) null);
      Object object0 = doubleKeyMap1.put(integer0, integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(class0);
      Integer integer0 = new Integer(933);
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put(integer0, object0, (Object) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(class0);
      Map<Object, Object> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, String>, Map<Object, String>, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Map<Object, String>, Object>((Map<HashMap<Object, String>, Map<Map<Object, String>, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<String, Map<Integer, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, String>, Integer>();
      Map<Map<Integer, String>, Integer> map0 = doubleKeyMap0.remove("");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Map<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Map<Object, Object>, Integer>();
      DoubleKeyMap<Object, HashMap<Object, Integer>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Integer>, Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<Integer, Map<String, Integer>> hashMap0 = new HashMap<Integer, Map<String, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>(hashMap0, class0);
      Integer integer0 = new Integer(2001);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      hashMap0.put(integer0, hashMap1);
      Integer integer1 = doubleKeyMap0.put(integer0, "u,_IcJBUg-vijzZpuQ9", integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Map<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Map<Object, Object>, Integer>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = doubleKeyMap0.get((Map<Integer, String>) hashMap0, (Map<Object, Object>) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HashMap<String, Map<Map<String, Object>, HashMap<Object, Object>>> hashMap0 = new HashMap<String, Map<Map<String, Object>, HashMap<Object, Object>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Map<String, Object>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Map<String, Object>, HashMap<Object, Object>>(hashMap0, class0);
      HashMap<Map<String, Object>, HashMap<Object, Object>> hashMap1 = new HashMap<Map<String, Object>, HashMap<Object, Object>>();
      hashMap0.put((String) null, hashMap1);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      doubleKeyMap0.remove((String) null, (Map<String, Object>) hashMap2);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }
}
