/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 08:06:20 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SparseMatrix.diagonal(1, 1);
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.setAll(0.0);
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1, 1);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(1, 2);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(sparseMatrix0, basic1DMatrix0, sparseMatrix0, basic1DMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1, 1591, (double[]) null);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SparseMatrix.diagonal(0, 0);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(0);
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1323);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(0, 1323, mockRandom0);
      assertEquals(1323, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.zero(9, 8);
      assertEquals(8, basic1DMatrix1.columns());
      assertEquals(9, basic1DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 8;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(8);
      basic1DMatrix0.removeFirstColumn();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        basic1DMatrix0.updateRow(8, vectorFunction0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-1);
      MockRandom mockRandom0 = new MockRandom(15L);
      // Undeclared exception!
      try { 
        Basic1DMatrix.randomSymmetric((-1), mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SparseMatrix.diagonal(1, 0.0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.randomSymmetric(1, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 131;
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix.randomSymmetric(131, mockRandom0);
      // Undeclared exception!
      try { 
        DenseMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(1, 9);
      basic1DMatrix0.rotate();
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 9;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 9;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 9;
      doubleArray1[5] = (-1818.131);
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 9;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-611.225731);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 9;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-611.225731);
      doubleArray4[1] = 585.63117905;
      doubleArray4[2] = (-1818.131);
      doubleArray4[3] = (-1818.131);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 585.63117905;
      doubleArray5[1] = (-1818.131);
      doubleArray5[2] = (-1818.131);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = (-611.225731);
      doubleArray6[1] = (double) 1;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (double) 1;
      doubleArray6[4] = (double) 9;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = (double) 1;
      doubleArray7[1] = (double) 1;
      doubleArray7[2] = (-611.225731);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (-42.038079);
      doubleArray8[2] = (double) 9;
      doubleArray8[3] = (double) 9;
      doubleArray8[4] = 100.0;
      doubleArray8[5] = (double) 9;
      doubleArray8[6] = 585.63117905;
      doubleArray0[7] = doubleArray8;
      DenseMatrix.from2DArray(doubleArray0);
      basic1DMatrix0.copyOfShape(9, 1);
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(9, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(22, 32, (double[]) null);
      // Undeclared exception!
      try { 
        basic1DMatrix0.copyOfShape(2877, 22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(5, 5, doubleArray0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(1319, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6595
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SparseMatrix.diagonal(1, 1);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(1, 1);
      DenseMatrix.diagonal(1, 1);
      basic1DMatrix0.swapRows(1, 1);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(9, 9);
      basic1DMatrix0.infinityNorm();
      MockRandom mockRandom0 = new MockRandom(0L);
      DenseMatrix.randomSymmetric(9, mockRandom0);
      basic1DMatrix0.getRow(0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows(0, (-915));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8235
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((byte) (-100));
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Matrix matrix0 = basic1DMatrix0.copyOfShape(65, 3233);
      assertEquals(3233, matrix0.columns());
      assertEquals(65, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 614;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.constant(614, 614, 614);
      // Undeclared exception!
      basic1DMatrix0.toRowMajorSparseMatrix();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-830.86906);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-830.86906);
      doubleArray2[1] = (-830.86906);
      doubleArray2[2] = (-830.86906);
      doubleArray0[1] = doubleArray2;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      double double0 = basic1DMatrix0.get(0, 0);
      assertEquals(2, basic1DMatrix0.rows());
      assertEquals((-830.86906), double0, 0.01);
      assertEquals(1, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      assertEquals(0, basic1DMatrix0.rows());
      
      basic1DMatrix0.swapColumns((-1225), 2099);
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromBinary(byteArray0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      MockRandom mockRandom0 = new MockRandom((-1632L));
      MockRandom mockRandom1 = new MockRandom((-3336L));
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric((byte)0, mockRandom0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, basic1DMatrix0);
      assertEquals(0, basic1DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      Basic1DMatrix.constant(160, 1573, (-73.72444142725651));
      basic1DMatrix0.blankOfShape(48, 9981);
      basic1DMatrix0.setAll(0.0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      MockRandom mockRandom0 = new MockRandom((byte)3);
      mockRandom0.longs((long) (byte)3);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric((byte)3, mockRandom0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      MockRandom mockRandom0 = new MockRandom((byte)69);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric((byte)0, mockRandom0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(denseMatrix0, denseMatrix0, basic1DMatrix0, denseMatrix0);
      basic1DMatrix1.swapColumns((byte)0, (-2581));
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(9975, (byte)0);
      basic1DMatrix0.infinityNorm();
      assertEquals(0, basic1DMatrix0.columns());
      
      MockRandom mockRandom0 = new MockRandom(9);
      DenseMatrix.randomSymmetric(0, mockRandom0);
      basic1DMatrix0.swapRows(9993, (byte)0);
      basic1DMatrix0.toArray();
      assertEquals(9975, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      MockRandom mockRandom0 = new MockRandom(6911L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric((byte)0, mockRandom0);
      Matrix matrix0 = basic1DMatrix0.copyOfShape((byte)0, (byte)0);
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(denseMatrix0, denseMatrix0, basic1DMatrix0, matrix0);
      assertEquals(0, basic1DMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(0, mockRandom0);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      basic1DMatrix0.getRow((byte)0);
      basic1DMatrix0.swapRows((-915), (-915));
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(1, 9);
      Matrix matrix0 = basic1DMatrix0.rotate();
      double[][] doubleArray0 = new double[8][5];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 9;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 9;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 9;
      doubleArray1[5] = (-1818.131);
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 9;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-611.225731);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 9;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-611.225731);
      doubleArray4[1] = 585.63117905;
      doubleArray4[2] = (-1818.131);
      doubleArray4[3] = (-1818.131);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 585.63117905;
      MockRandom mockRandom0 = new MockRandom(9);
      MockRandom mockRandom1 = new MockRandom();
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(denseMatrix0, matrix0, matrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1, 1);
      sparseMatrix0.toRowVector();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, sparseMatrix0);
      basic1DMatrix0.swapColumns(1, 1);
      assertEquals(2, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.diagonal(0, 0.0);
      basic1DMatrix1.toArray();
      byte[] byteArray0 = basic1DMatrix1.toBinary();
      assertEquals(0, basic1DMatrix1.rows());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.toBinary();
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(9, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '9' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1, 1);
      long long0 = (-1285L);
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1, 1);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(13, 1);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(sparseMatrix0, sparseMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 28
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }
}
