/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 09:19:14 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Enumeration;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.markSupported();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-97), (-97));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.replace(", ", ", ", ", ");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)39, (int) (byte)77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(115, 115);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[2] = (byte)16;
      byteArray0[4] = (byte)54;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("+Zci<opscmm1IW");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString((Constant) constantUtf8_0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("dup2_x1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup2_x1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = Utility.toHexString(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-122);
      byteArray1[1] = (byte)28;
      byteArray1[2] = (byte) (-23);
      byteArray1[3] = (byte)31;
      byteArray1[4] = (byte)76;
      byteArray1[5] = (byte) (-74);
      byteArray1[6] = (byte)4;
      byteArray1[7] = (byte)87;
      byteArray1[8] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utility.isSet(1329, 202);
      // Undeclared exception!
      try { 
        Utility.signatureToString("[rG@Zwm", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `rG@Zwm'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = Utility.isSet(246, 92);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lushr";
      stringArray0[1] = "lushr";
      stringArray0[2] = "lushr";
      stringArray0[3] = "lushr";
      stringArray0[4] = "lushr";
      String string0 = Utility.methodTypeToSignature("lushr", stringArray0);
      assertEquals("(Llushr;Llushr;Llushr;Llushr;Llushr;)Llushr;", string0);
      
      String string1 = Utility.methodSignatureToString("(Llushr;Llushr;Llushr;Llushr;Llushr;)Llushr;", "double", "anewarra");
      assertEquals("anewarra lushr double(lushr arg1, lushr arg2, lushr arg3, lushr arg4, lushr arg5)", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload\t\t%174", string2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.markSupported();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.signatureToString("F*[UsiLv-+JuON;|", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-95);
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-83);
      byteArray0[8] = (byte)80;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3067, (int) (byte) (-82));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)115;
      byteArray0[6] = (byte)0;
      byteArray0[8] = (byte)113;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)86, 156);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(7, (-336));
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      try { 
        Utility.typeOfSignature("$ce$f9$bd$5bMV$A$Aq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $ce$f9$bd$5bMV$A$Aq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("*BzZ");
      assertEquals((byte)8, byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, 1432, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte byte0 = Utility.typeOfSignature("L;V");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.methodSignatureReturnType("L;V");
      assertEquals("", string0);
      
      String string1 = Utility.getSignature("");
      assertEquals("L;", string1);
      
      int int0 = Utility.setBit((byte)14, (byte)14);
      assertEquals(16398, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.setBit((-18), (-18));
      Utility.compactClassName("/<^2q");
      Utility.methodTypeToSignature("yhJsn", (String[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)90;
      Utility.toHexString(byteArray0);
      Utility.setBit((-18), (byte)0);
      Utility.typeOfMethodSignature("()LyhJsn;");
      // Undeclared exception!
      try { 
        Utility.signatureToString("kO:%(DEsSHNn_DAml");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `kO:%(DEsSHNn_DAml'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(977, 977);
      ConstantUtf8.getInstance("jsr_w");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(191, 20);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "F*[UsiLv-+JuON;|";
      Utility.signatureToString("F*[UsiLv-+JuON;|", false);
      try { 
        Utility.methodSignatureArgumentTypes("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool1, false);
      byteSequence0.readChar();
      LocalVariableTable localVariableTable0 = new LocalVariableTable(93, (byte) (-103), byteSequence0, constantPool1);
      try { 
        Utility.methodSignatureToString("ifeq\t\t#9984", "|]X|-|Y$", "Integer", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifeq\t\t#9984
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("H2sP]uD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H2sP]uD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("multianewarray");
      constantPool1.constantToString((Constant) constantUtf8_0);
      String string0 = Utility.printArray((Object[]) constantArray0, true, true);
      assertEquals("{}", string0);
      
      String string1 = Utility.convertString("multianewarray");
      assertEquals("multianewarray", string1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)68;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.convertString("ffb");
      assertEquals("ffb", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)108;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)108);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("l$A$A$A$A$A$A", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.getSignature("iconst_5");
      assertEquals("Liconst_5;", string1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "multianewarray";
      Utility.replace(".L5Wiq)3u.;ENxi", ".L5Wiq)3u.;ENxi", "multianewarray");
      Utility.format(109, 109, true, '\"');
      Utility.convertString("'1LZguY`$T iDtIb");
      try { 
        Utility.methodSignatureArgumentTypes("areturn", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: areturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-47);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "dsth%d_2";
      stringArray0[1] = "dsth%d_2";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.methodTypeToSignature("dsth%d_2", stringArray0);
      Utility.fillup("(Ldsth%d_2;Ldsth%d_2;)Ldsth%d_2;", (-3584), false, '|');
      Utility.printArray((Object[]) stringArray0);
      Utility.methodSignatureArgumentTypes("(Ldsth%d_2;Ldsth%d_2;)Ldsth%d_2;", true);
      String string0 = Utility.accessToString((-3584), true);
      Utility.compactClassName(",Js6");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)73;
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-91), 7);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("_vS@D|4[L7u_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[L7u_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0LD12Mgj|a(8VW_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0LD12Mgj|a(8VW_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("OM8']F &%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OM8']F &%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[");
      assertEquals((byte)13, byte0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "[";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "[";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "[";
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte) (-30);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1153), (-1249), true);
      assertEquals("0:    iload_1\n1:    fload\t\t%58\n3:    iadd\n4:    fstore_3\n5:    faload\n6:    iastore\n7:    aload_2\n8:    <illegal opcode>\n", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@%-)V^rW^v[>)Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @%-)V^rW^v[>)Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[1%_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [1%_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "I{=";
      Utility.methodSignatureReturnType("I{=");
      boolean boolean0 = true;
      int int0 = (-1156);
      int int1 = 3618;
      Attribute[] attributeArray0 = new Attribute[0];
      Constant[] constantArray0 = new Constant[8];
      ConstantLong constantLong0 = null;
      try {
        constantLong0 = new ConstantLong((ConstantLong) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantLong", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.getSignature("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "iaload";
      try { 
        Utility.methodSignatureArgumentTypes("iaload", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iaload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, true);
      Utility.codeToString(byteSequence0, constantPool0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      PrintStream printStream0 = mockPrintStream0.format("dmul", (Object[]) constantArray0);
      Utility.printArray(printStream0, (Object[]) constantArray0);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 236;
      Utility.setBit(236, 236);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.signatureToString("SV", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string0 = Utility.getSignature("SV");
      assertEquals("LSV;", string0);
      
      Utility.accessToString(0, true);
      String string1 = Utility.accessToString((-406));
      assertEquals("private static synchronized volatile interface abstract strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)29;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.searchOpcode("nop");
      try { 
        Utility.methodSignatureReturnType("iload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iload_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)51, (int) (byte)51, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[8];
      Utility.compactClassName("new", "6,1kb>,u3wUSLxmuTG", true);
      Utility.replace("", "6,1kb>,u3wUSLxmuTG", "new");
      Utility.setBit((-2719), (-1662));
      try { 
        Utility.decode("ifnonnull", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.accessToString(76);
      String string0 = "";
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Utility.replace("v(", "wg):L0V#-[>?a< ", "XQ$y:f<N%WYC6Gu");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Constant[] constantArray0 = new Constant[6];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)99, (byte)89);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)99, 8);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)99);
      constantArray0[2] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[3] = (Constant) constantDouble1;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[4] = (Constant) constantMethodHandle1;
      ConstantString constantString0 = new ConstantString(63);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[5] = (Constant) constantString1;
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3619, 63, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("fconst_1", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fconst_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.compactClassName(",Js6");
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("+Zci<opscmm1IW");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString((-5321));
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString(constantArray0[3]);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      constantPool0.setConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-104);
      try { 
        Utility.typeOfSignature("2=Pj_&lgG6<=&jqC9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2=Pj_&lgG6<=&jqC9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = (-4350);
      Utility.format((-4350), (-4350), false, 'T');
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<clinit>", "<clinit>", "-4350", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <clinit>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType(")8!&*93|$jqAJ=9VMO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `8!&*93|$jqAJ=9VMO'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-126);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("ixor", string0);
      
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte) (-126), 234, byteSequence0, constantPool1);
      LocalVariableTable localVariableTable1 = new LocalVariableTable(localVariableTable0);
      try { 
        Utility.methodSignatureToString("ixor", "a@;LN,", "int", true, localVariableTable1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ixor
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L;V");
      assertEquals((byte)14, byte0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.compactClassName("");
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-773), (-773));
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-773), 191);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-100);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("iinc\t\t%156\t0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iinc\t\t%156\t0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-4), (-4));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)73;
      byteArray0[0] = (byte) (-59);
      byteArray0[2] = (byte) (-23);
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = ", high = ";
      String string1 = "i2f";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureToString("i2f", (String) null, "+h^U0", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<[eq(y}{jA$\"NVWE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <[eq(y}{jA$\"NVWE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.replace("Class must ot bS null", "Class must ot bS null", "Class must ot bS null");
      Utility.getSignature("tKUSBc^,qF aB6`");
      // Undeclared exception!
      try { 
        Utility.signatureToString("tKUSBc^,qF aB6`", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `tKUSBc^,qF aB6`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte) (-78);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("+Zci<opscmm1IW");
      Constant[] constantArray0 = new Constant[7];
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString(constantArray0[6]);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 15954. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)43;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3670), (-3670), true);
      Utility.getSignature("dload_1");
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "dsth%d_2";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "dsth%d_2";
      stringArray0[1] = "dsth%d_2";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray1 = null;
      Utility.methodTypeToSignature("dsth%d_2", (String[]) null);
      Utility.fillup("()Ldsth%d_2;", (-3602), false, '|');
      Utility.printArray((Object[]) stringArray0);
      Utility.methodSignatureArgumentTypes("()Ldsth%d_2;", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("{dsth%d_2, dsth%d_2}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{dsth%d_2, dsth%d_2}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Synthetic", false);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      Utility.compactClassName("", "org.apache.bcel.classfile.Synthetic", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) "org.apache.bcel.classfile.Synthetic";
      objectArray0[3] = (Object) "";
      String string1 = Utility.printArray(objectArray0, true);
      assertEquals("{, $l$8b$I$A$A$A$A$A$A$A, org.apache.bcel.classfile.Synthetic, }", string1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(115, 115);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)18;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1419), (-1419), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)63;
      byteArray0[8] = (byte) (-35);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = "\"-i}";
      try { 
        Utility.decode("\"-i}", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", catch_type = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , catch_type = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)68;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool0, true);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool2, true);
      assertEquals(3, byteSequence0.getIndex());
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-84);
      byteArray1[1] = (byte) (-84);
      byteArray1[2] = (byte)74;
      byteArray1[3] = (byte)74;
      byteArray1[4] = (byte)74;
      byteArray1[5] = (byte)68;
      boolean boolean0 = Utility.equals(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        Utility.typeOfSignature("54N6P*hey=<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 54N6P*hey=<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".F9";
      stringArray0[1] = ".F9";
      stringArray0[2] = "j0tszx 8pE2";
      Utility.methodTypeToSignature("j0tszx 8pE2", stringArray0);
      Utility.searchOpcode(".F9");
      Utility.setBit(214, (-1728));
      String string0 = "Jq:9Q6Jv ;:EC$WZ$g";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "Jq:9Q6Jv ;:EC$WZ$g", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@(Q*");
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-28);
      byteArray0[8] = (byte) (-72);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte) (-112);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-72);
      byteArray1[1] = (byte) (-114);
      byteArray1[2] = (byte) (-28);
      byteArray1[3] = (byte) (-114);
      byteArray1[4] = (byte) (-114);
      byteArray1[5] = (byte) (-114);
      byteArray1[6] = (byte) (-72);
      byteArray1[7] = (byte) (-112);
      byteArray1[8] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 36580. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.format(59, 59, false, '\\');
      Utility.format(2, 148, false, 'y');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte) (-107);
      byteArray0[8] = (byte)80;
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass(5560);
      constantArray0[0] = (Constant) constantClass0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-6), 2302);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)84;
      byteArray1[1] = (byte)75;
      byteArray1[2] = (byte)93;
      byteArray1[3] = (byte) (-107);
      byteArray1[4] = (byte)46;
      byteArray1[5] = (byte)36;
      byteArray1[6] = (byte)7;
      byteArray1[7] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteSequence0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ConstantString constantString0 = new ConstantString(dataInputStream0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[2] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)90, 70, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("access flags\t\t");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "access flags\t\t";
      objectArray0[1] = (Object) "access flags\t\t";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"", "Fl <HLR$OH(", "{access flags\t\t, access flags\t\t}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Class must not bS null");
      assertEquals("char", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.decode("$e9$e9", false);
      try { 
        Utility.methodSignatureReturnType("O:Y5+MvS1UB{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O:Y5+MvS1UB{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('O');
      assertTrue(boolean0);
      
      String string0 = Utility.format((-51), (-51), false, 'O');
      assertEquals("-51", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.decode("org.apache.bcel.classfile.Synthetic", false);
      String string0 = Utility.fillup("0yn", (-643), true, 'V');
      assertEquals("0yn", string0);
      
      String string1 = Utility.accessToString((-3958));
      assertEquals("private static transient synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = Utility.accessToString(0);
      String string1 = Utility.fillup("", 0, true, 'X');
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.accessToString(0);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("GeFlVqzyZr@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `GeFlVqzyZr@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Utility.compactClassName("zn2?HnsXxd23\"Nt");
      assertEquals("zn2?HnsXxd23\"Nt", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('M');
      assertTrue(boolean0);
      
      String string1 = Utility.format(0, 0, false, 'M');
      assertEquals("0", string1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Utility.replace("M']F &%", "M']F &%", "M']F &%");
      assertEquals("M']F &%", string0);
      
      String string1 = Utility.convertString("lushr");
      String string2 = Utility.compactClassName("lushr", "M']F &%", true);
      assertTrue(string2.equals((Object)string1));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)22;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string3 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("lload\t\t%0", string3);
      
      String string4 = Utility.convertString("ffb");
      assertEquals("ffb", string4);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ymc|*zs FJMN:eQ0!u", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      constantPool0.setConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lshl", string0);
      
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "SV";
      boolean boolean0 = true;
      Utility.signatureToString("SV", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)10;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1049), (int) (byte)53);
      String string1 = "dload_0";
      // Undeclared exception!
      try { 
        Utility.signatureToString("dload_0", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dload_0'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ladd", string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.accessToString(3102);
      Utility.replace("private protected static final abstract strictfp", "private protected static final abstract strictfp", "private protected static final abstract strictfp");
      Utility.clearBit(76, 3102);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)103;
      MockFile mockFile0 = new MockFile("(L?");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("QW3+nr#5fm]iQ5:a;3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QW3+nr#5fm]iQ5:a;3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = Utility.signatureToString("F*[UsiLv-+JuON;|", false);
      assertEquals("float", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("goto_w\t\t#1320663239", string1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("&&#", true);
      int int0 = 3593;
      Utility.accessToString(3593);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[4] = (byte)54;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("RH1T\"0%Ix:N");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString((Constant) constantUtf8_0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("dup2_x1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup2_x1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("WwXv\"Ooy", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WwXv\"Ooy'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte byte0 = (byte) (-13);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.reset();
      Utility.codeToString(byteSequence2, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.Utility$JavaReader", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Utility$JavaReader'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)20;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, constantPool0, true);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.signatureToString("L;V");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)40;
      String string0 = Utility.encode(byteArray0, false);
      Utility.methodSignatureReturnType("L;V", false);
      String string1 = Utility.methodSignatureReturnType("L;V");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-87);
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)97;
      byte byte1 = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-49);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte2 = (byte) (-90);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-127);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantMethodType0.clone();
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-90), (-389));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ret\t\t%97
         // 2:    dcmpg
         // 3:    <illegal opcode>
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("RSHZAq`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RSHZAq`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lushr";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("lushr");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)97;
      try { 
        Utility.typeOfSignature("=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("areturn", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte) (-61);
      byteArray0[8] = (byte) (-54);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.decode("f//=~i2H]VgF9W'.\"", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.searchOpcode("V");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "c'{[WU[^BoBxP{B|Gy";
      stringArray0[2] = "V";
      stringArray0[3] = "V";
      stringArray0[4] = "V";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[WU[^BoBxP{B|Gy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.isJavaIdentifierPart('+');
      Utility.getSignature("Llshr;V");
      int int0 = 180;
      Utility.accessToString(180, false);
      String string0 = "BootstrapMethods";
      try { 
        Utility.typeOfMethodSignature("BootstrapMethods");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: BootstrapMethods
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("J?T");
      assertEquals("long", string0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "J?T";
      objectArray0[1] = (Object) "long";
      objectArray0[2] = (Object) "J?T";
      objectArray0[3] = (Object) "long";
      objectArray0[4] = (Object) "J?T";
      objectArray0[5] = (Object) "long";
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{J?T, long, J?T, long, J?T, long}", string1);
      
      Utility.compactClassName("p14Pwvi");
      String string2 = Utility.compactClassName("", false);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "X0`n[X?";
      try { 
        Utility.typeOfSignature("X0`n[X?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X0`n[X?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool1, true);
      try { 
        Utility.methodSignatureArgumentTypes("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-75);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-68);
      byteArray1[1] = (byte) (-77);
      byteArray1[2] = (byte) (-68);
      byteArray1[3] = (byte) (-75);
      byteArray1[4] = (byte) (-68);
      byteArray1[5] = (byte) (-68);
      byteArray1[6] = (byte) (-68);
      ByteSequence byteSequence2 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, constantPool0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = Utility.replace("CONSTANT_Long", ")XC6r.U+`@+TC", "CONSTANT_Long");
      assertEquals("CONSTANT_Long", string0);
      
      String string1 = Utility.signatureToString("CONSTANT_Long", true);
      assertEquals("char", string1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = Utility.convertString("arraylength");
      assertEquals("arraylength", string0);
      
      Utility.format((-1000), 77, false, '9');
      try { 
        Utility.methodSignatureReturnType("ishr", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ishr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.setBit((-18), (-18));
      String string0 = "/<^2q";
      Utility.compactClassName("/<^2q");
      String[] stringArray0 = null;
      Utility.methodTypeToSignature("yhJsn", (String[]) null);
      byte[] byteArray0 = new byte[9];
      Utility.encode(byteArray0, true);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.compactClassName("#$|)A%wXJ", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)49;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[2] = (byte)85;
      byte byte0 = (byte)62;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Exception while looking for class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exception while looking for class '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-33);
      Utility.decode("!_/xca%J{", false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Utility.fillup("instanceof", (-1650), true, 'V');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("instanceof", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `instanceof'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("7/NOxo-x<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `7/NOxo-x<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "8ZB]";
      Utility.compactClassName("8ZB]");
      Utility.classOrInterface(9);
      try { 
        Utility.typeOfSignature("8ZB]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8ZB]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lstore\t\t%48", string0);
      
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.accessToString((-1210));
      assertEquals("private protected volatile native interface strictfp synthetic annotation enum", string1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("astore\t\t%58", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("if_acmpne\t\t#-22911", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.methodSignatureReturnType("Class must not bS null");
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureToString("Class must not bS null", "", "char", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Class must not bS null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "3vXA";
      try { 
        Utility.typeOfSignature("3vXA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3vXA
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.printArray((Object[]) null);
      String string0 = Utility.signatureToString("C", false);
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      try { 
        Utility.typeOfSignature("A>[_SvQ14}Th6 r{->1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A>[_SvQ14}Th6 r{->1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.methodSignatureReturnType("L;V");
      // Undeclared exception!
      Utility.replace("java.lang.byte", "", "3|bWcP");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)104;
      Constant[] constantArray0 = new Constant[7];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)28, (byte)28);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)28);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Unrecognized attribute type tag parsed: ");
      constantArray0[3] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("oT x[q5ZC}Qj'");
      constantArray0[4] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("getstatic");
      constantArray0[6] = (Constant) constantUtf8_2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lstore\t\t%48", string0);
      
      short short0 = Utility.searchOpcode("oT x[q5ZC}Qj'");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-91), (-1320), false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[2] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)48, 196);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = Utility.isSet(1789, 1789);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("7b", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = Utility.signatureToString("V%;");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "LocalVariable");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object0;
      Object object5 = new Object();
      objectArray0[1] = object5;
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = object2;
      objectArray0[5] = object1;
      objectArray0[6] = object3;
      objectArray0[7] = object4;
      Utility.printArray(objectArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-3060), (int) (byte)6, false);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence1, constantPool1, true);
      assertEquals("dup_x2", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byteSequence0.readUnsignedByte();
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool2, true);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("lmul");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lmul'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.compactClassName("Kf.OLwU26/TjL");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Kf.OLwU26.TjL", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kf.OLwU26.TjL'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)113;
      String string0 = Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)86, 156);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(7, (-336));
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[3] = (Constant) constantNameAndType1;
      ConstantString constantString0 = new ConstantString((byte)86);
      constantArray0[4] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = true;
      Utility.signatureToString("V", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Utility.getSignature("void");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.methodSignatureReturnType("L;V");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)11;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte)11;
      byteArray1[2] = (byte) (-70);
      byteArray1[3] = (byte) (-70);
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("i2f", (String) null, "array", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i2f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Synthetic";
      Utility.decode("org.apache.bcel.classfile.Synthetic", false);
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.classfile.Synthetic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.Synthetic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = Utility.replace("OM8']F &%", "OM8']F &%", "OM8']F &%");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Constant[] constantArray0 = new Constant[4];
      ConstantLong constantLong0 = new ConstantLong((byte)76);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-103), (byte) (-74));
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-661), (-94));
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[3] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = Utility.isSet(881, (-1034));
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.compactClassName("D0Xe\"Y<FX", true);
      assertEquals("D0Xe\"Y<FX", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte) (-112);
      byteArray0[8] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("jsr_w", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `jsr_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)40;
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)40;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (byte)25;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) (byte)0;
      Utility.printArray(objectArray0, false);
      String string0 = "The strings must not be null";
      try { 
        Utility.methodSignatureArgumentTypes("The strings must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: The strings must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("DKN$}wT,QB:G");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)48;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lstore\t\t%48", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Utility.methodSignatureReturnType("SV");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('X');
      assertTrue(boolean0);
      
      String string0 = Utility.format(0, 39, true, 'X');
      assertEquals("0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("return", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-28);
      byteArray0[8] = (byte) (-72);
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte) (-112);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 822, (int) (byte) (-72), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.signatureToString("E=ki_;Tvb\"kc^", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E=ki_;Tvb\"kc^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)77;
      byteArray0[0] = (byte)86;
      Utility.methodTypeToSignature("?;4D28?u", (String[]) null);
      Utility.methodSignatureToString("()L?;4D28?u;", "()L?;4D28?u;", "Warning: Padding byte != 0 in ");
      String string0 = "][gAM>rDO";
      String string1 = "Invalid signature: ";
      boolean boolean0 = false;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Code code0 = null;
      try {
        code0 = new Code((-2661), (byte) (-45), dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ushr";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantFloat constantFloat0 = new ConstantFloat((-2430.1F));
      Constant[] constantArray0 = new Constant[0];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-1);
      byteArray0[3] = (byte)43;
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.decode("arraylength", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-107);
      byteArray1[1] = (byte) (-107);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "'", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")ob_]tH_2?o<=/6DW+F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )ob_]tH_2?o<=/6DW+F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)86, (byte)91);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(7, (byte)86);
      constantMethodType0.setDescriptorIndex(65);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      ConstantString constantString0 = new ConstantString((byte)86);
      constantArray0[4] = (Constant) constantString0;
      constantString0.clone();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = Utility.convertString("X4\" B6%(Od`26_");
      assertEquals("X4\\\" B6%(Od`26_", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(115, 115);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-97);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "istore";
      String string0 = Utility.methodTypeToSignature("istore", stringArray0);
      assertEquals("(Listore;)Listore;", string0);
      
      String string1 = Utility.methodSignatureToString("(Listore;)Listore;", "p2z'/CHcXSn", "istore");
      assertEquals("istore istore p2z'/CHcXSn(istore arg1)", string1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.decode("", false);
      String string0 = "#p";
      // Undeclared exception!
      try { 
        Utility.signatureToString("#p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `#p'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Utility.compactClassName("}[W", true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "}[W";
      stringArray0[1] = "}[W";
      stringArray0[2] = "}[W";
      stringArray0[3] = "}[W";
      stringArray0[4] = "}[W";
      stringArray0[5] = "wide";
      stringArray0[6] = "}[W";
      stringArray0[7] = "\")@l(U";
      stringArray0[8] = "}[W";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("\")@l(U", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.getSignature("if_icmpne\t\t#0");
      Utility.getSignature("Lif_icmpne;");
      Utility.convertString("aload_3");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("aload_3", "aload_3", "aload_3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aload_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = " ";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1959, (-951), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.typeOfSignature("LLtV");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      Utility.encode(byteArray0, false);
      Utility.decode("LLtV", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("LLtV", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LLtV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)104;
      Utility.compactClassName("=");
      String string0 = "<";
      try { 
        Utility.methodSignatureReturnType("[KQ.ag`$z<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KQ.ag`$z<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = Utility.isSet(1024, 1024);
      assertFalse(boolean0);
      
      String string0 = Utility.convertString("T@mMY.M]C`");
      assertEquals("T@mMY.M]C`", string0);
      
      String string1 = Utility.classOrInterface((-4291));
      assertEquals("interface", string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-15);
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$f1", string2);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("L;V");
      assertEquals("", string0);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      int int0 = Utility.clearBit((short) (-1), (short) (-1));
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Utility.fillup("instanceof", (-1650), true, 'V');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("instanceof", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `instanceof'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = Utility.getSignature("ymc|*zs FJMN:eQ0!u");
      assertEquals("Lymc|*zs;", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        Utility.typeOfSignature("G!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V|");
      assertEquals((byte)12, byte0);
      
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility$JavaReader", false);
      assertEquals(43, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.methodSignatureReturnType("L;tV");
      assertEquals("", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("()L;", string1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readUnsignedByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)23;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload_1", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(115, 115);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-93);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)60;
      byteArray1[1] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("X4\" B6%(Od`26_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X4\" B6%(Od`26_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)46;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 256, 122, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Utility.compactClassName("boolea", "boolea", false);
      Utility.convertString("boolea");
      Utility.setBit((-2719), 512);
      // Undeclared exception!
      try { 
        Utility.decode("^5$awOv%'>/v4M", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"aw\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-773), (-773));
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("jsr_w");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-773), 191);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-100);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.commons.io.IOCase", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.IOCase
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[2] = (byte)68;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("|Wv9V[Wi");
      PrintStream printStream0 = mockPrintStream0.printf("double", (Object[]) null);
      Utility.printArray(printStream0, (Object[]) null);
      boolean boolean0 = Utility.isJavaIdentifierPart('L');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-73);
      byteArray0[8] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, (int) (byte) (-10), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = Utility.getSignature(" $_XP?*BSR");
      assertEquals("L$_XP?*BSR;", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "B*%{PHdaLV3U*O#i";
      boolean boolean0 = true;
      Utility.methodSignatureReturnType("B*%{PHdaLV3U*O#i", true);
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Z.@TmX0hu(j7");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.classOrInterface(2388);
      Utility.methodSignatureReturnType("Ff\"t;|lsc#jF");
      // Undeclared exception!
      try { 
        Utility.signatureToString("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.isSet(3, 3);
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        Utility.typeOfSignature("&h!5I[%*q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &h!5I[%*q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("short", "short", false);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      boolean boolean0 = Utility.isSet(2373, 2373);
      assertFalse(boolean0);
      
      Utility.classOrInterface(2373);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("/4AytH", "/4AytH", "class", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /4AytH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-98);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-98), 264, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lushr";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[1] = "lushr";
      stringArray0[2] = "lushr";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[3] = "lushr";
      stringArray0[4] = "lushr";
      String string0 = Utility.methodTypeToSignature("lushr", stringArray0);
      assertEquals("(Llushr;Llushr;Llushr;Llushr;Llushr;)Llushr;", string0);
      
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("UflV-1+$;-,w-");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      Utility.getSignature("lushr");
      String string1 = Utility.printArray((Object[]) constantArray0, false, true);
      assertEquals("\"CONSTANT_Utf8[1](\"UflV-1+$;-,w-\")\", \"CONSTANT_Utf8[1](\"UflV-1+$;-,w-\")\", \"CONSTANT_Utf8[1](\"UflV-1+$;-,w-\")\", \"CONSTANT_Utf8[1](\"UflV-1+$;-,w-\")\", \"CONSTANT_Utf8[1](\"UflV-1+$;-,w-\")\", \"CONSTANT_Utf8[1](\"UflV-1+$;-,w-\")\", \"CONSTANT_Utf8[1](\"UflV-1+$;-,w-\")\", \"CONSTANT_Utf8[1](\"UflV-1+$;-,w-\")\"", string1);
      
      String string2 = Utility.classOrInterface((byte)0);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)115;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (byte) (-7);
      Utility.printArray(objectArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-67), (int) (byte) (-7), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-26);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-110);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iload\t\t%138", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readChar();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence3, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dstore\t\t%183", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dstore\t\t%183'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lushr";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantFloat constantFloat0 = new ConstantFloat((-2430.1F));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 166, 1322, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.signatureToString("J2{d{e|d[A:dR~", true);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RDD*wfWa9LlP|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RDD*wfWa9LlP|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte)71;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("0$c2$n$E$fa$h$kG", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "k9J)";
      stringArray0[1] = "byte";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = Utility.methodTypeToSignature("dsth%d_2", stringArray0);
      String string1 = Utility.fillup("(Lk9J);B)Ldsth%d_2;", (-3584), false, '|');
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{k9J), byte}", string2);
      
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("(Lk9J);B)Ldsth%d_2;", true);
      assertEquals(2, stringArray1.length);
      
      String string3 = Utility.accessToString((-3584), true);
      assertEquals("synthetic annotation enum", string3);
      
      Utility.compactClassName(",Js6");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)99;
      String string4 = Utility.encode(byteArray0, false);
      assertEquals("I$a5$d6$e9$AYc", string4);
      
      int int0 = Utility.setBit((byte)0, 180);
      assertEquals(1048576, int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lushr";
      stringArray0[1] = "lushr";
      stringArray0[2] = "lushr";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[3] = "lushr";
      stringArray0[4] = "lushr";
      String string0 = Utility.methodTypeToSignature("lushr", stringArray0);
      assertEquals("(Llushr;Llushr;Llushr;Llushr;Llushr;)Llushr;", string0);
      
      String string1 = Utility.methodSignatureToString("(Llushr;Llushr;Llushr;Llushr;Llushr;)Llushr;", "double", "anewarra");
      assertEquals("anewarra lushr double(lushr arg1, lushr arg2, lushr arg3, lushr arg4, lushr arg5)", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload\t\t%174", string2);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.classOrInterface(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "class";
      objectArray0[5] = (Object) "class";
      objectArray0[6] = (Object) "class";
      objectArray0[7] = (Object) "class";
      objectArray0[8] = (Object) "class";
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.typeOfSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "ireturn";
      stringArray0[2] = "ireturn";
      stringArray0[3] = "ireturn";
      stringArray0[4] = "ireturn";
      Utility.fillup("zn2?HnsXxd", 1453, false, '!');
      String string0 = Utility.accessToString(1453);
      assertEquals("public protected static synchronized transient native abstract", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 80, (-2385), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)39;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)77;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      String string0 = Utility.accessToString((int) (byte)39, true);
      assertEquals("public private protected", string0);
      
      String string1 = Utility.convertString("W4An");
      assertEquals("W4An", string1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Utility.isSet(1024, 1024);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-773), (-773));
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("jsr_w");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-773), 191);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-98);
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 200, 155);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 69);
      try { 
        Utility.decode("M=;}E%]nU\"5$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "(UQ>b&hOU4\\X$K,*c";
      try { 
        Utility.typeOfSignature("(UQ>b&hOU4X$K,*c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (UQ>b&hOU4X$K,*c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+dE3G9s4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dE3G9s4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)48;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)1, 225);
      assertEquals("1:    monitorenter\n2:    faload\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("\t(wide)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t(wide)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.typeOfSignature("LLtV");
      Constant[] constantArray0 = new Constant[8];
      ConstantDouble constantDouble0 = new ConstantDouble((-5.509292112477272));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[7] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool1, false);
      try { 
        Utility.methodSignatureArgumentTypes("ifge\t\t#-31730");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifge\t\t#-31730
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)27;
      byteArray1[1] = (byte) (-115);
      byteArray1[2] = (byte) (-115);
      byteArray1[4] = (byte)27;
      byteArray1[5] = (byte) (-115);
      byteArray1[6] = (byte) (-115);
      byteArray1[7] = (byte) (-115);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("f2d", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = Utility.replace("Class must ot bS null", "Class must ot bS null", "Class must ot bS null");
      assertEquals("Class must ot bS null", string0);
      
      byte byte0 = Utility.typeOfSignature("Class must ot bS null");
      assertEquals((byte)5, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Ja");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-82);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$a5$A$ff$cfU$ae$A", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-49), (int) (byte)85, true);
      assertEquals("0:    if_acmpeq\t\t#255\n3:    <illegal opcode>\n4:    castore\n5:    freturn\n6:    nop\n", string1);
      
      Utility.printArray((Object[]) null, false, false);
      String string2 = Utility.convertString("0:    if_acmpeq\t\t#255\n3:    <illegal opcode>\n4:    castore\n5:    freturn\n6:    nop\n");
      assertEquals("0:    if_acmpeq\t\t#255\\n3:    <illegal opcode>\\n4:    castore\\n5:    freturn\\n6:    nop\\n", string2);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-37);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)2, (byte)105);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)28, 38);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantFloat constantFloat0 = new ConstantFloat(1961.684F);
      String string0 = "Unrecognized attribute type tag parsed: ";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Mqf;4t#ZM53}g{xXm");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8("S@NZJUpJX`@");
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("S@NZJUpJX`@");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_1;
      constantArray0[1] = (Constant) constantFieldref1;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantFieldref1;
      constantArray0[4] = (Constant) constantFieldref0;
      constantArray0[5] = (Constant) constantFieldref1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(251, 65);
      constantArray0[6] = (Constant) constantMethodref0;
      constantArray0[7] = (Constant) constantFieldref0;
      constantArray0[8] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Sensitive");
      assertEquals((byte)9, byte0);
      
      short short0 = Utility.searchOpcode("");
      assertEquals((short) (-1), short0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)48;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)33;
      byteArray1[3] = (byte)48;
      byteArray1[4] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)48, (int) (byte)33, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1765), (int) (byte) (-113), false);
      String string1 = Utility.compactClassName("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", false);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n";
      stringArray0[1] = "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n";
      String string2 = Utility.methodTypeToSignature("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", stringArray0);
      assertEquals("(L0:;L0:;)L0:;", string2);
      
      String string3 = Utility.methodSignatureToString("(L0:;L0:;)L0:;", "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n");
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n 0: 0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n(0: arg1, 0: arg2)", string3);
      
      String string4 = Utility.getSignature("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n 0: 0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n(0: arg1, 0: arg2)");
      assertEquals("L0:;", string4);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.accessToString(1168, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "", "final transient abstract", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      Utility.methodTypeToSignature("", stringArray0);
      String string0 = "CONSTANT_MethodType";
      String string1 = "<A!F7H";
      boolean boolean0 = false;
      Method method0 = null;
      try {
        method0 = new Method((Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("+Zci<opscmm1IW");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString((-5321));
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString(constantArray0[3]);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("impdep1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("LmtV", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LmtV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("LLtV");
      assertEquals((byte)14, byte0);
      
      String string0 = Utility.classOrInterface((byte)14);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray1 = new byte[0];
      String string1 = Utility.codeToString(byteArray1, constantPool1, 0, (int) (byte)14, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "class";
      objectArray0[5] = (Object) "class";
      objectArray0[6] = (Object) "class";
      objectArray0[7] = (Object) "class";
      objectArray0[8] = (Object) "class";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.classOrInterface(0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "class";
      Utility.isSet(0, 0);
      String string0 = "R7>&P\"!";
      LocalVariable[] localVariableArray0 = new LocalVariable[3];
      String string1 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "R7>&P\"!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.convertString("lreturn");
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(115, 115);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-71);
      Constant[] constantArray1 = new Constant[4];
      constantArray1[0] = (Constant) constantFieldref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-71), (byte) (-71));
      constantArray1[1] = (Constant) constantInvokeDynamic0;
      constantArray1[2] = (Constant) constantFieldref0;
      constantArray1[3] = (Constant) constantFieldref0;
      ConstantPool constantPool1 = new ConstantPool(constantArray1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-71);
      byteArray1[1] = (byte) (-71);
      byteArray1[2] = (byte) (-71);
      byteArray1[3] = (byte) (-71);
      byteArray1[4] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 47545. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface((-936));
      Utility.isSet(90, 132);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte) (-1);
      byte byte0 = (byte) (-23);
      byteArray0[8] = (byte) (-23);
      Constant[] constantArray0 = new Constant[9];
      int int0 = 46;
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.signatureToString("SV", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte)28;
      byteArray0[8] = (byte)114;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-6), (int) (byte)28, true);
      assertEquals("0:    <illegal opcode>\n1:    ldiv\n2:    fstore_0\n3:    <illegal opcode>\n4:    l2d\n5:    saload\n6:    jsr\t\t#7288\n", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.printArray((Object[]) null);
      byte byte0 = (byte) (-73);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)85;
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[2] = (byte)68;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)74;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dastore", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      try { 
        Utility.typeOfMethodSignature("J*{aQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: J*{aQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "j0tszx 8pE2";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(".F9", " wq~rZi*{5q>\u0003", "j0tszx 8pE2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .F9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)23;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(188);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)23, 176);
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Utility.fillup("goto", 252, false, 'M');
      Utility.compactClassName("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMgoto", "2~&`N-_$3K", false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "goto";
      objectArray0[1] = (Object) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMgoto";
      objectArray0[2] = (Object) "2~&`N-_$3K";
      objectArray0[3] = (Object) "goto";
      objectArray0[4] = (Object) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMgoto";
      Utility.printArray(objectArray0, true, true);
      Utility.isSet((-1196), 18);
      Utility.setBit(1460, 18);
      Utility.getSignature("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMgoto");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-124);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      MockFile mockFile0 = new MockFile(")\t", ")\t");
      MockFile mockFile1 = new MockFile(mockFile0, "LMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMgoto;");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile1, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)54;
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantInteger constantInteger0 = new ConstantInteger(178);
      byteSequence0.readChar();
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("fcmpl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `fcmpl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Utility.methodSignatureReturnType("L;tV");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L;tV", "", "L;tV", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L;tV
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)92, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-1`zmt`vURTp.r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -1`zmt`vURTp.r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = Utility.replace("OM8']F &%", "OM8']F &%", "OM8']F &%");
      assertEquals("OM8']F &%", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("jsr\t\t#17479", string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "jsr\t\t#17479";
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{jsr\t\t#17479}", string2);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)82;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dastore", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-73);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-73), 3102, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_acmpeq\t\t#9983
         // 3:    <illegal opcode>
         // 4:    fadd
         // 5:    f2l
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "lstore_1";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2476, 821, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      try { 
        Utility.typeOfSignature("QTH zQXz4%5&N\"J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QTH zQXz4%5&N\"J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-113);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-113);
      byteArray1[1] = (byte) (-113);
      byteArray1[2] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readChar();
      Constant[] constantArray0 = null;
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("uQ&,:z4fEwXm@Vx_5#", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `uQ&,:z4fEwXm@Vx_5#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Utility.setBit((byte) (-71), (byte) (-85));
      // Undeclared exception!
      try { 
        Utility.signatureToString("kO:%(DEsSHNn_DAml");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `kO:%(DEsSHNn_DAml'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("Byte code error: ");
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Integer integer0 = new Integer((-2719));
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("1;NPv<EXZJl$.m");
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString(constantArray0[1]);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-68);
      byteArray0[2] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1313, 2869, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(977, 977);
      ConstantUtf8.getInstance("jsr_w");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(185, 20);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 65427. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)102;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fsub", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.reset();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence3, constantPool0, false);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7~>5NG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7~>5NG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = "ymc|*zs FJMN:eQ0!u";
      byte[] byteArray0 = Utility.decode("ymc|*zs FJMN:eQ0!u", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 165, 165, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = "P<#p Tnh<FR9EP";
      // Undeclared exception!
      try { 
        Utility.signatureToString("P<#p Tnh<FR9EP", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P<#p Tnh<FR9EP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.methodTypeToSignature("P<#p Tnh<FR9EP", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("()LP<#p;", "P<#p Tnh<FR9EP", "P<#p Tnh<FR9EP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LP<#p;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Utility.compactClassName("g3#qq^l13/>S*");
      Utility.replace("!f=My|jbSr+^]", "LQR", "g3#qq^l13.>S*");
      // Undeclared exception!
      try { 
        Utility.signatureToString("LQR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LQR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantInteger constantInteger0 = new ConstantInteger(3314);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-450), (int) (byte) (-127), false);
      assertEquals("0:    lor\n", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Utility.setBit(310, 1410);
      Utility.compactClassName("[Zx[MF{Vm0");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)84, 1417);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("[Zx[MF{Vm0");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      try { 
        constantPool0.getConstant((int) (byte) (-9), (byte) (-9));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -9. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = Utility.replace("org.apache.bcelclasfile.UFlity$JavaReader", "org.apache.bcelclasfile.UFlity$JavaReader", "org.apache.bcelclasfile.UFlity$JavaReader");
      byte[] byteArray0 = new byte[0];
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("[]");
      assertEquals((byte)13, byte0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "[]";
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"[]\"}", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("0d 0d 0d 0d", string1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = "instanceof";
      int int0 = (-1650);
      Utility.fillup("instanceof", (-1650), true, 'P');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)43;
      byteArray0[5] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("instanceof", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `instanceof'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Utility.replace("OM8']F &%", "OM8']F &%", "OM8']F &%");
      String string0 = ", high = ";
      try { 
        Utility.methodSignatureToString("", "#yJ(^J(", "OM8']F &%", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ifeq\t\t#9984", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      boolean boolean0 = Utility.isSet(9, 9);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)121;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("ony", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)51, (int) (byte)51, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)80;
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = "f//=~i2H]VgF9W'.\"";
      try { 
        Utility.decode("T^p-6P/x+.>101t|0S", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Utility.replace("yi ", "yi ", "yi ");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)31;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)73;
      byteArray1[1] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.decode("![\"~h$f@jA5jTU", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"f@\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpeq\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lushr";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantFloat constantFloat0 = new ConstantFloat((-2430.1F));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      String string0 = constantPool0.constantToString((Constant) constantFloat0);
      byteArray0[0] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Utility.replace("\t\t#", "kprz):,?RSy", "\t\t#");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      Utility.encode(byteArray0, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("long", "3AXKMJ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 3AXKMJ
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int0 = 249;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-107), 249, true);
      String string0 = " is no interface";
      try { 
        Utility.methodSignatureArgumentTypes(" is no interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  is no interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-37);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte) (-87);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ret\t\t%97", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)74;
      byteArray0[0] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("access flags\t\t", "access flags\t\t", true);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "access flags\t\t";
      objectArray0[1] = (Object) "";
      Utility.printArray(objectArray0);
      Utility.replace("", "Fl <HLR$OH(", "");
      byte[] byteArray0 = null;
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Utility.typeOfSignature("V|");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = "lmul";
      MockFile mockFile0 = new MockFile("lmul", "lmul");
      Utility.printArray((Object[]) null, false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, " arg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         //  arg
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Utility.replace("M']F &%", "M']F &%", "M']F &%");
      Utility.convertString("lushr");
      Utility.compactClassName("lushr", "M']F &%", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-24);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-116), 4765, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lload\t\t%41
         // 2:    ddiv
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = "W/.dD6)";
      try { 
        Utility.typeOfSignature("W/.dD6)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W/.dD6)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("+Zci<opscmm1IW");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantString constantString0 = new ConstantString((-5321));
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString(constantArray0[3]);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-77), (-281), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("fload\t\t%70", string0);
      
      String string1 = Utility.getSignature(",WAE8&kLyg5G");
      assertEquals("L,WAE8&kLyg5G;", string1);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-126);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = Utility.accessToString(0);
      assertEquals("", string0);
      
      String string1 = Utility.format(32, 141, true, '{');
      assertEquals("32{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{", string1);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)47;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$A$_$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)67, (byte)42);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      int int0 = 4477;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1615868689), 4477);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 22058. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)42;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("v\"Z`bv,");
      Constant[] constantArray0 = new Constant[6];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.constantToString(constantArray0[1]);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureArgumentTypes("v\"Z`bv,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: v\"Z`bv,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Utility.clearBit(0, 0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)124;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 497, 497, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      int int0 = 0;
      Utility.classOrInterface(0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "class";
      Utility.isSet(231, 231);
      String string0 = "R7>&P\"!";
      boolean boolean0 = false;
      int int1 = 3127;
      LocalVariable[] localVariableArray0 = new LocalVariable[3];
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "R7>&P\"!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteSequence0.markSupported();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Utility.compactClassName("t4q^v[OBps@y/JWgX");
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 62, true, '>');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.getSignature("HcDr[pqq1|/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[pqq1|/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ymc|*zs FJMN:eQ0!u", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(18, byteArray0.length);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Class must not bS null");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.accessToString((-581));
      assertEquals("public private static final synchronized transient native abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)14;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)14, 46, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Utility.isSet(87, 87);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)13;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-110);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("multianewarray");
      constantPool0.constantToString((Constant) constantUtf8_0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1313, (-1020), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)16;
      byteArray0[3] = (byte) (-1);
      byteArray0[8] = (byte)16;
      byteArray0[4] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Utility.isSet(48, 2434);
      String string0 = "=onm/1PKV3Ud.";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("=onm/1PKV3Ud.", (String) null, "{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =onm/1PKV3Ud.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature("!6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)1, (byte)1);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantClass constantClass0 = new ConstantClass(1057);
      constantArray0[1] = (Constant) constantClass0;
      ConstantInteger constantInteger0 = new ConstantInteger(79);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(79, 190);
      constantMethodHandle0.copy();
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("aconst_null", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("istore_3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: istore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("1\"?W:.D");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(34, 94);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(94, 34);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(7, 94);
      constantInvokeDynamic0.setNameAndTypeIndex((-2435));
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-16);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 192, 45, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ret\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Utility.signatureToString("DGB>*;L*?,Cg");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("7884{4rc", "7884{4rc", "w(R8jKs2(G[)S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7884{4rc
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Utility.clearBit(0, 165);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)87;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("+Zci<opscmm1IW");
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString(constantArray0[6]);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("if_icmpgt\t\t#15954", string0);
      
      short short0 = Utility.searchOpcode("getfield");
      assertEquals((short)180, short0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Utility.signatureToString("SV", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string0 = Utility.getSignature(")\t");
      assertEquals("L);", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = "SV";
      boolean boolean0 = true;
      Utility.signatureToString("SV", true);
      String string1 = "dio1{D";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)33;
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)30;
      byteArray0[7] = (byte) (-6);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 76, 1732, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)73;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)88, (-777), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(83, (-2798));
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("YN[}Jddk/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YN[}Jddk/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byte[] byteArray1 = new byte[25];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte)58;
      byteArray1[3] = (byte) (-86);
      byteArray1[4] = (byte) (-24);
      byteArray1[5] = (byte)58;
      byteArray1[6] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureArgumentTypes("tableswitch\tdefault = -398837248, low = 0, high = 0(0)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: tableswitch\tdefault = -398837248, low = 0, high = 0(0)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantUtf8.getCachedInstance("multianewarray");
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-67);
      byteArray1[1] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, constantPool1, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = Utility.signatureToString("L;tV", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)75;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$9fQxYQ$QA$KK", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Utility.convertString("YJQ@UD8/8|`56");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "invokevirtual";
      stringArray0[1] = "YJQ@UD8/8|`56";
      stringArray0[2] = "";
      stringArray0[3] = "YJQ@UD8/8|`56";
      stringArray0[4] = "YJQ@UD8/8|`56";
      stringArray0[5] = "void";
      stringArray0[6] = "YJQ@UD8/8|`56";
      try { 
        Utility.methodTypeToSignature("invokevirtual", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lushr";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[1] = "lushr";
      stringArray0[2] = "lushr";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[3] = "lushr";
      stringArray0[4] = "lushr";
      String string0 = Utility.methodTypeToSignature("lushr", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-773), (-773));
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("jsr_w");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-773), 191);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 200, 155);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = null;
      String string1 = "Byte code error: ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Byte code error: ");
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)60;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 178, 178, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(":");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.constantToString((Constant) constantUtf8_0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-113);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)4, (-41), true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P! ~(PB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P! ~(PB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      int int0 = Utility.setBit(310, 1410);
      assertEquals(310, int0);
      
      String string0 = Utility.compactClassName("[Zx[MF{Vm0");
      assertEquals("[Zx[MF{Vm0", string0);
      
      String string1 = Utility.accessToString(310);
      assertEquals("private protected final synchronized native", string1);
      
      Utility.fillup("ifnull", 1410, true, 'A');
      String string2 = Utility.accessToString(1410);
      assertEquals("private transient native abstract", string2);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(115, 115);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-71);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[2] = (byte) (-97);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "istore";
      Utility.methodTypeToSignature("istore", stringArray0);
      try { 
        Utility.typeOfSignature("#p][x2f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #p][x2f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("L;V");
      assertEquals("", string0);
      
      String string1 = Utility.signatureToString("L;V");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1765), (int) (byte)122, false);
      String string1 = Utility.compactClassName("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", false);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n";
      stringArray0[1] = "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n";
      String string2 = Utility.methodTypeToSignature("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", stringArray0);
      assertEquals("(L0:;L0:;)L0:;", string2);
      
      String string3 = Utility.methodSignatureToString("(L0:;L0:;)L0:;", "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n");
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n 0: 0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n(0: arg1, 0: arg2)", string3);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantInteger constantInteger0 = new ConstantInteger(3314);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("iconst_2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `iconst_2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-111);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)84, (int) (byte)94, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.convertString("_vS@D|4[L7u_");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)30;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("MT7a%M", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MT7a%M'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[2] = (byte)48;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)56;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)48;
      constantPool0.setConstantPool(constantArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray1[3] = (byte)48;
      byteArray1[4] = (byte)48;
      byteArray1[5] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.methodSignatureReturnType("*wp>rWQXu(`%a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `*wp>rWQXu(`%a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = Utility.signatureToString("ZQ_]t`)}Ne", true);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)109;
      byteArray1[1] = (byte)109;
      byteArray1[2] = (byte) (-97);
      byteArray1[3] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byteSequence0.readBoolean();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      Utility.replace("ireturn", "ftnm", "/lc!Ad9XAg9");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("YdrVv6%Go[A>s]`azW", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YdrVv6%Go[A>s]`azW'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-37);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((-1L));
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.decode("$a9a$98$db$A$A", false);
      try { 
        Utility.methodSignatureReturnType("putstatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `putstatic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Object[] objectArray0 = new Object[5];
      objectArray0[2] = (Object) locale0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("Warning: Padding byte != 0 in ");
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-773), (-773));
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("jsr_w");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-773), 191);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-109);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3), 4976, true);
      assertEquals("0:    impdep2\n1:    lstore_3\n2:    i2s\n", string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "SV";
      objectArray0[1] = (Object) "SV";
      objectArray0[2] = (Object) "SV";
      objectArray0[3] = (Object) "SV";
      objectArray0[4] = (Object) "SV";
      objectArray0[5] = (Object) "SV";
      objectArray0[6] = (Object) "SV";
      objectArray0[7] = (Object) "SV";
      objectArray0[8] = (Object) "SV";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)85;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1699, (int) (byte)85, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      Utility.replace("X4\" B6%(Od`26_", "jI=Vv6+m;aeoAUn^P", "X4\" B6%(Od`26_");
      // Undeclared exception!
      try { 
        Utility.signatureToString("X4\" B6%(Od`26_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X4\" B6%(Od`26_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-107), 264, true);
      Utility.equals(byteArray0, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("0:    fcmpl\n", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "0:    fcmpl\n", (Object[]) constantArray0);
      Utility.printArray(printWriter0, (Object[]) constantArray0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = Utility.classOrInterface(0);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "class";
      objectArray0[6] = (Object) "class";
      objectArray0[7] = (Object) "class";
      objectArray0[8] = (Object) "class";
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">x<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >x<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool2 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool2, false);
      assertEquals("dsub", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";dwjg+(YE`>|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;dwjg+(YE`>|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      Utility.compactClassName(": ");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Utility.typeOfSignature("LLtV");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("c}/8BW#{/jlw2#Kt", "c}/8BW#{/jlw2#Kt", "invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: c}/8BW#{/jlw2#Kt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      Utility.typeOfSignature("[");
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      try { 
        Utility.typeOfSignature("4F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Gx,OUz1W!h", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Gx,OUz1W!h'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[2] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence1);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, true);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-773), (-773));
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-773), 191);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)80;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("if_acmpne\t\t#-22959", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lushr";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[1] = "lushr";
      stringArray0[2] = "lushr";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[3] = "lushr";
      stringArray0[4] = "lushr";
      Utility.methodTypeToSignature("lushr", stringArray0);
      Utility.methodSignatureToString("(Llushr;Llushr;Llushr;Llushr;Llushr;)Llushr;", "double", "lushr");
      Constant[] constantArray0 = new Constant[5];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-61);
      byteArray0[8] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("dstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      boolean boolean0 = Utility.isSet(15, 15);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)74;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("b3 4a", string0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)0;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.replace("", "Byte code error: ", "char");
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Byte code error: ";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)48;
      objectArray0[4] = (Object) "Byte code error: ";
      objectArray0[5] = (Object) (byte)123;
      objectArray0[6] = (Object) (byte)0;
      objectArray0[7] = (Object) "";
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{Byte code error: , $l$8b$I$A$A$A$A$A$A$A, 0, 48, Byte code error: , 123, 0, }", string2);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("X4\" B6%(Od`26_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X4\" B6%(Od`26_'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      byte byte0 = (byte)70;
      byteArray0[1] = (byte)70;
      byte byte1 = (byte)43;
      byteArray0[2] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byteSequence0.mark(1845);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureArgumentTypes("![\"~h$f@A5jTU", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ![\"~h$f@A5jTU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Illegal type: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)58;
      byteArray1[3] = (byte) (-86);
      byteArray1[4] = (byte) (-24);
      byteArray1[5] = (byte)58;
      byteArray1[6] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = "^J4T ";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[qS*Dnv?Igj` P5I", "TEbAU8G|2+ee00>B", "^J4T ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [qS*Dnv?Igj` P5I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("UX>]h'g}_7>@k", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UX>]h'g}_7>@k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-114);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'T-{<q/g:bz(g%", "'T-{<q/g:bz(g%", "a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'T-{<q/g:bz(g%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)8;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2182, 2182, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 42343. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('`');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-109);
      byteArray0[7] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      constantPool0.toString();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.searchOpcode("laload");
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      boolean boolean0 = Utility.isSet(540, 540);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)18;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-78);
      byteArray1[1] = (byte)46;
      byteArray1[2] = (byte)70;
      byteArray1[3] = (byte)18;
      Utility.equals(byteArray0, byteArray1);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (byte)12;
      objectArray0[1] = (Object) (byte) (-78);
      objectArray0[2] = (Object) (byte)46;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte)18;
      objectArray0[5] = (Object) (byte)70;
      objectArray0[6] = (Object) (byte) (-78);
      Utility.printArray(objectArray0);
      String string0 = Utility.format(57, (byte) (-111), false, '\'');
      assertEquals("57", string0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dload_2", string0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("istore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = ", high = ";
      try { 
        Utility.methodSignatureArgumentTypes(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Utility.replace("sF$fNS!", "sF$fNS!", "sF$fNS!");
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 97, 1635);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      try { 
        Utility.typeOfSignature("KM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      Utility.isSet(87, 87);
      String string0 = "'wpmF6wQ1Vf,)7*\"-";
      Utility.fillup("'wpmF6wQ1Vf,)7*\"-", 87, false, 'P');
      int int0 = 51;
      Utility.accessToString(51);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), 3900, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = Utility.replace("multianewarray", "impep2", "impep2");
      assertEquals("multianewarray", string0);
      
      short short0 = Utility.searchOpcode("int");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = "instanceof";
      int int0 = (-1650);
      Utility.fillup("instanceof", (-1650), true, 'P');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("instanceof", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `instanceof'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      boolean boolean0 = true;
      Utility.fillup("instanceof", (-1650), true, 'P');
      Utility.accessToString((-238));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byte byte0 = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-55);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, 163, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_icmpgt\t\t#1", string0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("astore_3", string0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1842, 1842);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1,f-]`@)$[EyK;Rkov");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1,f-]`@)$[EyK;Rkov
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("FR<atxf");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)85;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$b7$A$ffU", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.signatureToString("Illegally nested brackets:", false);
      assertEquals("int", string1);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Utility.replace("%", "%", "%");
      // Undeclared exception!
      try { 
        Utility.signatureToString("N$\"}~~-O[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N$\"}~~-O['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      byteSequence0.readUnsignedByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      int int0 = (-1869);
      int int1 = (-18);
      Utility.isSet((-1869), (-18));
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[2] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(115, 115);
      constantArray0[0] = (Constant) constantFieldref0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)62, 1102, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(977, 977);
      ConstantUtf8.getInstance("jsr_w");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(185, 20);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = Utility.replace("%", "%", "%");
      assertEquals("%", string0);
      
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-116);
      byteArray1[1] = (byte) (-58);
      byteArray1[2] = (byte) (-81);
      byteArray1[3] = (byte)36;
      byteArray1[4] = (byte) (-67);
      byteArray1[5] = (byte)109;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("ifnull\t\t#-20699", string1);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("TjqTr!/26Gl?,~# ");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = Utility.replace("_M42@+J|7P", "_M42@+J|7P", "_M42@+J|7P");
      String string1 = Utility.compactClassName("_M42@+J|7P", false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("dload_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dload_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O>p=`mCJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O>p=`mCJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "short";
      stringArray0[1] = "short";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, 159, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-37);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((-1L));
      constantArray0[0] = (Constant) constantLong0;
      Constant constant0 = constantLong0.copy();
      constantArray0[1] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("irem", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: irem
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = "Invalid method signature: ";
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Invalid method signature: ", "Invalid method signature: ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)80;
      Utility.encode(byteArray0, false);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)80, 1533, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "java.lang.' at XnaMdeg ", "{5*Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"2-=Q<&_KogX9Bcb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"2-=Q<&_KogX9Bcb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String string0 = Utility.replace(", ", ", ", ", ");
      assertEquals(", ", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)31;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore_1", string1);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte) (-30);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, (int) (byte)27, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      try { 
        Utility.typeOfSignature("NKZ%K!s[~W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NKZ%K!s[~W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      Utility.compactClassName("' at index ");
      Utility.compactClassName("6,1kb>,u3wUSLxmuTG", "' at index ", false);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "' at index ";
      objectArray0[1] = (Object) "' at index ";
      objectArray0[2] = (Object) "' at index ";
      objectArray0[3] = (Object) "' at index ";
      objectArray0[4] = (Object) "6,1kb>,u3wUSLxmuTG";
      objectArray0[5] = (Object) "6,1kb>,u3wUSLxmuTG";
      objectArray0[6] = (Object) "6,1kb>,u3wUSLxmuTG";
      Utility.printArray(objectArray0);
      Utility.setBit((-2719), (-1662));
      try { 
        Utility.decode("1;NPv5<EXZJl$.m", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = null;
      Utility.setBit((byte) (-71), (byte) (-85));
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Integer integer0 = new Integer((-2719));
      String string0 = Utility.replace(" ?:h!;RIjNu", " ?:h!;RIjNu", "\n\t\tthrows ");
      assertEquals("\n\t\tthrows ", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("dmul", string1);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)54;
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantInteger constantInteger0 = new ConstantInteger(178);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(4, byteSequence0.getIndex());
      assertEquals("bipush\t\t85", string0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)123;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)33;
      byteArray0[1] = (byte)107;
      byteArray0[7] = (byte)0;
      Utility.encode(byteArray0, true);
      Utility.replace("", "Byte code error: ", "char");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Byte code error: ";
      objectArray0[1] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)48;
      objectArray0[4] = (Object) "Byte code error: ";
      objectArray0[5] = (Object) (byte)123;
      objectArray0[6] = (Object) (byte)0;
      objectArray0[7] = (Object) "";
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("if_acmpeq\t\t#3", string0);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence1, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(977, 977);
      ConstantUtf8.getInstance("jsr_w");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(191, 20);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4976, 20, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 65427. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6,1kb,u3wUSxmuTG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6,1kb,u3wUSxmuTG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = false;
      Utility.compactClassName("boolea", "boolea", false);
      Utility.convertString("boolea");
      Utility.clearBit((-2719), 512);
      // Undeclared exception!
      try { 
        Utility.decode("^5$awOv%'>/v4M", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"aw\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      String string0 = "The size must be non-negative";
      // Undeclared exception!
      try { 
        Utility.signatureToString("The size must be non-negative");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The size must be non-negative
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      Utility.signatureToString("SV");
      String string0 = Utility.fillup("\tdefault = ishl", (-141), true, '0');
      assertEquals("\tdefault = ishl", string0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte) (-78);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("+Zci<opscmm1IW");
      Constant[] constantArray0 = new Constant[7];
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 15954. Constant pool size is: 7
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('Z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-18);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, constantPool0, true);
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.commons.io.IOCase", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.commons.io.IOCase
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-114);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      String string1 = Utility.compactClassName("d2i", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("aload_0", string0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("ymc|*zs FJMN:eQ0!u", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-5021), (-2511));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantLong constantLong0 = new ConstantLong((-5021));
      constantArray0[2] = (Constant) constantLong0;
      ConstantInteger constantInteger1 = new ConstantInteger(byteSequence0);
      constantArray0[3] = (Constant) constantInteger1;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      assertEquals(17994, constantString0.getStringIndex());
      
      constantArray0[4] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-5021), 4384);
      constantArray0[5] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(18, byteArray0.length);
      assertEquals("astore_2", string0);
      
      String string1 = Utility.printArray((Object[]) constantArray0, false, false);
      assertEquals("CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = -5021, name_and_type_index = -2511), CONSTANT_Integer[3](bytes = 2037212028), CONSTANT_Long[5](bytes = -5021), CONSTANT_Integer[3](bytes = 712667936), CONSTANT_String[8](string_index = 17994), CONSTANT_MethodHandle[15](reference_kind = -5021, reference_index = 4384)", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-91);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-49);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("if_acmpeq\t\t#255", string0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-107);
      byteArray1[1] = (byte) (-107);
      byteArray1[2] = (byte) (-107);
      byteArray1[3] = (byte) (-107);
      byteArray1[4] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      String string0 = Utility.accessToString((-649), false);
      assertEquals("public private protected final synchronized volatile native abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      Utility.isSet(470, 470);
      String string0 = "";
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("X0`n[X?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X0`n[X?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = Utility.replace("%", "%", "%");
      assertEquals("%", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("irem", string1);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "91oi`r#jj0xF");
      Utility.getSignature("checkcast");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.typeOfSignature("ireturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ireturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-84);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)76, 43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Utility.classOrInterface(2388);
      // Undeclared exception!
      try { 
        Utility.signatureToString("class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-43);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$i$d5", string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-43), 165, false);
      assertEquals("0:    iload_2\n1:    <illegal opcode>\n", string1);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iload_2", string2);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      Utility.methodTypeToSignature("", stringArray0);
      Utility.searchOpcode("2DnzMc:LpRw");
      int int0 = 0;
      Utility.setBit((short) (-1), 0);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)106;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = Utility.compactClassName("jsr_w", false);
      assertEquals("jsr_w", string0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      int int0 = Utility.setBit((byte) (-71), (byte) (-71));
      assertEquals((-71), int0);
      
      short short0 = Utility.searchOpcode("athrow");
      assertEquals((short)191, short0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte) (-79);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1), 187);
      try { 
        Utility.decode("M=;}E%]nU\"5$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Utility.methodSignatureReturnType("Class must not bS null");
      try { 
        Utility.methodSignatureToString("Class must not bS null", "char", "char", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Class must not bS null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H2sP]uD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H2sP]uD
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Utility.typeOfSignature("L;V");
      Utility.format(1189, (-3983), false, 'Z');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L;V", "1189", "V~OmGyZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)97;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)60;
      Utility.encode(byteArray0, true);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Utility.replace("XQ$y:f<N%WYC6Gu", "OM8']F &%", "wg):L0V#-[>?a< ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)105;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)89, 8, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-99);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)122;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ifgt\t\t#10", string0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      String string0 = Utility.replace("%", "%", "%");
      assertEquals("%", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fstore_2", string1);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)47;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      String[] stringArray0 = Constants.CLASS_TYPE_NAMES;
      // Undeclared exception!
      try { 
        Utility.signatureToString("{G", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("10 00 00 00", string0);
      
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-113);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("10 53 59 8f", string1);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("X4\" B6%(Od`26_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X4\" B6%(Od`26_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.fillup("V", 123, false, 'W');
      Utility.fillup("Ooops, what primitive type is ", 123, false, 'W');
      Utility.compactClassName("WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWV", false);
      try { 
        Utility.methodSignatureToString("invokeSpecial", "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWV", "Ooops, what primitive type is ", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokeSpecial
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Utility.compactClassName("zn2?HnsXxd23\"Nt");
      Utility.isJavaIdentifierPart('M');
      Utility.compactClassName("zn2?HnsXxd23\"Nt", "zn2?HnsXxd23\"Nt", true);
      Utility.setBit((-2555), (-2555));
      Utility.setBit((-492), (-241));
      StringWriter stringWriter0 = new StringWriter(150);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "zn2?HnsXxd23\"Nt");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) printWriter0;
      objectArray0[1] = (Object) "zn2?HnsXxd23\"Nt";
      Utility.printArray(printWriter0, objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("land", "lload_0", "mwk::,{VZ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: land
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lushr";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantFloat constantFloat0 = new ConstantFloat((-2430.1F));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.accessToString((int) (byte)115);
      try { 
        Utility.methodSignatureReturnType("<#K_gYZ\"N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<#K_gYZ\"N'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      boolean boolean0 = Utility.isSet(4575, 380);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      Utility.format(1810, 1254, true, 'C');
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)0;
      // Undeclared exception!
      Utility.codeToString(byteArray1, constantPool0, (-3584), (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Utility.classOrInterface(65);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%-[O_z -");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %-[O_z -
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      String string0 = Utility.methodSignatureReturnType("Z;&GLAD#9v");
      assertEquals("boolean", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("\t(wide)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t(wide)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      String string0 = Utility.signatureToString("LTypes;V", false);
      assertEquals("Types", string0);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String string0 = "/1\\";
      try { 
        Utility.typeOfSignature("/1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lmul", "t", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      try { 
        Utility.typeOfSignature("EL;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EL;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      String string0 = Utility.signatureToString("L;tV");
      assertEquals("", string0);
      
      String string1 = Utility.getSignature("int");
      assertEquals("I", string1);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      Utility.replace("OM8']F &%", "OM8']F &%", "OM8']F &%");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)105;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("OM8']F &%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OM8']F &%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Utility.compactClassName("");
      Utility.convertString("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[9];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(541, (byte) (-127));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-167));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[2] = (Constant) constantDouble0;
      int int0 = 1540;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -81
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(2, byteSequence0.getIndex());
      
      short short0 = Utility.searchOpcode("'");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      String string0 = "B*%{PHdaLV3U*O#i";
      boolean boolean0 = true;
      Utility.signatureToString("B*%{PHdaLV3U*O#i", true);
      String string1 = "";
      MockFile mockFile0 = new MockFile("");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Utility.compactClassName("zn2?HnsXxd23\"Nt");
      Utility.isJavaIdentifierPart('M');
      Utility.compactClassName("zn2?HnsXxd23\"Nt", "zn2?HnsXxd23\"Nt", true);
      Utility.setBit((-2555), (-2555));
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("<1%vA5)P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      String string0 = Utility.getSignature("dsth%d_2");
      assertEquals("Ldsth%d_2;", string0);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2i", string0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[3];
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-86), (int) (byte) (-86));
      Utility.setBit(179, (-485));
      MockFileWriter mockFileWriter0 = new MockFileWriter("if_icmpgt", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "0:    nop\n1:    nop\n2:    nop\n";
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) "0:    nop\n1:    nop\n2:    nop\n";
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) "if_icmpgt";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, ", locals={", objectArray0);
      Utility.printArray(printWriter0, (Object[]) null);
      assertSame(mockPrintWriter0, printWriter0);
  }
}
