/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:05:04 GMT 2018
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.EOFException;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      stringReader0.read();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]=r%oW&}vkGG &[");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.google.gson.stream.JsonToken");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.getPath();
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected BEGIN_OBJECT but was ");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.close();
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("L");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(false);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Charset.defaultCharset();
      jsonReader0.setLenient(true);
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4og~w^8q");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '3';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 1, 11);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("86");
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      String string0 = jsonReader1.getPath();
      assertEquals("$", string0);
      
      boolean boolean0 = jsonReader1.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.getPath();
      jsonReader0.peeked = 15;
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was NUMBER at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader1);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 10 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[aN^R$E5($%/V.#");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.getPath();
      jsonReader0.hasNext();
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      stringReader0.reset();
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fes?D~bz _i~<saTu8y");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2nyeP)S[Z'%At");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = stringReader0.ready();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was BEGIN_ARRAY at line 1 column 9 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.name());
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      String string0 = jsonReader0.nextString();
      assertEquals("\u0000\u0000", string0);
      assertTrue(jsonReader0.isLenient());
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was END_DOCUMENT at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Uq?Id..RXd");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean2 = jsonReader0.isLenient();
      assertTrue(boolean2);
      assertTrue(jsonReader0.isLenient());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unterminated escape sequence");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = stringReader0.ready();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" path ");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(charset0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = 'v';
      charArray0[2] = ' ';
      charArray0[3] = '6';
      charArray0[4] = '0';
      charArray0[5] = ' ';
      charArray0[6] = '&';
      charArray0[7] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'i', 'v', ' ', '6', '0', ' ', '&', ':'}, charArray0);
      
      charArrayReader0.mark(0);
      assertArrayEquals(new char[] {'i', 'v', ' ', '6', '0', ' ', '&', ':'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'i', 'v', ' ', '6', '0', ' ', '&', ':'}, charArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'i', 'v', ' ', '6', '0', ' ', '&', ':'}, charArray0);
      
      String string0 = jsonReader0.nextString();
      assertEquals("iv", string0);
      assertTrue(jsonReader0.isLenient());
      assertNotNull(string0);
      assertArrayEquals(new char[] {'i', 'v', ' ', '6', '0', ' ', '&', ':'}, charArray0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'i', 'v', ' ', '6', '0', ' ', '&', ':'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      StringReader stringReader0 = new StringReader("yC");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":WUE");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.toString());
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      
      jsonReader0.peeked = 2846;
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(boolean1);
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%D");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = stringReader0.ready();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean3 = jsonReader0.hasNext();
      assertTrue(boolean3);
      assertTrue(jsonReader0.isLenient());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '-';
      charArray0[1] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', '-', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'-', '-', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'-', '-', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(string0);
      assertArrayEquals(new char[] {'-', '-', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(charset0);
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected ':'");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader(" .<Z,Z7(It:(+-");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 1, 1);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 1, 1);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("86");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      String string0 = jsonReader0.nextString();
      assertEquals("86", string0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(string0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(boolean1);
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 1, 1911);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("=!t`}PmKk");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.name());
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader1.nextNull();
      assertFalse(jsonReader1.isLenient());
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      // Undeclared exception!
      try { 
        jsonReader1.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      stringReader0.reset();
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      // Undeclared exception!
      try { 
        jsonReader1.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("[aN^R$E5($%/V.#");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      // Undeclared exception!
      try { 
        jsonReader1.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("z}p`k-!gZXxzWvt,");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      int int0 = jsonReader0.doPeek();
      assertEquals(5, int0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unterminated escape sequence");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = stringReader0.ready();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean3 = jsonReader0.isLenient();
      assertTrue(boolean3);
      assertTrue(jsonReader0.isLenient());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', ':'}, charArray0);
      
      charArrayReader0.mark(39);
      assertArrayEquals(new char[] {'\u0000', ':'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\u0000', ':'}, charArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', ':'}, charArray0);
      
      String string0 = jsonReader0.nextString();
      assertEquals("\u0000", string0);
      assertTrue(jsonReader0.isLenient());
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', ':'}, charArray0);
      
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}");
      assertNotNull(stringReader0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      // Undeclared exception!
      try { 
        jsonReader1.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      boolean boolean1 = jsonReader0.isLenient();
      assertTrue(boolean1);
      assertTrue(jsonReader0.isLenient());
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 2 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("[");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 2 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      char[] charArray0 = new char[18];
      charArray0[0] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.beginObject();
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("[");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      int int0 = jsonReader0.doPeek();
      assertEquals(1, int0);
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(string0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("86");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(string0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      JsonReader jsonReader1 = new JsonReader(bufferedReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader1.setLenient(false);
      assertFalse(jsonReader1.isLenient());
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      double double0 = jsonReader1.nextDouble();
      assertEquals(86.0, double0, 0.01);
      assertFalse(jsonReader1.isLenient());
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertFalse(jsonReader2.isLenient());
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      
      try { 
        jsonReader2.nextNull();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 1, 1);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\"';
      StringReader stringReader0 = new StringReader("@>Qs:*WMf j1FD\"");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean1 = jsonReader0.isLenient();
      assertTrue(boolean1);
      assertTrue(jsonReader0.isLenient());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 1, 1);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 't'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\u0000', 't'}, charArray0);
      
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("zp`k-!gZXxzvt,");
      assertNotNull(stringReader0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("z}p`k-!gZXxzWvt,");
      assertNotNull(stringReader0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(string0);
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.isLenient();
      assertFalse(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = jsonReader0.hasNext();
      assertTrue(boolean1);
      assertFalse(jsonReader0.isLenient());
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      boolean boolean0 = jsonReader0.nextBoolean();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
      assertNotSame(jsonReader0, jsonReader1);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      jsonReader0.peeked = 1740;
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      boolean boolean1 = jsonReader0.isLenient();
      assertFalse(boolean1);
      assertFalse(jsonReader0.isLenient());
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'\u0000', '\"'}, charArray0);
      
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      assertNotNull(pipedReader0);
      
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.close();
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.toString();
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      
      charArrayReader0.mark(61);
      assertArrayEquals(new char[] {'.'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'.'}, charArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'.'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/ixlddy_fR%!");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(string0);
      
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Unterminated escape sequence");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(85, int0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = stringReader0.ready();
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("+0meP`1gCTd]`PHy6");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\'', '\u0000'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\'', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\'', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<DQ^R]r+\u0007nccz");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = stringReader0.ready();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 7 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("86");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader1.setLenient(false);
      assertFalse(jsonReader1.isLenient());
      assertNotSame(jsonReader1, jsonReader0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      boolean boolean0 = jsonReader0.isLenient();
      assertFalse(boolean0);
      assertFalse(jsonReader0.isLenient());
      assertNotSame(jsonReader0, jsonReader1);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertFalse(jsonReader2.isLenient());
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      long long0 = jsonReader2.nextLong();
      assertEquals(86L, long0);
      assertFalse(jsonReader2.isLenient());
      assertNotSame(jsonReader2, jsonReader1);
      assertNotSame(jsonReader2, jsonReader0);
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\"', '\"', '\"'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\"', '\"', '\"'}, charArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\"', '\"', '\"'}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertArrayEquals(new char[] {'\"', '\"', '\"'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader1.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
      assertNotSame(jsonReader0, jsonReader1);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      
      boolean boolean0 = jsonReader0.isLenient();
      assertFalse(boolean0);
      assertFalse(jsonReader0.isLenient());
      assertNotSame(jsonReader0, jsonReader1);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertFalse(jsonReader2.isLenient());
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("FALSE");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was BOOLEAN at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("[");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.beginArray();
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 2 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      StringReader stringReader0 = new StringReader("*NiC*2Z6|R)u-8j<z");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean2 = jsonReader0.isLenient();
      assertTrue(boolean2);
      assertTrue(jsonReader0.isLenient());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.END_DOCUMENT, jsonToken0);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was END_DOCUMENT at line 1 column 18 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = 'v';
      charArray0[2] = ' ';
      charArray0[3] = '6';
      charArray0[4] = '0';
      charArray0[5] = ' ';
      charArray0[6] = '&';
      charArray0[7] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'i', 'v', ' ', '6', '0', ' ', '&', ':'}, charArray0);
      
      charArrayReader0.mark(0);
      assertArrayEquals(new char[] {'i', 'v', ' ', '6', '0', ' ', '&', ':'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'i', 'v', ' ', '6', '0', ' ', '&', ':'}, charArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      assertNotNull(charset1);
      assertSame(charset1, charset0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'i', 'v', ' ', '6', '0', ' ', '&', ':'}, charArray0);
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertTrue(jsonReader0.isLenient());
      assertNotNull(string0);
      assertArrayEquals(new char[] {'i', 'v', ' ', '6', '0', ' ', '&', ':'}, charArray0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'i', 'v', ' ', '6', '0', ' ', '&', ':'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader(" .<Z,Z7(It:(+-");
      assertNotNull(stringReader0);
      
      boolean boolean1 = stringReader0.markSupported();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = stringReader0.ready();
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 6 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = ']';
      charArray0[2] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\"', ']', '\"'}, charArray0);
      
      charArrayReader0.mark((-3555));
      assertArrayEquals(new char[] {'\"', ']', '\"'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\"', ']', '\"'}, charArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\"', ']', '\"'}, charArray0);
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\"', ']', '\"'}, charArray0);
      
      boolean boolean1 = jsonReader0.isLenient();
      assertFalse(boolean1);
      assertFalse(jsonReader0.isLenient());
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\"', ']', '\"'}, charArray0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was END_DOCUMENT at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      StringReader stringReader0 = new StringReader("/U8");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean2 = charArrayReader0.markSupported();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.BOOLEAN, jsonToken0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\"', '\"', '\"'}, charArray0);
      
      charArrayReader0.mark((-3572));
      assertArrayEquals(new char[] {'\"', '\"', '\"'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      assertArrayEquals(new char[] {'\"', '\"', '\"'}, charArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\"', '\"', '\"'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TRUE");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.BOOLEAN, jsonToken0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was BOOLEAN at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      StringReader stringReader0 = new StringReader("6{<OGy");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(string0);
      
      boolean boolean0 = jsonReader0.hasNext();
      assertTrue(boolean0);
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      StringReader stringReader0 = new StringReader("6{<OGy");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(jsonReader0);
      
      String string0 = jsonReader0.getPath();
      assertEquals("$", string0);
      assertFalse(jsonReader0.isLenient());
      assertNotNull(string0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertFalse(jsonReader1.isLenient());
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      int int0 = jsonReader0.nextInt();
      assertEquals(6, int0);
      assertFalse(jsonReader0.isLenient());
      assertNotSame(jsonReader0, jsonReader1);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertFalse(jsonReader2.isLenient());
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      
      try { 
        jsonReader2.nextLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }
}
