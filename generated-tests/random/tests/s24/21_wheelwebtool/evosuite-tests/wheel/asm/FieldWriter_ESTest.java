/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 09:15:05 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      String string0 = null;
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 1, "InnerClasses", string0, "", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter");
      ByteVector byteVector0 = classWriter0.pool;
      Attribute attribute0 = new Attribute("org.apache.commons.io.filefilter.OrFileFilter");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.visitAnnotation("`", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(742);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", (String) null, "");
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(35);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1503, "wsL$+u1(%|PGe`!)", "", "Synthetic", "Synthetic");
      Attribute attribute0 = new Attribute("&,fL/Ua9~N");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter");
      fieldWriter0.visitAnnotation("`", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-847), "V`q{lK$\"6)~", "", "&*k~#f+u=/Aza", (Object) null);
      fieldWriter0.visitAnnotation("Vy ;Eh#z|2b+", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = (FieldWriter)classWriter0.visitField(2530, "The list of prefixes must not be null", "2,]oXMhu _bQ", (String) null, "The list of prefixes must not be null");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter", "org.apache.commons.io.filefilter.OrFileFilter");
      fieldWriter0.visitAnnotation("org.apache.commons.io.filefilter.OrFileFilter", true);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-889), "InnerClasses", "", "ConstantValue", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(742);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", (String) null, "");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      String string0 = "";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", "");
      Object object0 = new Object();
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 1, "InnerClasses", string0, "", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@57930ac4
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 5, "l", "]~':H{YTrATy\"ueMxa", "Sensitive", "]~':H{YTrATy\"ueMxa");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 5, "l", "]~':H{YTrATy\"ueMxa", "Sensitive", "]~':H{YTrATy\"ueMxa");
      fieldWriter0.next = fieldWriter0;
      // Undeclared exception!
      try { 
        fieldWriter0.next.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }
}
