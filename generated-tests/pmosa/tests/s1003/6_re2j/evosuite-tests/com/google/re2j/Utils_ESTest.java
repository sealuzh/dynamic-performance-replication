/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 21:30:54 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Utils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utils_ESTest extends Utils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Utils.escapeRune(stringBuilder0, 136);
      // Undeclared exception!
      try { 
        Utils.subarray((int[]) null, 136, 890);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = Utils.isWordRune((-1333));
      assertFalse(boolean0);
      
      String string0 = Utils.runeToString((byte)125);
      assertEquals("}", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "}");
      byte[] byteArray0 = new byte[0];
      int int0 = Utils.indexOf(byteArray0, byteArray0, (-1333));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = Utils.unhex(92);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      Utils.stringToRunes("");
      Utils.unhex(70);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Utils.indexOf(byteArray0, byteArray0, 0);
      Utils.stringToRunes("");
      Utils.stringToRunes("!\"JK6gFJe8{<NeC@");
      StringBuilder stringBuilder0 = new StringBuilder(0);
      char[] charArray0 = new char[2];
      charArray0[0] = ':';
      charArray0[1] = '+';
      // Undeclared exception!
      try { 
        stringBuilder0.insert(70, charArray0, (int) (byte)0, 70);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 70
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Utils.isWordRune((-1333));
      assertFalse(boolean0);
      
      Utils.isalnum((-1333));
      int[] intArray0 = Utils.stringToRunes("");
      assertArrayEquals(new int[] {}, intArray0);
      
      byte[] byteArray0 = new byte[2];
      int int0 = Utils.indexOf(byteArray0, byteArray0, (-2231));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Utils.isWordRune((-1333));
      int[] intArray0 = Utils.stringToRunes("s");
      assertArrayEquals(new int[] {115}, intArray0);
      
      String string0 = Utils.runeToString((byte)125);
      assertEquals("}", string0);
      
      boolean boolean1 = Utils.isalnum((byte)125);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 408;
      Utils.unhex(408);
      int int1 = 65130;
      Utils.isalnum(65130);
      int[] intArray0 = new int[2];
      intArray0[0] = 408;
      intArray0[1] = 65130;
      int int2 = (-5334);
      // Undeclared exception!
      try { 
        Utils.subarray(intArray0, 65130, (-5334));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Utils.escapeRune(stringBuilder0, 125);
      Utils.unhex(125);
      // Undeclared exception!
      try { 
        Utils.subarray((int[]) null, (-1493), 125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray0, (-2565), 112);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2565
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Utils.isWordRune(2);
      boolean boolean0 = Utils.isalnum((-1085));
      String string0 = Utils.runeToString((-1085));
      assertEquals("\uFBC3", string0);
      
      boolean boolean1 = Utils.isWordRune(2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = Utils.emptyOpContext(146, 8474);
      assertEquals(32, int0);
      
      int int1 = Utils.unhex((-2161));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Utils.emptyOpContext(0, 0);
      int int0 = 3813;
      Utils.emptyOpContext(3813, (-722));
      Utils.emptyOpContext(0, 3813);
      StringBuilder stringBuilder0 = new StringBuilder(2691);
      int int1 = 0;
      // Undeclared exception!
      try { 
        stringBuilder0.delete(2691, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Utils.isalnum(918000);
      Utils.emptyOpContext((-2371), 3552);
      Utils.runeToString(918000);
      Utils.isalnum(3552);
      Utils.stringToRunes("\u01F0");
      Utils.isalnum(918000);
      Utils.unhex(349);
      Utils.unhex(349);
      Utils.isWordRune(37);
      Utils.unhex((-1237));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)119;
      byte byte0 = (byte)101;
      byteArray0[5] = (byte)101;
      // Undeclared exception!
      try { 
        Utils.subarray(byteArray0, 648, 2016);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 648
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = Utils.stringToRunes("}vEAW4s,_9'");
      Utils.subarray(intArray0, (-1734), (-1734));
      Utils.isWordRune((-103));
      Utils.isalnum((-1734));
      int[] intArray1 = new int[7];
      intArray1[0] = (-1734);
      intArray1[1] = (-1734);
      intArray1[2] = (-103);
      intArray1[3] = (-103);
      intArray1[4] = (-1734);
      intArray1[5] = 0;
      intArray1[6] = 65;
      // Undeclared exception!
      try { 
        Utils.subarray(intArray1, 2257, (-103));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = Utils.emptyOpContext(0, 0);
      assertEquals(32, int0);
      
      String string0 = Utils.runeToString((-2502));
      assertEquals("\uF63A", string0);
      
      Utils.unhex(0);
      int int1 = Utils.unhex(0);
      boolean boolean0 = Utils.isalnum((-2023));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte)79;
      int int2 = Utils.indexOf(byteArray0, byteArray0, 949);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-1613);
      Utils.runeToString((-1613));
      // Undeclared exception!
      try { 
        Utils.escapeRune((StringBuilder) null, (-1613));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Utils.isWordRune((-1333));
      Utils.isalnum((-1333));
      Utils.stringToRunes("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)125;
      Utils.indexOf(byteArray0, byteArray0, (byte)0);
      Utils.runeToString(435);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\u01B3");
      StringBuffer stringBuffer0 = new StringBuffer("");
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      StringBuilder stringBuilder2 = stringBuilder1.append(549L);
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, '7');
      StringBuilder stringBuilder4 = stringBuilder3.append((CharSequence) stringBuilder1);
      Utils.escapeRune(stringBuilder4, (byte)0);
      assertEquals("7\u01B35497\u01B3549\\x00", stringBuilder4.toString());
      assertEquals("7\u01B35497\u01B3549\\x00", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Utils.isWordRune((-1333));
      // Undeclared exception!
      try { 
        Utils.escapeRune((StringBuilder) null, 713);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utils.subarray(byteArray0, 70, 70);
      int[] intArray0 = new int[3];
      intArray0[0] = 70;
      intArray0[1] = 70;
      intArray0[2] = 70;
      // Undeclared exception!
      try { 
        Utils.subarray(intArray0, 70, 9114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 70
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = Utils.stringToRunes(":");
      Utils.subarray(intArray0, (-1998), (-1998));
      Utils.isalnum((-1998));
      Utils.runeToString((-1998));
      Utils.runeToString(0);
      Utils.emptyOpContext(65, 328);
      StringBuilder stringBuilder0 = new StringBuilder(16);
      StringBuilder stringBuilder1 = stringBuilder0.append(16);
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, (long) 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder3 = stringBuilder2.append(stringBuffer0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringBuilder3.append(charArray0, 16, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = Utils.isalnum(1300);
      boolean boolean1 = Utils.isalnum((-3218));
      assertFalse(boolean1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-3218);
      intArray0[1] = (-3218);
      intArray0[2] = (-3218);
      intArray0[3] = 1300;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)56;
      int int0 = Utils.indexOf(byteArray0, byteArray0, (-1311));
      assertEquals(0, int0);
      
      boolean boolean2 = Utils.isWordRune((byte)56);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)118;
      Utils.runeToString((byte)0);
      int int0 = 65;
      Utils.emptyOpContext((byte)118, (byte)118);
      StringBuilder stringBuilder0 = new StringBuilder((byte)118);
      stringBuilder0.append(65);
      int int1 = 0;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(32, (long) 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)76;
      byte[] byteArray1 = new byte[0];
      Utils.indexOf(byteArray0, byteArray1, 92);
      Utils.emptyOpContext(683, 92);
      Utils.isalnum((byte)76);
      Utils.isalnum((-4818));
      Utils.runeToString(43600);
      int[] intArray0 = new int[1];
      intArray0[0] = 43600;
      int int0 = 1329;
      // Undeclared exception!
      try { 
        Utils.subarray(intArray0, 1329, 424);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Utils.stringToRunes("Buhid");
      Utils.runeToString(683);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\u02AB");
      StringBuffer stringBuffer0 = new StringBuffer("d\"vPQnvVEFWW0pkvp");
      stringBuilder0.append(stringBuffer0);
      stringBuilder0.append((long) (byte) (-65));
      StringBuilder stringBuilder1 = stringBuilder0.append(367);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) stringBuilder0);
      Utils.escapeRune(stringBuilder2, (-5309));
      assertEquals("\u02ABd\"vPQnvVEFWW0pkvp-65367\u02ABd\"vPQnvVEFWW0pkvp-65367\\xffffeb43", stringBuilder2.toString());
      assertEquals("\u02ABd\"vPQnvVEFWW0pkvp-65367\u02ABd\"vPQnvVEFWW0pkvp-65367\\xffffeb43", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Utils.isalnum(16);
      byte[] byteArray0 = new byte[0];
      Utils.indexOf(byteArray0, byteArray0, (-2460));
      Utils.runeToString(16);
      Utils.runeToString(1419);
      Utils.unhex((-2460));
      StringBuilder stringBuilder0 = new StringBuilder();
      Utils.escapeRune(stringBuilder0, 1419);
      assertEquals("\\x{58b}", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = Utils.isalnum(1300);
      boolean boolean1 = Utils.isalnum((-3218));
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-3218);
      intArray0[1] = (-3218);
      intArray0[2] = (-3218);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[4] = (byte)56;
      int int0 = Utils.indexOf(byteArray0, byteArray0, (-1311));
      assertEquals(0, int0);
      
      Utils.stringToRunes("");
      boolean boolean2 = Utils.isalnum((byte)56);
      assertTrue(boolean2);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)56;
      int int1 = Utils.indexOf(byteArray0, byteArray1, 1691);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Utils.isWordRune((-1333));
      Utils.runeToString((byte)125);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "}");
      StringBuffer stringBuffer0 = new StringBuffer("Lao");
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      StringBuilder stringBuilder2 = stringBuilder0.append((long) (byte)125);
      StringBuilder stringBuilder3 = stringBuilder0.append((CharSequence) stringBuilder1);
      Utils.escapeRune(stringBuilder3, 8);
      Utils.escapeRune(stringBuilder2, 1);
      assertEquals("}Lao125}Lao125\\b\\x01", stringBuilder2.toString());
      assertEquals("}Lao125}Lao125\\b\\x01", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Utils.isWordRune((-1333));
      Utils.isalnum((-1333));
      Utils.stringToRunes("K");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)125;
      Utils.indexOf(byteArray0, byteArray0, 1);
      Utils.runeToString((-211));
      StringBuffer stringBuffer0 = new StringBuffer("");
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = 'I';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = '7';
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Utils.isWordRune((-1333));
      Utils.runeToString((byte)125);
      StringBuilder stringBuilder0 = new StringBuilder();
      Utils.escapeRune(stringBuilder0, 9);
      assertEquals("\\t", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Utils.isWordRune((-1333));
      Utils.runeToString(48);
      StringBuilder stringBuilder0 = new StringBuilder();
      Utils.escapeRune(stringBuilder0, 12);
      assertEquals("\\f", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = Utils.isWordRune((-1333));
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[4] = (byte)102;
      byte[] byteArray1 = new byte[1];
      int int0 = Utils.indexOf(byteArray0, byteArray1, (-1333));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Utils.isWordRune((-1333));
      Utils.runeToString((byte)125);
      StringBuilder stringBuilder0 = new StringBuilder();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)125;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)97;
      Utils.indexOf(byteArray0, byteArray1, (-1333));
      Utils.escapeRune(stringBuilder0, (byte)125);
      assertEquals("\\}", stringBuilder0.toString());
      
      boolean boolean0 = Utils.isWordRune((-1370));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Utils.runeToString(13);
      StringBuilder stringBuilder0 = new StringBuilder();
      Utils.escapeRune(stringBuilder0, 13);
      assertEquals("\\r", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Utils.isWordRune((-1333));
      Utils.runeToString((byte)125);
      StringBuilder stringBuilder0 = new StringBuilder();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[2] = (byte)125;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)125;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)97;
      Utils.indexOf(byteArray0, byteArray1, (-1333));
      Utils.escapeRune(stringBuilder0, (byte)125);
      Utils.escapeRune(stringBuilder0, (byte)125);
      assertEquals("\\}\\}", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Utils.escapeRune(stringBuilder0, 136);
      assertEquals("\\x88", stringBuilder0.toString());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte)97;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)34;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)97;
      byteArray1[3] = (byte)127;
      byteArray1[4] = (byte)127;
      Utils.indexOf(byteArray0, byteArray1, (byte) (-97));
      String string0 = Utils.runeToString((byte)34);
      assertEquals("\"", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((-162));
      Utils.escapeRune(stringBuilder0, (-1157));
      Utils.escapeRune(stringBuilder1, 10);
      Utils.escapeRune(stringBuilder0, (-1435));
      assertEquals("-162\\xfffffb7b\\n\\xfffffa65", stringBuilder0.toString());
  }
}
