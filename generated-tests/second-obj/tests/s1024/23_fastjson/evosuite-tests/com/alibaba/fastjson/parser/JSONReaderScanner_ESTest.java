/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:53:16 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReaderScanner_ESTest extends JSONReaderScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^-M}150y`j3b4AE$:mV");
      jSONReaderScanner0.subString(0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 20);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(20, charArray0, 200, 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      boolean boolean0 = jSONReaderScanner0.isBlankInput();
      assertFalse(boolean0);
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(46, 2582, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable(1202);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("ILq[lQm'6]cGbM");
      jSONReaderScanner0.sub_chars(1202, 1202);
      String string0 = jSONReaderScanner0.stringVal();
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hashCode", 74);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(74, (-518));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -518
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 374);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charArrayCompare(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(",=w{]E `H{3Z6", 3197);
      char char0 = jSONReaderScanner0.charAt(3197);
      assertEquals(',', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13, 13);
      int int0 = jSONReaderScanner0.indexOf('b', 13);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('b', jSONReaderScanner0.getCurrent());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93);
      SymbolTable symbolTable0 = new SymbolTable(93);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0, '+');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127, 66);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      assertEquals('N', jSONReaderScanner0.getCurrent());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = Calendar.PM;
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^-M}150y`j3b4AE$:mV");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-1970), (-1970));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1970
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.JSONReaderScanner");
      char[] charArray0 = new char[2];
      JSON.DEFAULT_PARSER_FEATURE = 0;
      jSONReaderScanner0.putChar('6');
      charArray0[0] = '6';
      String string0 = jSONReaderScanner0.numberString();
      assertEquals("c", string0);
      assertEquals('c', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5PiB8Kz.=2IL\"#YGYX", 506);
      jSONReaderScanner0.nextIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol((-3841), (-3841), (-3841), (SymbolTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state, textLength is zero");
      jSONReaderScanner0.bytesValue();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("p;mz]rGq");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.numberString();
      BigDecimal bigDecimal0 = new BigDecimal(0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";R5&~<UJt=udVk!J");
      char[] charArray0 = new char[4];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 127, 20);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.indexOf('T', 20);
      SymbolTable symbolTable0 = new SymbolTable(3871);
      jSONReaderScanner0.addSymbol(13, 20, 3871, symbolTable0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.sub_chars(20, 21);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.close();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\r';
      charArray0[1] = 'z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16385);
      Feature feature0 = Feature.InternFieldNames;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanUUID('z');
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(16385, 70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = 132;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 132);
      jSONReaderScanner0.putChar('\u0000');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93);
      jSONReaderScanner0.putChar('N');
      jSONReaderScanner0.putChar('\u0000');
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D_yEoL(%m^3j[)");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.numberString();
      BigDecimal bigDecimal0 = new BigDecimal(0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)27;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`SE.%~!u=RvEG[h=Mr|");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13, 13);
      jSONReaderScanner0.indexOf('\u0000', 13);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\u0000');
      jSONReaderScanner0.nextToken();
      int int0 = 92;
      char[] charArray1 = jSONReaderScanner0.sub_chars(0, 92);
      jSONReaderScanner0.charArrayCompare(charArray1);
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanIdent();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'N';
      charArray0[0] = 'N';
      int int0 = 93;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93);
      jSONReaderScanner0.putChar('N');
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 16370);
      jSONReaderScanner0.next();
      jSONReaderScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = 'K';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("yufF&;?F(Q}<`");
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yufF&;?F(Q}<`");
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.indexOf('2', 93);
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.setToken(2593);
      jSONReaderScanner0.scanIdent();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("({/Vr", 65536);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("D_yEoL(%m^3j[)");
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'S');
      jSONReaderScanner0.putChar('S');
      jSONReaderScanner0.numberString();
      BigDecimal bigDecimal0 = new BigDecimal((int) 'S');
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) jSONReaderScanner0;
      objectArray0[2] = (Object) "";
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("3j`d-RQ", 0);
      int int0 = 16377;
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("3j`d-RQ", 'S');
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("3j`d-RQ");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "illegal ref, ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(inputStreamReader0);
      jSONReaderScanner0.isEOF();
      inputStreamReader0.read();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 1130);
      jSONReaderScanner0.scanIdent();
      System.setCurrentTimeMillis(0L);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(charArray0, 1130, 1130);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.JSONReaderScanner");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "illegal ref, ");
      jSONReaderScanner0.scanIdent();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      boolean boolean0 = jSONReaderScanner0.hasSpecial;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("com.alibaba.fastjson.parser.JSONReaderScanner");
      jSONReaderScanner0.scanIdent();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.scanIdent();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.isBlankInput();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.compatibleWithJavaBean");
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state, extLength is zero");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.charAt(0);
      jSONReaderScanner0.next();
      jSONReaderScanner0.numberString();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'B');
      jSONReaderScanner0.putChar('B');
      jSONReaderScanner0.numberString();
      int int0 = 65279;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 65279, 0, 65279, 68, 68, 3, 0, 0, 0, 68, 3);
      // Undeclared exception!
      try { 
        simpleTimeZone0.getOffset(1023, 68, 68, (-818), (-818), 1023);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal era 1023
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-3);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArrayInputStream0.reset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(inputStreamReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(inputStreamReader0);
      char[] charArray0 = new char[0];
      jSONReaderScanner1.matchField(charArray0);
      jSONReaderScanner1.setLocale((Locale) null);
      jSONReaderScanner0.hasSpecial = true;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      inputStreamReader0.ready();
      jSONReaderScanner1.intValue();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      int int0 = Calendar.LONG_STANDALONE;
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.bytesValue();
      SymbolTable symbolTable0 = new SymbolTable(32770);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.addSymbol((byte) (-3), (byte) (-3), 34, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)26;
      byteArray0[3] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(inputStreamReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(inputStreamReader0);
      char[] charArray0 = new char[0];
      jSONReaderScanner1.matchField(charArray0);
      Locale locale0 = Locale.GERMAN;
      jSONReaderScanner1.locale = locale0;
      jSONReaderScanner0.hasSpecial = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner1.intValue();
      jSONReaderScanner0.scanIdent();
      Locale locale1 = Locale.ENGLISH;
      char char0 = JSONLexer.EOI;
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner1.stringVal();
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("");
      jSONReaderScanner1.scanIdent();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner2.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.stringVal();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("nlB[3w-jL0~ga>3z", 'r');
      char[] charArray0 = new char[1];
      charArray0[0] = 'r';
      jSONReaderScanner1.scanFieldDate(charArray0);
      jSONReaderScanner0.scanIdent();
      boolean boolean0 = jSONReaderScanner1.hasSpecial;
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner1.scanIdent();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.matchField(charArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      char[] charArray1 = jSONReaderScanner0.sub_chars(2929, 2929);
      jSONReaderScanner0.charArrayCompare(charArray1);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("om.alibabafastjson.parser.JSONReaderScaUner");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONReaderScanner0.config(feature0, true);
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.np = (-358);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.stringVal();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)26;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)26;
      byteArray0[0] = (byte)26;
      byteArray0[7] = (byte)26;
      byteArray0[8] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(inputStreamReader0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(inputStreamReader0);
      byteArrayInputStream0.reset();
      char[] charArray0 = new char[0];
      jSONReaderScanner2.matchField(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.intValue();
      jSONReaderScanner1.isEOF();
      jSONReaderScanner1.matchField(charArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-3);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "illegal state, extLength is zero");
      byteArrayInputStream0.reset();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(inputStreamReader0);
      inputStreamReader0.skip(0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(inputStreamReader0);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.close();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      int int0 = Calendar.HOUR;
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      jSONReaderScanner1.scanIdent();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner1.stringVal();
      jSONReaderScanner1.scanIdent();
      boolean boolean0 = jSONReaderScanner0.hasSpecial;
      jSONReaderScanner0.scanIdent();
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      jSONReaderScanner0.charAt(2470);
  }
}
