/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:59:43 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0, class0);
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(class1);
      Object object0 = new Object();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Object>(class0);
      Map<String, String> map0 = doubleKeyMap2.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(object0, map0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(class0);
      Map<Object, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>(map0, class0);
      Integer integer0 = doubleKeyMap1.get((Object) "WQ2N2lm!PX", "[qq^d2j(q");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Map<Object, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(map0);
      Integer integer0 = new Integer(1);
      Object object0 = new Object();
      String string0 = doubleKeyMap1.remove((Object) integer0, object0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Integer>((Map<Integer, Map<Object, Integer>>) null);
      Integer integer0 = new Integer(2134);
      doubleKeyMap0.put(integer0, (Object) null, integer0);
      Integer integer1 = new Integer((-1040));
      doubleKeyMap0.remove(integer1, (Object) integer1);
      Integer integer2 = new Integer((-1040));
      doubleKeyMap0.put(integer2, (Object) null, integer2);
      Integer integer3 = new Integer((-1040));
      Integer integer4 = new Integer(2134);
      doubleKeyMap0.remove(integer4, (Object) null);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Integer, Integer>, String, Object> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<Map<Integer, Integer>, String, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      Integer integer0 = new Integer(421);
      String string0 = ";h87=Tct(*]L?jQ|>Y";
      doubleKeyMap0.put(integer0, (Object) integer0, (Object) ";h87=Tct(*]L?jQ|>Y");
      doubleKeyMap0.put(integer0, (Object) ";h87=Tct(*]L?jQ|>Y", (Object) integer0);
      Integer integer1 = new Integer((-1));
      doubleKeyMap0.remove(integer1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      Integer integer0 = new Integer((-262));
      Object object0 = new Object();
      doubleKeyMap1.put((Object) integer0, object0, (Object) doubleKeyMap0);
      Map<String, Map<Object, Integer>> map0 = null;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<String, Object, Integer>((Map<String, Map<Object, Integer>>) null);
      Map<Object, Integer> map1 = doubleKeyMap2.newMap();
      doubleKeyMap1.remove((Object) integer0, (Object) map1);
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap3 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      Map<String, Map<Object, String>> map2 = doubleKeyMap3.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap4 = new DoubleKeyMap<String, Object, String>(map2, class0);
      doubleKeyMap4.get("3");
      DoubleKeyMap<Object, String, Integer> doubleKeyMap5 = new DoubleKeyMap<Object, String, Integer>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      Integer integer1 = new Integer(1);
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      Map<String, Map<Object, String>> map3 = doubleKeyMap3.newMap();
      DoubleKeyMap<String, Object, String> doubleKeyMap6 = new DoubleKeyMap<String, Object, String>(map3);
      // Undeclared exception!
      try { 
        doubleKeyMap4.newMap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(class0);
      Map<Object, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>(map0);
      doubleKeyMap0.newMap();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      doubleKeyMap1.put((Object) doubleKeyMap0, (Object) hashMap0, integer0);
      doubleKeyMap1.get((Object) doubleKeyMap0, (Object) "gz~2}zckGP>?o]FsS");
      HashMap<Integer, Map<Integer, String>> hashMap1 = new HashMap<Integer, Map<Integer, String>>(950, 950);
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap2 = new DoubleKeyMap<Integer, Integer, String>(hashMap1);
      Integer integer1 = new Integer(950);
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap3 = new HashMap<Integer, Integer>(950);
      DoubleKeyMap<Integer, String, Object> doubleKeyMap3 = new DoubleKeyMap<Integer, String, Object>();
      Map<String, Object> map1 = doubleKeyMap3.get(integer0);
      assertNull(map1);
  }
}
