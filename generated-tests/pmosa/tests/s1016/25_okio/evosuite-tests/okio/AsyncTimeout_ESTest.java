/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 08:41:36 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException("UpnP`OvYC<N=OKz=");
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      assertEquals("timeout", iOException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.sink((Sink) null);
      boolean boolean0 = asyncTimeout0.exit();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.newTimeoutException((IOException) null);
      asyncTimeout0.exit((IOException) null);
      asyncTimeout0.exit((IOException) null);
      asyncTimeout0.newTimeoutException((IOException) null);
      // Undeclared exception!
      try { 
        asyncTimeout0.waitUntilNotified((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Timeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearTimeout();
      asyncTimeout0.enter();
      asyncTimeout0.clearTimeout();
      asyncTimeout0.clearDeadline();
      asyncTimeout0.timedOut();
      asyncTimeout0.timedOut();
      MockThrowable mockThrowable0 = new MockThrowable("AsyncTimeout.source(");
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      asyncTimeout0.newTimeoutException(mockIOException0);
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.clearTimeout();
      asyncTimeout0.enter();
      asyncTimeout0.timedOut();
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      asyncTimeout0.source(buffer0);
      try { 
        buffer0.readUtf8LineStrict((long) 0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(0L);
      Timeout timeout0 = asyncTimeout0.clearTimeout();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      timeout0.timeout(2874L, timeUnit0);
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        asyncTimeout0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      MockIOException mockIOException0 = new MockIOException();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      AsyncTimeout.head.timeout(2874L, timeUnit0);
      AsyncTimeout asyncTimeout2 = AsyncTimeout.head;
      asyncTimeout2.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.head.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      asyncTimeout1.deadlineNanoTime((-1392409281320000L));
      AsyncTimeout asyncTimeout2 = new AsyncTimeout();
      asyncTimeout2.clearTimeout();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      AsyncTimeout asyncTimeout3 = AsyncTimeout.head;
      asyncTimeout3.timeout((byte)118, timeUnit0);
      AsyncTimeout asyncTimeout4 = AsyncTimeout.head;
      asyncTimeout4.enter();
      asyncTimeout1.enter();
      boolean boolean0 = AsyncTimeout.head.exit();
      assertEquals(118000000000L, AsyncTimeout.head.timeoutNanos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?");
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime((-279L));
      asyncTimeout0.enter();
      boolean boolean0 = asyncTimeout0.exit();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      asyncTimeout1.deadlineNanoTime((-1392409281320567L));
      AsyncTimeout asyncTimeout2 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException("okio.ByteString");
      MockIOException mockIOException1 = new MockIOException("okio.ByteString", mockIOException0);
      IOException iOException0 = asyncTimeout2.exit((IOException) mockIOException1);
      asyncTimeout2.newTimeoutException(iOException0);
      asyncTimeout0.clearTimeout();
      AsyncTimeout asyncTimeout3 = AsyncTimeout.head;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      AsyncTimeout.head.timeout(4278190080L, timeUnit0);
      AsyncTimeout asyncTimeout4 = AsyncTimeout.head;
      asyncTimeout1.enter();
      asyncTimeout4.enter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      asyncTimeout1.deadlineNanoTime((-1392409281319994L));
      AsyncTimeout asyncTimeout2 = new AsyncTimeout();
      asyncTimeout2.clearTimeout();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      AsyncTimeout asyncTimeout3 = AsyncTimeout.head;
      asyncTimeout3.timeout((byte)118, timeUnit0);
      AsyncTimeout asyncTimeout4 = AsyncTimeout.head;
      asyncTimeout4.enter();
      asyncTimeout1.enter();
      AsyncTimeout.awaitTimeout();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      MockIOException mockIOException0 = new MockIOException();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      AsyncTimeout.head.timeout(2707L, timeUnit0);
      AsyncTimeout asyncTimeout2 = AsyncTimeout.head;
      AsyncTimeout asyncTimeout3 = AsyncTimeout.head;
      asyncTimeout3.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout.head = asyncTimeout0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      FileSystemHandling.shouldAllThrowIOExceptions();
      AsyncTimeout.head.deadlineNanoTime((-1392409281320000L));
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      asyncTimeout1.clearTimeout();
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      AsyncTimeout asyncTimeout2 = AsyncTimeout.head;
      AsyncTimeout asyncTimeout3 = (AsyncTimeout)asyncTimeout2.timeout((byte)118, timeUnit0);
      AsyncTimeout asyncTimeout4 = AsyncTimeout.head;
      asyncTimeout4.enter();
      MockIOException mockIOException0 = new MockIOException();
      InterruptedIOException interruptedIOException0 = (InterruptedIOException)asyncTimeout3.exit((IOException) mockIOException0);
      assertEquals("java.io.InterruptedIOException: timeout", interruptedIOException0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!(");
      MockIOException mockIOException0 = new MockIOException("!(", (Throwable) null);
      asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.deadlineNanoTime((-64L));
      AsyncTimeout asyncTimeout1 = AsyncTimeout.head;
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout2 = new AsyncTimeout();
      asyncTimeout0.exit(false);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }
}
