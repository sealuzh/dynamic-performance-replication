/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:52:10 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DecimalFormatSymbols;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoChronology;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.UUID;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap");
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      TypeUtils.getRawClass(class1);
      TypeUtils.castToDate((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ArrayList<NoSuchMethodError> arrayList0 = new ArrayList<NoSuchMethodError>();
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertEquals((-4437036994051610544L), long0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getGenericParamType(type0);
      Type type1 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      sQLInvalidAuthorizationSpecException0.getStackTrace();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLInvalidAuthorizationSpecException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.getCollectionItemType(class1);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : char
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.getParserFeatures(class0);
      TypeUtils.clearClassMapping();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      TypeUtils.castToString(mockMinguoDate0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(stringIndexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.StringIndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "=", fieldArray0);
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(optionalCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : com.alibaba.fastjson.parser.deserializer.OptionalCodec@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      TypeUtils.loadClass("k\"d\")[\u0004/jfV*]tdC@e", classLoader1);
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.MiscCodec", (ClassLoader) aSMClassLoader0);
      ParserConfig parserConfig0 = new ParserConfig();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("com.alibaba.fastjson.serializer.MiscCodec");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.serializer.MiscCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<HttpCookie> class0 = HttpCookie.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(identityHashMap0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.addDeny("=");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader1, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"URLs\":[{\"Content\":{},\"DefaultPort\":-1,\"authority\":\"\",\"file\":\"/mnt/gaiagpfs/apps/resif/data/production/v0.3-20170713/default/software/lang/Java/1.8.0_121/jre/lib/ext/zipfs.jar\",\"host\":\"\",\"port\":-1,\"protocol\":\"file\"},{\"Content\":{},\"DefaultPort\":-1,\"authority\":\"\",\"file\":\"/mnt/gaiagpfs/apps/resif/data/production/v0.3-20170713/default/software/lang/Java/1.8.0_121/jre/lib/ext/dnsns.jar\",\"host\":\"\",\"port\":-1,\"protocol\":\"file\"},{\"Content\":{},\"DefaultPort\":-1,\"authority\":\"\",\"file\":\"/mnt/gaiagpfs/apps/resif/data/production/v0.3-20170713/default/software/lang/Java/1.8.0_121/jre/lib/ext/sunpkcs11.jar\",\"host\":\"\",\"port\":-1,\"protocol\":\"file\"},{\"Content\":{},\"DefaultPort\":-1,\"authority\":\"\",\"file\":\"/mnt/gaiagpfs/apps/resif/data/production/v0.3-20170713/default/software/lang/Java/1.8.0_121/jre/lib/ext/localedata.jar\",\"host\":\"\",\"port\":-1,\"protocol\":\"file\"},{\"Content\":{},\"DefaultPort\":-1,\"authority\":\"\",\"file\":\"/mnt/gaiagpfs/apps/resif/data/production/v0.3-20170713/default/software/lang/Java/1.8.0_121/jre/lib/ext/jfxrt.jar\",\"host\":\"\",\"port\":-1,\"protocol\":\"file\"},{\"Content\":{},\"DefaultPort\":-1,\"authority\":\"\",\"file\":\"/mnt/gaiagpfs/apps/resif/data/production/v0.3-20170713/default/software/lang/Java/1.8.0_121/jre/lib/ext/jaccess.jar\",\"host\":\"\",\"port\":-1,\"protocol\":\"file\"},{\"Content\":{},\"DefaultPort\":-1,\"authority\":\"\",\"file\":\"/mnt/gaiagpfs/apps/resif/data/production/v0.3-20170713/default/software/lang/Java/1.8.0_121/jre/lib/ext/nashorn.jar\",\"host\":\"\",\"port\":-1,\"protocol\":\"file\"},{\"Content\":{},\"DefaultPort\":-1,\"authority\":\"\",\"file\":\"/mnt/gaiagpfs/apps/resif/data/production/v0.3-20170713/default/software/lang/Java/1.8.0_121/jre/lib/ext/sunec.jar\",\"host\":\"\",\"port\":-1,\"protocol\":\"file\"},{\"Content\":{},\"DefaultPort\":-1,\"authority\":\"\",\"file\":\"/mnt/gaiagpfs/apps/resif/data/production/v0.3-20170713/default/software/lang/Java/1.8.0_121/jre/lib/ext/sunjce_provider.jar\",\"host\":\"\",\"port\":-1,\"protocol\":\"file\"},{\"Content\":{},\"DefaultPort\":-1,\"authority\":\"\",\"file\":\"/mnt/gaiagpfs/apps/resif/data/production/v0.3-20170713/default/software/lang/Java/1.8.0_121/jre/lib/ext/cldrdata.jar\",\"host\":\"\",\"port\":-1,\"protocol\":\"file\"}]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte) (-69);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Date> class0 = Date.class;
      TypeUtils.cast((Object) null, class0, (ParserConfig) null);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      TypeUtils.getClassFromMapping("lon");
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      Locale locale0 = Locale.TAIWAN;
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      Time time0 = Time.valueOf(localTime0);
      time0.toString();
      TypeUtils.loadClass("aL%");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(parserConfig0.propertyNamingStrategy);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      TypeUtils.castToLong("");
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.loadClass("");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.fnv1a_64_lower("");
      TypeUtils.castToSqlTime((Object) null);
      Locale locale0 = Locale.ENGLISH;
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      TypeUtils.castToSqlTime("");
      Locale locale1 = Locale.TAIWAN;
      TypeUtils.loadClass("fastjson.parser.autoTypeSupport");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGettersWithFieldBase((Class<?>) null, hashtable0, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OE<!^;5t6wKkg");
      Class<HttpCookie> class0 = HttpCookie.class;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.fnv1a_64_lower("1W$gl48U;d&!lf'");
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.putIfAbsent("1W$gl48U;d&!lf'", "1W$gl48U;d&!lf'");
      identityHashMap0.put("lPuqCu", "lPuqCu");
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64_lower("1W$gl48U;d&!lf'");
      assertEquals(9097273915471960572L, long0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("US", "/p_YX/+Aj@uc}");
      identityHashMap0.clone();
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      boolean boolean0 = TypeUtils.isKotlin(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.castToShort((Object) null);
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance();
      assertNotNull(breakIterator0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TreeMap<MockSimpleDateFormat, MockMinguoDate> treeMap0 = new TreeMap<MockSimpleDateFormat, MockMinguoDate>();
      ThreadGroup threadGroup0 = new ThreadGroup("hasPropertyFilters");
      Class<MockCalendar> class0 = MockCalendar.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      ClassLoader.getSystemClassLoader();
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      TypeUtils.loadClass("hasPropertyFilters", classLoader1, true);
      Random.setNextRandom((-1582));
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)14;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger1.negate();
      bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger3 = bigInteger0.multiply(bigInteger1);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.toPlainString();
      TypeUtils.castToLong(bigDecimal0);
      Class<LinkageError> class0 = LinkageError.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.getClassFromMapping("2002195470");
      bigInteger0.shiftRight((byte)119);
      MockThread mockThread0 = new MockThread();
      BigInteger bigInteger4 = bigInteger2.andNot(bigInteger1);
      bigInteger0.remainder(bigInteger3);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      bigInteger2.remainder(bigInteger4);
      classLoader0.setClassAssertionStatus("(F)Ljava/lang/Float;", true);
      TypeUtils.loadClass("Ljava.awt.Font", classLoader0, true);
      TypeUtils.castToTimestamp("2002195470");
      TypeUtils.castToByte(bigInteger2);
      TypeUtils.getRawClass(class0);
      TypeUtils.fnv1a_64_lower("(F)Ljava/lang/Float;");
      Class<?> class1 = TypeUtils.getClassFromMapping(".");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "9 s{I]Im{*OG3X&'nq";
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("9 s{I]Im{*OG3X&'nq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 9 s{I]Im{*OG3X&'nq
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TypeUtils.getClassFromMapping("lon");
      Integer.sum(51, 2403);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2403, 51, 2403, (-1507), 2454);
      SQLDataException sQLDataException0 = new SQLDataException("getDeclaringClass");
      VerifyError verifyError0 = new VerifyError("getgetCalendarType");
      Short short0 = new Short((short)62);
      TypeUtils.castToByte(short0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Short short0 = new Short((short)21);
      Float float0 = TypeUtils.castToFloat(short0);
      assertEquals(21.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils.loadClass("java.awt.Rectangle");
      Character character0 = Character.valueOf('2');
      Character.isSurrogate('2');
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(character0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : 2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      TypeUtils.getRawClass(class1);
      TypeUtils.castToDate((Object) null);
      TypeUtils.isGenericParamType(class1);
      Class<Insets> class2 = Insets.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class2, "BE:``ryj[iF ", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.isGenericParamType(class0);
      TypeUtils.getGenericParamType(class0);
      String string0 = null;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.getRawClass(class0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((String) null);
      SQLDataException sQLDataException0 = new SQLDataException();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      TypeUtils.getRawClass(class1);
      Class<MockMinguoDate> class2 = MockMinguoDate.class;
      TypeUtils.isProxy(class2);
      TypeUtils.loadClass("BaD?3vu<BPTbw*<>@w");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("BaD?3vu<BPTbw*<>@w");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"BaD?3vu<BPTbw*<>@w\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      jobAttributes0.setCopies(33);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(jobAttributes0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) javaObjectDeserializer0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Double> class0 = Double.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      TypeUtils.getRawClass(class1);
      TypeUtils.castToDate((Object) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<TimeUnit> class2 = TimeUnit.class;
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) treeMap0, false);
      assertEquals(0, treeMap0.size());
      
      long long0 = TypeUtils.fnv1a_64_lower("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertEquals((-4437036994051610544L), long0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<StackOverflowError> class0 = StackOverflowError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.StackOverflowError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<BitSet> class1 = BitSet.class;
      TypeUtils.computeGettersWithFieldBase(class1, treeMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.addDeny(":");
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      Date date0 = new Date(619L);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) treeMap0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "fastjson.parser.autoTypeAccept", fieldArray0);
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      ConcurrentHashMap<Rectangle, Method> concurrentHashMap0 = new ConcurrentHashMap<Rectangle, Method>();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<InterruptedException> class0 = InterruptedException.class;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("ms{-osV8*");
      WeakHashMap<NegativeArraySizeException, TypeNotPresentException> weakHashMap0 = new WeakHashMap<NegativeArraySizeException, TypeNotPresentException>();
      TypeUtils.loadClass("ms{-osV8*");
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("ms{-osV8*");
      WeakHashMap<NegativeArraySizeException, TypeNotPresentException> weakHashMap0 = new WeakHashMap<NegativeArraySizeException, TypeNotPresentException>();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("yyyy-MM-dd HH:mm:ss");
      SQLWarning sQLWarning0 = new SQLWarning("D-CT;JwB)FD", "isInitialized", negativeArraySizeException0);
      MockFile mockFile0 = new MockFile("parse number key error", "java.lang.AutoCloseable");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) sQLWarning0;
      objectArray0[1] = (Object) "^p7ULxr>jpqsSH!Cqb";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "isInitialized";
      mockPrintStream0.println((Object) "ms{-osV8*");
      objectArray0[4] = (Object) "^p7ULxr>jpqsSH!Cqb";
      Object object0 = new Object();
      BiFunction<Throwable, Object, TypeNotPresentException> biFunction0 = (BiFunction<Throwable, Object, TypeNotPresentException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any(java.lang.Throwable.class) , any());
      weakHashMap0.compute(negativeArraySizeException0, biFunction0);
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "parse number key error";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "^p7ULxr>jpqsSH!Cqb", objectArray0);
      negativeArraySizeException0.printStackTrace(printStream0);
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("ms{-osV8*", sQLWarning0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      typeNotPresentException0.printStackTrace((PrintWriter) mockPrintWriter0);
      negativeArraySizeException0.printStackTrace((PrintWriter) mockPrintWriter0);
      TypeNotPresentException typeNotPresentException1 = new TypeNotPresentException("ms{-osV8*", negativeArraySizeException0);
      BiFunction<Object, Object, TypeNotPresentException> biFunction1 = (BiFunction<Object, Object, TypeNotPresentException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.merge(negativeArraySizeException0, typeNotPresentException1, biFunction1);
      weakHashMap0.put(negativeArraySizeException0, typeNotPresentException0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) weakHashMap0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NegativeArraySizeException cannot be cast to java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject(2539);
      Class<SQLWarning> class0 = SQLWarning.class;
      ParserConfig parserConfig0 = new ParserConfig();
      jSONObject0.getFloatValue("is");
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      TypeUtils.toLocale("fastjson.parser.deny");
      TypeUtils.toLocale("@type");
      TypeUtils.clearClassMapping();
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class0, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.getClassFromMapping("lon");
      TypeUtils.unwrapOptional((Type) null);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      TypeUtils.castToDate((Object) null);
      TypeUtils.decapitalize("lon");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.isHibernateInitialized(typeUtils0);
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      Class<java.util.Date> class1 = java.util.Date.class;
      TypeUtils.unwrapOptional(class0);
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(identityHashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class2, weakHashMap0, true, propertyNamingStrategy0);
      Class<Boolean> class3 = Boolean.class;
      TypeUtils.computeGetters((Class<?>) class3, (Map<String, String>) identityHashMap0, true);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JobAttributes jobAttributes0 = new JobAttributes();
      jobAttributes0.setCopies(33);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("is");
      TypeUtils.isHibernateInitialized(illegalThreadStateException0);
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(numberDeserializer0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.ali\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TypeUtils.castToTimestamp((Object) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-124);
      Period period0 = Period.ZERO;
      Period.from(period0);
      InstantiationException instantiationException0 = new InstantiationException();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      TypeUtils.getRawClass(class1);
      TypeUtils.castToDate((Object) null);
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      ParserConfig parserConfig0 = new ParserConfig((ASMDeserializerFactory) null);
      TypeUtils.cast((Object) null, class2, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.isHibernateInitialized(typeUtils0);
      JSONObject jSONObject0 = new JSONObject();
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      Class<java.util.Date> class1 = java.util.Date.class;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      FieldInfo fieldInfo0 = new FieldInfo("@type", class2, class1, class2, (Field) null, (-374), 58, 21);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      Class<Annotation> class3 = Annotation.class;
      beanContext0.getAnnation(class3);
      Class<?> class4 = beanContext0.getBeanClass();
      Class<?> class5 = TypeUtils.getClass((Type) class4);
      TypeUtils.unwrapOptional(class0);
      TypeUtils.loadClass("@type");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) fieldInfo0, (Type) class5, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("~:KXw>pgB+%$hd", (Throwable) null);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) typeNotPresentException0, class0);
      TypeUtils.castToSqlDate((Object) null);
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<RenderingHints> class0 = RenderingHints.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      TypeUtils.getRawClass(class1);
      TypeUtils.castToDate((Object) null);
      Class<SQLNonTransientConnectionException> class2 = SQLNonTransientConnectionException.class;
      TypeUtils.computeGetters(class2, (Map<String, String>) null, false);
      TypeUtils.fnv1a_64_lower("Ljava.util.concurrent.ConcurrentSkipListMap");
      TypeUtils.isGenericParamType(class1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      String string0 = "*{n[\\It";
      TypeUtils.isGenericParamType(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<Collator> class2 = Collator.class;
      TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class2, (ParserConfig) null);
      MockUUID.fromString("*{n[It");
      ConcurrentHashMap<NoSuchMethodException, SqlDateDeserializer> concurrentHashMap0 = new ConcurrentHashMap<NoSuchMethodException, SqlDateDeserializer>(117, 117);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      TypeUtils.isTransient((Method) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Class<MockCalendar> class0 = MockCalendar.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      ClassLoader.getSystemClassLoader();
      MockThread mockThread0 = new MockThread();
      mockThread0.setContextClassLoader(classLoader1);
      mockThread0.getContextClassLoader();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : KebabCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TreeMap<MockSimpleDateFormat, MockMinguoDate> treeMap0 = new TreeMap<MockSimpleDateFormat, MockMinguoDate>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ArrayList<NoSuchMethodError> arrayList0 = new ArrayList<NoSuchMethodError>();
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      TypeUtils.getRawClass(class1);
      TypeUtils.castToDate((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ArrayList<NoSuchMethodError> arrayList0 = new ArrayList<NoSuchMethodError>();
      TypeUtils.isHibernateInitialized((Object) null);
      TypeUtils.fnv1a_64_lower("Ljava.util.concurrent.ConcurrentSkipListMap");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeUtils.isPath(class0);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class2);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class2).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Insets insets0 = new Insets(54, 46, 54, 54);
      Type type0 = TypeUtils.getCollectionItemType(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Class<SQLTransientException> class1 = SQLTransientException.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils typeUtils0 = new TypeUtils();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class0, (JSONType) null, (Map<String, String>) treeMap0, (Map<String, Field>) treeMap1, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.addDeny("Y+S:ZAfiNF?YwQ{");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) propertyNamingStrategy0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      Class<SQLTransientException> class0 = SQLTransientException.class;
      TypeUtils.getSerializeFeatures(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<MockSimpleDateFormat, MockMinguoDate> treeMap1 = new TreeMap<MockSimpleDateFormat, MockMinguoDate>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("R", "@");
      hashtable0.put("^9@B#B", "R");
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      TypeUtils.getCollectionItemClass(class0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn((Type) null).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : interface java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig();
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "=", fieldArray0);
      TypeUtils.getClassFromMapping("getEndInclusive");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("getEndInclusive");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("N");
      WeakHashMap<String, ClientInfoStatus> weakHashMap0 = new WeakHashMap<String, ClientInfoStatus>();
      InternalError internalError0 = new InternalError();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(weakHashMap0, internalError0);
      Map<String, ClientInfoStatus> map0 = sQLClientInfoException0.getFailedProperties();
      SQLClientInfoException sQLClientInfoException1 = new SQLClientInfoException(map0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("N", "h:k$E#c=", (-3601), sQLClientInfoException1);
      TypeUtils.loadClass("h:k$E#c=");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTimeoutException0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      String string0 = "lon";
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("com.alibaba.fastjson.serializer.MiscCodec");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.serializer.MiscCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      MockFile mockFile0 = new MockFile("fastjson.parser.autoTypeAccept", "fastjson.parser.deny");
      Period period0 = Period.ZERO;
      period0.normalized();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("java.lang.AutoCloseable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.lang.AutoCloseable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.getParserFeatures(class0);
      TypeUtils.clearClassMapping();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      TypeUtils.castToString(mockMinguoDate0);
      TypeUtils.loadClass("@sP?=Y");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Period period0 = Period.ZERO;
      Period period1 = Period.from(period0);
      IsoChronology isoChronology0 = period1.getChronology();
      isoChronology0.dateNow();
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(mapDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      Integer.sum(1732, 1732);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.toLocale("fastjson.parser.autoTypeSupport");
      TypeUtils.isNumber("fastjson.parser.autoTypeAccept");
      TypeUtils.isNumber("Ljava.lang.AutoCloseable");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.getGenericParamType(class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<SQLTransactionRollbackException> class2 = SQLTransactionRollbackException.class;
      Class<SQLTransientException> class3 = SQLTransientException.class;
      TypeUtils.getSerializeFeatures(class3);
      TypeUtils typeUtils0 = new TypeUtils();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, Field> treeMap1 = new TreeMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class2, (JSONType) null, (Map<String, String>) treeMap0, (Map<String, Field>) treeMap1, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.addDeny("Y+S:ZAfiNF?YwQ{");
      ParserConfig parserConfig1 = ParserConfig.global;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig1, class3);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("EOF");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) negativeArraySizeException0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.NegativeArraySizeException: EOF
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q{JJP7|.\"rk&;6'");
      TypeUtils.castToLong((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setDefaultAssertionStatus(false);
      TypeUtils.loadClass("Q{JJP7|.\"rk&;6'", classLoader1, true);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TypeUtils.loadClass("US");
      TypeUtils.fnv1a_64_lower("US");
      TypeUtils.getKoltinConstructorParameters((Class) null);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      Locale locale0 = Locale.PRC;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("Tf<`2Orrv$;");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Tf<`2Orrv$;", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@e1781
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      Class<Integer> class0 = Integer.TYPE;
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) numberDeserializer0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("R", "R");
      TreeMap<MockSimpleDateFormat, MockMinguoDate> treeMap0 = new TreeMap<MockSimpleDateFormat, MockMinguoDate>();
      MockDate mockDate0 = new MockDate();
      TypeUtils.castToSqlTime(mockDate0);
      Locale locale0 = Locale.TAIWAN;
      TypeUtils.castToString("R");
      TypeUtils.loadClass("gettoString");
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      Class<String> class0 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, hashtable1, false, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("US");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : US
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.unwrapOptional(class1);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(identityHashMap0);
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class2, weakHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.addDeny("getComponentType");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "getComponentType", (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      MockFile mockFile0 = new MockFile("9 s{i8]im{*og3x&'nq", "V?_{Z!#278aBEip");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.println((Object) propertyNamingStrategy0);
      Object object0 = new Object();
      WeakHashMap<NegativeArraySizeException, TypeNotPresentException> weakHashMap0 = new WeakHashMap<NegativeArraySizeException, TypeNotPresentException>();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      BiFunction<Object, TypeNotPresentException, TypeNotPresentException> biFunction0 = (BiFunction<Object, TypeNotPresentException, TypeNotPresentException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any(java.lang.TypeNotPresentException.class));
      weakHashMap0.compute(negativeArraySizeException0, biFunction0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) serializeBeanInfo0;
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, "V?_{Z!#278aBEip", objectArray0);
      negativeArraySizeException0.printStackTrace(printStream0);
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("ha", negativeArraySizeException0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print("Ljava.awt.Rectangle");
      typeNotPresentException0.printStackTrace((PrintWriter) mockPrintWriter0);
      negativeArraySizeException0.printStackTrace((PrintWriter) mockPrintWriter0);
      TypeNotPresentException typeNotPresentException1 = new TypeNotPresentException("ha", typeNotPresentException0);
      WeakHashMap<NegativeArraySizeException, TypeNotPresentException> weakHashMap1 = new WeakHashMap<NegativeArraySizeException, TypeNotPresentException>();
      NegativeArraySizeException negativeArraySizeException1 = new NegativeArraySizeException("V?_{Z!#278aBEip");
      BiFunction<Object, TypeNotPresentException, TypeNotPresentException> biFunction1 = (BiFunction<Object, TypeNotPresentException, TypeNotPresentException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap1.merge(negativeArraySizeException1, typeNotPresentException0, biFunction1);
      weakHashMap0.put(negativeArraySizeException1, (TypeNotPresentException) null);
      Class<String> class1 = String.class;
      TypeUtils.castToJavaBean((Object) "V?_{Z!#278aBEip", class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      Class<Boolean> class1 = Boolean.class;
      parserConfig0.checkAutoType("FULL_DECOMPOSITION", class1, (-406));
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) null, propertyNamingStrategy0);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      classLoader0.setPackageAssertionStatus(" -> ", false);
      classLoader1.setDefaultAssertionStatus(false);
      classLoader1.getParent();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy1);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<SimpleDateFormat> class2 = SimpleDateFormat.class;
      TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) identityHashMap0, true);
      TypeUtils.fnv1a_64_lower("FULL_DECOMPOSITION");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TreeMap<MockSimpleDateFormat, MockMinguoDate> treeMap0 = new TreeMap<MockSimpleDateFormat, MockMinguoDate>();
      Class<Integer> class0 = Integer.TYPE;
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      Locale locale0 = Locale.ITALIAN;
      BreakIterator.getCharacterInstance(locale0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) typeArray0[0], (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TreeMap<MockSimpleDateFormat, MockMinguoDate> treeMap0 = new TreeMap<MockSimpleDateFormat, MockMinguoDate>();
      ThreadGroup threadGroup0 = new ThreadGroup("Y-");
      TypeUtils.loadClass("Y-");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Integer> class0 = Integer.TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      Locale locale0 = Locale.ITALIAN;
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance(locale0);
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) breakIterator0, (ParameterizedType) parameterizedTypeImpl0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.isHibernateInitialized(typeUtils0);
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      Class<java.util.Date> class1 = java.util.Date.class;
      TypeUtils.unwrapOptional(class0);
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.castToBigDecimal((Object) null);
      TypeUtils.isGenericParamType(class2);
      TypeUtils.toLocale("parseShort error, field : ");
      TypeUtils.isNumber("Ini-\"DTH6TJ{$A");
      TypeUtils.isNumber("bd-]DLk=");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.fluentPut("7~", (Object) null);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) jSONObject2, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<Integer> class0 = Integer.class;
      TypeUtils.isProxy(class0);
      TypeUtils.isHibernateInitialized(class0);
      Class<?> class1 = TypeUtils.getRawClass(class0);
      TypeUtils.castToChar((Object) null);
      TypeUtils.fnv1a_64("com.alibaba.fastjson.parser.Feature");
      Class<?> class2 = TypeUtils.getRawClass(class0);
      TypeUtils.isPath(class2);
      Class<ClassLoader> class3 = ClassLoader.class;
      Class<TimeZone> class4 = TimeZone.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class1, "4T", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("?lBm>&=IF$eiu", class3, class4, class1, (Field) null, (byte) (-18), 290, 16);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isTransient((Method) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(byteArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : [B@7d7b21c9
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      MockFile mockFile0 = new MockFile("fastjson.parser.autoTypeAccept", "fastjson.parser.deny");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("java.lang.AutoCloseable");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("yyyy-MM-dd HH:mm:ss");
      SQLWarning sQLWarning0 = new SQLWarning("@^nJr }s)4X~S>Jap", (String) null, negativeArraySizeException0);
      MockFile mockFile0 = new MockFile("java.lang.AutoCloseable", "detailMessage");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.values();
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class1, treeMap0, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      parserConfig0.addDeny("java.lang.AutoCloseable");
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      LinkedHashMap<SQLTimeoutException, JobAttributes> linkedHashMap0 = new LinkedHashMap<SQLTimeoutException, JobAttributes>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) linkedHashMap0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.text.SimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      TypeUtils.castToLong("");
      TypeUtils.castToSqlTime((Object) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      TypeUtils.getSerializeFeatures(class0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.addDeny("'&nY");
      TypeUtils.cast((Object) "", type0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      TypeUtils.castToLong("");
      TypeUtils.castToSqlTime((Object) null);
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("java.lang.AutoCloseable", "~Z ]}{.K");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      mockPrintStream0.println((Object) locale0);
      Object object0 = new Object();
      TypeUtils.castToLong((Object) null);
      TypeUtils.castToByte("");
      TypeUtils.decapitalize("~Z ]}{.K");
      Class<SQLException> class1 = SQLException.class;
      TypeUtils.castToJavaBean((Object) null, class1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      Type[] typeArray0 = new Type[1];
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      System.setCurrentTimeMillis(3099L);
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, type0, type0);
      ClassLoader.getSystemClassLoader();
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      TypeUtils.isProxy(class0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("[D");
      Class<StackOverflowError> class0 = StackOverflowError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Locale locale0 = Locale.TAIWAN;
      Object object0 = new Object();
      ThreadGroup threadGroup0 = new ThreadGroup("isclone");
      TypeUtils.loadClass("getBeginIndex");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>((short)1207, (short)1207);
      TypeUtils typeUtils0 = new TypeUtils();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      Class<AtomicLong> class1 = AtomicLong.class;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>(505, 675929204338791194L);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGetters((Class<?>) class1, (JSONType) null, map0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig1 = ParserConfig.global;
      parserConfig1.addDeny("Lorg.springframework.util.LinkedMultiValueMap");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parserConfig0, (Type) class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.StackOverflowError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Double> class0 = Double.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, false);
      Time time0 = new Time(5751393439502795295L);
      TypeUtils.loadClass((String) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Period period0 = Period.ZERO;
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      period0.equals(outOfMemoryError0);
      IsoChronology isoChronology0 = period0.getChronology();
      isoChronology0.dateNow();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(isoChronology0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : ISO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashMap<BigInteger, SQLTransientConnectionException> hashMap0 = new HashMap<BigInteger, SQLTransientConnectionException>();
      Period period0 = Period.ZERO;
      period0.normalized();
      MockDate mockDate0 = new MockDate((-2316), (byte) (-124), (byte)93, (byte)93, (-2316), 11);
      TypeUtils.castToSqlDate(mockDate0);
      TypeUtils.clearClassMapping();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(period0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : P0D
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "";
      TypeUtils.fnv1a_64("");
      TypeUtils.castToLong("");
      TypeUtils.castToSqlTime((Object) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.getParent();
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[)LS~zNhG<c7mP\u0005)Ef", classLoader1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "=", fieldArray0);
      TypeUtils.getClassFromMapping("getEndInclusive");
      Integer.sum(10, (-1998127006));
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      weakHashMap1.put("org.springframework.cglib.proxy.Factory", "=");
      Properties properties0 = new Properties();
      TypeUtils.castToBigDecimal(properties0);
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.isNumber("j");
      Date date0 = new Date(10);
      ParserConfig parserConfig1 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "j", (Type) null, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<StackTraceElementDeserializer> class0 = StackTraceElementDeserializer.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.replace("iIt1R?.zgjmU5=", "iIt1R?.zgjmU5=", ";_qV 0)^lz-vsO");
      weakHashMap0.put("iIt1R?.zgjmU5=", ";_qV 0)^lz-vsO");
      weakHashMap0.put(";_qV 0)^lz-vsO", "(Z)V");
      Type type0 = TypeUtils.unwrapOptional(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus(";_qV 0)^lz-vsO", false);
      TypeUtils.loadClass((String) null, classLoader0, false);
      TypeUtils.unwrapOptional(type0);
      JSONObject jSONObject0 = new JSONObject(1978, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TreeMap<MockSimpleDateFormat, MockMinguoDate> treeMap0 = new TreeMap<MockSimpleDateFormat, MockMinguoDate>();
      Class<Integer> class0 = Integer.TYPE;
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      Locale locale0 = Locale.ITALIAN;
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance(locale0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      TypeUtils.cast((Object) breakIterator0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>(117, 205.78F);
      JSONObject jSONObject0 = new JSONObject(linkedHashMap0);
      WeakHashMap<RenderingHints.Key, Dimension> weakHashMap1 = new WeakHashMap<RenderingHints.Key, Dimension>();
      RenderingHints renderingHints0 = new RenderingHints(weakHashMap1);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(renderingHints0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Double> class0 = Double.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      Type type1 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.replace("", "l]G=~R2T(d:s_YLX/", "J.366SX&r=");
      TypeUtils.getClassFromMapping("J.366SX&r=");
      VerifyError verifyError0 = new VerifyError("J.366SX&r=");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(type1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class [[D
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TreeMap<MockSimpleDateFormat, MockMinguoDate> treeMap0 = new TreeMap<MockSimpleDateFormat, MockMinguoDate>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, (PropertyNamingStrategy) null, false);
      ClassLoader.getSystemClassLoader();
      MockThread mockThread0 = new MockThread();
      MockThread.interrupted();
      mockThread0.setContextClassLoader(classLoader0);
      mockThread0.getContextClassLoader();
      String string0 = "F)m0?)\\uH#Sf ,.hK{r";
      TypeUtils.decapitalize(string0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Double> class0 = Double.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(identityHashMap0);
      weakHashMap0.values();
      Class<SQLClientInfoException> class1 = SQLClientInfoException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class1, weakHashMap0, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      parserConfig0.addDeny("getComponentType");
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stringIndexOutOfBoundsException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.StringIndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("yyyy-MM-dd HH:mm:ss");
      String string0 = "isInitialized";
      MockFile mockFile0 = new MockFile("D-CT;JwB)FD", "java.lang.AutoCloseable");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "^p7ULxr>jpqsSH!Cqb";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "isInitialized";
      objectArray0[4] = (Object) "^p7ULxr>jpqsSH!Cqb";
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("D-CT;JwB)FD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : D-CT;JwB)FD
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TypeUtils.isNumber("applyName");
      TypeUtils.getClassFromMapping("C;g2z:");
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.isPath(class0);
      Class<Double> class1 = Double.class;
      Class<PageAttributes> class2 = PageAttributes.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("applyName", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("applyName", class1, class2, class2, (Field) null, 2321, 2321, 2321);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getClassFromMapping("getEndInclusive");
      Integer.sum(10, (-1998127006));
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      classLoader0.setClassAssertionStatus((String) null, false);
      Properties properties0 = new Properties();
      TypeUtils.castToBigDecimal(properties0);
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.isNumber("fastjson.parser.autoTypeSupport");
      Date date0 = new Date(10);
      ParserConfig parserConfig1 = new ParserConfig();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeUtils.isPath(class0);
      TypeUtils.fnv1a_64_lower("date");
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      Class<Annotation> class2 = Annotation.class;
      Class<Integer> class3 = Integer.TYPE;
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class1;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, typeArray0[0]);
      Locale locale0 = Locale.ITALIAN;
      BreakIterator.getCharacterInstance(locale0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalAccessException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.StackTraceElement
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      TypeUtils.castToLong("");
      TypeUtils.castToSqlTime((Object) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getGenericParamType(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<SQLTransientException> class1 = SQLTransientException.class;
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      TypeUtils.getSerializeFeatures(class2);
      TypeUtils typeUtils0 = new TypeUtils();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class1, (JSONType) null, map0, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = ParserConfig.global;
      Object object0 = new Object();
      MockDate mockDate0 = new MockDate();
      Class<Double> class3 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockDate0, (Type) class3, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : Fri Feb 14 20:21:21 GMT 2014
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      WeakHashMap<NegativeArraySizeException, TypeNotPresentException> weakHashMap0 = new WeakHashMap<NegativeArraySizeException, TypeNotPresentException>();
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      TypeUtils.getSerializeFeatures(class1);
      TypeUtils typeUtils0 = new TypeUtils();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Integer> class2 = Integer.class;
      TypeUtils.computeGettersWithFieldBase(class2, (Map<String, String>) null, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      parserConfig0.addDeny("ms{-osV8*");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(class1);
      Class<Short> class2 = Short.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class2, linkedHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.addDeny((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl, create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("ms{-osV8*");
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("yyyy-MM-dd HH:mm:ss");
      SQLWarning sQLWarning0 = new SQLWarning("ms{-osV8*", "isInitialized", negativeArraySizeException0);
      MockFile mockFile0 = new MockFile("parse number key error", "java.lang.AutoCloseable");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) sQLWarning0;
      objectArray0[1] = (Object) "^p7ULxr>jpqsSH!Cqb";
      objectArray0[2] = (Object) mockPrintStream0;
      VerifyError verifyError0 = new VerifyError((String) null);
      TypeUtils.castToByte((Object) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TypeUtils.loadClass("error parse true");
      TypeUtils.unwrapOptional((Type) null);
      Class<Date> class0 = Date.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      parserConfig0.putDeserializer(class0, mapDeserializer0);
      ParserConfig.global = parserConfig0;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "error parse true", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.Date
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(identityHashMap0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      parserConfig0.addDeny("Ljava.awt.Color");
      Class<MockDateFormat> class1 = MockDateFormat.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) throwableDeserializer0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class java.lang.Class
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "=", fieldArray0);
      TypeUtils.getClassFromMapping("getEndInclusive");
      VerifyError verifyError0 = new VerifyError("Ce");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("getEndInclusive");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getEndInclusive\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer.sum((-1998127006), (-1998127006));
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      String string0 = "org.springframework.cglib.proxy.Factory";
      weakHashMap0.put("org.springframework.cglib.proxy.Factory", "org.springframework.cglib.proxy.Factory");
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(weakHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ThreadGroup threadGroup0 = new ThreadGroup("hasPropertyFilters");
      TypeUtils.loadClass("checkListResolve");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Short short0 = new Short((short)1150);
      Class<Integer> class0 = Integer.TYPE;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.replace("fastjson.parser.deny", "writeNoneASM", "ZK\"D[C%}s");
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class1, identityHashMap0, false, propertyNamingStrategy0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ArrayList<NoSuchMethodError> arrayList0 = new ArrayList<NoSuchMethodError>();
      TypeUtils.isHibernateInitialized(typeArray0[1]);
      TypeUtils.fnv1a_64_lower("fastjson.parser.autoTypeAccept");
      TypeUtils.isHibernateInitialized(class1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TypeUtils.loadClass("US");
      TypeUtils.fnv1a_64_lower("US");
      TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.getKoltinConstructorParameters((Class) null);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = Locale.PRC;
      ParserConfig.getGlobalInstance();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      Constructor<MockThaiBuddhistDate>[] constructorArray0 = (Constructor<MockThaiBuddhistDate>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      LinkedHashMap<String, Object> linkedHashMap0 = null;
      try {
        linkedHashMap0 = new LinkedHashMap<String, Object>(122, (-887));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -887.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Long> class0 = Long.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null, class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      MockFile mockFile0 = new MockFile(";", ";");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : Mock for GenericArrayType, hashCode: 1028571845
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Double double0 = new Double((-1086.39631));
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) double0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.NumberDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.unwrapOptional(class1);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(identityHashMap0);
      Class<SQLIntegrityConstraintViolationException> class2 = SQLIntegrityConstraintViolationException.class;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = type0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = type0;
      typeArray0[4] = (Type) parameterizedTypeImpl0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class2;
      typeArray0[7] = (Type) class0;
      TypeUtils.getClass(typeArray0[4]);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(typeArray0[5]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.text.SimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeUtils.isPath(class0);
      TypeUtils.fnv1a_64_lower("date");
      TypeUtils.getClass((Type) class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Class<Integer> class2 = Integer.TYPE;
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) genericArrayType0;
      typeArray0[0] = (Type) class1;
      typeArray0[2] = (Type) genericArrayType0;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class1;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, 9, (-2329));
      SQLDataException sQLDataException0 = new SQLDataException("date", "date", 9);
      TypeUtils.castToDouble((Object) null);
      try { 
        Integer.valueOf("kotlin.ranges.LongRange");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"kotlin.ranges.LongRange\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Integer> class0 = Integer.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null, class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(type0).when(genericArrayType1).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType1);
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      boolean boolean0 = false;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0);
      Class<NumberDeserializer> class2 = NumberDeserializer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class2, (Type) class0, propertyNamingStrategy0);
      aSMDeserializerFactory0.createJavaBeanDeserializer((ParserConfig) null, javaBeanInfo0);
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) ";", class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.NumberDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("ms{-osV8*");
      WeakHashMap<NegativeArraySizeException, TypeNotPresentException> weakHashMap0 = new WeakHashMap<NegativeArraySizeException, TypeNotPresentException>();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("ms{-osV8*");
      SQLWarning sQLWarning0 = new SQLWarning("D-CT;JwB)FD", "isInitialized", negativeArraySizeException0);
      MockFile mockFile0 = new MockFile("parse number key error", "java.lang.AutoCloseable");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      weakHashMap1.values();
      TypeUtils.loadClass("ms{-osV8*");
      Long long0 = new Long(1951L);
      TypeUtils.castToDate(long0);
      ArrayList<NoSuchMethodError> arrayList0 = new ArrayList<NoSuchMethodError>();
      TypeUtils.isHibernateInitialized("java.lang.AutoCloseable");
      TypeUtils.isKotlin((Class) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>(identityHashMap0);
      WeakHashMap<String, String> weakHashMap1 = new WeakHashMap<String, String>();
      weakHashMap0.values();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "5[N]";
      Class<BigDecimal> class0 = BigDecimal.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap1);
      int int0 = (-4941);
      AtomicInteger atomicInteger0 = new AtomicInteger((-4941));
      TypeUtils.castToDate(atomicInteger0);
      TreeSet<MockHijrahDate> treeSet0 = new TreeSet<MockHijrahDate>();
      VerifyError verifyError0 = new VerifyError("5[N]");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(atomicInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : -4941
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      TypeUtils.castToLong("");
      TypeUtils.castToSqlTime((Object) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<SQLTransientException> class1 = SQLTransientException.class;
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      TypeUtils.getSerializeFeatures(class2);
      TypeUtils typeUtils0 = new TypeUtils();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class1, (JSONType) null, map0, (Map<String, Field>) treeMap0, true, propertyNamingStrategy0);
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.addDeny("'&nY");
      TypeUtils.cast((Object) "", type0, parserConfig0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TypeUtils.castToBoolean((Object) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("F", (ClassLoader) aSMClassLoader0);
      TypeUtils.unwrapOptional((Type) null);
      WeakHashMap<SQLInvalidAuthorizationSpecException, Dimension> weakHashMap0 = new WeakHashMap<SQLInvalidAuthorizationSpecException, Dimension>();
      TypeUtils.castToString(weakHashMap0);
      TypeUtils.castToInt((Object) null);
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) treeMap0, propertyNamingStrategy0);
  }
}
