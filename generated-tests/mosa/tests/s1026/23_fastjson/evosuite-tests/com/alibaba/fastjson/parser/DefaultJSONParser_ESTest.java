/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 17:22:50 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.PageAttributes;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Time;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unterminated json string, ");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.throwException(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(">XsQ:bYhGuA]Z", parserConfig0, 0);
      defaultJSONParser0.setDateFormat("u516k]");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = ".k>3X7\\[DH";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".k>3X7[DH");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : .k>3X7[DH
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?0(UZz=)%/q0I>eLIY");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "?0(UZz=)%/q0I>eLIY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ?0(UZz=)%/q0I>eLIY
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = ".k>3X7[D|";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".k>3X7[D|");
      Class<MessageFormat> class0 = MessageFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.text.MessageFormat
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".k>7[D|H");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but ., pos 1, json : .k>7[D|H
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unclosed jsonArray");
      defaultJSONParser0.parseKey();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("_$kpbSg", parserConfig0);
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("9(");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9(");
      // Undeclared exception!
      try { 
        JSON.parseObject("9(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".k>3X7[D*");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) ".k>3X7[D*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ., pos 0, fieldName .k>3X7[D*
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("c|2}o_ylI", parserConfig0);
      defaultJSONParser0.getContext();
      IdentityHashMap<JavaBeanDeserializer, BigInteger> identityHashMap0 = new IdentityHashMap<JavaBeanDeserializer, BigInteger>();
      defaultJSONParser0.checkMapResolve(identityHashMap0, "c|2}o_ylI");
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", fastjson-version ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual -
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@Yp)o#f+i'xh");
      DateFormat dateFormat0 = DateFormat.getDateInstance(1);
      defaultJSONParser0.setDateFomrat(dateFormat0);
      defaultJSONParser0.getResolveTaskList();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}>`M9jJjj,eB+ XD");
      Class<Boolean> class0 = Boolean.TYPE;
      defaultJSONParser0.parseObject((Type) class0);
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : }>`M9jJjj,eB+ XD
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Object object0 = defaultJSONParser0.parse((Object) "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 59);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) dateFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = "!;/P8^\"";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("!;/P8^\"");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : !;/P8^\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.resolveReference("");
      defaultJSONParser0.getExtraProcessors();
      Feature feature0 = Feature.AllowISO8601DateFormat;
      defaultJSONParser0.isEnabled(feature0);
      defaultJSONParser0.close();
      String string0 = "AHpT+";
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated", parserConfig0);
      List<ExtraProcessor> list0 = new Vector<ExtraProcessor>();
      Feature feature0 = Feature.AllowArbitraryCommas;
      defaultJSONParser0.setConfig(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = ':';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 2, 2);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(mockHijrahDate0, jSONScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(mockHijrahDate0, "O-)qoZO=A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 0, json : q:
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";Z|,s*");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ;, pos 0, fieldName org.evosuite.runtime.mock.java.text.MockDateFormat@26249103
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 4678);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(4678);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$");
      defaultJSONParser0.getDateFomartPattern();
      defaultJSONParser0.setResolveStatus(1);
      assertEquals(1, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("JHZNT]W:&i!QW");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      defaultJSONParser0.config = parserConfig0;
      Feature feature0 = Feature.InternFieldNames;
      boolean boolean1 = defaultJSONParser0.isEnabled(feature0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("uteinatd", parserConfig0);
      defaultJSONParser0.setDateFormat("fastjson.parser.autoTypeAccept");
      defaultJSONParser0.getSymbolTable();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser1.fieldTypeResolver;
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser1.getResolveTaskList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9{?");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".k>7[D|H");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ., pos 1, json : .k>7[D|H
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.getExtraProcessors();
      Feature feature0 = Feature.AllowArbitraryCommas;
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = ".k>7\\[D|H";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".k>7[D|H");
      Dimension dimension0 = new Dimension(3096, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) dimension0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Ph$ 7o^L*^B>~Hb`");
      String string0 = defaultJSONParser0.getInput();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".k>7[D|H");
      Object object0 = defaultJSONParser0.resolveReference(".k>7[D|H");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, (-1748));
      defaultJSONParser0.popContext();
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      TreeSet<ParameterizedTypeImpl> treeSet0 = new TreeSet<ParameterizedTypeImpl>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-{n$M<T1Z;l0");
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(14, jSONLexer0.token());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.serializer.PrimitiveArraySerializer", parserConfig0);
      Stack<BufferCapabilities> stack0 = new Stack<BufferCapabilities>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      TreeSet<ParameterizedTypeImpl> treeSet0 = new TreeSet<ParameterizedTypeImpl>();
      defaultJSONParser0.getContext();
      ParseContext parseContext0 = new ParseContext((ParseContext) null, defaultJSONParser0, "");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "$");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.handleResovleTask("");
      defaultJSONParser0.getResolveTaskList();
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.getFieldTypeResolver();
      assertNull(fieldTypeResolver0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9{?", parserConfig0, 0);
      Object object0 = new Object();
      defaultJSONParser0.parse(object0);
      defaultJSONParser0.setContext(object0, (Object) "9{?");
      defaultJSONParser0.getExtraTypeProviders();
      defaultJSONParser0.close();
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9{?", parserConfig0, 0);
      Object object0 = new Object();
      defaultJSONParser0.parse(object0);
      Vector<Collator> vector0 = new Vector<Collator>();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated json string, ", parserConfig0);
      defaultJSONParser0.resolveReference("fastjson.parser.deny");
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("unterminated json string, ", parserConfig0);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      defaultJSONParser0.config(feature0, false);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".k>7[D|H", parserConfig0);
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) parserConfig0);
      Locale locale0 = Locale.FRENCH;
      defaultJSONParser0.popContext();
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("9{?");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9{?");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9{?");
      defaultJSONParser0.parse((Object) "9{?");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : ?pos 2, json : 9{?
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9{?", parserConfig0, 0);
      Object object0 = new Object();
      defaultJSONParser0.parse(object0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "unterminated");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 12, json : unterminated
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9{?", parserConfig0, 0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".k>7[D|H", parserConfig0);
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) parserConfig0);
      Locale locale0 = Locale.FRENCH;
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      Feature feature0 = Feature.AutoCloseSource;
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.getFieldTypeResolver();
      assertNull(fieldTypeResolver0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      ParserConfig parserConfig1 = new ParserConfig(true);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory1.classLoader;
      aSMDeserializerFactory0.classLoader.getParent();
      ParserConfig parserConfig2 = new ParserConfig((ClassLoader) null);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("BvtFg>I<b", parserConfig1, 1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("?Zpjy6{", parserConfig0, (-1391));
      defaultJSONParser0.getDateFomartPattern();
      Properties properties0 = new Properties();
      defaultJSONParser0.setContext((Object) properties0, (Object) parserConfig0);
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("9{?");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9{?");
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer);
      Double double0 = new Double(2);
      defaultJSONParser0.getContext();
      Object object0 = defaultJSONParser0.getObject(".k>7[D|H");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pM~|");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9{?", parserConfig0, 0);
      JSONScanner jSONScanner0 = new JSONScanner("", 0);
      defaultJSONParser0.getExtraProcessors();
      Feature feature0 = Feature.UseObjectArray;
      defaultJSONParser0.isEnabled(feature0);
      defaultJSONParser0.getDateFormat();
      LinkedHashSet<MessageFormat> linkedHashSet0 = new LinkedHashSet<MessageFormat>();
      defaultJSONParser0.parse((Object) jSONScanner0);
      defaultJSONParser0.getDateFormat();
      System.setCurrentTimeMillis(4098L);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated json string, ", parserConfig0);
      defaultJSONParser0.setContext((Object) "unterminated json string, ", (Object) parserConfig0);
      Locale locale0 = Locale.GERMANY;
      defaultJSONParser0.getObject("fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 12, json : unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", fastjson-version ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , fastjson-version 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("9{?");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9{?");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9{?");
      defaultJSONParser0.parse((Object) "9{?");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) choiceFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : ?pos 2, json : 9{?
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      String string0 = ", ";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ", parserConfig0, 4678);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // setter not found, class org.evosuite.runtime.mock.java.text.MockDateFormat, property null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("zzG:iz#", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      Object object0 = defaultJSONParser0.parse((Object) parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0[30wrKaG`'{", parserConfig0, (-528));
      Object object0 = new Object();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(object0, defaultJSONParser0.lexer, parserConfig0);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 2, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[>B66}%7!,pZ");
      HashSet<JavaBeanDeserializer> hashSet0 = new HashSet<JavaBeanDeserializer>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) hashSet0, (Object) "[>B66}%7!,pZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [>B66}%7!,pZ
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-{n$}<T_Z;l0");
      defaultJSONParser0.getInput();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "java.lang.String@0000000003");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0[30wrKaG`'{", parserConfig0, 0);
      defaultJSONParser0.parse((Object) parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("0[30wrKaG`'{", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) "0[30wrKaG`'{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 5, json : 0[30wrKaG`'{
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ChoiceFormat choiceFormat0 = new ChoiceFormat("9{?");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9{?");
      ArrayList<RuleBasedCollator> arrayList0 = new ArrayList<RuleBasedCollator>();
      defaultJSONParser0.parse((Object) "9{?");
      defaultJSONParser0.checkListResolve(arrayList0);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)109;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)15;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0[30wrKaG`'{", parserConfig0, 13);
      PageAttributes.ColorType pageAttributes_ColorType0 = PageAttributes.ColorType.MONOCHROME;
      PageAttributes.MediaType pageAttributes_MediaType0 = PageAttributes.MediaType.B7;
      PageAttributes.PrintQualityType pageAttributes_PrintQualityType0 = PageAttributes.PrintQualityType.HIGH;
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 13;
      intArray0[5] = 0;
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      ParseContext parseContext0 = defaultJSONParser0.context;
      List<ExtraTypeProvider> list1 = defaultJSONParser0.getExtraTypeProviders();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";BZ|,s*");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) ";BZ|,s*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ;BZ|,s*
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[-{n$M<T1Z;l0");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[-{n$M<T1Z;l0");
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte)109;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)13;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.setAutoTypeSupport(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0[30wrKaG`'{", parserConfig0, (-528));
      Object object0 = new Object();
      Object object1 = new Object();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0, defaultJSONParser0.lexer, parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      ParseContext parseContext0 = defaultJSONParser0.context;
      Float float0 = new Float((float) 0);
      defaultJSONParser0.setContext((ParseContext) null, (Object) propertyProcessable0, (Object) float0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.deny");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("MC@pl#2'X1O");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = ':';
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 2, parserConfig0, 2);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : \u0000:
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("}>`M9jJjj,eB+ XD");
      Locale locale0 = Locale.KOREAN;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : }>`M9jJjj,eB+ XD
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$Jh&MBvbezG", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".k>3X7[D|H", parserConfig0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, ".k>3X7[D|H");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.handleResovleTask(mapDeserializer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$Jh&MBvbezG", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, (Object) "$Jh&MBvbezG");
      Locale locale0 = Locale.FRENCH;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "NaN");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.handleResovleTask("$Jh&MBvbezG");
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0[30wrKaG`'{", parserConfig0, 0);
      defaultJSONParser0.parse((Object) parserConfig0);
      Short short0 = new Short((short) (-4230));
      Short short1 = new Short((short) (-4230));
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[7];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error :error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0[30wrKaG`'{", parserConfig0, 0);
      defaultJSONParser0.parse((Object) parserConfig0);
      Short short0 = new Short((short) (-4230));
      Short short1 = new Short((short)7);
      Function<BufferCapabilities, Short> function0 = (Function<BufferCapabilities, Short>) mock(Function.class, new ViolatedAssumptionAnswer());
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      Comparator.nullsLast((Comparator<? super Object>) comparator0);
      Type[] typeArray0 = new Type[1];
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      FieldInfo fieldInfo0 = new FieldInfo("java.util.concurrent.ConcurrentSkipListSet", class0, class1, class1, (Field) null, 0, 0, (-44));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class2 = beanContext0.getFieldClass();
      typeArray0[0] = (Type) class2;
      // Undeclared exception!
      defaultJSONParser0.parseArray(typeArray0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      Locale locale0 = Locale.GERMANY;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("}|P)TVSrz:e5!R[", 1797);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)42;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      defaultJSONParser0.setContext((Object) jSONReaderScanner0, (Object) dateFormatSymbols0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("}|P)TVSrz:e5!R[", parserConfig0);
      defaultJSONParser1.getDateFormat();
      JSONObject jSONObject0 = defaultJSONParser1.parseObject();
      assertEquals(0, jSONObject0.size());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0[30wrKaG`'{", parserConfig0, 0);
      defaultJSONParser0.parse((Object) parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("0[30wrKaG`'{", parserConfig0);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int, pos 2, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated json string, ", parserConfig0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.deny");
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "unterminated json string, ", (Object) parserConfig0);
      parseContext0.toString();
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("unterminated json string, ", parserConfig0);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "fastjson.parser.deny");
      defaultJSONParser_ResolveTask0.ownerContext = parseContext0;
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.handleResovleTask(parseContext0);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[2] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 59);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated json string, ", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "unterminated json string, ", (Object) parserConfig0);
      parseContext0.toString();
      defaultJSONParser0.setContext((Object) "unterminated json string, ", (Object) parseContext0);
      Locale locale0 = Locale.GERMANY;
      ParseContext parseContext1 = defaultJSONParser0.setContext((Object) locale0, (Object) "unterminated json string, ");
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) parseContext0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("unterminated json string, ", parserConfig0);
      defaultJSONParser1.resolveStatus = 1;
      Hashtable<ChronoLocalDate, Feature> hashtable0 = new Hashtable<ChronoLocalDate, Feature>(0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.checkMapResolve(hashtable0, parseContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = ':';
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 1, parserConfig1, 1);
      defaultJSONParser0.accept(1, 2147483645);
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : q
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".k>7[D|H", parserConfig0);
      defaultJSONParser0.setContext((Object) parserConfig0, (Object) parserConfig0);
      Locale locale0 = Locale.FRENCH;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(".k>7[D|H", parserConfig0);
      Object object0 = defaultJSONParser0.resolveReference("*i");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = ParserConfig.global;
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = '*';
      charArray0[2] = '6';
      charArray0[3] = '7';
      charArray0[4] = '9';
      charArray0[5] = 'A';
      charArray0[6] = '`';
      charArray0[7] = 'e';
      charArray0[8] = 'k';
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 2, parserConfig1, 9);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = "(CLjava/lang/String;D)V";
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(CLjava/lang/String;D)V");
      // Undeclared exception!
      try { 
        JSON.parseObject("(CLjava/lang/String;D)V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (CLjava/lang/String;D)V
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")MUG g@g@%", parserConfig0, 9);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )MUG g@g@%
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 46);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Object object0 = new Object();
      JSONScanner jSONScanner0 = new JSONScanner("3bL'#d?fRC Y7D");
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      jSONReaderScanner0.setToken(46);
      defaultJSONParser0.setContext((Object) jSONScanner0, (Object) numberFormat0);
      TreeSet<ParameterizedTypeImpl> treeSet0 = new TreeSet<ParameterizedTypeImpl>();
      Vector<Integer> vector0 = new Vector<Integer>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]5hb");
      Feature feature0 = Feature.AllowComment;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) feature0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]5hb
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      TreeSet<ParameterizedTypeImpl> treeSet0 = new TreeSet<ParameterizedTypeImpl>();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) parserConfig0, (Object) classLoader0);
      ParseContext parseContext1 = new ParseContext(parseContext0, defaultJSONParser0, "");
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext1, "$");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      defaultJSONParser0.handleResovleTask("");
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 59);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Type[] typeArray0 = new Type[4];
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      typeArray0[0] = (Type) null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "e";
      stringArray0[1] = "RX346]03/>5=JaGB";
      stringArray0[2] = "not support : ";
      stringArray0[3] = "f'f?";
      stringArray0[4] = "5,Xt&W5L],\"";
      stringArray0[5] = "$x^B?#";
      stringArray0[6] = "$";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      typeArray0[1] = (Type) null;
      Class<Boolean> class1 = Boolean.TYPE;
      typeArray0[2] = (Type) class1;
      Class<Byte> class2 = Byte.TYPE;
      typeArray0[3] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, class2);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support type com.alibaba.fastjson.util.ParameterizedTypeImpl@94c10236
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("9{?");
      ChoiceFormat choiceFormat1 = new ChoiceFormat("9{?");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = ParserConfig.global;
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = '6';
      parserConfig1.setAutoTypeSupport(true);
      charArray0[3] = '7';
      charArray0[4] = '9';
      charArray0[5] = 'A';
      charArray0[6] = '`';
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charArray0[7] = 'e';
      charArray0[8] = 'k';
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 2, parserConfig1, 9);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("9.Ik[qRUn3P>");
      BigDecimal bigDecimal0 = (BigDecimal)defaultJSONParser0.parse((Object) "9.Ik[qRUn3P>");
      assertEquals((short)9, bigDecimal0.shortValue());
  }
}
