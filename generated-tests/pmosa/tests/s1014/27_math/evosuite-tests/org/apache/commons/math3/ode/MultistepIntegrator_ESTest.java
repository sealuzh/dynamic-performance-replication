/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 03:43:02 GMT 2018
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultistepIntegrator_ESTest extends MultistepIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = (-2147.677749379803);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-1102), (-2147.677749379803), (-813.46554740793), 0.9, (-1102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -1,102 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = 2;
      double double0 = (-1.0);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2, 2, 0.0, (-1.0), 0.0);
      adamsMoultonIntegrator0.getSafety();
      adamsMoultonIntegrator0.getMinReduction();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double1 = (-3125.161);
      expandableStatefulODE0.getCompleteState();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      adamsMoultonIntegrator0.setStepSizeControl((-3125.161), (double) 2, doubleArray0, doubleArray0);
      expandableStatefulODE0.setTime((-1127.38723));
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        expandableStatefulODE0.getSecondaryState(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2, 0.0, 2, 2, (-862.4));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 3106.142182, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      adamsMoultonIntegrator0.setMinReduction(0.9);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 2);
      graggBulirschStoerIntegrator0.setStepSizeControl(61.737998611453, 61.737998611453, doubleArray0, doubleArray0);
      adamsMoultonIntegrator0.setStarterIntegrator(graggBulirschStoerIntegrator0);
      adamsMoultonIntegrator0.setStarterIntegrator(graggBulirschStoerIntegrator0);
      double double0 = adamsMoultonIntegrator0.getSafety();
      assertEquals(0.9, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(0.9, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(1, 0.0, (-196.2515749810807), doubleArray0, doubleArray0);
      adamsBashforthIntegrator0.getSafety();
      adamsBashforthIntegrator0.getStarterIntegrator();
      adamsBashforthIntegrator0.setMaxGrowth(520.2181452102);
      assertEquals(520.2181452102, adamsBashforthIntegrator0.getMaxGrowth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(2, 2138.484578838293, 2138.484578838293, 494, 494);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      adamsBashforthIntegrator0.getStarterIntegrator();
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 2138.484578838293);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = (-934.3);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(6, 6, (-862.4), (-934.3), (-934.3));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(6).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      AdamsBashforthIntegrator adamsBashforthIntegrator1 = new AdamsBashforthIntegrator(6, (-862.4), 6, 6, (-934.3));
      double double1 = 0.9;
      adamsBashforthIntegrator1.setSafety(0.9);
      // Undeclared exception!
      adamsBashforthIntegrator1.integrate(expandableStatefulODE0, (-934.3));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(6, 6, (-862.4), (-934.3), (-934.3));
      adamsBashforthIntegrator0.setSafety((-934.3));
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(6, (-1.0), (-1084.45834657693), 0.0, 520.32111);
      adamsMoultonIntegrator0.setMaxGrowth(736.64576);
      double double0 = adamsBashforthIntegrator0.getMaxGrowth();
      assertEquals((-934.3), adamsBashforthIntegrator0.getSafety(), 0.01);
      assertEquals(1.122462048309373, double0, 0.01);
  }
}
