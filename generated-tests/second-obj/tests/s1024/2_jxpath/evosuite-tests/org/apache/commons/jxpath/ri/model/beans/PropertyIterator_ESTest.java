/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 09:58:45 GMT 2018
 */

package org.apache.commons.jxpath.ri.model.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathBasicBeanInfo;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanAttributeIterator;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPropertyPointer;
import org.apache.commons.jxpath.ri.model.beans.PropertyIterator;
import org.apache.commons.jxpath.ri.model.beans.PropertyPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertyIterator_ESTest extends PropertyIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      NullPointer nullPointer0 = new NullPointer(locale0, "y,Ys:\"2bBF");
      PropertyIterator propertyIterator0 = null;
      try {
        propertyIterator0 = new PropertyIterator(nullPointer0, "y,Ys:\"2bBF", true, nullPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PropertyIerator startWith parameter is not a child of the supplied parent
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      NullPointer nullPointer0 = new NullPointer(locale0, "");
      PropertyIterator propertyIterator0 = new PropertyIterator(nullPointer0, "nodeValue", true, (NodePointer) null);
      NodePointer nodePointer0 = propertyIterator0.getNodePointer();
      assertEquals(0, propertyIterator0.getPosition());
      assertNull(nodePointer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QName qName0 = new QName("immediateParentPointer");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(variablePointer0);
      Locale locale0 = Locale.KOREA;
      NullPointer nullPointer0 = new NullPointer(qName0, locale0);
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(nullPointer0, qName0);
      beanAttributeIterator0.reset();
      beanAttributeIterator0.setPosition(Integer.MIN_VALUE);
      NodePointer nodePointer0 = beanAttributeIterator0.getNodePointer();
      assertFalse(nodePointer0.isAttribute());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      NullPointer nullPointer0 = new NullPointer(locale0, "=qR(&Ou");
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      propertyPointer0.propertyIndex = Integer.MIN_VALUE;
      PropertyIterator propertyIterator0 = new PropertyIterator(nullPointer0, "<<unknown namespace>>", false, propertyPointer0);
      boolean boolean0 = propertyIterator0.setPosition(34);
      assertEquals(34, propertyIterator0.getPosition());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      QName qName0 = new QName("hx(+nF?u");
      Locale locale1 = Locale.ROOT;
      NullPointer nullPointer0 = new NullPointer(qName0, locale1);
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(nullPointer0, qName0);
      beanAttributeIterator0.prepareForIndividualProperty("<Number>");
      boolean boolean0 = beanAttributeIterator0.setPosition(177);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.lookup(linkedList0, (Collection<Locale>) null);
      NullPointer nullPointer0 = new NullPointer((Locale) null, "=qR(&Ou");
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      PropertyIterator propertyIterator0 = new PropertyIterator(nullPointer0, "<<unknown namespace>>", false, propertyPointer0);
      NodePointer nodePointer0 = propertyIterator0.getNodePointer();
      assertEquals(0, propertyIterator0.getPosition());
      assertNull(nodePointer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      QName qName0 = new QName("*!", "*!");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "*!");
      QName qName1 = nodeNameTest0.getNodeName();
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPointer beanPointer0 = new BeanPointer((NodePointer) null, qName1, "*!", jXPathBasicBeanInfo0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "key", true, (NodePointer) null);
      boolean boolean0 = propertyIterator0.setPosition(110);
      assertEquals(110, propertyIterator0.getPosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      QName qName0 = new QName((String) null, (String) null);
      Locale locale0 = Locale.CANADA;
      Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BeanPointer beanPointer0 = new BeanPointer(qName0, "nameAttributeValue", jXPathBasicBeanInfo0, locale0);
      beanPointer0.getValue();
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(beanPointer0, qName0);
      beanAttributeIterator0.getNodePointer();
      assertEquals(1, beanAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      QName qName0 = new QName("4O1+dd");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      BeanPointer beanPointer0 = new BeanPointer(qName0, object0, jXPathBasicBeanInfo0, locale0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "4O1+dd", false, (NodePointer) null);
      jXPathBasicBeanInfo0.getPropertyDescriptors();
      propertyIterator0.prepareForIndividualProperty("propertyIndex");
      propertyIterator0.setPosition(8);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("<<unknown namespace>>", 659.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=659.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QName qName0 = new QName((String) null, (String) null);
      Locale locale0 = Locale.GERMAN;
      NullPointer nullPointer0 = new NullPointer(locale0, (String) null);
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(nullPointer0, qName0);
      beanAttributeIterator0.getNodePointer();
      assertEquals(1, beanAttributeIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer((NodePointer) null);
      QName qName0 = nullPropertyPointer0.getName();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      NullPointer nullPointer0 = new NullPointer(qName0, locale0);
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(nullPointer0, qName0);
      boolean boolean0 = beanAttributeIterator0.setPosition(Integer.MIN_VALUE);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      QName qName0 = new QName("O1+dd");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      BeanPointer beanPointer0 = new BeanPointer(qName0, object0, jXPathBasicBeanInfo0, locale0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "O1+dd", true, (NodePointer) null);
      jXPathBasicBeanInfo0.getPropertyDescriptors();
      NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(beanPointer0);
      nullPropertyPointer0.getName();
      propertyIterator0.prepareForIndividualProperty("propertyIndex");
      propertyIterator0.setPosition(8);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("<<unknown namespace>>", 659.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=659.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      QName qName0 = new QName("", (String) null);
      NullPointer nullPointer0 = new NullPointer(qName0, locale0);
      PropertyPointer propertyPointer0 = nullPointer0.getPropertyPointer();
      PropertyIterator propertyIterator0 = new PropertyIterator(nullPointer0, (String) null, true, propertyPointer0);
      propertyIterator0.prepareForIndividualProperty("");
      nullPointer0.getRootNode();
      propertyIterator0.reset();
      propertyIterator0.setPosition(33);
      int int0 = propertyIterator0.getPosition();
      assertEquals(33, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      QName qName0 = new QName("XcsN", ")");
      Class<Integer> class0 = Integer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      Locale locale0 = Locale.FRANCE;
      BeanPointer beanPointer0 = new BeanPointer(qName0, qName0, jXPathBasicBeanInfo0, locale0);
      beanPointer0.namespacePointer((String) null);
      Class<Locale.LanguageRange> class1 = Locale.LanguageRange.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo1 = new JXPathBasicBeanInfo(class1, false);
      BeanPointer beanPointer1 = new BeanPointer((NodePointer) null, qName0, locale0, jXPathBasicBeanInfo1);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer1, (String) null, true, (NodePointer) null);
      NodePointer nodePointer0 = propertyIterator0.getNodePointer();
      assertEquals(0, propertyIterator0.getPosition());
      assertNotNull(nodePointer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      QName qName0 = new QName("4O1+dd", "4O1+dd");
      Locale locale0 = new Locale("4O1+dd", "4O1+dd", "4O1+dd");
      Object object0 = new Object();
      Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      BeanPointer beanPointer0 = new BeanPointer(qName0, object0, jXPathBasicBeanInfo0, locale0);
      NullPointer nullPointer0 = new NullPointer(qName0, locale0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, (String) null, true, (NodePointer) null);
      NullPointer nullPointer1 = new NullPointer(qName0, locale0);
      propertyIterator0.prepareForIndividualProperty("<<unknown namespace>>");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = propertyIterator0.getNodePointer();
      assertNotNull(nodePointer0);
      
      nodePointer0.getNodeValue();
      int int0 = propertyIterator0.getPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QName qName0 = new QName("4O1+dd", "4O1+dd");
      Locale locale0 = new Locale("4O1+dd", "4O1+dd", "4O1+dd");
      Object object0 = new Object();
      Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      BeanPointer beanPointer0 = new BeanPointer(qName0, object0, jXPathBasicBeanInfo0, locale0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, (String) null, true, (NodePointer) null);
      NullPointer nullPointer0 = new NullPointer(qName0, locale0);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = propertyIterator0.getNodePointer();
      nodePointer0.getNodeValue();
      int int0 = propertyIterator0.getPosition();
      assertEquals(0, int0);
      
      BeanPropertyPointer beanPropertyPointer0 = (BeanPropertyPointer)propertyIterator0.getPropertyPointer();
      assertEquals(24, beanPropertyPointer0.getPropertyIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("tcmI)b*&g<<~:");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      Class<BeanPropertyPointer> class0 = BeanPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0);
      BeanPointer beanPointer0 = new BeanPointer(variablePointer0, qName0, basicVariables0, jXPathBasicBeanInfo0);
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(beanPointer0, qName0);
      beanAttributeIterator0.getPropertyPointer();
      beanAttributeIterator0.getNodePointer();
      beanAttributeIterator0.prepareForIndividualProperty("node");
      NodePointer nodePointer0 = beanAttributeIterator0.getNodePointer();
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      QName qName0 = new QName("4O1+dd", "4O1+dd");
      Locale locale0 = Locale.CHINESE;
      Object object0 = new Object();
      Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      BeanPointer beanPointer0 = new BeanPointer(qName0, object0, jXPathBasicBeanInfo0, locale0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "4O1+dd", false, (NodePointer) null);
      NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(beanPointer0);
      propertyIterator0.prepareForIndividualProperty("propertyIndex");
      propertyIterator0.prepareForIndividualProperty("<<unknown namespace>>");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      propertyIterator0.getNodePointer();
      PropertyIterator propertyIterator1 = new PropertyIterator(beanPointer0, (String) null, false, nullPropertyPointer0);
      propertyIterator1.getNodePointer();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("8=ZFV1I^|Ky7YZ,", 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=8=zfv1i^|ky7yz,
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      QName qName0 = new QName("O1+d|d");
      Locale locale0 = Locale.TAIWAN;
      Object object0 = new Object();
      Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      BeanPointer beanPointer0 = new BeanPointer(qName0, object0, jXPathBasicBeanInfo0, locale0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "O1+d|d", false, (NodePointer) null);
      locale0.getScript();
      FileSystemHandling.shouldAllThrowIOExceptions();
      propertyIterator0.prepareForIndividualProperty("<<unknown namespace>>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = NodePointer.WHOLE_COLLECTION;
      propertyIterator0.reset();
      propertyIterator0.prepareForIndividualProperty("actual");
      NodePointer nodePointer0 = propertyIterator0.getNodePointer();
      assertNotNull(nodePointer0);
      assertEquals(0, propertyIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QName qName0 = new QName("4Os1+dd");
      Locale locale0 = Locale.CANADA;
      Object object0 = new Object();
      Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      BeanPointer beanPointer0 = new BeanPointer(qName0, object0, jXPathBasicBeanInfo0, locale0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "4Os1+dd", false, (NodePointer) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      jXPathBasicBeanInfo0.getPropertyDescriptor("4Os1+dd");
      FileSystemHandling.shouldAllThrowIOExceptions();
      beanPointer0.getNode();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)104;
      byte byte0 = (byte)39;
      byteArray0[1] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      propertyIterator0.prepareForIndividualProperty("propertyIndex");
      FileSystemHandling.shouldAllThrowIOExceptions();
      propertyIterator0.setPosition(1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<<unknown namespace>>");
      // Undeclared exception!
      try { 
        locale0.getDisplayCountry((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      QName qName0 = new QName("4O1+dd", "4O1+dd");
      Locale locale0 = Locale.CANADA;
      Object object0 = new Object();
      Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      BeanPointer beanPointer0 = new BeanPointer(qName0, object0, jXPathBasicBeanInfo0, locale0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "4O1+dd", true, (NodePointer) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "4O1+dd");
      jXPathBasicBeanInfo0.getPropertyDescriptors();
      jXPathBasicBeanInfo0.getPropertyDescriptor("4O1+dd");
      NullPointer nullPointer0 = new NullPointer(locale0, "4O1+dd");
      int int0 = NodePointer.WHOLE_COLLECTION;
      propertyIterator0.prepareForIndividualProperty("<<unknown namespace>>");
      propertyIterator0.setPosition(4);
      jXPathBasicBeanInfo0.getPropertyDescriptors();
      beanPointer0.getNode();
      propertyIterator0.prepareForIndividualProperty("propertyIndex");
      FileSystemHandling.shouldAllThrowIOExceptions();
      beanPointer0.getValue();
      propertyIterator0.getPosition();
      propertyIterator0.setPosition(1);
      propertyIterator0.reset();
      assertEquals(0, propertyIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      QName qName0 = new QName("4O1+dd");
      Locale locale0 = Locale.FRENCH;
      Object object0 = new Object();
      Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      BeanPointer beanPointer0 = new BeanPointer(qName0, object0, jXPathBasicBeanInfo0, locale0);
      NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(beanPointer0);
      nullPropertyPointer0.getName();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", true, nullPropertyPointer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      propertyIterator0.prepareForIndividualProperty("valuePointer");
      jXPathBasicBeanInfo0.getPropertyDescriptors();
      propertyIterator0.reset();
      assertEquals(0, propertyIterator0.getPosition());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QName qName0 = new QName("4O1+dd");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, true);
      BeanPointer beanPointer0 = new BeanPointer(qName0, object0, jXPathBasicBeanInfo0, locale0);
      NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(beanPointer0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", true, nullPropertyPointer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      propertyIterator0.reset();
      propertyIterator0.prepareForIndividualProperty("propertyIndex");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      jXPathBasicBeanInfo0.getPropertyDescriptor(" to siz ");
      PropertyIterator propertyIterator1 = new PropertyIterator(beanPointer0, (String) null, true, nullPropertyPointer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      propertyIterator1.prepareForIndividualProperty("Y95PbLL/~Z%");
      propertyIterator1.setPosition(2);
      propertyIterator1.getPosition();
      propertyIterator0.getNodePointer();
      propertyIterator1.prepareForIndividualProperty("length");
      assertEquals(2, propertyIterator1.getPosition());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "4O1+dd";
      QName qName0 = new QName("4O1+dd");
      Locale locale0 = Locale.KOREA;
      Object object0 = new Object();
      Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      BeanPointer beanPointer0 = new BeanPointer(qName0, object0, jXPathBasicBeanInfo0, locale0);
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "4O1+dd", false, (NodePointer) null);
      NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(beanPointer0);
      QName qName1 = nullPropertyPointer0.getName();
      String string1 = "valuePointer";
      propertyIterator0.prepareForIndividualProperty("valuePointer");
      propertyIterator0.setPosition(8);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale locale1 = Locale.FRANCE;
      Locale.setDefault(locale_Category0, locale1);
      PropertyIterator propertyIterator1 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", true, nullPropertyPointer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      propertyIterator1.prepareForIndividualProperty("valuePointer");
      VariablePointer variablePointer0 = new VariablePointer(qName1);
      propertyIterator0.getPosition();
      propertyIterator1.setPosition(8);
      BeanPropertyPointer beanPropertyPointer0 = new BeanPropertyPointer((NodePointer) null, jXPathBasicBeanInfo0);
      Object object1 = beanPropertyPointer0.bean;
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) null);
      // Undeclared exception!
      try { 
        variablePointer0.createPath(jXPathContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: $*
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QName qName0 = new QName("4>1+d^", "4>1+d^");
      Locale locale0 = Locale.CANADA;
      Object object0 = new Object();
      locale0.getISO3Country();
      Class<NullPropertyPointer> class0 = NullPropertyPointer.class;
      JXPathBasicBeanInfo jXPathBasicBeanInfo0 = new JXPathBasicBeanInfo(class0, false);
      BeanPointer beanPointer0 = new BeanPointer(qName0, object0, jXPathBasicBeanInfo0, locale0);
      NullPropertyPointer nullPropertyPointer0 = new NullPropertyPointer(beanPointer0);
      QName qName1 = nullPropertyPointer0.getName();
      nullPropertyPointer0.setIndex(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyIterator propertyIterator0 = new PropertyIterator(beanPointer0, "<<unknown namespace>>", false, nullPropertyPointer0);
      nullPropertyPointer0.setNamespaceResolver((NamespaceResolver) null);
      propertyIterator0.prepareForIndividualProperty("propertyIndex");
      VariablePointer variablePointer0 = new VariablePointer(qName1);
      BeanAttributeIterator beanAttributeIterator0 = new BeanAttributeIterator(beanPointer0, qName1);
      propertyIterator0.getNodePointer();
      PropertyIterator propertyIterator1 = null;
      try {
        propertyIterator1 = new PropertyIterator(beanPointer0, "p^_R", false, beanPointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // PropertyIerator startWith parameter is not a child of the supplied parent
         //
         verifyException("org.apache.commons.jxpath.ri.model.beans.PropertyIterator", e);
      }
  }
}
