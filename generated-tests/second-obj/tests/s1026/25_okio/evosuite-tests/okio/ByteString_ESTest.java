/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:14:09 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      ByteString.decodeBase64(":2ch7,h>Bh\r@e?m");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        byteString0.EMPTY.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.base64();
      byte[] byteArray1 = byteString0.internalArray();
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Pipe pipe0 = new Pipe(376L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.sha256(pipe_PipeSink0);
      HashingSink hashingSink1 = HashingSink.sha1(hashingSink0);
      ByteString byteString0 = hashingSink1.hash();
      byteString0.base64Url();
      ByteString byteString1 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.hmacSha512(byteString1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[1] = (byte) (-58);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      byteString0.utf8();
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte) (-58), (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=-58 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-1);
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Inflater inflater0 = new Inflater(false);
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeUtf8("XP1");
      byte[] byteArray0 = byteString0.internalArray();
      assertNotNull(byteArray0);
      
      byteString0.utf8();
      byteString0.sha512();
      assertEquals(3, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(11);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      ByteString.decodeBase64("okio.Okio");
      // Undeclared exception!
      try { 
        byteString0.endsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(" n>nT?Tm.NW1knp");
      charset0.decode(byteBuffer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.of(byteBuffer0);
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = ByteString.of(byteArray0);
      String string0 = byteString0.toString();
      Charset charset0 = Charset.defaultCharset();
      String string1 = byteString0.string(charset0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Pipe pipe0 = new Pipe(376L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.sha1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.utf8;
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      int int1 = byteString0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)33;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[8];
      realBufferedSource0.readUtf8();
      byteArray0[0] = (byte)56;
      boolean boolean0 = realBufferedSource0.closed;
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      ByteString byteString3 = byteString1.toAsciiLowercase();
      assertNotSame(byteString1, byteString2);
      assertFalse(byteString1.equals((Object)byteString2));
      assertNotSame(byteString3, byteString1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("LVF0oNnH\"AYAyN,d7S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: L
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("-9223372036854775808");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: -
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((-2981L));
      HashingSink.sha512(bufferedSink0);
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        byteString0.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString.decodeBase64(":2^hn7,h>Bh\tP@elm");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        byteString0.startsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      byteString0.hashCode();
      ByteString byteString1 = byteString0.sha256();
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      ByteBuffer byteBuffer0 = charset0.encode(" n>nT?Tm.NW1knp");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      byteString0.EMPTY.startsWith(byteString1);
      Buffer buffer1 = realBufferedSink0.buffer;
      byteBuffer0.asLongBuffer();
      try { 
        byteArrayOutputStream0.toString(" n>nT?Tm.NW1knp");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.rangeEquals((int) (byte) (-58), byteArray0, (int) (byte) (-58), (int) (byte) (-58));
      byteString0.utf8();
      int int0 = byteString0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString.decodeBase64(":2chn7,h>Bh\rP@e?m");
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      // Undeclared exception!
      try { 
        byteString1.indexOf((ByteString) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-17));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -17
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byteString0.hex();
      ByteString.decodeBase64("fromIndex < 0");
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)112, 55296);
      ByteString byteString0 = new ByteString(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, (byte)112);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      int int0 = byteString1.indexOf(byteString0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = byteString1.compareTo(byteString0);
      assertTrue(int1 == int0);
      
      int int2 = byteString1.lastIndexOf(byteArray0, 0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode();
      int int0 = 122;
      // Undeclared exception!
      try { 
        byteString0.getByte(122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 122
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 55296);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.read(byteArrayInputStream0, (byte)0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString2 = realBufferedSource0.readByteString();
      boolean boolean0 = byteString2.endsWith(byteString0);
      assertFalse(boolean0);
      
      int int0 = byteString1.size();
      assertTrue(byteString1.equals((Object)byteString2));
      
      byteString0.utf8();
      int int1 = byteString0.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("eo}[z+@-]zC");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)3;
      byteArray0[4] = (byte) (-93);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)59;
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
      assertEquals(11, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiLowercase();
      int int0 = ByteString.codePointIndexToCharIndex("PO#=^\"", 4);
      assertEquals(4, int0);
      
      int int1 = byteString0.indexOf(byteArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      byteString0.endsWith(byteArray0);
      byteString0.toAsciiUppercase();
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("yE.5I]@dB$_<vh?", 6);
      assertEquals(6, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)16;
      ByteString byteString0 = new ByteString(byteArray0);
      int int1 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("DKkVtMxY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: K
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H_2p`s5");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Z|^(K?Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: Z|^(K?Y
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("u");
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(2174);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Pipe pipe0 = new Pipe(5237L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort(1690);
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.utf8();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)110;
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      int int1 = byteString0.compareTo(byteString1);
      int int2 = byteString0.lastIndexOf(byteString1);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArrayOutputStream0.write(99);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeUtf8CodePoint(11);
      ByteString byteString0 = realBufferedSource0.readByteString();
      HashingSource.sha256(realBufferedSource0.buffer);
      ByteString byteString1 = byteString0.md5();
      byteString1.compareTo(byteString0);
      byteString1.EMPTY.hashCode();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(">", "strng== null");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // strng== null
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (-1005), (-1005));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)59;
      ByteString byteString0 = ByteString.encodeUtf8("byteCount > Integer.MAX_VALUE: ");
      boolean boolean0 = byteString0.equals(fileSystemHandling0);
      assertEquals(31, byteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
      
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      assertTrue(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      String string0 = byteString0.utf8;
      ByteString byteString1 = byteString0.sha512();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(" n>nT?Tm.NW1knp");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      objectOutputStream0.writeChar(14);
      byteString0.write(objectOutputStream0);
      ByteString.of(byteBuffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      ByteString byteString2 = ByteString.encodeUtf8("eneh3Gzr/}cD91{L");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString3 = realBufferedSource0.readByteString();
      boolean boolean0 = byteString1.equals(byteString3);
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      byteString0.endsWith(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Inflater inflater0 = new Inflater(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 16);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      try { 
        ByteString.read(byteArrayInputStream0, 16);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 55296);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArrayInputStream0.close();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.read(byteArrayInputStream0, (byte)0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int0 = byteString1.size();
      assertEquals(0, int0);
      
      byteString0.utf8();
      int int1 = byteString0.hashCode();
      assertFalse(int1 == int0);
      
      int int2 = byteString0.compareTo(byteString1);
      assertEquals(1, int2);
      
      int int3 = byteString1.indexOf(byteArray0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.toString();
      ByteString byteString1 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString1.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byteString0.internalArray();
      // Undeclared exception!
      try { 
        byteString0.substring(11, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("|(K?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: |
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink1.buffer;
      HashingSource.sha256(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      GzipSource gzipSource0 = new GzipSource(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(gzipSource0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSink0.toString();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("buffer([size=0])");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: u
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString("~M5[@VGYp<p{I ", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(1000000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      HashingSource hashingSource0 = HashingSource.sha1(gzipSource0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.substring(7, 7);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("!%+~b3/!@drOnh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: !
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Inflater inflater0 = new Inflater(false);
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeUtf8("XP1");
      String string0 = byteString0.utf8();
      assertEquals("XP1", string0);
      
      byteString0.toByteArray();
      assertEquals(3, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      charset0.decode(byteBuffer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      ByteString byteString0 = ByteString.decodeBase64("");
      byteString0.toString();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byteString0.write(objectOutputStream0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byte byte0 = (byte)28;
      byteArray0[1] = (byte)28;
      byte byte1 = (byte)114;
      byteArray0[2] = (byte)114;
      byte byte2 = (byte) (-81);
      byte byte3 = (byte) (-81);
      byteArray0[4] = (byte) (-81);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.substring((int) (byte)0);
      byte[] byteArray1 = new byte[5];
      // Undeclared exception!
      try { 
        ByteString.decodeHex("inflater == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: i
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = hashingSource0.hash();
      byteString0.rangeEquals(30, byteString1, 5568, 0);
      hashingSource0.close();
      int int0 = byteString0.indexOf(byteString1, 116);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 116);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)33, (byte)33);
      ByteString byteString2 = hashingSource0.hash();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString3 = byteString1.toAsciiLowercase();
      ByteString byteString4 = byteString2.toAsciiLowercase();
      ByteString byteString5 = new ByteString(byteArray0);
      boolean boolean0 = byteString4.equals(byteString2);
      assertFalse(boolean0);
      
      HashingSink.sha1(buffer0);
      String string0 = byteString3.toString();
      assertEquals("[hex=0a00a000000000000000000000000000a0000000]", string0);
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      byteString0.endsWith(byteArray0);
      byteString0.toAsciiUppercase();
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Pipe pipe0 = new Pipe(781L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString0.substring((-164));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(" n>nT?Tm.NW1knp");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.of(byteBuffer0);
      byteString0.toString();
      byteString0.toString();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("8Il/FSUKT!#s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: I
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Charset.defaultCharset();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 313);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("?n>nT?Tm.NW1knp");
      charset0.decode(byteBuffer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong((-2981L));
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      Charset charset0 = Charset.defaultCharset();
      hashingSink0.toString();
      byteString0.lastIndexOf(byteString0);
      ByteBuffer byteBuffer0 = charset0.encode("?n>nT?Tm.NW1knp");
      charset0.decode(byteBuffer0);
      byteString0.asByteBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      byteString0.write(byteArrayOutputStream0);
      Charset.defaultCharset();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.toString();
      boolean boolean0 = realBufferedSink0.closed;
      byteString1.substring(0, 0);
      ByteString.encodeUtf8(";2");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      try { 
        realBufferedSource0.readUtf8LineStrict((long) 0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=0000000000\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      charset0.decode(byteBuffer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int0 = 13;
      buffer0.writeUtf8CodePoint(13);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteArrayOutputStream byteArrayOutputStream1 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.utf8();
      ByteString byteString1 = byteString0.sha512();
      byteString0.lastIndexOf(byteString1);
      Charset charset0 = Charset.defaultCharset();
      charset0.encode(" n>nT?Tm.NW1knp");
      byteString1.asByteBuffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString2 = hashingSink0.hash();
      objectOutputStream0.writeUnshared(byteString2);
      byteString0.write(objectOutputStream0);
      Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode(" n>nT?Tm.NW1knp");
      ByteString byteString3 = ByteString.of(byteBuffer0);
      byteString3.toString();
      byteString1.base64Url();
      byteString3.toString();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      byteString0.base64Url();
      Pipe pipe0 = new Pipe(100000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("@R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: @
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      charset0.encode("");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int0 = 10;
      buffer0.writeShortLe(10);
      Buffer buffer1 = buffer0.writeUtf8CodePoint(2212);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.writeAll(buffer1);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.toString();
      byteString1.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      hashingSource0.hash();
      HashingSink.hmacSha512(buffer0, byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-1700L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1700
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("in == null");
      Charset charset1 = Charset.defaultCharset();
      charset1.decode(byteBuffer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.writeUtf8CodePoint(13);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.writeAll(realBufferedSource0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      byteString1.toString();
      byteString0.startsWith(byteString1);
      byteString0.toString();
      ByteString byteString2 = ByteString.decodeBase64("");
      byteString1.endsWith(byteString2);
      ByteString byteString3 = hashingSource0.hash();
      byteString0.utf8 = "[hex=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855]";
      HashingSink.hmacSha512(realBufferedSource0.buffer, byteString1);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      hashingSink0.hash();
      byteString0.toString();
      HashingSink hashingSink1 = HashingSink.sha512(realBufferedSource0.buffer);
      hashingSink1.flush();
      HashingSink.sha1(realBufferedSource0.buffer);
      ByteString byteString4 = hashingSink0.hash();
      byteString3.toString();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      HashingSource.hmacSha1(realBufferedSource0, byteString4);
      ByteString byteString5 = byteString1.sha256();
      byteString4.startsWith(byteString3);
      byteString3.asByteBuffer();
      byteString5.indexOf(byteString4);
      byteString2.md5();
  }
}
