/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 05:22:04 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(93, 93);
      int[] intArray0 = new int[4];
      intArray0[0] = 93;
      intArray0[1] = 93;
      intArray0[2] = 93;
      intArray0[3] = 93;
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[9][3];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int[] intArray2 = new int[3];
      intArray2[0] = 93;
      intArray2[1] = 93;
      intArray2[2] = 93;
      intArray1[6] = intArray2;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      CharClass charClass4 = charClass3.appendTableWithSign(intArray1, 93);
      CharClass charClass5 = charClass4.negateClass();
      String string0 = charClass5.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral(3532, (-1563));
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.negateClass();
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[6];
      intArray1[2] = 2611;
      intArray0[0] = intArray1;
      charClass0.appendTable(intArray0);
      String string0 = charClass0.toString();
      assertEquals("[0x0-0x10ffff]", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = charClass0.toArray();
      charClass0.appendFoldedClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[4];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.toArray();
      charClass0.appendRange((-2), 2473);
      assertArrayEquals(new int[] {0, 0, (-2), 2473}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, 2810);
      CharClass charClass2 = charClass1.cleanClass();
      int int0 = 153;
      CharClass charClass3 = charClass2.appendRange(153, 153);
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[9][6];
      charClass0.appendClass(intArray0);
      charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = (-1427);
      intArray0[1] = (-1427);
      int int2 = 0;
      intArray0[2] = 0;
      int int3 = 355;
      intArray0[3] = 355;
      int int4 = 64;
      intArray0[4] = 64;
      int int5 = 598;
      intArray0[5] = 598;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[9][6];
      int[] intArray2 = new int[9];
      intArray2[0] = int4;
      intArray2[1] = int4;
      int int6 = 0;
      intArray2[2] = int6;
      intArray2[3] = int1;
      intArray2[4] = int2;
      intArray2[5] = int1;
      intArray2[6] = int0;
      intArray2[7] = int0;
      intArray2[8] = int3;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      int[] intArray3 = new int[8];
      int int7 = (-2520);
      intArray3[0] = int7;
      intArray3[1] = int2;
      intArray3[2] = int0;
      intArray3[3] = int0;
      intArray3[4] = int5;
      intArray3[5] = int0;
      intArray3[6] = int5;
      intArray3[7] = int3;
      intArray1[6] = intArray3;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      charClass1.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendLiteral((-3318), 589);
      assertSame(charClass0, charClass1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.toString();
      charClass0.negateClass();
      charClass0.appendLiteral(91, (-358));
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][1];
      charClass0.appendNegatedTable(intArray1);
      charClass0.cleanClass();
      assertArrayEquals(new int[] {0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      CharClass charClass1 = new CharClass(intArray0);
      int[][] intArray1 = new int[0][7];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray1);
      charClass2.cleanClass();
      assertArrayEquals(new int[] {0, 1114111, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-514);
      intArray0[1] = 1262;
      intArray0[2] = 0;
      intArray0[3] = 2235;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass0.appendRange(52625, 2551);
      charClass2.cleanClass();
      CharClass charClass3 = charClass1.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[0][4];
      charClass3.appendNegatedTable(intArray1);
      charClass0.toString();
      int[][] intArray2 = new int[5][2];
      int[] intArray3 = new int[3];
      intArray3[0] = 1262;
      intArray3[1] = 1262;
      intArray3[2] = 2551;
      intArray2[0] = intArray3;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      intArray2[4] = intArray0;
      charClass0.appendNegatedTable(intArray2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      int int0 = 119150;
      intArray0[1] = 119150;
      intArray0[2] = 679;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      intArray0[3] = 0;
      charClass0.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[7][9];
      CharClass charClass2 = new CharClass(intArray0);
      CharClass charClass3 = new CharClass(intArray0);
      charClass3.appendNegatedClass(intArray0);
      charClass3.cleanClass();
      charClass2.appendNegatedClass(intArray0);
      CharClass charClass4 = charClass2.cleanClass();
      CharClass charClass5 = charClass4.appendNegatedTable(intArray1);
      int int1 = 983038;
      charClass5.appendRange(int0, int1);
      charClass1.toString();
      int int2 = (-732);
      int int3 = 2042;
      charClass0.appendRange(int2, int3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-514);
      int int0 = 1262;
      intArray0[1] = 1262;
      intArray0[2] = 0;
      intArray0[3] = 2219;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendNegatedClass(intArray0);
      CharClass charClass1 = new CharClass(intArray0);
      charClass1.cleanClass();
      CharClass charClass2 = charClass1.appendNegatedClass(intArray0);
      charClass2.cleanClass();
      int[][] intArray1 = new int[4][6];
      int[] intArray2 = new int[2];
      intArray2[0] = (-514);
      intArray2[1] = 1262;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      int[] intArray3 = new int[2];
      intArray3[0] = 2219;
      intArray3[1] = (-514);
      intArray1[2] = intArray3;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(93, 93);
      int[] intArray0 = new int[4];
      intArray0[0] = 93;
      intArray0[1] = 93;
      intArray0[2] = 93;
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[8][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      CharClass charClass3 = charClass2.appendTableWithSign(intArray1, 93);
      charClass3.appendNegatedClass(intArray0);
      charClass2.toString();
      charClass1.negateClass();
      charClass2.appendTableWithSign(intArray1, 1721);
      CharClass charClass4 = charClass0.appendTableWithSign(intArray1, (-2));
      charClass4.appendLiteral((-2049), 346);
      charClass1.cleanClass();
      CharClass charClass5 = charClass4.appendTable(intArray1);
      assertSame(charClass5, charClass2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.appendRange(93, 93);
      int[] intArray0 = new int[4];
      intArray0[0] = 93;
      intArray0[1] = 93;
      intArray0[2] = 93;
      intArray0[3] = 93;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      charClass1.appendFoldedRange(1114111, (-5894863));
      int[][] intArray1 = new int[0][9];
      CharClass charClass2 = charClass0.appendTableWithSign(intArray1, 93);
      CharClass charClass3 = charClass1.appendLiteral(120688, 1114111);
      charClass3.appendFoldedClass(intArray0);
      charClass3.appendRange((-674), 1532);
      charClass2.cleanClass();
      CharClass charClass4 = charClass1.appendFoldedRange(1114111, 203);
      charClass1.appendRange((-407), (-1941));
      charClass3.appendTable(intArray1);
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, 93);
      assertSame(charClass0, charClass5);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-514);
      intArray0[1] = 1262;
      intArray0[2] = 0;
      intArray0[3] = 2235;
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass0.appendRange(52625, 2551);
      charClass2.cleanClass();
      CharClass charClass3 = charClass1.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[0][4];
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      charClass0.toString();
      charClass4.toArray();
      assertArrayEquals(new int[] {(-514), 1114111, 0, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[4];
      intArray0[1] = 2113;
      intArray0[2] = 1291;
      int[][] intArray1 = new int[2][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass1 = new CharClass(intArray0);
      CharClass charClass2 = charClass0.cleanClass();
      charClass2.appendTable(intArray1);
      charClass1.appendNegatedTable(intArray1);
      assertArrayEquals(new int[] {0, 1114111, 1, 1290}, intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.cleanClass();
      int[][] intArray0 = new int[8][7];
      int[] intArray1 = new int[3];
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[1] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 1308;
      intArray4[1] = 0;
      intArray4[2] = 0;
      int[] intArray5 = new int[3];
      intArray5[0] = 0;
      intArray5[1] = 1;
      intArray5[2] = 1;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      intArray6[1] = 0;
      intArray4[1] = 32;
      intArray6[3] = 0;
      intArray6[4] = 1308;
      intArray6[5] = 1;
      intArray6[7] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      intArray7[0] = 93;
      intArray7[1] = 32;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[7];
      intArray8[0] = 93;
      intArray8[1] = 1308;
      intArray8[3] = 55;
      intArray8[5] = 1308;
      intArray8[6] = 1;
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        charClass1.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[5] = 1901;
      intArray0[1] = 65533;
      intArray0[2] = 65533;
      intArray0[3] = 65533;
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.appendClassWithSign(intArray0, 65533);
      CharClass charClass1 = charClass0.appendClassWithSign(intArray0, (-1352));
      CharClass charClass2 = charClass0.negateClass();
      charClass1.appendClassWithSign(intArray0, 8489);
      CharClass charClass3 = charClass2.appendRange(1114111, (-2211));
      int[][] intArray1 = new int[3][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass4 = charClass3.appendNegatedTable(intArray1);
      charClass4.appendTable(intArray1);
      charClass4.cleanClass();
      assertArrayEquals(new int[] {0, 1114111, 1114111, (-2211), 0, 1901, 0, 1114111}, intArray0);
  }
}
