/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:12:59 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      ByteString byteString0 = hashingSink0.hash();
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      hashingSink0.close();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      int int0 = byteString1.EMPTY.indexOf(byteString0);
      assertEquals((-1), int0);
      
      String string0 = byteString0.base64();
      assertNotSame(byteString0, byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals("2jmj7l5rSw0yVb/vlWAYkK/YBwk=", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("source exhausted prematurely", charset0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-35);
      int int0 = byteString0.indexOf(byteArray0, (int) (byte)42);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)71;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.asByteBuffer();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("[size=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: [
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.hashCode();
      byteString0.asByteBuffer();
      byte[] byteArray1 = new byte[4];
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      boolean boolean0 = byteString0.startsWith(byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      ByteString byteString0 = hashingSink0.hash();
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte) (-110), (int) (byte) (-94));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Inflater inflater0 = new Inflater(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)18;
      byteArray0[1] = (byte)39;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.decodeBase64("vbD1>aG42@<I:V");
      assertNull(byteString1);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteString byteString2 = byteString0.toAsciiLowercase();
      boolean boolean0 = byteString2.rangeEquals((-121), byteArray0, (int) (byte)39, (int) (byte)39);
      assertFalse(boolean0);
      assertSame(byteString2, byteString0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.EMPTY.indexOf(byteArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertTrue(boolean0);
      
      int int1 = byteString0.lastIndexOf(byteString1, 1585);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byte byte0 = (byte)40;
      byte byte1 = (byte)70;
      byte byte2 = (byte)102;
      // Undeclared exception!
      try { 
        byteString0.endsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)27;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-88);
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.rangeEquals((int) (byte)50, byteArray0, (-136), (-1992));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)123;
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.EMPTY.utf8 = null;
      byteString0.sha256();
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)120;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = ByteString.decodeBase64("-");
      assertNull(byteString1);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString2 = new ByteString(byteArray0);
      byteString0.hmacSha1(byteString2);
      int int1 = byteString0.compareTo(byteString2);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.hex();
      assertEquals("c4", string0);
      
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint((byte) (-60));
      HashingSink hashingSink1 = HashingSink.hmacSha256(bufferedSink0, byteString0);
      ByteString byteString1 = hashingSink1.hash();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      int int0 = byteString0.compareTo(byteString2);
      assertEquals(1, int0);
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-56);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      int int0 = byteString1.indexOf(byteArray0, (int) (byte) (-83));
      byteString0.indexOf(byteString1, 64);
      ByteString byteString2 = byteString0.toAsciiLowercase();
      byteString2.EMPTY.sha1();
      int int1 = byteString2.compareTo(byteString1);
      assertTrue(int1 == int0);
      
      byteString0.size();
      assertNotSame(byteString0, byteString2);
      assertFalse(byteString0.equals((Object)byteString2));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-105), (byte)90, (byte) (-56)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        ByteString.encodeString(")", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)119;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      ByteString byteString2 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString1.substring((int) (byte)119);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = null;
      ByteString byteString0 = new ByteString((byte[]) null);
      ByteString byteString1 = byteString0.EMPTY.sha512();
      // Undeclared exception!
      try { 
        byteString1.EMPTY.lastIndexOf(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-124);
      byteArray0[7] = (byte)79;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      boolean boolean1 = byteString0.equals(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byte[] byteArray0 = new byte[1];
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.utf8 = "";
      byteString0.equals(byteString1);
      byteString1.startsWith(byteArray0);
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSource0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      ByteString byteString0 = ByteString.decodeBase64("");
      assertNotNull(byteString0);
      
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
      
      int int0 = ByteString.codePointIndexToCharIndex("okio.Base64", 7);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("Td<WpN/j^jh");
      byteString0.EMPTY.base64();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        ByteString.decodeHex("ID1ID2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: I
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.hex();
      assertEquals("55", string0);
      
      int int0 = byteString0.lastIndexOf(byteArray0);
      ByteString byteString1 = ByteString.decodeHex("00");
      byteString0.utf8();
      boolean boolean0 = byteString1.startsWith(byteArray0);
      assertTrue(boolean0);
      
      int int1 = byteString1.indexOf(byteArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[7];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("okio.Timeout");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: o
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "";
      ByteString byteString0 = ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        byteString0.EMPTY.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Pipe pipe0 = new Pipe(895L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.EMPTY.base64Url();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-rePjg");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      byte[] byteArray0 = new byte[0];
      byteString0.indexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(117);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("|");
      byte[] byteArray0 = new byte[1];
      byteString0.equals(byteString0);
      byteString0.startsWith(byteArray0);
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("|");
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      HashingSource hashingSource0 = HashingSource.md5(gzipSource0);
      HashingSource.sha1(hashingSource0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.base64();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        ByteString.decodeHex("1B2M2Y8AsgTpgAmY7PhCfg==");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: M
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      HashingSink hashingSink1 = HashingSink.hmacSha512(buffer0, byteString1);
      hashingSink0.flush();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      hashingSink1.hash();
      ByteString byteString2 = byteString0.toAsciiUppercase();
      String string0 = byteString0.base64();
      assertEquals("z4PhNX7vuL3xVChQ1m2AB9Yg5AULVxXcg/SpIdNs6c5H0NE8XYXysP+DGNKHfuwvY7kxvUdBeoGlODJ6+SfaPg==", string0);
      assertNotSame(byteString0, byteString2);
      assertFalse(byteString0.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hex();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteString0.lastIndexOf(byteArray0);
      byteString0.toString();
      String string0 = byteString0.utf8();
      assertEquals("\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex(",_EoKz>,U*fc", 90);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-73);
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=ddbd]", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hex();
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=b1]", string0);
      
      ByteString byteString1 = ByteString.decodeHex("c4");
      byteString0.utf8();
      assertTrue(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex(",_EoKz>,U*fc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: ,
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte byte0 = (byte)12;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)39;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      ByteString.decodeBase64("[hex=0c0c002727]");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = hashingSink0.hash();
      int int0 = byteString0.compareTo(byteString2);
      assertEquals((-1), int0);
      
      int int1 = byteString1.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[3] = (byte)39;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.substring(0);
      String string0 = byteString0.toString();
      assertEquals("[hex=dbdbdd1ddd]", string0);
      
      byteString0.rangeEquals(36, byteArray0, (int) (byte)12, (int) (byte)0);
      int int0 = byteString0.indexOf(byteString0, 1129);
      assertEquals((-1), int0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOf(byteString0);
      byte[] byteArray0 = new byte[0];
      byteString0.EMPTY.startsWith(byteArray0);
      Inflater inflater0 = new Inflater(false);
      byteString0.substring((int) (byte)26);
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("[hex=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: [
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "T";
      ByteString byteString0 = ByteString.encodeUtf8("T");
      byte[] byteArray0 = new byte[1];
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.equals(byteString1);
      byteString1.startsWith(byteArray0);
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)4;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOf(byteString0);
      hashingSink0.toString();
      MockFile mockFile0 = new MockFile("HashingSink(okio.Buffer@0000000001)", "HashingSink(okio.Buffer@0000000001)");
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      byteString0.write(bufferedOutputStream0);
      byteString1.internalArray();
      ByteString byteString2 = byteString0.sha256();
      byteString0.asByteBuffer();
      byteString0.hex();
      hashingSink0.toString();
      byteString1.hashCode();
      byteString2.toAsciiLowercase();
      ByteString byteString3 = ByteString.decodeBase64("HashingSink(okio.Buffer@0000000001)");
      assertNull(byteString3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.toString();
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString1.write(realBufferedSource0.buffer);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      hashingSink0.hash();
      ByteString byteString1 = byteString0.md5();
      assertNotSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOf(byteString0);
      byte[] byteArray0 = new byte[0];
      byteString0.EMPTY.startsWith(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.rangeEquals(15, byteArray0, 21, 15);
      Inflater inflater0 = new Inflater(false);
      byteString0.toAsciiUppercase();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByteString((long) 21);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charset0.encode(charBuffer0);
      byteString0.EMPTY.string(charset0);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        byteString0.substring(4228);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[text=**]", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOf(byteString0);
      hashingSink0.flush();
      Inflater inflater0 = new Inflater(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-37);
      byteString0.indexOf(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get((byte)39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      hashingSink0.close();
      buffer0.indexOf(byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteString byteString1 = realBufferedSource0.readByteString();
      ByteString byteString2 = byteString1.toAsciiUppercase();
      ByteString byteString3 = hashingSink0.hash();
      int int0 = byteString3.compareTo(byteString1);
      assertEquals(1, int0);
      
      int int1 = byteString2.size();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Inflater inflater0 = new Inflater();
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)50;
      byteArray0[4] = (byte)3;
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte)3, (int) (byte)62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=3 byteCount=62
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteString.encodeUtf8("SHA-1");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        ByteString.read(mockFileInputStream0, 26);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.sha1();
      byte[] byteArray1 = new byte[0];
      ByteString byteString1 = new ByteString(byteArray1);
      byteString1.toAsciiLowercase();
      byteString1.EMPTY.toString();
      // Undeclared exception!
      try { 
        byteString0.hmacSha256(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8(".mNW");
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null, (-2616));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("source exhausted prematurely", charset0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)0, 2291);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(28)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("T");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)45;
      byteArray0[0] = (byte)45;
      byteString0.EMPTY.base64Url();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (int) (byte)45, (int) (byte)45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ByteString.encodeUtf8("");
      byte byte0 = (byte)45;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-117);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteString.read(byteArrayInputStream0, 1);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("A[>X[r&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: A[>X[r&
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.decodeHex("");
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOf(byteString0);
      hashingSink0.flush();
      Inflater inflater0 = new Inflater(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)39;
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString1.write(buffer0);
      byteString1.toString();
      ByteString.decodeBase64("");
      ByteString byteString2 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString3 = hashingSource0.hash();
      byteString1.equals(byteString3);
      int int0 = ByteString.codePointIndexToCharIndex("", (byte)39);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("charset == null", 9);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("$@e6tfH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: $@e6tfH
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = null;
      ByteString byteString0 = new ByteString((byte[]) null);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("", charset0);
      int int0 = 33;
      byteString1.EMPTY.hashCode();
      int int1 = (-1354);
      // Undeclared exception!
      try { 
        byteString1.hmacSha256(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOf(byteString0);
      byte byte0 = (byte)39;
      hashingSink0.flush();
      Inflater inflater0 = new Inflater(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)39;
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString0.toString();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString2 = ByteString.encodeString("[hex=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855]", charset0);
      byteString2.toString();
      byteString1.toString();
      ByteString.decodeBase64("[size=70 text=[hex=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b785\u2026]");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        ByteString.read(sequenceInputStream0, (byte)39);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[0] = (byte) (-72);
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 1566);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      hashingSink0.close();
      buffer0.indexOf(byteString0);
      hashingSink0.flush();
      Inflater inflater0 = new Inflater(true);
      buffer0.writeDecimalLong(2900L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-12);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte) (-12);
      byteArray0[8] = (byte) (-12);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.substring((int) (byte)0);
      byteString1.toString();
      byteString0.toString();
      byte[] byteArray1 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      sequenceInputStream0.available();
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (byte) (-12));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -12
         //
         verifyException("okio.ByteString", e);
      }
  }
}
