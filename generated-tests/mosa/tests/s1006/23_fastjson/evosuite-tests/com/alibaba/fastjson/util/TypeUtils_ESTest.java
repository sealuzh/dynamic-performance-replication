/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:23:02 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.DateTimeException;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      TypeUtils.isTransient((Method) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(typeUtils0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.util.TypeUtils@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.unwrapOptional(class0);
      TypeUtils.clearClassMapping();
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, (Map<String, String>) null);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      TypeUtils.getSerializeFeatures(class0);
      Type type0 = TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TypeUtils.clearClassMapping();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(stringIndexOutOfBoundsException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.StringIndexOutOfBoundsException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TypeUtils.isNumber("<^18$S+xFSO3o!Q");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<Rectangle> class0 = Rectangle.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
      TypeUtils.isGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Method> class0 = Method.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      SQLDataException sQLDataException0 = new SQLDataException("ZS#KI", "ZS#KI");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(sQLDataException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.sql.SQLDataException: ZS#KI
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TypeUtils.clearClassMapping();
      NumberFormatException numberFormatException0 = new NumberFormatException();
      Class<Integer> class0 = Integer.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      Class<Dimension> class1 = Dimension.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "o", fieldArray0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getRawClass(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<InternalError> class1 = InternalError.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.isKotlin(class0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.getClassFromMapping("");
      boolean boolean0 = TypeUtils.isPath(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.unwrapOptional(class0);
      TypeUtils.toLocale("I");
      ParserConfig parserConfig0 = new ParserConfig();
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      String string0 = TypeUtils.decapitalize("fastjson.parser.autoTypeSupport");
      assertEquals("fastjson.parser.autoTypeSupport", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<JobAttributes> class0 = JobAttributes.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("fastjson.parser.autoTypeAccept", hashtable0);
      FieldInfo fieldInfo0 = new FieldInfo("fastjson.parser.deny", class0, class0, class0, (Field) null, 1478, 1478, 1478);
      parserConfig0.getDeserializer(fieldInfo0);
      Class<DataTruncation> class1 = DataTruncation.class;
      ThrowableDeserializer throwableDeserializer0 = null;
      try {
        throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.sql.DataTruncation
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PageAttributes.ColorType pageAttributes_ColorType0 = PageAttributes.ColorType.MONOCHROME;
      PageAttributes.MediaType pageAttributes_MediaType0 = PageAttributes.MediaType.ISO_B4;
      PageAttributes.OrientationRequestedType pageAttributes_OrientationRequestedType0 = PageAttributes.OrientationRequestedType.PORTRAIT;
      PageAttributes.OriginType pageAttributes_OriginType0 = PageAttributes.OriginType.PRINTABLE;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.clearClassMapping();
      long long0 = TypeUtils.fnv1a_64_lower("@5<Azq");
      assertEquals(5963507717260126068L, long0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<Object> class0 = Object.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      TypeUtils.isGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      TypeUtils.getGenericParamType(class0);
      TypeUtils.unwrapOptional((Type) null);
      TypeUtils.unwrapOptional((Type) null);
      Class<Long> class1 = Long.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, "JX]:%l_/j0F", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.unwrapOptional(class0);
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.isKotlin(class0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.getClassFromMapping("");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TypeUtils.clearClassMapping();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Throwable> class0 = Throwable.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.Throwable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NumberFormatException numberFormatException0 = new NumberFormatException();
      numberFormatException0.fillInStackTrace();
      Class<Integer> class0 = Integer.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("]<4ZNhs-c@{'}BV");
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("]<4ZNhs-c@{'}BV", numberFormatException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("]<4ZNhs-c@{'}BV");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"]<4ZNhs-c@{'}BV\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(timeZone0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(javaObjectDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils.isHibernateInitialized((Object) null);
      TypeUtils.castToBigInteger((Object) null);
      Class<Float> class0 = Float.class;
      TypeUtils.isProxy(class0);
      Locale locale0 = Locale.CANADA_FRENCH;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("NULL", dateFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      TypeUtils.castToInt((Object) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.clearClassMapping();
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TypeUtils.getClassFromMapping("&Nb,?");
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.util.List<java.lang.String>
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "";
      TypeUtils.loadClass("");
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Point> class1 = Point.class;
      TypeUtils.getParserFeatures(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.awt.Point
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double double0 = new Double((-964.709571374));
      Double.isFinite((-964.709571374));
      Class<SQLException> class0 = SQLException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) double0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.isKotlin(class0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.isPath(class1);
      String string0 = TypeUtils.decapitalize("$X*m{p~8VN}UAim");
      assertEquals("$X*m{p~8VN}UAim", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("L{Y=>]~V[Jo,Z(Lz)7", false);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      Class<Byte> class0 = Byte.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = null;
      TypeUtils.decapitalize((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(14, true);
      Class<TimeUnit> class0 = TimeUnit.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.getParserFeatures(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      linkedHashMap0.remove((Object) propertyNamingStrategy0);
      LinkedHashSet<NoClassDefFoundError> linkedHashSet0 = new LinkedHashSet<NoClassDefFoundError>();
      Class<PropertyProcessableDeserializer> class1 = PropertyProcessableDeserializer.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.cast((Object) linkedHashMap0, class1, parserConfig0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NumberDeserializer numberDeserializer0 = new NumberDeserializer();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(numberDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.deserializer.NumberDeserializer@3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = TypeUtils.getRawClass(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      long long0 = TypeUtils.fnv1a_64("fastjson.parser.autoTypeSupport");
      assertEquals((-852158131015463758L), long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.DoubleSerializer", classLoader1, true);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      TypeUtils.getKoltinConstructorParameters(class1);
      String string0 = TypeUtils.castToString(aSMDeserializerFactory0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.DoubleSerializer", classLoader1, false);
      assertNotNull(class0);
      
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertNotNull(class1);
      assertEquals("class java.lang.Object", class1.toString());
      
      boolean boolean0 = TypeUtils.isNumber("/mC!)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.loadClass("Ljava/lang/Object;Ljava/lang/String;");
      TypeUtils.unwrapOptional((Type) null);
      String string0 = TypeUtils.decapitalize("Ljava/lang/Object;Ljava/lang/String;");
      assertEquals("ljava/lang/Object;Ljava/lang/String;", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1408), "Ljava/lang/Object;Ljava/lang/String;");
      simpleTimeZone0.setRawOffset((-72));
      TypeUtils.isHibernateInitialized(simpleTimeZone0);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.loadClass("Ljava/lang/Object;Ljava/lang/String;");
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      TypeUtils.loadClass((String) null, classLoader1, true);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(type0);
      
      boolean boolean0 = TypeUtils.isNumber("/mC!)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Type type0 = TypeUtils.getCollectionItemType(class0);
      assertNotNull(type0);
      
      Type type1 = TypeUtils.unwrapOptional(class0);
      assertNotSame(type1, type0);
      
      Locale locale0 = TypeUtils.toLocale("Ljava/lang/Object;Ljava/lang/String;;");
      assertEquals("ljava/lang/object;ljava/lang/string;;", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      TypeUtils.isProxy(class0);
      BreakIterator.getCharacterInstance();
      TypeUtils.castToBoolean((Object) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(parameterizedTypeImpl0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      Class<Annotation> class1 = Annotation.class;
      Class<Long> class2 = Long.class;
      Class<Annotation> class3 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class3);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("fil");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : fil
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      TypeUtils typeUtils0 = new TypeUtils();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<StringCharacterIterator> class1 = StringCharacterIterator.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(671);
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) treeMap0, propertyNamingStrategy1);
      boolean boolean1 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertEquals(1, class1.getModifiers());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.getParserFeatures(class0);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("fi", ">$M\"WfKq)");
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("fastjson.parser.autoTypeAccept");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : fastjson.parser.autoTypeAccept
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      TypeUtils.loadClass("hz.IRa&5}eR0/", classLoader1, false);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(type0);
      
      boolean boolean0 = TypeUtils.isNumber("hz.IRa&5}eR0/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TypeUtils.clearClassMapping();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("L", classLoader0, false);
      TypeUtils.isNumber("L");
      DecimalFormat decimalFormat0 = new DecimalFormat("/**/");
      Class<IllegalThreadStateException> class0 = IllegalThreadStateException.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      TimeZone timeZone0 = TimeZone.getDefault();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeZone0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<JobAttributes> class0 = JobAttributes.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      Class<?> class1 = TypeUtils.loadClass("javax.persistence.ManyToMany");
      TypeUtils.isProxy(class1);
      TypeUtils.getCollectionItemClass(class0);
      JSONPDeserializer jSONPDeserializer0 = JSONPDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(jSONPDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.deserializer.JSONPDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TypeUtils.clearClassMapping();
      LinkedHashSet<NoClassDefFoundError> linkedHashSet0 = new LinkedHashSet<NoClassDefFoundError>();
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      TypeUtils.cast((Object) null, class0, parserConfig0);
      TypeUtils.getGenericParamType(class0);
      Class<Annotation> class1 = Annotation.class;
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<Throwable> class0 = Throwable.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      TypeUtils.isPath(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.sql.BatchUpdateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      TypeUtils.isTransient((Method) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(310);
      TypeUtils.isNumber("9=d]>?$*Gukh9B");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertTrue(parserConfig0.isAsmEnable());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MockThread mockThread0 = new MockThread("(C)J");
      MockThread mockThread1 = new MockThread(mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("hashCode", classLoader0, true);
      TypeUtils.getCollectionItemType((Type) null);
      DecimalFormat decimalFormat0 = new DecimalFormat("fastjson.compatibleWithFieldName");
      assertEquals("-fastjson", decimalFormat0.getNegativePrefix());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      TypeUtils.getSerializeFeatures(class0);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      Class class2 = (Class)TypeUtils.unwrapOptional(class0);
      Class<StackOverflowError> class3 = StackOverflowError.class;
      TypeUtils.getGenericParamType(class2);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class2;
      typeArray0[1] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class1);
      ParserConfig parserConfig0 = new ParserConfig();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      TypeUtils.clearClassMapping();
      Class<Point> class1 = Point.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig parserConfig1 = ParserConfig.global;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, (PropertyNamingStrategy) null);
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("yyyy\u5E74M\u6708d\u65E5 H\u65F6m\u5206s\u79D2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : yyyy\u5E74M\u6708d\u65E5 H\u65F6m\u5206s\u79D2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "Ljava/lang/Object;Ljava/lang/String;";
      TypeUtils typeUtils0 = new TypeUtils();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(mockSimpleDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : org.evosuite.runtime.mock.java.text.MockSimpleDateFormat@a9427c06
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      TypeUtils.isKotlin(class0);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(type0);
      
      boolean boolean0 = TypeUtils.isNumber("cvmV?YO\"");
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      Random.setNextRandom(24);
      TypeUtils.getClassFromMapping("cvmV?YO\"");
      Class<BatchUpdateException> class2 = BatchUpdateException.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<Double> class3 = Double.TYPE;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class3;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class1;
      typeArray0[3] = (Type) class3;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      parameterizedTypeImpl0.getTypeName();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      int int0 = Calendar.YEAR;
      TypeUtils.decapitalize("");
      TypeUtils.decapitalize("");
      boolean boolean1 = TypeUtils.isNumber("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, true, propertyNamingStrategy0);
      Class<NumberFormat> class1 = NumberFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0);
      LinkedHashSet<NoClassDefFoundError> linkedHashSet0 = new LinkedHashSet<NoClassDefFoundError>();
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.isProxy(class1);
      System.setCurrentTimeMillis((-1580386065683472715L));
      Class<DecimalFormatSymbols> class2 = DecimalFormatSymbols.class;
      List<FieldInfo> list1 = TypeUtils.computeGettersWithFieldBase(class2, linkedHashMap0, true, (PropertyNamingStrategy) null);
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      Integer integer0 = new Integer((-453));
      Float float0 = new Float((float) (-453));
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(list0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      TypeUtils.getClassFromMapping("&Nb,?");
      TypeUtils.isProxy(class0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("istoString", "istoString");
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      TypeUtils.castToTimestamp((Object) null);
      TypeUtils.getRawClass(class0);
      Class<MessageFormat> class1 = MessageFormat.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      Type type0 = TypeUtils.unwrapOptional((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      Class<Byte> class0 = Byte.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1408), "Ljava/lang/Object;Ljava/lang/String;");
      simpleTimeZone0.setRawOffset((-72));
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("Ljava/lang/Object;Ljava/lang/String;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ljava/lang/Object;Ljava/lang/String;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      Class<Exception> class0 = Exception.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      assertEquals(0, javaBeanInfo0.parserFeatures);
      
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("fastjson.parser.deny", (ClassLoader) aSMClassLoader1, true);
      Class<Annotation> class1 = Annotation.class;
      Class<SQLSyntaxErrorException> class2 = SQLSyntaxErrorException.class;
      TypeUtils.getAnnotation((Class<?>) class2, class1);
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TypeUtils.getClassFromMapping("javax.xml.datatype.XMLGregorianCalendar");
      Class<IllegalArgumentException> class0 = IllegalArgumentException.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.IllegalArgumentException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.fnv1a_64_lower("0x'^cAe85;^\"E");
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("com.alibaba.fastjson.serializer.DoubleSerializer");
      Class<Time> class0 = Time.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "0x'^cAe85;^\"E", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.Time
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.getClassFromMapping("getgetCrrCency");
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<InstantiationError> class0 = InstantiationError.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build(class0, (Type) null, (PropertyNamingStrategy) null, true, false);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      TypeUtils.isTransient((Method) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(310);
      Class<Rectangle> class1 = Rectangle.class;
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertEquals(1, class2.getModifiers());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.getClassFromMapping("getgetCrrCency");
      TypeUtils.getGenericParamType((Type) null);
      TypeUtils typeUtils0 = new TypeUtils();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<InstantiationError> class0 = InstantiationError.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build(class0, (Type) null, (PropertyNamingStrategy) null, true, false);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0);
      ClassLoader classLoader1 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("RoundingMode", classLoader1, false);
      Class<Long> class1 = Long.class;
      TypeUtils.isProxy(class1);
      DataTruncation dataTruncation0 = new DataTruncation(57, false, false, 17, 49);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("RoundingMode", "fastjson.parser.autoTypeAccept");
      TypeUtils.decapitalize("writeBytes error.");
      java.sql.Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1408), "Ljava/lang/Object;Ljava/lang/String;");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Integer integer0 = new Integer((-453));
      Float float0 = new Float((float) (-1408));
      TypeUtils.castToBigDecimal(linkedHashMap0);
      linkedHashMap0.getOrDefault(simpleTimeZone0, "I$|bNubUB4K?{4<");
      InterruptedException interruptedException0 = new InterruptedException("I$|bNubUB4K?{4<");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      TypeUtils.castToLong((Object) null);
      MockThread mockThread0 = new MockThread();
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.unwrapOptional(class0);
      // Undeclared exception!
      try { 
        TypeUtils.toLocale("_");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("fil", "fil");
      weakHashMap0.put("java.awt.RectaNgle", "java.awt.RectaNgle");
      Integer integer0 = new Integer((-1969419888));
      Float float0 = new Float(0.0F);
      Properties properties0 = new Properties();
      TypeUtils.castToBigDecimal(properties0);
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.cast((Object) weakHashMap0, class0, (ParserConfig) null);
      Class<SQLDataException> class1 = SQLDataException.class;
      boolean boolean0 = TypeUtils.isProxy(class1);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((-2355L));
      long long0 = TypeUtils.fnv1a_64_lower("Z {_S9LP[c0");
      assertEquals((-1397517100266705286L), long0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1408), "Ljava/lang/Object;Ljava/lang/String;");
      simpleTimeZone0.setRawOffset((-61));
      TypeUtils.isHibernateInitialized(simpleTimeZone0);
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      TypeUtils.isTransient((Method) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TypeUtils.fnv1a_64_lower("Ljava/lang/Object;Ljava/lang/String;");
      Class<Double> class0 = Double.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.setPackageAssertionStatus("yyyy\u5E74M\u6708d\u65E5 H\u65F6m\u5206s\u79D2", true);
      Class<DateFormatSymbols> class1 = DateFormatSymbols.class;
      TypeUtils.computeGetters(class1, (Map<String, String>) null);
      LinkedHashSet<NoClassDefFoundError> linkedHashSet0 = new LinkedHashSet<NoClassDefFoundError>();
      ParserConfig parserConfig0 = ParserConfig.global;
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError();
      Class<Boolean> class2 = Boolean.class;
      TypeUtils.isProxy(class2);
      System.setCurrentTimeMillis((-1L));
      Class<DecimalFormatSymbols> class3 = DecimalFormatSymbols.class;
      TypeUtils.computeGettersWithFieldBase(class3, (Map<String, String>) null, false, (PropertyNamingStrategy) null);
      TypeUtils.computeGetters(class3, (Map<String, String>) null, true);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "Ljava/lang/Object;Ljava/lang/String;";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1408), "Ljava/lang/Object;Ljava/lang/String;");
      simpleTimeZone0.setRawOffset((-72));
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils typeUtils1 = new TypeUtils();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("Ljava/lang/Object;Ljava/lang/String;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Ljava/lang/Object;Ljava/lang/String;
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("fil", "fil");
      TypeUtils typeUtils0 = new TypeUtils();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Integer integer0 = new Integer(38);
      TypeUtils.castToLong(integer0);
      TypeUtils.loadClass("~f$n#=<uC?@~WRQ");
      BreakIterator.getCharacterInstance();
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext((Class<?>) null, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.setPackageAssertionStatus("yyyy\u5E74M\u6708d\u65E5 H\u65F6m\u5206s\u79D2", true);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0, false, true);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.isTransient((Method) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(539);
      TypeUtils.getCollectionItemType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("yyyy\u5E74M\u6708d\u65E5 H\u65F6m\u5206s\u79D2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.castToChar((Object) null);
      Class<TimeUnit> class0 = TimeUnit.class;
      Field[] fieldArray0 = new Field[1];
      Class<ThrowableDeserializer> class1 = ThrowableDeserializer.class;
      Class<SQLRecoverableException> class2 = SQLRecoverableException.class;
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("getshortValue", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("KhY#,", class1, class2, class2, (Field) null, 131, 131, 131);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getField();
      fieldArray0[0] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "KhY#,", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      linkedHashMap0.remove((Object) propertyNamingStrategy0);
      LinkedHashSet<NoClassDefFoundError> linkedHashSet0 = new LinkedHashSet<NoClassDefFoundError>();
      TypeUtils.isKotlin(class0);
      TypeUtils.getClass((Type) class0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      TypeUtils.decapitalize((String) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.checkPrimitiveArray((GenericArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassLoader classLoader0 = null;
      TypeUtils.loadClass("ha", (ClassLoader) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ha");
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)13;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-97);
      Class<Date> class1 = Date.class;
      TypeUtils.isKotlin(class1);
      TypeUtils.castToChar((Object) null);
      TypeUtils.getClass((Type) class1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NULL");
      TypeUtils.decapitalize("ha");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("ha");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : ha
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("fil", "fil");
      weakHashMap0.put("fil", "fil");
      LinkedHashSet<NoClassDefFoundError> linkedHashSet0 = new LinkedHashSet<NoClassDefFoundError>();
      ParserConfig parserConfig0 = ParserConfig.global;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("fil");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fil\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      javaBeanSerializer0.getType();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class1 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<StackOverflowError> class2 = StackOverflowError.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      InstantiationError instantiationError0 = new InstantiationError();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(instantiationError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InstantiationError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)91;
      Constructor<SimpleDateFormat>[] constructorArray0 = (Constructor<SimpleDateFormat>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      TypeUtils.castToShort((Object) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.castToString((Object) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TypeUtils.castToSqlTime((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<Double> class0 = Double.TYPE;
      TypeUtils.isGenericParamType(class0);
      LinkedHashSet<NoClassDefFoundError> linkedHashSet0 = new LinkedHashSet<NoClassDefFoundError>();
      ParserConfig parserConfig0 = ParserConfig.global;
      Class<PropertyProcessableDeserializer> class1 = PropertyProcessableDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fastjson.parser.deny", class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("yyyy\u5E74M\u6708d\u65E5 H\u65F6m\u5206s\u79D2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yyyy\u5E74M\u6708d\u65E5 H\u65F6m\u5206s\u79D2\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<Rectangle> class0 = Rectangle.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      TypeUtils.isGenericParamType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      Byte.toUnsignedInt((byte)11);
      TypeUtils.loadClass("]vP REH$MVa9");
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.isGenericParamType((Type) null);
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(929L);
      TypeUtils.fnv1a_64_lower("unclosed.str.lit");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException();
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) sQLSyntaxErrorException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class2 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<StackOverflowError> class3 = StackOverflowError.class;
      parserConfig0.createJavaBeanDeserializer(class3, class1);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class2);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.clearClassMapping();
      Class<ChronoLocalDate> class4 = ChronoLocalDate.class;
      Class<Annotation> class5 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class4, class5);
      TypeUtils.castToBigDecimal((Object) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getRawClass(parameterizedTypeImpl0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<StackOverflowError> class2 = StackOverflowError.class;
      parserConfig0.createJavaBeanDeserializer(class2, class1);
      Type[] typeArray0 = new Type[1];
      parserConfig0.setAsmEnable(true);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, class1);
      ParserConfig parserConfig1 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl1, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.setPackageAssertionStatus("h", true);
      // Undeclared exception!
      try { 
        TypeUtils.loadClass("[3Y>m@4phU.2X", (ClassLoader) aSMClassLoader0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      System.setCurrentTimeMillis((-1068L));
      MockThread mockThread0 = new MockThread();
      mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.getParent();
      TypeUtils.isNumber("+pG_Z|\"=-SI{)#4C");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1408), "Ljava/lang/Object;Ljava/lang/String;");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Integer integer0 = new Integer((-453));
      Float float0 = new Float((float) (-1408));
      TypeUtils.castToBigDecimal(linkedHashMap0);
      linkedHashMap0.getOrDefault(simpleTimeZone0, "I$|bNubUB4K?{4<");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      TypeUtils.unwrapOptional((Type) null);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockHijrahDate0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1408), "Ljava/lang/Object;Ljava/lang/String;");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Integer integer0 = new Integer((-453));
      Float float0 = new Float((float) (-1408));
      TypeUtils.castToBigDecimal(linkedHashMap0);
      linkedHashMap0.getOrDefault(simpleTimeZone0, "I$|bNubUB4K?{4<");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Class<Short> class0 = Short.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      Type type0 = TypeUtils.unwrapOptional(class1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockHijrahDate0, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@20d71331
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TypeUtils.castToFloat((Object) null);
      PageAttributes.ColorType pageAttributes_ColorType0 = PageAttributes.ColorType.COLOR;
      PageAttributes.MediaType pageAttributes_MediaType0 = PageAttributes.MediaType.ENV_INVITE;
      ClassLoader.getSystemClassLoader();
      TypeUtils.clearClassMapping();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockGregorianCalendar0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      LinkedHashSet<NoClassDefFoundError> linkedHashSet0 = new LinkedHashSet<NoClassDefFoundError>();
      ParserConfig parserConfig0 = ParserConfig.global;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      System.setCurrentTimeMillis((-1068L));
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      TypeUtils.unwrapOptional((Type) null);
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      Double double0 = new Double((-1068L));
      Double.min(0.0, (-729.15));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : -1068.0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = (-1408);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      TypeUtils.castToBytes("lon");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      String string0 = "&";
      // Undeclared exception!
      try { 
        ZoneOffset.of("&");
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid ID for ZoneOffset, invalid format: &
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class2 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      ParserConfig parserConfig0 = new ParserConfig();
      Class<StackOverflowError> class3 = StackOverflowError.class;
      parserConfig0.createJavaBeanDeserializer(class3, class1);
      Type[] typeArray0 = new Type[1];
      parserConfig0.setAsmEnable(true);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, class1);
      ParserConfig parserConfig1 = ParserConfig.global;
      ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl(typeArray0, class3, class2);
      ParserConfig parserConfig2 = ParserConfig.global;
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.deny", "fastjson.parser.autoTypeAccept");
      parameterizedTypeImpl2.getTypeName();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) httpCookie0, (ParameterizedType) parameterizedTypeImpl2, parserConfig2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"discard\":false,\"httpOnly\":false,\"maxAge\":-1,\"name\":\"fastjson.parser.deny\",\"secure\":false,\"value\":\"fastjson.parser.autoTypeAccept\",\"version\":1}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
