/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 00:50:20 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.ObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.FileDescriptor;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.IsoChronology;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap");
      TypeUtils.isHibernateInitialized((Object) null);
      // Undeclared exception!
      try { 
        TypeUtils.getParserFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("Ljava.awt.Color");
      assertNull(class0);
      
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      boolean boolean0 = TypeUtils.isKotlin(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals("class java.util.BitSet", class1.toString());
      
      String string0 = TypeUtils.decapitalize("PATTERN_WEEK_OF_MONTH");
      assertEquals("PATTERN_WEEK_OF_MONTH", string0);
      
      boolean boolean0 = TypeUtils.isNumber("PATTERN_WEEK_OF_MONTH");
      boolean boolean1 = TypeUtils.isHibernateInitialized("PATTERN_WEEK_OF_MONTH");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("~H7?KD`6{", "", (-59432204));
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(sQLSyntaxErrorException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.SQLSyntaxErrorException: ~H7?KD`6{
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      TypeUtils.getCollectionItemType(class1);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : char
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) noSuchMethodError0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLIntegrityConstraintViolationException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("ez!&qoTL/Kc5N7", classLoader0, false);
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      Class<?> class0 = TypeUtils.getClass(type0);
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      TypeUtils.isPath(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : class java.lang.NoSuchFieldError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TypeUtils.loadClass("k|`");
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException(" ");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ParserConfig.global = parserConfig0;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) negativeArraySizeException0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals("class java.util.BitSet", class1.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(type0);
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      String string0 = ", pos ";
      Class<RuleBasedCollator> class1 = RuleBasedCollator.class;
      Field[] fieldArray0 = new Field[3];
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>(hashtable0);
      ParserConfig.getFieldFromCache("Ljava.lang.AutoCloseable", concurrentHashMap0);
      fieldArray0[0] = null;
      ParserConfig.getFieldFromCache("Ljava.lang.AutoCloseable", concurrentHashMap0);
      fieldArray0[1] = null;
      ParserConfig.getFieldFromCache("Ljava.awt.Rectangle", concurrentHashMap0);
      fieldArray0[2] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, ", pos ", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      TypeUtils.isPath(class0);
      TypeUtils.clearClassMapping();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Byte byte0 = new Byte((byte)43);
      TypeUtils.castToDouble(byte0);
      Class<JobAttributes> class0 = JobAttributes.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "W[& i", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("JB,", class0, class0, class0, (Field) null, (-1173), (byte)43, (-1173));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Type type0 = beanContext0.getFieldType();
      Class<?> class1 = TypeUtils.getRawClass(type0);
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertFalse(class2.isArray());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("java.beans.Transient");
      assertNotNull(class0);
      
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader0.setDefaultAssertionStatus(true);
      Class<?> class0 = TypeUtils.loadClass("com.alibaba.fastjson.serializer.MiscCodec", (ClassLoader) aSMClassLoader0);
      ParserConfig parserConfig0 = new ParserConfig();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      TypeUtils.cast((Object) null, (Type) class0, parserConfig0);
      int int0 = 1732;
      Integer integer0 = new Integer(1732);
      ArrayList<FieldInfo> arrayList0 = new ArrayList<FieldInfo>();
      Class<TimeUnit> class1 = TimeUnit.class;
      Field[] fieldArray0 = new Field[2];
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("Ljava.awt.Point", identityHashMap0);
      fieldArray0[0] = null;
      ParserConfig.getFieldFromCache("long", identityHashMap0);
      fieldArray0[1] = null;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class1, "fastjson.parser.autoTypeSupport", fieldArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      TypeUtils.castToLong("");
      TypeUtils.castToSqlTime((Object) null);
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      TypeUtils.getParserFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("k`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : k`
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertEquals(1041, class1.getModifiers());
      
      long long0 = TypeUtils.fnv1a_64_lower("Z");
      assertEquals((-5808527186339947923L), long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TypeUtils.loadClass("US");
      TypeUtils.fnv1a_64_lower("US");
      TypeUtils.getCollectionItemType((Type) null);
      TypeUtils.getKoltinConstructorParameters((Class) null);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      java.util.IdentityHashMap<String, Field> identityHashMap0 = new java.util.IdentityHashMap<String, Field>();
      boolean boolean0 = true;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) null, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) identityHashMap0, true, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Throwable throwable0 = null;
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException((Throwable) null);
      MockException mockException0 = new MockException(mockIllegalStateException0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "NnW$!,^H";
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("NnW$!,^H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : NnW$!,^H
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = TypeUtils.isNumber("applyName");
      assertFalse(boolean0);
      
      TypeUtils.getClassFromMapping("C;g2z:");
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      boolean boolean1 = TypeUtils.isPath(class0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)14;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = bigInteger1.negate();
      bigInteger0.modPow(bigInteger1, bigInteger1);
      BigInteger bigInteger3 = bigInteger0.multiply(bigInteger1);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.toPlainString();
      TypeUtils.castToLong(bigDecimal0);
      Class<LinkageError> class0 = LinkageError.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.getClassFromMapping("2002195470");
      bigInteger0.shiftRight((byte)119);
      MockThread mockThread0 = new MockThread();
      BigInteger bigInteger4 = bigInteger2.andNot(bigInteger1);
      bigInteger0.remainder(bigInteger3);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      bigInteger2.remainder(bigInteger4);
      classLoader0.setClassAssertionStatus("(F)Ljava/lang/Float;", true);
      TypeUtils.loadClass("Ljava.awt.Font", classLoader0, true);
      TypeUtils.castToTimestamp("2002195470");
      TypeUtils.castToByte(bigInteger2);
      TypeUtils.getRawClass(class0);
      TypeUtils.fnv1a_64_lower("(F)Ljava/lang/Float;");
      Class<?> class1 = TypeUtils.getClassFromMapping(".");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      TypeUtils.isPath(class0);
      TypeUtils.toLocale("i\\^:uR^mMprl|~r");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("i\\^:uR^mMprl|~r");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.getCollectionItemClass((Type) null);
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      TypeUtils.isGenericParamType(class0);
      TypeUtils.clearClassMapping();
      TypeUtils.getGenericParamType(class0);
      String string0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.fnv1a_64_lower((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TypeUtils.castToBoolean((Object) null);
      TypeUtils.castToSqlDate((Object) null);
      Class<Long> class0 = Long.TYPE;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<SQLTimeoutException> class0 = SQLTimeoutException.class;
      TypeUtils.isProxy(class0);
      TypeUtils.isKotlin(class0);
      short short0 = (short) (-2100);
      Short short1 = new Short((short) (-2100));
      short short2 = (short)39;
      Short.toUnsignedLong((short)39);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setDefaultAssertionStatus(false);
      parserConfig0.setDefaultClassLoader(classLoader0);
      Short.toUnsignedLong((short)39);
      parserConfig0.setAsmEnable(false);
      Short.toUnsignedLong((short) (-2100));
      parserConfig0.setAutoTypeSupport(false);
      ParserConfig.global = parserConfig0;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) short1, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTimeoutException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Constructor<SQLWarning>[] constructorArray0 = (Constructor<SQLWarning>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      Class<MapDeserializer> class0 = MapDeserializer.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.isPath(class0);
      Class<BatchUpdateException> class1 = BatchUpdateException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      String string0 = "p2W_)S@^Qj(LtDYI";
      weakHashMap0.put("C", "p2W_)S@^Qj(LtDYI");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      weakHashMap0.replaceAll(biFunction0);
      weakHashMap0.put("GF<5MaG&E0<", "3|?H9~~=Z-j");
      weakHashMap0.put((String) null, (String) null);
      weakHashMap0.replace("p2W_)S@^Qj(LtDYI", "o");
      weakHashMap0.put("GF<5MaG&E0<", "p2W_)S@^Qj(LtDYI");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, true);
      Class<Byte> class2 = Byte.class;
      TypeUtils.getParserFeatures(class2);
      weakHashMap0.put("", "Ljava.lang.AutoCloseable");
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, weakHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      TypeUtils.getClass((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TypeUtils.loadClass("%@wW0|8 [ZtTY Gtwc");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      String string0 = "=";
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader0.setClassAssertionStatus("=", true);
      classLoader0.setPackageAssertionStatus("Ljava.awt.Font", true);
      TypeUtils.loadClass("Ljava.awt.Font", classLoader0, false);
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) javaObjectDeserializer0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.SimpleTimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, false);
      Class<SQLTransientConnectionException> class1 = SQLTransientConnectionException.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<AtomicLong> class0 = AtomicLong.class;
      parserConfig0.checkAutoType("l:O.K&A5nT", class0, (-102));
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>(17, 17);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) concurrentHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      java.util.IdentityHashMap<SQLTransactionRollbackException, JSONPDeserializer> identityHashMap0 = new java.util.IdentityHashMap<SQLTransactionRollbackException, JSONPDeserializer>();
      Class<Throwable> class0 = Throwable.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Throwable throwable0 = TypeUtils.cast((Object) identityHashMap0, class0, parserConfig0);
      assertEquals("java.lang.Throwable", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "int");
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      TypeUtils.isPath(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("toS", ",_1nQ .Lt!=vW. ");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) null, false, propertyNamingStrategy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<LinkageError> class1 = LinkageError.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class1);
      Class<MockHijrahDate> class2 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) throwableDeserializer0, class2, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.isTransient((Method) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.Object@2f807b9f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.getDeserializer((Class<?>) class0, (Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<SecurityException> class0 = SecurityException.class;
      TypeUtils.getSerializeFeatures(class0);
      JSONObject jSONObject0 = new JSONObject(true);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Class<Boolean> class1 = Boolean.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Boolean
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("ms{-osV8*");
      WeakHashMap<NegativeArraySizeException, TypeNotPresentException> weakHashMap0 = new WeakHashMap<NegativeArraySizeException, TypeNotPresentException>();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("yyyy-MM-dd HH:mm:ss");
      SQLWarning sQLWarning0 = new SQLWarning("D-CT;JwB)FD", "isInitialized", negativeArraySizeException0);
      MockFile mockFile0 = new MockFile("parse number key error", "java.lang.AutoCloseable");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) sQLWarning0;
      objectArray0[1] = (Object) "^p7ULxr>jpqsSH!Cqb";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "isInitialized";
      mockPrintStream0.println((Object) "ms{-osV8*");
      objectArray0[4] = (Object) "^p7ULxr>jpqsSH!Cqb";
      Object object0 = new Object();
      BiFunction<Throwable, Object, TypeNotPresentException> biFunction0 = (BiFunction<Throwable, Object, TypeNotPresentException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any(java.lang.Throwable.class) , any());
      weakHashMap0.compute(negativeArraySizeException0, biFunction0);
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "parse number key error";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "^p7ULxr>jpqsSH!Cqb", objectArray0);
      negativeArraySizeException0.printStackTrace(printStream0);
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("ms{-osV8*", sQLWarning0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      typeNotPresentException0.printStackTrace((PrintWriter) mockPrintWriter0);
      negativeArraySizeException0.printStackTrace((PrintWriter) mockPrintWriter0);
      TypeNotPresentException typeNotPresentException1 = new TypeNotPresentException("ms{-osV8*", negativeArraySizeException0);
      BiFunction<Object, Object, TypeNotPresentException> biFunction1 = (BiFunction<Object, Object, TypeNotPresentException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashMap0.merge(negativeArraySizeException0, typeNotPresentException1, biFunction1);
      weakHashMap0.put(negativeArraySizeException0, typeNotPresentException0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) weakHashMap0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NegativeArraySizeException cannot be cast to java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      java.util.IdentityHashMap<MockGregorianCalendar, Properties> identityHashMap0 = new java.util.IdentityHashMap<MockGregorianCalendar, Properties>();
      Class<Long> class0 = Long.TYPE;
      Object object0 = TypeUtils.cast((Object) identityHashMap0, (Type) class0, parserConfig0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TypeUtils.unwrapOptional((Type) null);
      Class<MockDateFormat> class0 = MockDateFormat.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.isHibernateInitialized(typeUtils0);
      JSONObject jSONObject0 = new JSONObject();
      WeakHashMap<String, AtomicInteger> weakHashMap0 = new WeakHashMap<String, AtomicInteger>();
      JSONObject jSONObject1 = jSONObject0.fluentPutAll(weakHashMap0);
      jSONObject1.getTimestamp("1.2.46");
      Class<SimpleTimeZone> class0 = SimpleTimeZone.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Class<Date> class1 = Date.class;
      Class<SQLFeatureNotSupportedException> class2 = SQLFeatureNotSupportedException.class;
      FieldInfo fieldInfo0 = new FieldInfo("@type", class2, class1, class2, (Field) null, (-374), 58, 21);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      jSONObject1.put("._", (Object) null);
      Class<Annotation> class3 = Annotation.class;
      beanContext0.getAnnation(class3);
      Class<?> class4 = beanContext0.getBeanClass();
      Class<?> class5 = TypeUtils.getClass((Type) class4);
      TypeUtils.unwrapOptional(class0);
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.loadClass("@type");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) fieldInfo0, (Type) class5, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "is";
      VerifyError verifyError0 = new VerifyError("is");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(verifyError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.VerifyError: is
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Currency> class1 = Currency.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      concurrentHashMap0.put("Ljava.awt.Point", "Ljava.util.concurrent.ConcurrentSkipListMap");
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TypeUtils.loadClass("k|K");
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TypeUtils.toLocale("t]B|>K\"U8tVK");
      Class<LinkageError> class0 = LinkageError.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, false);
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      TypeUtils.loadClass("isordinal");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<RuntimeException> class0 = RuntimeException.class;
      TypeUtils.isPath(class0);
      TypeUtils.fnv1a_64_lower("date");
      TypeUtils.getClass((Type) class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Insets insets0 = new Insets(54, 46, 54, 54);
      insets0.clone();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.awt.Insets[top=54,left=46,bottom=54,right=54]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      TypeUtils.getSerializeFeatures(class0);
      String string0 = TypeUtils.castToString(class0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException("~:KXw>pgB+%$hd", (Throwable) null);
      Class<String> class0 = String.class;
      TypeUtils.castToJavaBean((Object) typeNotPresentException0, class0);
      TypeUtils.castToSqlDate((Object) null);
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TypeUtils.loadClass("k|`\"");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("k|`\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : k|`\"
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils.loadClass("*{n[It");
      TypeUtils.isGenericParamType(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<Collator> class2 = Collator.class;
      TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class2, (ParserConfig) null);
      String string0 = "T";
      UUID uUID0 = MockUUID.fromString("T");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(uUID0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : 00000000-0100-4000-8200-000003000000
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<Insets> class0 = Insets.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      JSONObject jSONObject0 = new JSONObject(3337);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Class<Collator> class1 = Collator.class;
      ParserConfig parserConfig0 = new ParserConfig();
      Collator collator0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject1, class1, parserConfig0);
      assertNull(collator0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Class<BitSet> class0 = BitSet.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) linkedHashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Class<Rectangle> class0 = Rectangle.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      java.sql.Date date0 = new java.sql.Date(2228L);
      date0.getTime();
      LocalDate localDate0 = date0.toLocalDate();
      java.sql.Date date1 = java.sql.Date.valueOf(localDate0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(date1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : 1970-01-01
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      Class<IndexOutOfBoundsException> class1 = IndexOutOfBoundsException.class;
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      TypeUtils.createCollection(type0);
      TypeUtils.getGenericParamType(class1);
      Object object0 = new Object();
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast(object0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      WeakHashMap<NegativeArraySizeException, TypeNotPresentException> weakHashMap0 = new WeakHashMap<NegativeArraySizeException, TypeNotPresentException>();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("yyyy-MM-dd HH:mm:ss");
      SQLWarning sQLWarning0 = new SQLWarning("D-CT;JwB)FD", "yyyy-MM-dd HH:mm:ss", negativeArraySizeException0);
      MockFile mockFile0 = new MockFile("parse number key error", "java.lang.AutoCloseable");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) sQLWarning0;
      objectArray0[1] = (Object) "^p7ULxr>jpqsSH!Cqb";
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) "ms{-osV8*";
      mockPrintStream0.println((Object) "ms{-osV8*");
      objectArray0[4] = (Object) "^p7ULxr>jpqsSH!Cqb";
      Object object0 = new Object();
      TypeNotPresentException typeNotPresentException0 = new TypeNotPresentException((String) null, negativeArraySizeException0);
      BiFunction<Throwable, Object, TypeNotPresentException> biFunction0 = (BiFunction<Throwable, Object, TypeNotPresentException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup0 = new ThreadGroup("[C");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "ms{-osV8*");
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, "javassist.util.proxy.ProxyObject");
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(thread0, "Ljava.awt.Point");
      MockThread mockThread1 = new MockThread(threadGroup1, thread0);
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread1);
      MockThread mockThread3 = new MockThread(threadGroup1, thread0, "D-CT;JwB)FD");
      ClassLoader classLoader0 = mockThread3.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass((String) null, classLoader0, true);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("#>-Q_REUl=Cy|L", mockIllegalAccessException0);
      MockThread mockThread0 = new MockThread();
      MockThread mockThread1 = new MockThread(mockThread0, "char");
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      mockThread1.getContextClassLoader();
      WeakHashMap<SQLNonTransientException, ClassLoader> weakHashMap0 = new WeakHashMap<SQLNonTransientException, ClassLoader>();
      weakHashMap0.put(sQLNonTransientConnectionException0, classLoader0);
      TypeUtils.castToFloat((Object) null);
      Class<java.sql.Date> class0 = java.sql.Date.class;
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = Comparator.comparingLong((ToLongFunction<? super String>) toLongFunction0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(comparator0);
      WeakHashMap<String, Field> weakHashMap1 = new WeakHashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) treeMap0, (Map<String, Field>) linkedHashMap0, false, propertyNamingStrategy0);
      LinkedHashMap<NegativeArraySizeException, SimpleDateFormat> linkedHashMap1 = new LinkedHashMap<NegativeArraySizeException, SimpleDateFormat>();
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(linkedHashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Byte byte0 = new Byte((byte)43);
      Byte.toUnsignedInt((byte)43);
      TypeUtils.castToDouble(byte0);
      Byte byte1 = TypeUtils.castToByte(byte0);
      assertTrue(byte1.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      TypeUtils.decapitalize(";Ljava/lang/Object;Ljava/lang/String;)Z");
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";Ljava/lang/Object;Ljava/lang/String;)Z";
      stringArray0[1] = ";Ljava/lang/Object;Ljava/lang/String;)Z";
      stringArray0[2] = ";Ljava/lang/Object;Ljava/lang/String;)Z";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(stringArray0);
      simplePropertyPreFilter0.getClazz();
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      VerifyError verifyError0 = new VerifyError("te");
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("%1K");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%1K\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 1;
      int int1 = 3914;
      MockDate mockDate0 = new MockDate(1, 3914, 1);
      java.sql.Date date0 = new java.sql.Date(3914);
      Period period0 = Period.of(3914, 3914, 3914);
      Period period1 = period0.negated();
      IsoChronology isoChronology0 = period1.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      java.sql.Date.valueOf(localDate0);
      date0.toLocalDate();
      int int2 = 105;
      int int3 = 3;
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(period1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : P-3914Y-3914M-3914D
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.unwrapOptional(class0);
      TypeUtils.loadClass("getgetDeclaringClass");
      TypeUtils.clearClassMapping();
      TypeUtils.getParserFeatures(class0);
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("]}Xjw}Ch?h", "]}Xjw}Ch?h", noSuchMethodError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(sQLInvalidAuthorizationSpecException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLInvalidAuthorizationSpecException: ]}Xjw}Ch?h
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TypeUtils.loadClass("k|`\"");
      TypeUtils.toLocale("Lk|K");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(mockMinguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@46fdd4f2
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ChoiceFormat choiceFormat0 = new ChoiceFormat("RybA=]");
      Locale locale0 = Locale.KOREAN;
      NumberFormat.getPercentInstance(locale0);
      TypeUtils.isHibernateInitialized(choiceFormat0);
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      boolean boolean0 = TypeUtils.isHibernateInitialized(outOfMemoryError0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.put("|^Qe$wGZTcNG", "|^Qe$wGZTcNG");
      String string0 = ",6P?[j|.zwx+";
      String string1 = "h# MNUf";
      treeMap0.putIfAbsent(",6P?[j|.zwx+", "h# MNUf");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0);
      StackOverflowError stackOverflowError0 = new StackOverflowError("@=");
      stackOverflowError0.fillInStackTrace();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(stackOverflowError0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jav\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<NoSuchFieldError> class0 = NoSuchFieldError.class;
      TypeUtils.isPath(class0);
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, false, propertyNamingStrategy0);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      InterruptedException interruptedException0 = new InterruptedException("l]k^!FvxCp");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(interruptedException0);
      Locale locale0 = TypeUtils.toLocale("'_r>FRJ_9iYo(");
      assertEquals("'_R>FRJ_9iYo(", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.toLocale("F\"{TU9J[_b");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(mockJapaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate@4fde5db7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("%1K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : %1K
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(1L);
      Float float0 = TypeUtils.castToFloat(atomicLong0);
      Boolean boolean0 = TypeUtils.castToBoolean(float0);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      TypeUtils.getParserFeatures(class0);
      Type type0 = TypeUtils.unwrapOptional(class0);
      Class<?> class1 = TypeUtils.getCollectionItemClass(type0);
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class1 = TypeUtils.getClass(type0);
      assertEquals("class [C", class1.toString());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("%1K");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("z`KW0s@)mT{F\"\"@");
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(noSuchFieldError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.NoSuchFieldError: z`KW0s@)mT{F\"\"@
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StackOverflowError stackOverflowError0 = new StackOverflowError();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      Type type0 = TypeUtils.unwrapOptional(class0);
      Type type1 = TypeUtils.unwrapOptional(type0);
      assertSame(type1, type0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("{v]%hb");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "{v]%hb", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{v]%hb\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      TypeUtils.isPath(class0);
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class0;
      typeArray0[7] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.clearAssertionStatus();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TypeUtils.castToBoolean((Object) null);
      Class<MockDate> class0 = MockDate.class;
      TypeUtils.isKotlin(class0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, class0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TypeUtils.loadClass("hashCode");
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<TimeUnit> class0 = TimeUnit.class;
      TypeUtils.isKotlin(class0);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError();
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[0]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noClassDefFoundError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse enum java.util.concurrent.TimeUnit error, value : java.lang.NoClassDefFoundError
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      WeakHashMap<MockCalendar, NoClassDefFoundError> weakHashMap0 = new WeakHashMap<MockCalendar, NoClassDefFoundError>();
      TypeUtils.castToTimestamp((Object) null);
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      Class<BitSet> class0 = BitSet.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      typeArray0[0] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], (Type) null);
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "dPRt4>%`", (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@745f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(2236L);
      Type[] typeArray0 = new Type[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Type type0 = null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      parameterizedTypeImpl0.getTypeName();
      classLoader0.setPackageAssertionStatus("o", true);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) bigDecimal0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@3c1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "float", class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      WeakHashMap<MockCalendar, NoClassDefFoundError> weakHashMap0 = new WeakHashMap<MockCalendar, NoClassDefFoundError>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<GridBagConstraints> class0 = GridBagConstraints.class;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.isProxy(class0);
      Class<MockGregorianCalendar> class1 = MockGregorianCalendar.class;
      TypeUtils.getParserFeatures(class1);
      ParameterizedType parameterizedType0 = null;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      classLoader0.setClassAssertionStatus("~", false);
      Constructor<BigDecimal>[] constructorArray0 = (Constructor<BigDecimal>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      Class<JSONObject> class2 = JSONObject.class;
      BeanContext beanContext0 = null;
      try {
        beanContext0 = new BeanContext(class2, (FieldInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.BeanContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      TypeUtils.getParserFeatures(class0);
      Constructor<SQLWarning>[] constructorArray0 = (Constructor<SQLWarning>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TypeUtils.fnv1a_64("can not cast to boolean, value : ");
      TypeUtils.clearClassMapping();
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("can not cast to boolean, value : ");
      Class<Byte> class0 = Byte.TYPE;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) noSuchFieldException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.NoSuchFieldException: can not cast to boolean, value : 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      Class<Float> class0 = Float.TYPE;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalStateException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      PropertyNamingStrategy propertyNamingStrategy0 = parserConfig0.propertyNamingStrategy;
      TypeUtils.castToFloat((Object) null);
      Class<NumberFormat> class1 = NumberFormat.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy1);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Class<ImageCapabilities> class0 = ImageCapabilities.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("f@E~j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : f@E~j
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Class<IllegalStateException> class0 = IllegalStateException.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Long> class1 = Long.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class java.lang.IllegalStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Class<Field> class0 = Field.class;
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("{v]%hb");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "{v]%hb", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.reflect.Field
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<Currency> class0 = Currency.class;
      Type type0 = TypeUtils.getCollectionItemType(class0);
      TypeUtils.getClass(type0);
      LinkedHashMap<String, ClientInfoStatus> linkedHashMap0 = new LinkedHashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("+H}m", "to", (-84972374), linkedHashMap0);
      InternalError internalError0 = new InternalError(sQLClientInfoException0);
      Class<SQLSyntaxErrorException> class1 = SQLSyntaxErrorException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) internalError0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLSyntaxErrorException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      WeakHashMap<MockCalendar, NoClassDefFoundError> weakHashMap0 = new WeakHashMap<MockCalendar, NoClassDefFoundError>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class0 = TypeUtils.getClass(type0);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(1L);
      TypeUtils.castToFloat(atomicLong0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getClass((Type) parameterizedTypeImpl0);
      assertFalse(class0.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("fE~j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : fE~j
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      AtomicLong atomicLong0 = new AtomicLong(1L);
      TypeUtils.castToFloat(atomicLong0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("!", classLoader0);
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      Class class0 = (Class)TypeUtils.unwrapOptional(type0);
      assertEquals("class java.lang.String", class0.toString());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<NoSuchFieldException> class0 = NoSuchFieldException.class;
      Class<FieldInfo> class1 = FieldInfo.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "fE~j", fieldArray0);
      FieldInfo fieldInfo0 = new FieldInfo("fE~j", class1, class0, type0, (Field) null, (-2918), (-2918), (-2918));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockJapaneseDate0, (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"mockedClassName\":\"java.time.chrono.JapaneseDate\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("Could not obtain an instance of DatatypeFactory.", "fastjson.parser.autoTypeSupport");
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLFeatureNotSupportedException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.sql.SQLFeatureNotSupportedException: Could not obtain an instance of DatatypeFactory.
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("k|`=\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"k|`=\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ThreadGroup threadGroup0 = new ThreadGroup("[S");
      MockThread mockThread0 = new MockThread(threadGroup0, "[S");
      MockThread mockThread1 = new MockThread(mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      Class<?> class0 = TypeUtils.loadClass("[S", classLoader0, true);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "[S", (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : [S
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TypeUtils.decapitalize((String) null);
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((Throwable) null);
      Type[] typeArray0 = new Type[2];
      Class<OptionalCodec> class0 = OptionalCodec.class;
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      Class<NullPointerException> class2 = NullPointerException.class;
      WeakHashMap<String, Field> weakHashMap0 = new WeakHashMap<String, Field>();
      ParserConfig.getFieldFromCache("oracle.sql.TIMESTAMP", weakHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("oracle.sql.TIMESTAMP", class1, class2, class2, (Field) null, 2746, 2746, (-127));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Class<?> class3 = beanContext0.getBeanClass();
      typeArray0[0] = (Type) class3;
      Class<Short> class4 = Short.TYPE;
      typeArray0[1] = (Type) class4;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], fieldInfo0.fieldClass);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.cast((Object) sQLFeatureNotSupportedException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException((String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Double> class0 = Double.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalThreadStateException0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.IllegalThreadStateException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("fE~j");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fE~j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<Field> class0 = Field.class;
      TypeUtils.isHibernateInitialized(class0);
      Long long0 = new Long(3547627781654598988L);
      java.sql.Date date0 = TypeUtils.castToSqlDate(long0);
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Short> class1 = Short.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class1, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : short
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "can not cast to Timestamp, value : ");
      TypeUtils.castToInt("");
      NoSuchFieldError noSuchFieldError0 = new NoSuchFieldError("");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(noSuchFieldError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.NoSuchFieldError: 
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Dm{sE$d+Q~V@Gd37h", (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Type[] typeArray0 = new Type[8];
      Class<DecimalFormat> class0 = DecimalFormat.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      typeArray0[0] = (Type) class1;
      FieldInfo fieldInfo0 = new FieldInfo("getFieldValue error.", class1, class0, typeArray0[0], (Field) null, 91, 91, (-204));
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      Class<?> class2 = beanContext0.getBeanClass();
      typeArray0[1] = (Type) class2;
      Class<?> class3 = TypeUtils.getClass((Type) fieldInfo0.declaringClass);
      typeArray0[2] = (Type) class3;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("mU el|^>y", classLoader0, false);
      typeArray0[3] = (Type) null;
      TypeUtils.loadClass("getFieldValue error.");
      typeArray0[4] = (Type) null;
      TypeUtils.loadClass("", classLoader0, false);
      typeArray0[5] = (Type) null;
      fieldInfo0.getDeclaredClass();
      typeArray0[6] = (Type) null;
      Class<ChronoLocalDate> class4 = ChronoLocalDate.class;
      BeanContext beanContext1 = new BeanContext(class4, fieldInfo0);
      Class<?> class5 = beanContext1.getFieldClass();
      typeArray0[7] = (Type) class5;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, (Type) null);
      Class<?> class6 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertFalse(class6.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<ThrowableDeserializer> class0 = ThrowableDeserializer.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0);
      Class<?> class1 = javaBeanSerializer0.getType();
      TypeUtils.getClass((Type) class1);
      Random.setNextRandom(103);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.castToByte((Object) null);
      TypeUtils.fnv1a_64_lower("o^>?");
      Class<SQLWarning> class2 = SQLWarning.class;
      boolean boolean0 = TypeUtils.isProxy(class2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.getClassFromMapping("C_*");
      TypeUtils.getCollectionItemClass((Type) null);
      Random.setNextRandom(47);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<?> class1 = TypeUtils.getClass(type0);
      assertEquals("class [F", class1.toString());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      WeakHashMap<MockCalendar, NoClassDefFoundError> weakHashMap0 = new WeakHashMap<MockCalendar, NoClassDefFoundError>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertSame(parameterizedTypeImpl0, type0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TypeUtils.toLocale("t]B|K-\"U8tVK");
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("t]B|K-\"U8tVK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : t]B|K-\"U8tVK
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      VerifyError verifyError0 = new VerifyError("");
      Byte byte0 = TypeUtils.castToByte("");
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<UUID> class0 = UUID.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, class0);
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "fE~j", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "WRITE_MAP_NULL_FEATURES";
      TypeUtils.fnv1a_64_lower("WRITE_MAP_NULL_FEATURES");
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache(")", (Map<String, Field>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Properties properties0 = new Properties();
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal(properties0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Character character0 = TypeUtils.castToChar("K");
      assertEquals('K', (char)character0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ConcurrentHashMap<SQLFeatureNotSupportedException, Method> concurrentHashMap0 = new ConcurrentHashMap<SQLFeatureNotSupportedException, Method>();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      TypeUtils.castToJavaBean((Object) concurrentHashMap0, class0);
      NoSuchFieldException noSuchFieldException0 = new NoSuchFieldException("s5f!");
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) noSuchFieldException0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      SQLTransactionRollbackException sQLTransactionRollbackException0 = TypeUtils.cast((Object) "", (Type) null, (ParserConfig) null);
      assertNull(sQLTransactionRollbackException0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("fE~j", classLoader0);
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      Class<Timestamp> class0 = Timestamp.class;
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) concurrentHashMap0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.sql.Timestamp
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Class<NoClassDefFoundError> class0 = NoClassDefFoundError.class;
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "G]uCpUx", fieldArray0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException(".&\"*(\u0005F!jS3");
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(illegalThreadStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.lang.IllegalThreadStateException: .&\"*(\u0005F!jS3
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      WeakHashMap<MockCalendar, NoClassDefFoundError> weakHashMap0 = new WeakHashMap<MockCalendar, NoClassDefFoundError>();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-57);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      TypeUtils.castToSqlTime(bigDecimal0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(15, "*@+W}|I~h", 9, 9, (-1073741823), (byte)120, (-266), (byte)37, 15, (byte) (-57));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start day of week 1073741823
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TypeUtils.loadClass("y");
      Boolean boolean0 = TypeUtils.castToBoolean("y");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("qkxxYIcZ]5V", "l$eP2c5:nl");
      identityHashMap0.put("$zyR-D6^crf?`C*,c}K", (String) null);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("getgetCause", 616);
      jSONReaderScanner0.scanUUID('J');
      jSONReaderScanner0.scanDouble('J');
      jSONReaderScanner0.close();
      Class<SQLRecoverableException> class3 = SQLRecoverableException.class;
      TypeUtils.castToJavaBean((Object) null, class3);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : interface java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
