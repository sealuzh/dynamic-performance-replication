/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 13:51:16 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.CharClass;
import com.google.re2j.CharGroup;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharClass_ESTest extends CharClass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign((int[][]) null, 873);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharGroup charGroup0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[8];
      CharClass charClass1 = charClass0.appendClassWithSign(intArray1, (-850));
      assertEquals(8, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      
      CharClass charClass2 = charClass0.appendFoldedRange(2297, 83);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      int int0 = 46;
      intArray0[0] = 46;
      int int1 = 2186;
      intArray0[1] = 2186;
      intArray0[2] = 242;
      intArray0[3] = (-3099);
      int int2 = 2410;
      intArray0[4] = 2410;
      intArray0[5] = 2385;
      int int3 = 42872;
      intArray0[6] = 42872;
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 2016);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-2908);
      intArray0[0] = (-2908);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-2908)}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 66639;
      intArray0[1] = (-2781);
      intArray0[2] = (-637);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 1320);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-1174);
      intArray0[0] = (-1174);
      intArray0[1] = 65049;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-1174), 65049}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass0.appendLiteral(83, 83);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 83);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string0 = charClass2.toString();
      assertEquals("[0x0-0x10ffff]", string0);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 1160;
      intArray0[3] = 159;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, (-1), 1160, 159}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 1159, 160, 1114111}, intArray0);
      
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign((int[][]) null, (-896));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(49, 49);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(93, 93);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[][] intArray0 = new int[2][5];
      String string1 = charClass0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("[0x5d]", string1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharGroup charGroup0 = null;
      boolean boolean0 = true;
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass0.negateClass();
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass2.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-408);
      intArray0[0] = (-408);
      int int1 = 1;
      intArray0[1] = 1;
      int int2 = (-295);
      intArray0[2] = (-295);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-408), 1, (-295)}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2);
      int int0 = 1343;
      intArray0[1] = 1343;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 65793;
      intArray0[5] = 0;
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-2), 1343, 0, 0, 65793, 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendRange(0, (-2528));
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-2), 1343, 0, 0, 65793, 0}, intArray0);
      
      int[][] intArray1 = new int[6][3];
      intArray1[0] = intArray0;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray1[1] = intArray2;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      charClass2.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral((-491), 2214);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[][] intArray0 = new int[8][3];
      int[] intArray1 = new int[6];
      intArray1[0] = (-491);
      intArray1[1] = (-491);
      intArray1[2] = (-491);
      intArray1[3] = 2214;
      intArray1[4] = (-491);
      intArray1[5] = 2214;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 2214;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 2214;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray1));
      
      intArray6[0] = 2214;
      intArray6[1] = (-491);
      intArray6[2] = 2214;
      intArray6[3] = 2214;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[0];
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray3));
      
      intArray0[6] = intArray7;
      int[] intArray8 = new int[5];
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray4));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray2));
      
      intArray8[0] = 2214;
      intArray8[1] = (-491);
      intArray8[2] = 2214;
      intArray8[3] = 2214;
      intArray8[4] = (-491);
      intArray0[7] = intArray8;
      // Undeclared exception!
      charClass2.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(53, 53);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray0, 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(12841, (-1191));
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
      
      CharClass charClass3 = charClass0.appendLiteral((-3396), (-3396));
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {1, 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 65;
      intArray0[3] = (-1);
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.appendLiteral(11712, 40);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[1] = 65;
      intArray1[2] = 11712;
      intArray1[3] = (-1);
      intArray1[4] = 65;
      CharClass charClass3 = charClass2.appendFoldedClass(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0, 65, 11712, (-1), 65, 0}, intArray1);
      
      CharClass charClass4 = charClass3.negateClass();
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray1.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0, 65, 11712, (-1), 65, 0}, intArray1);
      
      CharClass charClass5 = charClass4.appendClassWithSign(intArray0, 66639);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {0, 0, 65, (-1), 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 65, 11712, (-1), 65, 0}, intArray1);
      
      CharClass charClass6 = charClass0.appendFoldedRange((-1), 65);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass5.appendRange(119860, 40);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass1);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {0, 0, 65, (-1), 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 65, 11712, (-1), 65, 0}, intArray1);
      
      int[] intArray2 = charClass4.toArray();
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(10, intArray2.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 11711, 66, 96, 98, 11711, 0, 64, (-1), 1114111}, intArray2);
      assertArrayEquals(new int[] {0, 65, 11712, (-1), 65, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 120488;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-2223);
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        charClass1.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[][] intArray0 = new int[7][5];
      int int0 = 37;
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = 1656;
      CharClass charClass1 = charClass0.appendFoldedRange(1656, 1656);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[0][3];
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass1.appendNegatedTable(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass0.appendNegatedTable(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass3.appendGroup((CharGroup) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 2406;
      intArray0[0] = 2406;
      int int1 = 2838;
      intArray0[1] = 2838;
      int int2 = 91;
      intArray0[2] = 91;
      int int3 = (-141);
      intArray0[3] = (-141);
      String string0 = CharClass.charClassToString(intArray0, 0);
      assertEquals("[]", string0);
      assertEquals(4, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {2406, 2838, 91, (-141)}, intArray0);
      
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {2406, 2838, 91, (-141)}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 2838, (-140), 1114111}, intArray0);
      
      String string1 = charClass0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("[0x0-0xb16 0xffffff74-0x10ffff]", string1);
      assertEquals(4, intArray0.length);
      assertSame(charClass0, charClass1);
      assertNotNull(string1);
      assertArrayEquals(new int[] {0, 2838, (-140), 1114111}, intArray0);
      
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1087;
      intArray0[1] = (-602);
      intArray0[2] = 3124;
      intArray0[3] = 3835;
      intArray0[4] = (-758);
      int[][] intArray1 = new int[7][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 3835;
      intArray2[1] = (-758);
      intArray2[2] = 3835;
      intArray2[3] = 1087;
      intArray2[4] = (-602);
      intArray2[5] = 3124;
      intArray1[5] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 1087;
      intArray3[1] = 1087;
      intArray3[2] = 1087;
      intArray3[3] = (-2480);
      intArray3[4] = (-758);
      intArray3[5] = (-758);
      intArray3[6] = 1087;
      intArray3[7] = 3835;
      intArray3[8] = 1087;
      intArray1[6] = intArray3;
      CharClass charClass1 = charClass0.appendTable(intArray1);
      assertEquals(7, intArray1.length);
      assertSame(charClass1, charClass0);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass1);
      
      intArray0[5] = (-469);
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[6][8];
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 127462;
      intArray2[3] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass1.appendFoldedRange(0, (-569));
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass2.appendRange((-3488), 0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass1.appendClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = new CharClass(intArray0);
      assertFalse(charClass2.equals((Object)charClass0));
      assertFalse(charClass2.equals((Object)charClass1));
      assertEquals(0, intArray0.length);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass0.appendLiteral(1049, 1049);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass3.equals((Object)charClass2));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass3, charClass0);
      assertNotSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass1.appendFoldedClass(intArray0);
      assertFalse(charClass0.equals((Object)charClass2));
      assertFalse(charClass1.equals((Object)charClass2));
      assertFalse(charClass4.equals((Object)charClass2));
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertNotSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertNotSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertNotSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 932;
      intArray0[3] = (-1);
      intArray0[4] = (-1359);
      intArray0[5] = (-33599);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {932, 0, 0, (-1), (-1359), (-33599)}, intArray0);
      
      int[][] intArray1 = new int[1][9];
      intArray1[0] = intArray0;
      CharClass charClass1 = charClass0.appendNegatedTable(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {932, 0, 0, 1114111, (-1359), (-33599)}, intArray0);
      
      CharClass charClass2 = charClass1.appendClassWithSign(intArray0, (-3778));
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {932, 0, 0, 1114111, (-33598), 1114111}, intArray0);
      
      CharClass charClass3 = charClass1.appendClassWithSign(intArray0, 932);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {932, 0, 0, 1114111, (-33598), 1114111}, intArray0);
      
      CharClass charClass4 = charClass0.appendClassWithSign(intArray0, (-1359));
      assertEquals(6, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {932, 0, 0, 1114111, (-33598), 1114111}, intArray0);
      
      CharClass charClass5 = charClass1.appendNegatedClass(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass4);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {932, 0, 0, 1114111, (-33598), 1114111}, intArray0);
      
      CharClass charClass6 = charClass1.appendLiteral(66639, (-3993));
      assertEquals(6, intArray0.length);
      assertEquals(1, intArray1.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {932, 0, 0, 1114111, (-33598), 1114111}, intArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      int int0 = 93;
      CharClass charClass1 = charClass0.appendFoldedRange(93, 93);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[7][8];
      int[] intArray1 = new int[2];
      intArray1[0] = (-865);
      intArray1[1] = 2410;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-865);
      intArray2[1] = 2410;
      intArray2[2] = 2410;
      intArray2[3] = 2410;
      intArray2[4] = 2410;
      intArray2[5] = 2410;
      intArray2[6] = 2410;
      intArray2[7] = (-865);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-865);
      intArray3[1] = (-865);
      intArray3[2] = 2410;
      intArray3[3] = 0;
      intArray3[4] = (-865);
      intArray3[5] = (-43);
      intArray3[6] = (-865);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 2490;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[5];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = 2490;
      intArray5[1] = (-865);
      intArray5[2] = (-43);
      intArray5[3] = (-865);
      intArray5[4] = (-865);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      
      intArray6[0] = 0;
      intArray6[1] = 2410;
      intArray6[2] = 0;
      intArray6[3] = 2490;
      intArray6[4] = 6772;
      intArray6[5] = 2490;
      intArray6[6] = (-865);
      intArray6[7] = 2490;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[6];
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray2));
      
      intArray7[0] = 2410;
      intArray7[1] = (-43);
      intArray7[2] = (-43);
      intArray7[3] = 2490;
      intArray7[4] = 6772;
      intArray7[5] = 2410;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, (-1263));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[8][4];
      int[] intArray1 = new int[1];
      intArray1[0] = 32;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 32;
      intArray2[1] = 32;
      intArray2[2] = 32;
      intArray2[3] = 32;
      intArray2[4] = 32;
      intArray2[5] = 32;
      intArray2[6] = 32;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 32;
      intArray3[1] = 32;
      intArray3[2] = 32;
      intArray3[3] = 32;
      intArray3[4] = 32;
      intArray3[5] = 32;
      intArray3[6] = 32;
      intArray3[7] = 32;
      intArray3[8] = 32;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      
      intArray4[0] = 1;
      intArray4[1] = 32;
      intArray4[2] = 32;
      intArray4[3] = 32;
      intArray4[4] = (-909);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = (-909);
      intArray5[1] = 1;
      intArray5[2] = (-909);
      intArray5[3] = 1;
      intArray5[4] = 32;
      intArray5[5] = 32;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      
      intArray6[0] = 32;
      intArray6[1] = 32;
      intArray6[2] = 128;
      intArray6[3] = 1;
      intArray6[4] = (-1962);
      intArray6[5] = 1;
      intArray6[6] = 231;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[3];
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray3));
      
      intArray7[0] = 231;
      intArray7[1] = (-909);
      intArray7[2] = 32;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[7];
      assertFalse(intArray8.equals((Object)intArray3));
      assertFalse(intArray8.equals((Object)intArray1));
      assertFalse(intArray8.equals((Object)intArray5));
      assertFalse(intArray8.equals((Object)intArray2));
      assertFalse(intArray8.equals((Object)intArray6));
      assertFalse(intArray8.equals((Object)intArray7));
      assertFalse(intArray8.equals((Object)intArray4));
      
      intArray8[0] = (-1962);
      intArray8[1] = 128;
      intArray8[2] = (-925);
      intArray8[3] = 231;
      intArray8[4] = (-909);
      intArray8[5] = (-909);
      intArray8[6] = (-1962);
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange((-2009), (-2009));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[][] intArray0 = new int[2][8];
      int[] intArray1 = new int[7];
      intArray1[0] = (-2009);
      intArray1[1] = (-2009);
      intArray1[2] = 69687;
      intArray1[3] = (-2009);
      intArray1[4] = (-2009);
      intArray1[5] = (-2009);
      intArray1[6] = (-2009);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-2009);
      intArray2[1] = (-2009);
      intArray2[2] = 69687;
      intArray0[1] = intArray2;
      CharClass charClass3 = charClass2.appendNegatedTable(intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendRange(1493, (-1365));
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendNegatedTable(intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertNotNull(charClass5);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 65049;
      int[] intArray0 = null;
      CharClass charClass1 = null;
      try {
        charClass1 = new CharClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.appendLiteral(2860, 1606);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass4.appendFoldedRange(434, 0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass6 = charClass5.appendClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass4);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass7 = charClass5.appendClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass6);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass3);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass8 = charClass0.cleanClass();
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass1);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[7][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      // Undeclared exception!
      try { 
        charClass3.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 395;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 602);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[0][9];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendLiteral(1127, 0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[] intArray1 = new int[9];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 1127;
      intArray1[3] = 1127;
      intArray1[4] = 83;
      intArray1[5] = 0;
      intArray1[6] = 83;
      intArray1[7] = 480;
      intArray1[8] = 1127;
      // Undeclared exception!
      try { 
        charClass2.appendClassWithSign(intArray1, 480);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[2];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral((-1190), 4636);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      CharClass charClass2 = charClass0.appendFoldedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int int0 = 1903;
      CharClass charClass1 = charClass0.appendFoldedRange(1903, 1903);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[7];
      intArray1[0] = 1903;
      intArray1[1] = 1903;
      intArray1[2] = 1903;
      intArray1[3] = (-1556);
      intArray1[4] = 1903;
      intArray1[5] = 1903;
      intArray1[6] = 1903;
      intArray0[0] = intArray1;
      CharClass charClass2 = charClass0.appendNegatedTable(intArray0);
      assertEquals(1, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      int[][] intArray2 = new int[0][7];
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass4 = charClass0.appendTableWithSign(intArray2, 1903);
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, intArray2.length);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray2, intArray0);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendTable(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, intArray2.length);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertNotSame(intArray2, intArray0);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass0.appendLiteral((-2573), (-2573));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass4);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass4.appendFoldedRange(2, 1903);
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, intArray2.length);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass3);
      assertNotSame(intArray2, intArray0);
      assertNotNull(charClass7);
      
      CharClass charClass8 = charClass1.appendLiteral((-2573), 1903);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass0);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertNotNull(charClass8);
      
      CharClass charClass9 = charClass5.cleanClass();
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, intArray2.length);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass7);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass7);
      assertNotSame(intArray2, intArray0);
      assertNotNull(charClass9);
      
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray1, 1903);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(596, 596);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      String string0 = charClass1.toString();
      assertEquals("[0x254 0x186]", string0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(string0);
      
      CharClass charClass2 = charClass1.appendFoldedRange(93, 966);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendFoldedRange(93, 596);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      int[][] intArray0 = new int[0][8];
      CharClass charClass4 = charClass2.appendFoldedRange(93, 966);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.appendNegatedTable(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertNotNull(charClass5);
      
      String string1 = charClass1.toString();
      assertFalse(string1.equals((Object)string0));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendLiteral(62, 62);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange((-1281), (-1281));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendRange(381, (-15));
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.appendRange((-404), (-1556));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass0.appendFoldedRange(1114112, (-404));
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 121;
      intArray0[1] = 0;
      intArray0[2] = 1048573;
      intArray0[3] = 1541;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int0 = 319;
      intArray0[6] = 319;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {121, 0, 1048573, 1541, 0, 0, 319}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1174);
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-1174), 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral((-1175), (-1175));
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-1175), 0}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-1175), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[][] intArray0 = new int[7][8];
      int[] intArray1 = new int[5];
      intArray1[0] = 65;
      intArray1[1] = 1943;
      intArray1[2] = 1023;
      intArray1[3] = 0;
      intArray1[4] = 1088;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 65;
      intArray3[3] = 1023;
      intArray3[4] = 1023;
      intArray3[5] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 0;
      intArray4[1] = 0;
      intArray4[2] = 65;
      intArray4[3] = 1023;
      intArray4[4] = 0;
      intArray4[5] = 1088;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray1));
      
      intArray5[0] = 1088;
      intArray5[1] = 65;
      intArray5[2] = 65;
      intArray5[3] = 1088;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray1));
      
      intArray6[0] = 1943;
      intArray6[1] = 1023;
      intArray6[2] = 65;
      intArray6[3] = 1023;
      intArray6[4] = 1023;
      intArray6[5] = 1943;
      intArray6[6] = 1943;
      intArray6[7] = 65;
      intArray6[8] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[0];
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray2));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray3));
      
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1174);
      intArray0[1] = 65049;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-1174), 65049}, intArray0);
      
      CharClass charClass1 = charClass0.appendLiteral(65049, 4636);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-1174), 65049}, intArray0);
      
      // Undeclared exception!
      charClass0.appendFoldedClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[][] intArray0 = new int[3][0];
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = (-2675);
      intArray1[2] = 0;
      intArray1[3] = 11790;
      intArray1[4] = 0;
      intArray1[5] = 1679;
      intArray1[6] = 4477;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 11790;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 1679;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 1679;
      intArray2[7] = 0;
      intArray2[8] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = 11790;
      intArray3[1] = 0;
      intArray3[2] = 4477;
      intArray3[3] = 0;
      intArray3[4] = (-2675);
      intArray3[5] = 4477;
      intArray0[2] = intArray3;
      CharClass charClass3 = charClass0.appendTable(intArray0);
      assertEquals(3, intArray0.length);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass2.appendFoldedRange(393, 393);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass4);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 932;
      intArray0[1] = 11712;
      intArray0[2] = 65;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {932, 11712, 65, 0, 0, 0}, intArray0);
      
      int[][] intArray1 = new int[21][8];
      intArray1[0] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray1[4] = intArray2;
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(53, 53);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[6][2];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = (-588);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray2[7] = (-588);
      intArray2[8] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      
      intArray3[0] = (-588);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      
      intArray4[0] = 0;
      intArray4[1] = 0;
      intArray4[2] = (-588);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      
      intArray5[0] = (-588);
      intArray5[1] = (-588);
      intArray5[2] = 0;
      intArray5[3] = 0;
      intArray5[4] = (-588);
      intArray5[5] = 0;
      intArray5[6] = (-588);
      intArray5[7] = (-588);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray1));
      
      intArray6[0] = 0;
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(1903, 1903);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[7];
      intArray1[0] = 1903;
      intArray1[1] = 1903;
      intArray1[2] = 1903;
      intArray1[3] = (-1556);
      intArray1[4] = 1903;
      intArray1[5] = 1903;
      intArray1[6] = 1903;
      intArray0[0] = intArray1;
      CharClass charClass2 = charClass0.appendNegatedTable(intArray0);
      assertEquals(1, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      
      int[][] intArray2 = new int[0][7];
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass4 = charClass0.appendTableWithSign(intArray2, 1903);
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, intArray2.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass2.appendLiteral(1903, 1903);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(1, intArray0.length);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass5.appendNegatedTable(intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray2.length);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass5);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertNotSame(intArray2, intArray0);
      assertNotNull(charClass6);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 842;
      intArray0[1] = (-3396);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(8, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {842, (-3396), 0, 0, 0, 0, 0, 0}, intArray0);
      
      int[][] intArray1 = new int[2][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      CharClass charClass2 = charClass0.appendNegatedTable(intArray1);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.appendNegatedClass(intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {842, (-3396), 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(1903, 1903);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[7];
      intArray1[0] = 1903;
      intArray1[1] = 1903;
      intArray1[2] = 1903;
      intArray1[3] = (-1556);
      intArray1[4] = 1903;
      intArray1[5] = 1903;
      intArray1[6] = 1903;
      intArray0[0] = intArray1;
      CharClass charClass2 = charClass0.appendNegatedTable(intArray0);
      assertEquals(1, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass0.appendTable(intArray0);
      assertEquals(1, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.appendLiteral(2860, 1606);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass2.negateClass();
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass3.appendNegatedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass4.appendFoldedRange(434, 0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass6 = charClass5.appendClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass3);
      assertSame(charClass6, charClass2);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass7 = charClass5.appendClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass8 = charClass0.cleanClass();
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray1 = new int[7][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      String string0 = CharClass.charClassToString(intArray0, (-4137));
      assertEquals("[]", string0);
      assertEquals(0, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass9 = charClass5.appendNegatedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass1);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass10 = charClass8.appendClassWithSign(intArray2, (-5427));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass3);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass8);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass9);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass10);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass0);
      assertNotNull(charClass10);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      
      int[] intArray3 = charClass9.toArray();
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray3.length);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass10);
      assertSame(charClass9, charClass1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass7);
      assertSame(charClass1, charClass4);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass5);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass10);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass2);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass10);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[0][9];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendTableWithSign(intArray0, 0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      int[] intArray1 = new int[5];
      // Undeclared exception!
      try { 
        charClass2.appendNegatedClass(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 56;
      intArray0[1] = 1996;
      intArray0[2] = 68177;
      intArray0[3] = (-1155);
      intArray0[4] = 7154;
      intArray0[5] = 0;
      intArray0[6] = 119946;
      intArray0[7] = 2067;
      intArray0[8] = (-2939);
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign(intArray0, 119946);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1144);
      intArray0[1] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {(-1144), 0}, intArray0);
      
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {(-1144), 1114111}, intArray0);
      
      CharClass charClass2 = charClass1.appendFoldedClass(intArray0);
      assertEquals(2, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {(-1144), 1114111}, intArray0);
      
      int[][] intArray1 = new int[1][6];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTableWithSign(intArray1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      CharClass charClass2 = charClass1.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass0);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.appendRange((-5303), (-5303));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      int[] intArray0 = new int[1];
      CharClass charClass4 = charClass0.appendRange((-5303), (-5303));
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      
      intArray0[0] = (-5303);
      // Undeclared exception!
      try { 
        charClass3.appendClassWithSign(intArray0, (-5303));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      String string0 = charClass0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      int int0 = 93;
      CharClass charClass1 = charClass0.appendFoldedRange(93, 93);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int int1 = (-4088);
      int[] intArray0 = new int[1];
      CharClass charClass2 = charClass1.cleanClass();
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      int[][] intArray1 = new int[2][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(53, 53);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int int0 = (-4088);
      int[] intArray0 = new int[1];
      CharClass charClass2 = charClass0.negateClass();
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass2.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      
      intArray0[0] = 53;
      // Undeclared exception!
      try { 
        charClass1.appendTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      CharClass charClass1 = charClass0.appendFoldedRange(1903, 1903);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      
      int[][] intArray0 = new int[1][7];
      CharClass charClass2 = charClass0.appendLiteral(10, 10);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      
      CharClass charClass3 = charClass1.negateClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      // Undeclared exception!
      charClass3.appendFoldedRange((-2734), 2559);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.negateClass();
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass0.appendRange(381, (-15));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertNotNull(charClass3);
      
      CharClass charClass4 = charClass3.appendRange((-404), (-1556));
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertNotNull(charClass4);
      
      CharClass charClass5 = charClass4.cleanClass();
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass1);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass1);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertNotNull(charClass5);
      
      CharClass charClass6 = charClass0.appendFoldedRange(1114112, 65);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertNotNull(charClass6);
      
      CharClass charClass7 = charClass1.cleanClass();
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass6);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass8 = charClass1.appendClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass5);
      assertSame(charClass8, charClass4);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass9 = charClass0.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass7);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass4);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass1);
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int[] intArray0 = new int[1];
      CharClass charClass0 = new CharClass(intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(charClass0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      CharClass charClass1 = charClass0.cleanClass();
      assertEquals(1, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int[][] intArray1 = new int[6][8];
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      
      CharClass charClass2 = charClass0.appendFoldedRange(0, 0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(1, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {0}, intArray0);
      
      int int0 = 620;
      CharClass charClass3 = charClass2.appendLiteral(0, 620);
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(1, intArray0.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass3, charClass0);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {0}, intArray0);
      
      CharClass charClass4 = charClass1.appendFoldedClass(intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(4, intArray2.length);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(intArray2, intArray0);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass0);
      assertSame(charClass4, charClass2);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray2);
      
      int[] intArray3 = charClass1.toArray();
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(3, intArray3.length);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray3);
      
      CharClass charClass5 = charClass1.appendFoldedRange(0, 620);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertEquals(1, intArray0.length);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass4);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {0}, intArray0);
      
      // Undeclared exception!
      try { 
        charClass3.appendFoldedClass(intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      assertNotNull(charClass0);
      
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass1, charClass0);
      assertNotNull(charClass1);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass2 = charClass1.cleanClass();
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass1);
      assertNotNull(charClass2);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 931);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertNotNull(charClass3);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass4 = charClass3.appendFoldedRange(64033, 931);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertNotNull(charClass4);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass5 = charClass4.appendLiteral(64033, 931);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass1);
      assertNotNull(charClass5);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass6 = charClass3.appendFoldedClass(intArray0);
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass3);
      assertNotNull(charClass6);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = charClass5.toArray();
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      
      CharClass charClass7 = charClass5.appendClass(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass7, charClass2);
      assertSame(charClass7, charClass0);
      assertSame(charClass7, charClass5);
      assertSame(charClass7, charClass1);
      assertSame(charClass7, charClass4);
      assertSame(charClass7, charClass3);
      assertSame(charClass7, charClass6);
      assertNotNull(charClass7);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      
      CharClass charClass8 = charClass1.appendFoldedClass(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass7);
      assertSame(charClass8, charClass0);
      assertSame(charClass8, charClass2);
      assertSame(charClass8, charClass3);
      assertSame(charClass8, charClass4);
      assertSame(charClass8, charClass6);
      assertSame(charClass8, charClass7);
      assertSame(charClass8, charClass1);
      assertSame(charClass8, charClass5);
      assertNotNull(charClass8);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string0 = CharClass.charClassToString(intArray0, (-758));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals("[]", string0);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertNotNull(string0);
      assertArrayEquals(new int[] {}, intArray0);
      
      CharClass charClass9 = charClass0.appendNegatedClass(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass4, charClass6);
      assertSame(charClass4, charClass5);
      assertSame(charClass4, charClass2);
      assertSame(charClass4, charClass3);
      assertSame(charClass4, charClass8);
      assertSame(charClass4, charClass7);
      assertSame(charClass4, charClass1);
      assertSame(charClass4, charClass9);
      assertSame(charClass4, charClass0);
      assertSame(charClass5, charClass2);
      assertSame(charClass5, charClass0);
      assertSame(charClass5, charClass4);
      assertSame(charClass5, charClass3);
      assertSame(charClass5, charClass8);
      assertSame(charClass5, charClass6);
      assertSame(charClass5, charClass7);
      assertSame(charClass5, charClass9);
      assertSame(charClass5, charClass1);
      assertNotSame(intArray1, intArray0);
      assertSame(charClass9, charClass8);
      assertSame(charClass9, charClass1);
      assertSame(charClass9, charClass0);
      assertSame(charClass9, charClass6);
      assertSame(charClass9, charClass5);
      assertSame(charClass9, charClass2);
      assertSame(charClass9, charClass7);
      assertSame(charClass9, charClass3);
      assertSame(charClass9, charClass4);
      assertNotNull(charClass9);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 1114111}, intArray1);
      
      CharClass charClass10 = charClass6.appendRange(64033, 64033);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0, intArray0.length);
      assertSame(charClass0, charClass8);
      assertSame(charClass0, charClass4);
      assertSame(charClass0, charClass1);
      assertSame(charClass0, charClass2);
      assertSame(charClass0, charClass5);
      assertSame(charClass0, charClass6);
      assertSame(charClass0, charClass9);
      assertSame(charClass0, charClass10);
      assertSame(charClass0, charClass3);
      assertSame(charClass0, charClass7);
      assertNotSame(intArray0, intArray1);
      assertSame(charClass1, charClass6);
      assertSame(charClass1, charClass5);
      assertSame(charClass1, charClass3);
      assertSame(charClass1, charClass0);
      assertSame(charClass1, charClass10);
      assertSame(charClass1, charClass2);
      assertSame(charClass1, charClass8);
      assertSame(charClass1, charClass4);
      assertSame(charClass1, charClass9);
      assertSame(charClass1, charClass7);
      assertSame(charClass2, charClass7);
      assertSame(charClass2, charClass0);
      assertSame(charClass2, charClass4);
      assertSame(charClass2, charClass10);
      assertSame(charClass2, charClass3);
      assertSame(charClass2, charClass8);
      assertSame(charClass2, charClass6);
      assertSame(charClass2, charClass9);
      assertSame(charClass2, charClass1);
      assertSame(charClass2, charClass5);
      assertSame(charClass3, charClass8);
      assertSame(charClass3, charClass4);
      assertSame(charClass3, charClass9);
      assertSame(charClass3, charClass7);
      assertSame(charClass3, charClass6);
      assertSame(charClass3, charClass5);
      assertSame(charClass3, charClass0);
      assertSame(charClass3, charClass10);
      assertSame(charClass3, charClass1);
      assertSame(charClass3, charClass2);
      assertSame(charClass6, charClass10);
      assertSame(charClass6, charClass2);
      assertSame(charClass6, charClass5);
      assertSame(charClass6, charClass0);
      assertSame(charClass6, charClass9);
      assertSame(charClass6, charClass1);
      assertSame(charClass6, charClass8);
      assertSame(charClass6, charClass4);
      assertSame(charClass6, charClass7);
      assertSame(charClass6, charClass3);
      assertSame(charClass10, charClass9);
      assertSame(charClass10, charClass1);
      assertSame(charClass10, charClass5);
      assertSame(charClass10, charClass0);
      assertSame(charClass10, charClass2);
      assertSame(charClass10, charClass8);
      assertSame(charClass10, charClass6);
      assertSame(charClass10, charClass4);
      assertSame(charClass10, charClass7);
      assertSame(charClass10, charClass3);
      assertNotNull(charClass10);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[][] intArray2 = new int[9][9];
      intArray2[0] = intArray0;
      intArray2[1] = intArray0;
      intArray2[2] = intArray0;
      intArray2[3] = intArray0;
      intArray2[4] = intArray1;
      intArray2[5] = intArray0;
      intArray2[6] = intArray0;
      intArray2[7] = intArray0;
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 931;
      intArray3[1] = (-758);
      intArray3[2] = (-758);
      intArray3[3] = 931;
      intArray2[8] = intArray3;
      // Undeclared exception!
      try { 
        charClass8.appendNegatedTable(intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(0, 0);
      int[][] intArray0 = new int[0][9];
      CharClass charClass2 = charClass1.appendNegatedTable(intArray0);
      charClass1.appendTableWithSign(intArray0, 0);
      charClass2.cleanClass();
      int[] intArray1 = new int[5];
      int int0 = 2;
      CharClass charClass3 = new CharClass(intArray1);
      charClass1.appendLiteral(0, 1312);
      // Undeclared exception!
      try { 
        charClass3.cleanClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharGroup charGroup0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        charClass0.appendGroup((CharGroup) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int int0 = 1903;
      CharClass charClass1 = charClass0.appendFoldedRange(1903, 1903);
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[7];
      intArray1[0] = 1903;
      intArray1[1] = 1903;
      intArray1[2] = 1903;
      CharClass charClass2 = charClass1.negateClass();
      CharClass charClass3 = charClass2.appendLiteral((-1286), 1903);
      int[] intArray2 = charClass2.toArray();
      CharClass charClass4 = charClass3.appendClass(intArray2);
      charClass4.appendFoldedRange(1903, 1903);
      int int1 = (-758);
      // Undeclared exception!
      try { 
        CharClass.charClassToString(intArray1, 1903);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-191);
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.negateClass();
      CharClass charClass2 = charClass1.appendFoldedRange(12841, (-1191));
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, (-3396));
      CharClass charClass4 = charClass3.cleanClass();
      CharClass charClass5 = charClass4.appendFoldedClass(intArray0);
      int[][] intArray1 = new int[3][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass5.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1158);
      intArray0[1] = (-149);
      intArray0[2] = 0;
      intArray0[3] = (-293);
      intArray0[4] = (-612);
      intArray0[5] = (-1913);
      intArray0[6] = 0;
      intArray0[7] = 1114111;
      CharClass charClass0 = new CharClass(intArray0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[8][3];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 386;
      intArray2[1] = 1919;
      intArray2[2] = (-1506);
      intArray2[3] = 0;
      intArray2[4] = 232;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = (-1506);
      intArray3[1] = (-1506);
      intArray3[2] = 232;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      intArray4[0] = 1919;
      intArray4[1] = 1919;
      intArray4[2] = 1919;
      intArray4[3] = 0;
      intArray4[4] = 7883;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      intArray5[0] = 1919;
      intArray5[1] = 7883;
      intArray5[2] = 232;
      intArray5[3] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = 0;
      intArray6[1] = (-317);
      intArray6[2] = 0;
      intArray6[3] = 0;
      intArray6[4] = 232;
      intArray6[5] = 232;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[1];
      intArray7[0] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[0];
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        charClass0.appendTableWithSign(intArray0, 1919);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(53, 53);
      int[] intArray0 = new int[1];
      charClass1.cleanClass();
      int[][] intArray1 = new int[8][7];
      int[] intArray2 = new int[6];
      intArray2[0] = (-4088);
      intArray2[1] = 53;
      intArray2[2] = 53;
      intArray2[3] = 53;
      intArray2[4] = (-4088);
      intArray2[5] = 53;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      charClass1.negateClass();
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, 3545);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      CharClass charClass1 = charClass0.cleanClass();
      CharClass charClass2 = charClass1.appendLiteral(2860, 1606);
      charClass2.negateClass();
      int int0 = 1679;
      int[][] intArray1 = new int[1][0];
      intArray1[0] = intArray0;
      // Undeclared exception!
      try { 
        charClass2.appendTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      charClass0.toString();
      int[][] intArray0 = new int[2][5];
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0[1]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      int[][] intArray1 = new int[9][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[7];
      CharClass charClass1 = new CharClass(intArray0);
      charClass0.appendLiteral((-1378), (-1378));
      // Undeclared exception!
      try { 
        charClass0.appendFoldedClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[8];
      intArray1[0] = 842;
      intArray1[1] = (-3396);
      intArray1[2] = 0;
      intArray1[3] = (-191);
      intArray1[4] = 3252;
      intArray1[5] = 1;
      intArray1[6] = 2559;
      intArray1[7] = (-1215);
      intArray0[0] = intArray1;
      CharClass charClass1 = charClass0.appendTable(intArray0);
      CharClass charClass2 = charClass0.appendFoldedRange(838, 838);
      charClass0.appendFoldedClass(intArray1);
      CharClass charClass3 = charClass1.cleanClass();
      assertSame(charClass3, charClass2);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[8];
      intArray1[1] = (-3396);
      // Undeclared exception!
      charClass0.appendNegatedTable(intArray0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      charClass0.toString();
      // Undeclared exception!
      try { 
        charClass0.appendNegatedTable((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 10102;
      intArray0[0] = 10102;
      intArray0[1] = 0;
      intArray0[2] = 4308;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.appendClass(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = null;
      int int0 = 3823;
      // Undeclared exception!
      try { 
        charClass0.appendClassWithSign((int[]) null, 3823);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      CharClass charClass2 = charClass1.cleanClass();
      CharClass charClass3 = charClass2.appendClassWithSign(intArray0, 938);
      CharClass charClass4 = charClass3.appendFoldedRange(938, 938);
      CharClass charClass5 = charClass4.appendLiteral(938, 938);
      int[] intArray1 = charClass5.toArray();
      int[][] intArray2 = new int[5][5];
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray0;
      // Undeclared exception!
      charClass1.appendNegatedTable(intArray2);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1467;
      intArray0[0] = 1467;
      intArray0[1] = (-2247);
      intArray0[2] = 43275;
      intArray0[3] = 310;
      intArray0[4] = 0;
      CharClass charClass0 = new CharClass(intArray0);
      // Undeclared exception!
      try { 
        charClass0.negateClass();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendRange(554, (-1888));
      int[][] intArray0 = new int[6][4];
      int[] intArray1 = new int[4];
      intArray1[0] = (-2655);
      intArray1[1] = (-1888);
      intArray1[2] = (-1888);
      intArray1[3] = (-4751);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = (-4751);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      intArray4[0] = (-2655);
      intArray4[1] = (-2655);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      intArray5[0] = (-4751);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = (-1888);
      intArray6[1] = (-2655);
      intArray6[2] = (-2655);
      intArray6[3] = (-2655);
      intArray6[4] = 554;
      intArray6[5] = (-1888);
      intArray0[5] = intArray6;
      // Undeclared exception!
      charClass1.appendTableWithSign(intArray0, (-4751));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = charClass0.appendNegatedClass(intArray0);
      int[][] intArray1 = new int[3][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        charClass1.appendTableWithSign(intArray1, (-1539));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-759);
      intArray0[0] = (-759);
      intArray0[1] = 11007;
      intArray0[2] = (-2146);
      int int1 = 69216;
      intArray0[3] = 69216;
      CharClass charClass0 = new CharClass(intArray0);
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      int int2 = 2726;
      // Undeclared exception!
      charClass0.appendFoldedRange((-2146), 2726);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      CharClass charClass1 = charClass0.appendFoldedRange(17, 17);
      int[][] intArray0 = new int[0][9];
      charClass1.appendNegatedTable(intArray0);
      CharClass charClass2 = charClass1.appendTableWithSign(intArray0, 22);
      charClass2.appendLiteral(17, 22);
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CharClass charClass0 = new CharClass();
      int[] intArray0 = new int[0];
      CharClass charClass1 = new CharClass(intArray0);
      CharClass charClass2 = charClass0.cleanClass();
      int int0 = 2860;
      int int1 = 1606;
      int int2 = 3363;
      CharClass charClass3 = charClass2.appendLiteral(2860, 3363);
      charClass3.negateClass();
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        charClass0.appendClass((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int[] intArray0 = new int[0];
      CharClass charClass0 = new CharClass(intArray0);
      charClass0.cleanClass();
      int[][] intArray1 = new int[6][8];
      int[] intArray2 = new int[4];
      int int0 = 0;
      intArray2[0] = 0;
      intArray2[1] = 0;
      charClass0.appendClass(intArray0);
      CharClass charClass1 = charClass0.appendNegatedClass(intArray2);
      CharClass charClass2 = charClass0.negateClass();
      charClass1.appendNegatedClass(intArray2);
      int[] intArray3 = new int[3];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 0;
      // Undeclared exception!
      try { 
        charClass2.appendFoldedClass(intArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.google.re2j.CharClass", e);
      }
  }
}
