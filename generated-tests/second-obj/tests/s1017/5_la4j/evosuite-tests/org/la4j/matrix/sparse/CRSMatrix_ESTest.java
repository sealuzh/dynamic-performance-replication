/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:44:47 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.stream.DoubleStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(987);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 987
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1701);
      // Undeclared exception!
      try { 
        CRSMatrix.random(1000, 1701, (double) 1701, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 1806;
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(1806);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1807
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((long) 0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cRSMatrix0.toColumnMajorSparseMatrix();
      int int1 = (-992);
      // Undeclared exception!
      try { 
        SparseMatrix.from1DArray((-992), (-992), (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -992x-992
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cRSMatrix0.toColumnMajorSparseMatrix();
      cRSMatrix0.max();
      cRSMatrix0.copyOfShape(0, 8);
      mockRandom0.nextLong();
      // Undeclared exception!
      try { 
        cRSMatrix0.toRowVector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(2007, 2007);
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[2] = (byte)36;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1, 1);
      rowMajorSparseMatrix0.divide(1);
      // Undeclared exception!
      try { 
        ((CRSMatrix) rowMajorSparseMatrix0).maxInRow(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, Double.POSITIVE_INFINITY);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.toDenseMatrix();
      int int0 = 29;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow((-1268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1268
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldRows(vectorAccumulator0);
      cRSMatrix0.eachNonZero(matrixProcedure0);
      int int0 = 8;
      Matrix matrix0 = Matrix.zero(8, 8);
      // Undeclared exception!
      try { 
        cRSMatrix0.add(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 8x8.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[1] = (double) 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2969, (byte)6);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow((byte)37, vectorProcedure0);
      doubleArray1[3] = 3095.2712375;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 3431.600430124386;
      doubleArray2[2] = 3095.2712375;
      doubleArray0[1] = doubleArray2;
      Matrix.from2DArray(doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(858, (VectorProcedure) null);
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((-2199), (-2199));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1109;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1109);
      int int1 = 7;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRow(7, vectorAccumulator0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cRSMatrix0.blankOfColumns(7);
      matrix0.determinant();
      int int2 = 623;
      matrix0.sliceTopLeft(int2, int1);
      cRSMatrix0.insert(matrix0, int1, int1);
      cRSMatrix0.to(matrixFactory0);
      cRSMatrix0.getColumn(int0);
      cRSMatrix0.getColumn(int0);
      int int3 = 17;
      SparseMatrix.zero(int3, int3);
      int int4 = 732;
      cRSMatrix0.blankOfShape(int0, int4);
      int int5 = (-503);
      int int6 = 0;
      cRSMatrix0.getOrElse(int5, int6, int1);
      cRSMatrix0.minInRow(int5);
      cRSMatrix0.minInRow(int6);
      MatrixFactory<CRSMatrix> matrixFactory1 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.to(matrixFactory1);
      cRSMatrix0.getColumn(int5);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 3949;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3949;
      doubleArray0[1] = (double) 3949;
      doubleArray0[2] = (-63.88617162942);
      doubleArray0[3] = (double) 3949;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(3949, 3949, doubleArray0);
      int int1 = 2765;
      cRSMatrix0.copyOfShape(int0, int1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      doubleArray0[0] = (double) 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      CRSMatrix.from2DArray(doubleArray1);
      String string0 = "";
      // Undeclared exception!
      try { 
        DenseVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 11;
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 11;
      doubleArray1[1] = (double) 11;
      doubleArray1[3] = (double) 11;
      doubleArray1[4] = (double) 11;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 11;
      double double0 = (-1.0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      cRSMatrix0.setAll(4.9E-324);
      assertEquals(4.9E-324, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(4.9E-324, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(4.9E-324, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(doubleArray0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(1, 2078.0);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      assertEquals(2078.0, cRSMatrix1.max(), 0.01);
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(1, cRSMatrix1.cardinality());
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      assertNotNull(ooPlaceMatricesSubtraction0);
      
      int int0 = (-277);
      // Undeclared exception!
      try { 
        SparseMatrix.zero(1432, (-277));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1432x-277
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)cRSMatrix0.rotate();
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(1, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertNotNull(cCSMatrix0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(doubleArray0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cRSMatrix0.rotate();
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(1, cCSMatrix1.columns());
      assertEquals(1, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertNotNull(cCSMatrix1);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1);
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.cardinality());
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      int int0 = (-1062);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-1062)).when(vectorAccumulator1).accumulate();
      double double0 = cRSMatrix1.foldNonZeroInColumn((-1062), vectorAccumulator1);
      assertEquals((-1062.0), double0, 0.01);
      assertEquals(1, cRSMatrix1.rows());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1, cRSMatrix1.cardinality());
      assertEquals(1, cRSMatrix1.columns());
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn(1);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertNotNull(compressedVector0);
      
      // Undeclared exception!
      try { 
        cRSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 6;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertSame(rowMajorSparseMatrix0, cRSMatrix0);
      assertNotNull(rowMajorSparseMatrix0);
      
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cRSMatrix0.columnMajorIterator();
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertSame(cRSMatrix0, rowMajorSparseMatrix0);
      assertNotNull(columnMajorMatrixIterator0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 6);
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(6, (-966.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -34776.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1733;
      doubleArray0[1] = (double) 1733;
      int[] intArray0 = new int[1];
      intArray0[0] = 1733;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1733, 1733, 1733, doubleArray0, intArray0, intArray0);
      assertArrayEquals(new double[] {1733.0, 1733.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {1733}, intArray0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1733, cRSMatrix0.rows());
      assertEquals(1733, cRSMatrix0.columns());
      assertEquals(1733, cRSMatrix0.cardinality());
      assertEquals(5.770340450086555E-4, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("");
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1733' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.infinityNorm();
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.rows());
      
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 0);
      assertNotNull(doubleStream0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cRSMatrix0.toColumnMajorSparseMatrix();
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertNotNull(columnMajorSparseMatrix0);
      
      double double0 = cRSMatrix0.max();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, columnMajorSparseMatrix0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertNotNull(cRSMatrix1);
      
      double[][] doubleArray0 = new double[0][2];
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1733;
      doubleArray0[1] = (double) 1733;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2989, 2557.426272259);
      cRSMatrix0.eachNonZeroInRow(1733, (VectorProcedure) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1, 1, (double) 1, (Random) mockRandom0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse((-684), 16, 3334.778645860255);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-684' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-41);
      double[] doubleArray0 = new double[0];
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray((byte)17, 0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(17, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(17, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)17;
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (byte)1;
      doubleArray1[1] = (double) (byte)8;
      doubleArray1[2] = (double) (byte)17;
      doubleArray0[3] = doubleArray1;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      assertEquals(4, matrix0.rows());
      assertEquals(7, matrix0.columns());
      assertNotNull(matrix0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray((byte)8, 574, doubleArray0[2]);
      MatrixAccumulator matrixAccumulator0 = null;
      cRSMatrix0.fold(matrixAccumulator0);
      cRSMatrix0.hadamardProduct(matrix0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cRSMatrix0.each(matrixProcedure0);
      cRSMatrix0.iteratorOfRow(byteArray0[0]);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 468;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(468, (-1.0));
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("");
      SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix1);
      VectorAccumulator vectorAccumulator0 = null;
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      int int1 = (-555);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldNonZeroInRow(int1, vectorAccumulator1);
      int int2 = (-3954);
      cRSMatrix0.blankOfColumns(int2);
      cRSMatrix0.rowMajorIterator();
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(int0, vectorProcedure0);
      int int3 = 5;
      cRSMatrix0.nonZeroIteratorOfRow(int3);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.to(matrixFactory0);
      int int4 = 634;
      cRSMatrix0.maxInRow(int4);
      cRSMatrix1.maxInRow(int3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      Matrix matrix0 = cRSMatrix0.rotate();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      Matrix matrix1 = cRSMatrix0.rotate();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix0, matrix0, matrix1, matrix1);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorAccumulator1).accumulate();
      cRSMatrix1.foldNonZeroInColumn(1, vectorAccumulator1);
      cRSMatrix0.getColumn(1);
      CRSMatrix cRSMatrix2 = new CRSMatrix(1, 1);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, cRSMatrix2, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 25;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[0] = (byte)36;
      byteArray0[2] = (byte)36;
      int int1 = 3084;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1273, 3084);
      Matrix matrix0 = cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, cRSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(4, (-1.0));
      Matrix matrix0 = rowMajorSparseMatrix0.copy();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      rowMajorSparseMatrix0.mkString(numberFormat0, "Can not remove from this iterator.", (String) null);
      matrix0.toColumnMajorSparseMatrix();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      int int0 = 618;
      // Undeclared exception!
      try { 
        ((CRSMatrix) rowMajorSparseMatrix0).nonZeroAt(618, 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 618
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, Double.POSITIVE_INFINITY);
      double double0 = (-1.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (double)4, Double.POSITIVE_INFINITY, (-966.0), (-1.0)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      MockRandom mockRandom0 = new MockRandom((-2480L));
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(Integer.MAX_VALUE, (-500.5402637), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      cRSMatrix0.setAll(4.9E-324);
      cRSMatrix0.rotate();
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(1, 4.9E-324);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      cRSMatrix0.setAll(4.9E-324);
      cRSMatrix0.rotate();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1717.977232;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 4.9E-324;
      doubleArray0[3] = 4.9E-324;
      doubleArray0[4] = 4.9E-324;
      doubleArray0[5] = 4.0;
      CRSMatrix cRSMatrix1 = CRSMatrix.from1DArray(1, 1, doubleArray0);
      cRSMatrix0.toColumnMajorSparseMatrix();
      cRSMatrix1.max();
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.nextBoolean();
      CRSMatrix cRSMatrix2 = CRSMatrix.identity(1);
      cRSMatrix2.getColumn(3104);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow((-363));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -363
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 6;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      cRSMatrix0.columnMajorIterator();
      cRSMatrix0.copyOfColumns(6);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(4, 4);
      cRSMatrix1.norm();
      SparseMatrix.zero(4, 6);
      rowMajorSparseMatrix0.toColumnVector();
      ((CRSMatrix) rowMajorSparseMatrix0).toBinary();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      MockRandom mockRandom0 = new MockRandom(0L);
      SparseMatrix.zero(4, 4);
      int int1 = 1865;
      // Undeclared exception!
      try { 
        ((CRSMatrix) rowMajorSparseMatrix0).minInRow(1865);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1865
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 6, 1);
      cRSMatrix0.copyOfColumns(1);
      cRSMatrix0.rotate();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(638, 1);
      Integer integer0 = new Integer(638);
      SparseMatrix.zero(942, 19);
      // Undeclared exception!
      try { 
        cRSMatrix1.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 6;
      int int1 = 1132;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1132);
      cRSMatrix0.toRowMajorSparseMatrix();
      cRSMatrix0.columnMajorIterator();
      cRSMatrix0.copyOfColumns(409);
      cRSMatrix0.foldNonZeroInColumns((VectorAccumulator) null);
      cRSMatrix0.rotate();
      int int2 = 1703;
      int int3 = 1486;
      CRSMatrix.zero(int2, int3);
      int int4 = (-2146456441);
      SparseMatrix.zero(int0, int4);
      int int5 = 6;
      CRSMatrix.zero(int5, int2);
      int int6 = 7;
      SparseMatrix.identity(int6);
      cRSMatrix0.determinant();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.nonZeroRowMajorIterator();
      int[] intArray0 = new int[5];
      intArray0[0] = int0;
      intArray0[1] = int5;
      intArray0[2] = int6;
      intArray0[3] = int2;
      intArray0[4] = int1;
      cRSMatrix0.select(intArray0, intArray0);
      int int7 = 1341;
      int int8 = 396;
      CRSMatrix.zero(int0, int7, int8);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 991;
      int int1 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(991, 991, 1);
      cRSMatrix0.rotate();
      CRSMatrix.zero(991, 2078);
      cRSMatrix0.copyOfShape(816, 13);
      CRSMatrix cRSMatrix1 = new CRSMatrix(255, (-653), 991);
      cRSMatrix0.iteratorOfNonZeroRows();
      double double0 = 2670.0;
      cRSMatrix0.set(int1, int0, double0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      cRSMatrix0.rotate();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      int int0 = (-968);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-968);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-968), 1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -968x1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, Double.POSITIVE_INFINITY);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.toDenseMatrix();
      int int1 = 29;
      int int2 = 14;
      Matrix.constant(29, 14, Double.POSITIVE_INFINITY);
      // Undeclared exception!
      try { 
        cRSMatrix0.determinant();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((long) 0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cRSMatrix0.toColumnMajorSparseMatrix();
      cRSMatrix0.max();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.transformRow(0, vectorFunction0);
      cRSMatrix0.getColumn(0);
      // Undeclared exception!
      try { 
        CRSMatrix.random((-1168), 817, Double.NEGATIVE_INFINITY, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 6, 1);
      cRSMatrix0.setAll(4.9E-324);
      cRSMatrix0.rotate();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 6;
      intArray0[2] = (-334);
      intArray0[3] = 897;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      int int0 = 1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1, (-1.0));
      DenseMatrix denseMatrix0 = DenseMatrix.unit(1, 1);
      rowMajorSparseMatrix0.copy();
      ooPlaceMatricesSubtraction0.applySimple(denseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      int int1 = (-820);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ((CRSMatrix) rowMajorSparseMatrix0).eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1, 1);
      DenseMatrix.unit(1, 1);
      ((CRSMatrix) rowMajorSparseMatrix0).max();
      Matrix matrix0 = rowMajorSparseMatrix0.multiply(1.0);
      SparseMatrix.zero(1, 1);
      int int0 = (-1294);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      matrix0.each(matrixProcedure0);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray((-1294), (-125), (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1294x-125
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2068, 2068, 2068);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2068, (double)2068, (double)2068, (double)2068, 29.51541582366762).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 6;
      int int1 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 6, 1);
      Matrix matrix0 = cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, matrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((long) 0);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (double) 0, (Random) mockRandom0);
      cRSMatrix0.toBinary();
      cRSMatrix0.getColumn(0);
      CRSMatrix.identity(428);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3124);
      int int0 = 2708;
      cRSMatrix0.maxInRow(2708);
      cRSMatrix0.min();
      cRSMatrix0.getOrElse((-2208), (-2208), Double.POSITIVE_INFINITY);
      cRSMatrix0.rowMajorIterator();
      int int1 = 764;
      cRSMatrix0.nonZeroAt(int0, int1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3, 11, 11);
      double[][] doubleArray0 = new double[6][0];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 11;
      doubleArray1[1] = (double) 11;
      doubleArray1[2] = (double) 3;
      doubleArray1[3] = (double) 11;
      doubleArray1[4] = (double) 11;
      doubleArray1[5] = (double) 3;
      doubleArray1[6] = (double) 3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 11;
      doubleArray2[1] = (double) 3;
      doubleArray2[2] = (double) 3;
      doubleArray2[3] = (double) 3;
      doubleArray2[4] = (double) 3;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3124);
      cRSMatrix0.isColumnMajor();
      int int0 = 29;
      cRSMatrix0.get(29, 29);
      int int1 = 7;
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(29);
      cRSMatrix1.nonZeroColumnMajorIterator();
      cRSMatrix0.minInRow(2707);
      cRSMatrix0.iteratorOfRow(6);
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1353.1, (-1.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateColumn(29, vectorFunction0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldNonZeroInColumn(int0, vectorAccumulator0);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.minInRow(int0);
      Locale locale0 = Locale.KOREA;
      int int2 = 3091;
      CRSMatrix cRSMatrix2 = new CRSMatrix(int2, int1);
      int int3 = 1232;
      org.evosuite.runtime.Random.setNextRandom(int3);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 10;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(10);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      cRSMatrix0.columnMajorIterator();
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfColumns(499);
      int int1 = 3796;
      CCSMatrix cCSMatrix0 = (CCSMatrix)SparseMatrix.zero(3796, 10);
      ((CRSMatrix) rowMajorSparseMatrix0).max();
      DenseMatrix denseMatrix0 = DenseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix1, cRSMatrix1);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = null;
      ooPlaceMatricesMultiplication0.apply(columnMajorSparseMatrix0, (RowMajorSparseMatrix) cRSMatrix1);
      CRSMatrix.block(cRSMatrix0, cCSMatrix0, cRSMatrix1, denseMatrix0);
      int int2 = (-829);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(int1, int2);
      int int3 = 1920;
      SparseMatrix.identity(int3);
      int int4 = 2331;
      cRSMatrix2.maxInRow(int3);
      CRSMatrix.identity(int4);
      double double0 = (-573.92);
      CRSMatrix.diagonal(int0, double0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 3123;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(3123, 3123, 3123);
      int int1 = 2669;
      cRSMatrix0.maxInRow(2669);
      int int2 = (-1457);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero((-1457), (-1457));
      RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix1, cRSMatrix0, cRSMatrix1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.update(matrixFunction0);
      int[] intArray0 = null;
      int[] intArray1 = new int[3];
      intArray1[0] = int1;
      intArray1[1] = int0;
      intArray1[2] = int1;
      cRSMatrix0.select(intArray0, intArray1);
      cRSMatrix1.iteratorOfNonZeroRows();
      int int3 = (-2097542166);
      CRSMatrix.zero(int2, intArray1[2], int3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6);
      cRSMatrix0.setAll(4.9E-324);
      Matrix matrix0 = cRSMatrix0.rotate();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 2068;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles((long) 0);
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.setAll(0);
      cRSMatrix0.rotate();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.rotate();
      int int0 = 1000;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      cRSMatrix0.setAll(4.9E-324);
      Matrix matrix0 = cRSMatrix0.rotate();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      // Undeclared exception!
      try { 
        CRSMatrix.diagonal((-425), 2078.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 6;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      rowMajorSparseMatrix0.columnMajorIterator();
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      int[] intArray0 = new int[1];
      intArray0[0] = 6;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      Matrix matrix0 = cRSMatrix0.rotate();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      Matrix matrix1 = cRSMatrix0.rotate();
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix0, matrix0, matrix1, matrix1);
      VectorAccumulator vectorAccumulator1 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorAccumulator1).accumulate();
      cRSMatrix1.foldNonZeroInColumn(1, vectorAccumulator1);
      cRSMatrix0.getColumn(1);
      Matrix matrix2 = cRSMatrix1.select(intArray0, intArray0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      matrix2.iterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.eachNonZeroInRow(1, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      cRSMatrix0.setAll(4.9E-324);
      cRSMatrix0.rotate();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.toRowVector();
      cRSMatrix0.eachNonZero((MatrixProcedure) null);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 807.4784566008656);
      double double0 = (-1.0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      String string0 = "";
      // Undeclared exception!
      try { 
        SparseMatrix.fromMatrixMarket("QW6~-|+fSn8aI41");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 3, 3);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      cRSMatrix0.setAll(4.9E-324);
      int[] intArray0 = new int[4];
      cRSMatrix0.setColumn(1, 4.9E-324);
      intArray0[1] = 3;
      cRSMatrix0.iteratorOfNonZeroRows();
      CRSMatrix cRSMatrix1 = new CRSMatrix(3, 3, 3);
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroAt(4, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      cRSMatrix0.setAll(4.9E-324);
      cRSMatrix0.rotate();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transform(matrixFunction0);
      cRSMatrix0.insert(matrix0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.longs();
      MockRandom mockRandom2 = new MockRandom(0);
      CRSMatrix cRSMatrix1 = CRSMatrix.random(1, 1075, 4.9E-324, (Random) mockRandom0);
      cRSMatrix0.toBinary();
      cRSMatrix1.getColumn(3094);
      // Undeclared exception!
      try { 
        cRSMatrix1.eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3124);
      cRSMatrix0.isColumnMajor();
      double double0 = cRSMatrix0.get(29, 29);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1169.6), 2707.0, 26.0, 4317.1991, 29.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      cRSMatrix0.setAll(double0);
      int int0 = 10;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(int0, vectorProcedure0);
      cRSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = new CRSMatrix(6, 6, 1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1, 0.0, (double)1, (double)6, (double)1).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      Matrix matrix0 = cRSMatrix0.transform(matrixFunction0);
      Matrix matrix1 = matrix0.insert((Matrix) cRSMatrix0);
      // Undeclared exception!
      try { 
        matrix1.sliceBottomRight((-315), 466);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [-315..6][466..6].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1, 1, 1);
      cRSMatrix0.setAll(4.9E-324);
      cRSMatrix0.rotate();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1903.3923584839467)).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.transform(matrixFunction0);
      cRSMatrix1.min();
      // Undeclared exception!
      try { 
        cRSMatrix1.getOrElse((-1553), (-2215), 319.6253229033369);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1553' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1, 1);
      Integer integer0 = new Integer(1);
      CRSMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
      int int0 = 1691;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1, 1691);
      ((CRSMatrix) rowMajorSparseMatrix0).iteratorOfRow(1);
      cRSMatrix0.norm();
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("/$v\"4!^DS/:'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2039, 2039);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      cRSMatrix0.select(intArray0, intArray0);
      MockRandom mockRandom0 = new MockRandom(2039);
      mockRandom0.doubles();
      mockRandom0.nextBoolean();
      cRSMatrix0.getColumn(0);
      CRSMatrix cRSMatrix1 = new CRSMatrix((-1), 3110, 0);
      int int0 = 329;
      cRSMatrix1.maxInRow(int0);
      cRSMatrix1.max();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 6;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(6);
      CRSMatrix.zero(6, 6, 6);
      Matrix.diagonal(6, 6);
      cRSMatrix0.columnMajorIterator();
      CRSMatrix cRSMatrix1 = new CRSMatrix(6, 6, 6);
      // Undeclared exception!
      try { 
        SparseMatrix.randomSymmetric(6, 0.2, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 2068;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      byte byte0 = (byte) (-20);
      CRSMatrix.identity(14);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2068, (-1546.08231100264));
      SparseMatrix.zero((int) (byte)9, 3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(35.93799272031797, 36.0, 0.4, (double)3, (double)14).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(3, vectorFunction0);
      int int1 = 659;
      SparseMatrix.zero((int) byte0, int0);
      int int2 = 9;
      cRSMatrix0.minInRow(int2);
      CRSMatrix cRSMatrix1 = new CRSMatrix(int0, byte0);
      String string0 = "";
      CRSMatrix.fromMatrixMarket(string0);
      VectorProcedure vectorProcedure0 = null;
      cRSMatrix1.eachNonZeroInRow(int1, vectorProcedure0);
      int int3 = 4;
      int int4 = 16;
      int int5 = (-2702);
      CRSMatrix.zero(int3, int4, int5);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 2068;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      byte byte0 = (byte) (-20);
      CRSMatrix.identity(14);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2068, (-1546.08231100264));
      SparseMatrix.zero((int) (byte)9, 3);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(3, vectorFunction0);
      int int1 = 659;
      SparseMatrix.zero((int) (byte) (-20), 2068);
      int int2 = 9;
      cRSMatrix0.minInRow(int2);
      CRSMatrix cRSMatrix1 = new CRSMatrix(int0, byte0);
      String string0 = "";
      CRSMatrix.fromMatrixMarket(string0);
      VectorProcedure vectorProcedure0 = null;
      cRSMatrix1.eachNonZeroInRow(int1, vectorProcedure0);
      int int3 = 4;
      int int4 = 16;
      int int5 = (-2702);
      CRSMatrix.zero(int3, int4, int5);
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 840;
      CRSMatrix cRSMatrix0 = new CRSMatrix(840, 840);
      cRSMatrix0.divide(662.1966);
      int int1 = 32;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      VectorFunction vectorFunction1 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction1).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(32, vectorFunction1);
      cRSMatrix0.apply((MatrixMatrixOperation<Object>) null, (Matrix) null);
      int int2 = 4;
      Matrix.zero(int0, int2);
      cRSMatrix0.transformRow(int1, vectorFunction0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInColumn(int0, vectorProcedure0);
      cRSMatrix0.toCSV();
      cRSMatrix0.each(matrixProcedure0);
      cRSMatrix0.min();
      cRSMatrix0.iteratorOfNonZeroRows();
      int int3 = 1707;
      cRSMatrix0.getRow(int3);
      cRSMatrix0.copyOfShape(int3, int0);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      CRSMatrix.random(1, 13, (double) 1, (Random) mockRandom0);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      // Undeclared exception!
      try { 
        Matrix.fromCSV("org.la4j.matrix.sparse.CRSMatrix");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 1;
          RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(1, 1);
          DenseMatrix.unit(1, 1);
          ((CRSMatrix) rowMajorSparseMatrix0).max();
          rowMajorSparseMatrix0.multiplyByItsTranspose();
          int int1 = 249;
          ((CRSMatrix) rowMajorSparseMatrix0).copyOfShape(249, 1);
          CRSMatrix cRSMatrix0 = null;
          try {
            cRSMatrix0 = new CRSMatrix(249, (-1));
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // Wrong matrix dimensions: 249x-1
             //
             verifyException("org.la4j.Matrix", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2080, 2080);
      cRSMatrix0.iteratorOfNonZeroRows();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      double double0 = new Integer(2080);
      CRSMatrix cRSMatrix1 = new CRSMatrix(1868, 2080, 1868);
      cRSMatrix0.toBinary();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      cRSMatrix0.minInRow(1);
      Locale locale0 = Locale.KOREA;
      CRSMatrix.zero(2080, 1243);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4);
      Matrix matrix0 = cRSMatrix0.multiplyByItsTranspose();
      int int0 = 13;
      cRSMatrix0.getColumn(13);
      cRSMatrix0.kroneckerProduct(matrix0);
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.getColumn(4);
      cRSMatrix0.sum();
      cRSMatrix0.subtract(Double.POSITIVE_INFINITY);
      byte[] byteArray0 = cRSMatrix0.toBinary();
      Locale locale0 = Locale.KOREA;
      CRSMatrix.fromBinary(byteArray0);
      int int1 = 1000;
      int int2 = (-46);
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(2068, 4, (MatrixFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2068
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, Double.POSITIVE_INFINITY);
      Integer integer0 = new Integer(4);
      CRSMatrix cRSMatrix1 = new CRSMatrix(10, 4, 10);
      CRSMatrix cRSMatrix2 = CRSMatrix.zero(4, 131, 4);
      cRSMatrix2.toBinary();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>();
      cRSMatrix0.minInRow(1);
      Locale locale0 = Locale.KOREA;
      CRSMatrix cRSMatrix3 = new CRSMatrix(4, 1);
      // Undeclared exception!
      try { 
        cRSMatrix1.getOrElse(10, 9, (-880.40526106491));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
