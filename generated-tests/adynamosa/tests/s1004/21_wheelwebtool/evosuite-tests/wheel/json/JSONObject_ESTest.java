/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 02:43:56 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "ts-/Co#*}m");
      boolean boolean0 = jSONObject0.optBoolean("ts-/Co#*}m", false);
      assertFalse(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{NpPlN ");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {NpPlN 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("~");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      Byte byte0 = new Byte((byte)83);
      hashMap0.put((Boolean) null, byte0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("!", "!");
      Object object0 = jSONObject1.remove("!");
      assertEquals("!", object0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("Bad value from toJSONString: ", jSONArray0);
      jSONObject1.optString("Bad value from toJSONString: ");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Short short0 = new Short((short)3);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("ta[=x", (double) (short)3);
      long long0 = jSONObject0.optLong("ta[=x");
      assertEquals(2, jSONObject0.length());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (-1.0));
      long long0 = jSONObject0.optLong("");
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.append(" at cha7acter ", jSONObject0);
      jSONObject0.optJSONArray(" at cha7acter ");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", 2416L);
      int int0 = jSONObject1.optInt("] is not a Boolean.");
      assertEquals(2416, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{\"java.lang.String@0000000004\": {}}", (double) (-816));
      int int0 = jSONObject0.optInt("{\"java.lang.String@0000000004\": {}}");
      assertEquals((-816), int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Float@0000000001");
      JSONObject jSONObject1 = jSONObject0.put("Unclosed& comment", (double) 13.0F);
      double double0 = jSONObject1.optDouble("Unclosed& comment");
      assertEquals(4, jSONObject0.length());
      assertEquals(13.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Long long0 = new Long(0L);
      jSONObject0.append("j^1_nIc|!UkhXN<-", long0);
      jSONObject0.opt("j^1_nIc|!UkhXN<-");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "~m;;");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.append("int", "q$&}gI}U");
      jSONObject1.has("int");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", 106);
      String string0 = jSONObject1.getString("wheel.json.JSONArray");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", 0L);
      jSONObject1.getLong("wheel.json.JSONObject");
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("su", (-1237.55));
      long long0 = jSONObject1.getLong("su");
      assertEquals((-1237L), long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put(double0, double0);
      jSONObject0.put("a", (Map) hashMap0);
      jSONObject0.getJSONObject("a");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("Substring bounds error", jSONArray0);
      jSONObject1.getJSONArray("Substring bounds error");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("915.1", stringArray0);
      jSONObject0.put("Em=z", 567L);
      int int0 = jSONObject0.getInt("Em=z");
      assertEquals(567, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("Substring bounds error", 842);
      double double0 = jSONObject0.getDouble("Substring bounds error");
      assertEquals(2, jSONObject0.length());
      assertEquals(842.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{}", (-1296));
      double double0 = jSONObject0.getDouble("{}");
      assertEquals((-1296.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("Bad value from toJSONString: ", jSONArray0);
      jSONObject0.get("Bad value from toJSONString: ");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 0, (byte)0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(32, (int) (byte)0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString((int) (byte)0, 3861);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.remove((String) null);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.putOpt("Z", object0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("", object0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-407L));
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", 1);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (-1.0));
      int int0 = jSONObject0.getInt("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.optString("", "");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.optString("");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 1385L);
      assertEquals(1385L, long0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", (-2191L));
      assertEquals((-2191L), long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("\r", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 69);
      assertEquals(69, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("", 1226);
      assertEquals(1226, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      double double0 = jSONObject0.optDouble("", (double) 0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-3950), (-3950));
      assertEquals("null", string0);
      
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(string0, stringArray0);
      double double0 = jSONObject0.optDouble((String) null, (-2478.2957));
      assertEquals((-2478.2957), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double double0 = Double.valueOf(0.0);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      double double1 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("wheel.json.JSONObject@0000000001", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      boolean boolean0 = jSONObject0.optBoolean("");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.opt("");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "292.1");
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-3950), (-3950));
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(string0, stringArray0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "3670.507704");
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "3670.507704");
      // Undeclared exception!
      jSONObject0.toString(1853, 1853);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("Bad value from toJSONString: ", jSONArray0);
      // Undeclared exception!
      jSONObject1.toString(6772);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 3202L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (double) 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((short) (-3));
      try { 
        jSONObject0.accumulate((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("8");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 8
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = Double.valueOf(575.85093);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(double0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("s!#:hW0xRX+.=n;{gl", 3659);
      JSONObject jSONObject2 = jSONObject1.put("", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(3659);
      Writer writer0 = jSONObject2.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("java.lang.Float@0000000001", stringArray0);
      jSONObject0.put("", (Map) hashMap0);
      String string0 = jSONObject0.toString(48, 125);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = JSONObject.quote("SQ'2(2_D}G\\9DgIfZ");
      assertEquals("\"SQ'2(2_D}G\\\\9DgIfZ\"", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = JSONObject.quote("B+j[<`xLs/e.u/");
      assertEquals("\"B+j[<`xLs/e.u/\"", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, double0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("3%wy`?i=D{PfKGI", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\"7|'z1b CMlg _ 22", (Object) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      String string0 = jSONObject0.optString(stringArray0[4], stringArray0[4]);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0", (double) 125);
      double double0 = jSONObject1.optDouble("0", (-2002.2861));
      assertEquals(125.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("", 1268.1958592372);
      assertEquals(1268.1958592372, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.optBoolean("a");
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject3 = new JSONObject(jSONObject2);
      jSONObject3.append("wa", jSONObject1);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject4 = new JSONObject(jSONObject1);
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("JSONArray[", true);
      try { 
        jSONObject0.getLong("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("y$7^q{2", 0.0);
      int int0 = jSONObject1.getInt("y$7^q{2");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("r?pr", (Collection) null);
      try { 
        jSONObject1.getDouble("r?pr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"r?pr\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>(49);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("cle", "cle");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf("1XO<*F(0N&W,k?");
      Boolean boolean1 = hashMap0.put(boolean0, boolean0);
      Boolean boolean2 = Boolean.TRUE;
      hashMap0.put(boolean2, boolean1);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(3659);
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "3670.507704");
      jSONObject0.toString((-477));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, 2, 2);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      String string0 = JSONObject.valueToString(hashMap0, (-1860), 102);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Double double0 = new Double(702.3683998084143);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-2506), (-2506));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-391), (-391));
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "R}<F{FW0UgEPpw`iL");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("null", "null");
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject1 = jSONObject0.put("[]", (Map) hashMap0);
      jSONObject1.toString();
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.append("] is not a JSONArray.", object0);
      Long long0 = new Long(1426L);
      JSONObject jSONObject1 = jSONObject0.accumulate("lK", long0);
      String string0 = jSONObject1.toString(23, 125);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      Object object0 = new Object();
      jSONArray0.put(object0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertEquals(1, jSONObject0.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("java.lang.Float@0000000001", stringArray0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("=%dHc3$qsg(I6\u0000^_");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("n? _TE=kM</m2TJ3R", 20);
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getBoolean("!rqLxe?Q5v/oJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!rqLxe?Q5v/oJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = JSONObject.quote("{\n\"java.lang.String@0000000006\": {},\n\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\",\n\"java.lang.String@0000000009\": java.lang.Double@0000000010\n}");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-3950), (-3950));
      assertEquals("null", string0);
      
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(string0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "2726.530718279";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a Boolean.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append((String) null, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.accumulate("wheel.json.JSONObject$Null", object0);
      jSONObject0.optString("wheel.json.JSONObject$Null", "\"{9a&IBcuAI");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("-_6M\"qFV`k", (Map) null);
      jSONObject1.optJSONObject("-_6M\"qFV`k");
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Float float0 = new Float((float) (byte)83);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.optJSONObject("xuH~7*~3XU");
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("0", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("0");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Float@0000000001");
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000001", (double) (-1.0F));
      double double0 = jSONObject1.optDouble("java.lang.Float@0000000001");
      assertEquals(4, jSONObject0.length());
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("java.lang.Float@0000000001", stringArray0);
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("wheel.json.JSONObject@0000000001", (Collection) linkedList0);
      long long0 = jSONObject0.optLong("wheel.json.JSONObject@0000000001", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("", (Collection) linkedList0);
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("r?pr", (Collection) null);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("r?pr");
      assertEquals(0, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", (-1296));
      try { 
        jSONObject1.getJSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.put("{\n\"java.lang.String@0000000006\": {},\n\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"\n}", (double) (-816));
      int int0 = jSONObject0.optInt("{\n\"java.lang.String@0000000006\": {},\n\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"\n}", (-1503));
      assertEquals(2, jSONObject0.length());
      assertEquals((-816), int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject1 = jSONObject0.accumulate("", boolean0);
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Double double0 = new Double((-739.9481888699));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("null", true);
      boolean boolean0 = jSONObject1.optBoolean("null");
      assertEquals(4, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("java.lang.Float@0000000001", stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("java.lang.Float@0000000001", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("java.lang.Float@0000000001", stringArray0);
      jSONObject0.put("", false);
      boolean boolean0 = jSONObject0.getBoolean("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = JSONObject.doubleToString(915.1);
      assertEquals("915.1", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-32864431));
      assertEquals("-3.2864431E7", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", jSONObject0);
      try { 
        jSONObject1.append("{}", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{}] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Double double0 = new Double(0.0);
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("0", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.append("0", double0);
      assertSame(jSONObject1, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      jSONObject1.accumulate("{}", jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "292.1");
      JSONArray jSONArray0 = jSONObject0.names();
      jSONObject0.accumulate("/XI6`w.R#;/5<!)X54", jSONArray0);
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.append("] is not a JSONArray.", object0);
      Long long0 = new Long(1426L);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONArray.", long0);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002,\"java.lang.String@0000000005\":wheel.json.JSONObject@0000000004,\"java.lang.String@0000000007\":wheel.json.JSONObject@0000000006}");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("[]", object0);
      boolean boolean0 = jSONObject1.isNull("[]");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("0", false);
      boolean boolean0 = jSONObject1.isNull("0");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("s!#:hW0xRX+.=n;{gl", 3659);
      long long0 = jSONObject0.getLong("s!#:hW0xRX+.=n;{gl");
      assertEquals(3659L, long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{pg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {pg
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      jSONObject0.put("[]", (Map) hashMap0);
      jSONObject0.getJSONObject("[]");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("0", 0.0);
      double double1 = jSONObject0.getDouble("0");
      assertEquals(4, jSONObject0.length());
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }
}
