/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 01:06:46 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.replaceFirst("^,P =C|t[p9 ", "");
      rE2_0.replaceAll("#-h9Pw:f&xm", "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)104;
      byteArray0[6] = (byte)0;
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 4, false);
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 4);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compile(".8P");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<String> list0 = rE2_0.findAll("", (-162));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("can't happen");
      int[] intArray0 = new int[0];
      rE2_0.match("can't happen");
      byte[] byteArray0 = new byte[0];
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      rE2_0.match("can't happen", (-4270), (-4270), 1716, intArray0, 92);
      byte[] byteArray1 = new byte[0];
      rE2_0.match("can't happen");
      rE2_0.findUTF8Index(byteArray1);
      rE2_0.numberOfCapturingGroups();
      RE2 rE2_1 = RE2.compileImpl("can't happen", (-1178), false);
      rE2_1.findAllIndex("can't happen", 0);
      rE2_1.findUTF8Index(byteArray1);
      rE2_1.reset();
      RE2.quoteMeta("");
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-128);
      byteArray2[1] = (byte)64;
      byteArray2[2] = (byte)60;
      byteArray2[3] = (byte)78;
      byteArray2[4] = (byte) (-64);
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)1;
      byteArray2[7] = (byte)2;
      List<byte[]> list0 = rE2_1.findAllUTF8(byteArray2, (byte)0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      int[] intArray0 = new int[3];
      rE2_0.match("", 0, 0, 0, intArray0, 0);
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("");
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      RE2.quoteMeta("");
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("H7=/\"45-9#y5_");
      byte[] byteArray0 = new byte[1];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 4426);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      boolean boolean0 = rE2_0.match("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "nop -> ";
      RE2.match("nop -> ", "nop -> ");
      int int0 = (-1675);
      boolean boolean0 = false;
      RE2 rE2_0 = RE2.compileImpl("nop -> ", (-1675), false);
      RE2 rE2_1 = RE2.compilePOSIX("nop -> ");
      byte[] byteArray0 = new byte[0];
      rE2_0.findUTF8Index(byteArray0);
      rE2_1.reset();
      int int1 = 5217;
      // Undeclared exception!
      try { 
        rE2_1.findAllIndex((String) null, 5217);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compileImpl("", 0, true);
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = new RE2("can't happen");
      rE2_0.findSubmatchIndex("can't happen");
      rE2_0.toString();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte) (-94);
      byteArray0[8] = (byte)76;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[13];
      byteArray0[2] = (byte)55;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Braille");
      rE2_0.find("bad inst");
      // Undeclared exception!
      try { 
        rE2_0.findUTF8SubmatchIndex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("PLUS");
      rE2_0.replaceFirst("", "PLUS");
      rE2_0.find("PLUS");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.find("");
      byte[] byteArray0 = new byte[4];
      rE2_0.prefixComplete = true;
      byteArray0[0] = (byte)0;
      rE2_0.findAllUTF8Index(byteArray0, (byte)0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.findIndex("");
      rE2_0.findUTF8(byteArray0);
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("UTF-8");
      rE2_0.toString();
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 1472);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      int[] intArray0 = rE2_0.findIndex("");
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.reset();
      RE2.compilePOSIX("");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 0);
      assertNull(list0);
      
      RE2.quoteMeta("");
      RE2 rE2_1 = RE2.compileImpl("i1l", 0, true);
      rE2_1.findSubmatch("l@:jx2zl<3\"%rv:sf:U");
      rE2_1.findSubmatch("Pc4 V;JhBWxQ>KP3])e");
      rE2_0.find("ANY_CHAR_NOT_NL");
      Machine machine0 = rE2_0.get();
      rE2_0.put(machine0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)7;
      List<int[]> list1 = rE2_0.findAllUTF8Index(byteArray0, (-1189));
      assertEquals(5, list1.size());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.findSubmatch("");
      // Undeclared exception!
      try { 
        rE2_0.replaceAll((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.RE2", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("m");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("r", 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      RE2 rE2_0 = RE2.compile("");
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = new RE2("BEGIN_LINE");
      RE2 rE2_1 = RE2.compileImpl("BEGIN_LINE", 0, true);
      Machine machine0 = new Machine(rE2_0);
      rE2_0.longest = true;
      rE2_0.put(machine0);
      boolean boolean0 = RE2.match("BEGIN_LINE", "BEGIN_LINE");
      byte[] byteArray0 = new byte[6];
      machine0.init(0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)11;
      Machine machine1 = rE2_0.get();
      byteArray0[3] = (byte)36;
      rE2_0.put(machine0);
      assertSame(machine0, machine1);
      
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)0;
      rE2_1.findSubmatch("nop -> ");
      rE2_0.prefixUTF8 = byteArray0;
      rE2_0.findAllUTF8(byteArray0, 2361);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte)85;
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray1, (byte)7);
      assertNull(list0);
      
      RE2.match("BEGIN_LINE", "BEGIN_LINE");
      String string0 = rE2_1.toString();
      assertNotNull(string0);
      
      boolean boolean1 = rE2_0.matchUTF8(byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile("");
      rE2_0.findAllSubmatchIndex("", 978);
      rE2_0.findAllSubmatchIndex(">d*vBE}3pqgZ#11$", (-1818));
      rE2_0.get();
      String string1 = null;
      // Undeclared exception!
      try { 
        RE2.compileImpl((String) null, 3178, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX("");
      String string1 = null;
      rE2_0.replaceFirst("(;m%H!RWf}vWCW#Wd", (String) null);
      rE2_0.findAll("null(;m%H!RWf}vWCW#Wd", 64);
      rE2_0.find("BEGIN_LINE");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      Machine machine0 = rE2_0.get();
      machine0.init(64);
      // Undeclared exception!
      try { 
        rE2_0.findAllSubmatchIndex((String) null, 1489);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("#Jj\"@{!Ji~Q.PC", 1498, false);
      rE2_0.findAllSubmatchIndex("#Jj\"@{!Ji~Q.PC", 1498);
      rE2_0.findSubmatch(".+*?()|[]{}^$");
      rE2_0.findSubmatch("6xr_&gl");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)0;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte)89);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = new RE2("2");
      String string0 = RE2.quoteMeta("2");
      assertEquals("2", string0);
      
      String string1 = rE2_0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = new RE2("L5gHOR;muOM");
      rE2_0.findAllSubmatch("L5gHOR;muOM", (-1572));
      rE2_0.findAllIndex("\"-8T|3&&3E]qk&", 4837);
      RE2 rE2_1 = RE2.compile("\"-8T|3&&3E]qk&");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)3;
      rE2_1.findUTF8Index(byteArray0);
      rE2_0.prefixRune = 1292;
      RE2.match("L5gHOR;muOM", "L5gHOR;muOM");
      rE2_0.findSubmatchIndex("<T'H2 :Y{");
      rE2_0.findSubmatchIndex("<T'H2 :Y{");
      RE2.quoteMeta("$=>S;*z-.BQEo_T");
      rE2_0.numberOfCapturingGroups();
      rE2_0.findSubmatchIndex("\"-8T|3&&3E]qk&");
      RE2 rE2_2 = RE2.compile("<T'H2 :Y{");
      assertNotSame(rE2_2, rE2_0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-905));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("(?:)");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      RE2 rE2_1 = RE2.compile("(?:)");
      rE2_0.find("(?:)");
      int int0 = 2673;
      rE2_1.matchUTF8(byteArray0);
      rE2_0.findAllUTF8(byteArray0, 2673);
      // Undeclared exception!
      try { 
        RE2.match((String) null, (CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("djEKz1k");
      rE2_0.numberOfCapturingGroups();
      RE2.compileImpl("", 32, true);
      rE2_0.get();
      RE2 rE2_1 = RE2.compile("");
      rE2_0.findSubmatch("");
      rE2_1.prefixComplete = true;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      rE2_1.findAllUTF8SubmatchIndex(byteArray0, 3874);
      rE2_0.findSubmatch("djEKz1k");
      rE2_0.findIndex("");
      rE2_1.findAll("", 0);
      rE2_1.match("djEKz1k");
      // Undeclared exception!
      try { 
        rE2_0.match("", 0, 3733, 32, (int[]) null, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("com.google.re2j.Simplify$1", (-652), true);
      rE2_0.prefixComplete = true;
      rE2_0.findAll("com.google.re2j.Simplify$1", (-652));
      RE2 rE2_1 = RE2.compile("3//");
      rE2_0.reset();
      RE2.compile("");
      byte[] byteArray0 = new byte[2];
      RE2 rE2_2 = RE2.compilePOSIX("");
      rE2_1.matchUTF8(byteArray0);
      rE2_1.findUTF8Index(byteArray0);
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-32);
      rE2_1.findUTF8Index(byteArray0);
      rE2_1.findAllUTF8Submatch(byteArray0, (-220));
      rE2_0.findUTF8Submatch(byteArray0);
      RE2.match("com.google.re2j.Simplify$1", "com.google.re2j.Simplify$1");
      rE2_2.findUTF8Index(byteArray0);
      rE2_1.findUTF8Index(byteArray0);
      String string0 = null;
      rE2_1.prefixComplete = true;
      // Undeclared exception!
      try { 
        rE2_1.findAll((String) null, 1761);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<int[]> list0 = rE2_0.findAllIndex(">``1)q9-e/|'o|g", 64);
      assertNotNull(list0);
      assertEquals(17, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      RE2 rE2_1 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)17;
      rE2_1.findAllUTF8Submatch(byteArray0, (-615));
      int[] intArray0 = new int[9];
      intArray0[0] = 10;
      intArray0[1] = (-136);
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[5] = 0;
      intArray0[5] = (int) (byte)75;
      intArray0[6] = (int) (byte)75;
      intArray0[7] = (int) (byte)17;
      intArray0[8] = 92;
      boolean boolean0 = rE2_1.match("", 10, (byte)0, (byte)75, intArray0, 262);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)55);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl(")CwdJ1v;jdml'", 1103, false);
      String string0 = rE2_0.replaceAll(")CwdJ1v;jdml'", ")CwdJ1v;jdml'");
      assertEquals(")CwdJ1v;jdml'", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      RE2 rE2_1 = RE2.compilePOSIX("|'");
      String string0 = rE2_1.replaceAll("|'", "");
      assertEquals("|", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      boolean boolean0 = rE2_0.longest;
      RE2.quoteMeta("sC@[MTZ|-N");
      rE2_0.match("sC@[MTZ|-N", 0, 0, 0, (int[]) null, 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.findSubmatch(".+*?()|[]{}^$");
      rE2_0.findAllIndex("^4$vW|:(^32n&z9~", 526);
      rE2_0.findAllSubmatch("RF]rn#!#SN_PKkY,", (byte)2);
      rE2_0.findSubmatch("RF]rn#!#SN_PKkY,");
      rE2_0.replaceAll("^4$vW|:(^32n&z9~", "Mc");
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-68);
      byteArray1[1] = (byte) (-68);
      rE2_0.findAllUTF8Submatch(byteArray1, (byte)2);
      String string0 = rE2_0.replaceFirst("", ")[.J&]7");
      assertEquals(")[.J&]7", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("|f3+");
      RE2 rE2_1 = RE2.compilePOSIX("|f3+");
      int[] intArray0 = rE2_0.findIndex("|f3+");
      List<String> list0 = rE2_0.findAll("|f3+", 8305);
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      String string0 = rE2_0.toString();
      assertNotNull(string0);
      
      rE2_1.match((CharSequence) null, 8305, 84, (-1), intArray0, 793);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }
}
