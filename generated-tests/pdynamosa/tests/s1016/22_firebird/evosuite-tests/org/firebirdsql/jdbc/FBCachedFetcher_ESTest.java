/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 03:41:31 GMT 2019
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.IscDbHandle;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][4];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[2] = (byte) (-82);
      linkedList0.add(byteArray0);
      byteArray1[2] = (byte) (-82);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add(byteArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray2 = new byte[0][6];
      linkedList1.add(byteArray2);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.first();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.relative(815);
      boolean boolean0 = fBCachedFetcher0.isAfterLast();
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.setFetchSize(0);
      assertEquals(0, fBCachedFetcher0.getFetchSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[4][4];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte) (-50);
      byteArray1[2] = (byte) (-50);
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte) (-128);
      byteArray1[5] = (byte) (-111);
      byteArray1[6] = (byte)79;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-50);
      byteArray2[1] = (byte) (-50);
      byteArray2[2] = (byte) (-128);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-128);
      byteArray3[1] = (byte)66;
      byteArray3[2] = (byte)1;
      byteArray3[3] = (byte) (-128);
      byteArray3[4] = (byte)1;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)100;
      byteArray4[1] = (byte) (-128);
      byteArray4[2] = (byte) (-50);
      byteArray4[3] = (byte) (-111);
      byteArray4[4] = (byte)1;
      byteArray0[3] = byteArray4;
      linkedList0.add(byteArray0);
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertTrue(boolean0);
      
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][4];
      linkedList0.add(byteArray0);
      linkedList0.add(byteArray0);
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.last();
      fBCachedFetcher0.insertRow(fBResultSet0.row);
      assertFalse(fBCachedFetcher0.isFirst());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][4];
      byte[] byteArray1 = new byte[3];
      byteArray1[2] = (byte) (-82);
      byteArray1[1] = (byte) (-82);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add(byteArray0);
      linkedList1.add(byteArray0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      linkedList1.add(byteArray0);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.first();
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.previous();
      boolean boolean0 = fBCachedFetcher0.last();
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.poll();
      linkedList0.add((byte[][]) null);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.previous();
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isFirst());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[7][7];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte) (-127);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-127);
      byteArray2[2] = (byte) (-127);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-127);
      byteArray2[5] = (byte) (-127);
      byteArray2[6] = (byte) (-127);
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.relative((byte)0);
      boolean boolean0 = fBCachedFetcher0.relative((byte) (-127));
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isBeforeFirst());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][8];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-57);
      byteArray1[1] = (byte) (-81);
      byteArray1[2] = (byte)67;
      byteArray1[3] = (byte) (-106);
      byteArray1[4] = (byte)63;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)85;
      byteArray1[7] = (byte)127;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)63;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)85;
      byteArray2[4] = (byte) (-57);
      byteArray2[5] = (byte) (-57);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)127;
      byteArray3[1] = (byte) (-57);
      byteArray3[2] = (byte)67;
      byteArray3[3] = (byte) (-57);
      byteArray3[4] = (byte)63;
      byteArray3[5] = (byte) (-57);
      byteArray3[6] = (byte)0;
      byteArray3[7] = (byte)67;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[0];
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[5];
      byteArray5[0] = (byte)63;
      byteArray5[1] = (byte) (-57);
      byteArray5[2] = (byte)67;
      byteArray5[3] = (byte)85;
      byteArray5[4] = (byte)0;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[4];
      byteArray6[0] = (byte)85;
      byteArray6[1] = (byte) (-57);
      byteArray6[2] = (byte) (-81);
      byteArray6[3] = (byte) (-57);
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[1];
      byteArray7[0] = (byte) (-106);
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[3];
      byteArray8[0] = (byte)127;
      byteArray8[1] = (byte)0;
      byteArray8[2] = (byte)0;
      byteArray0[7] = byteArray8;
      linkedList0.addLast(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[9][4];
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      boolean boolean0 = fBCachedFetcher0.absolute(1);
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.iterator();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[8][9];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-68);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte)0;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)5;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-68);
      byteArray2[5] = (byte)0;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-68);
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)5;
      byteArray3[4] = (byte) (-68);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)5;
      byteArray4[1] = (byte) (-68);
      byteArray4[2] = (byte) (-68);
      byteArray4[3] = (byte) (-68);
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)0;
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher1.close();
      fBCachedFetcher0.setFetchSize((byte)5);
      assertEquals(5, fBCachedFetcher0.getFetchSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.listIterator();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow((byte[][]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[7][7];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte) (-127);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-127);
      byteArray2[2] = (byte) (-127);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-127);
      byteArray2[5] = (byte) (-127);
      byteArray2[6] = (byte) (-127);
      byteArray2[7] = (byte)44;
      byteArray2[8] = (byte)39;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-127);
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)44;
      byteArray3[3] = (byte)39;
      byteArray3[4] = (byte) (-29);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)39;
      byteArray4[2] = (byte)123;
      byteArray4[3] = (byte)86;
      byteArray4[4] = (byte) (-127);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[5];
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte)86;
      byteArray5[2] = (byte) (-127);
      byteArray5[3] = (byte)0;
      byteArray5[4] = (byte)44;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[8];
      byteArray6[0] = (byte)0;
      byteArray6[1] = (byte)44;
      byteArray6[2] = (byte)39;
      byteArray6[3] = (byte)0;
      byteArray6[4] = (byte) (-120);
      byteArray6[5] = (byte)86;
      byteArray6[6] = (byte)39;
      byteArray6[7] = (byte)44;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[6];
      byteArray7[0] = (byte)86;
      byteArray7[1] = (byte) (-120);
      byteArray7[2] = (byte)123;
      byteArray7[4] = (byte)0;
      byteArray0[6] = byteArray7;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.absolute((-538));
      fBCachedFetcher0.isAfterLast();
      linkedList0.spliterator();
      byte[][] byteArray0 = new byte[0][0];
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[3][5];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte) (-2);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)2;
      byteArray2[1] = (byte) (-112);
      byteArray2[2] = (byte) (-2);
      byteArray2[3] = (byte) (-2);
      byteArray2[4] = (byte)2;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte) (-2);
      byteArray3[1] = (byte) (-2);
      byteArray3[2] = (byte) (-112);
      byteArray3[3] = (byte) (-2);
      byteArray3[4] = (byte) (-2);
      byteArray3[5] = (byte) (-112);
      byteArray3[6] = (byte) (-112);
      byteArray0[2] = byteArray3;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][4];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-82);
      linkedList0.add(byteArray0);
      byteArray1[2] = (byte)125;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)125;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)125;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)125;
      byteArray2[7] = (byte)0;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[0];
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte) (-82);
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)125;
      byteArray0[3] = byteArray4;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      linkedList1.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.first();
      fBCachedFetcher0.deleteRow();
      int int0 = fBCachedFetcher0.getRowNum();
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedHashSet<byte[][]> linkedHashSet0 = new LinkedHashSet<byte[][]>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>(linkedHashSet0);
      linkedList0.removeLastOccurrence(linkedHashSet0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isBeforeFirst();
      byte[][] byteArray0 = new byte[6][9];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)19;
      byteArray1[3] = (byte)0;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte) (-48);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte) (-112);
      byteArray4[1] = (byte)19;
      byteArray4[2] = (byte)5;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte)5;
      byteArray4[5] = (byte)5;
      byteArray4[6] = (byte)0;
      byteArray4[7] = (byte) (-48);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[7];
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte) (-48);
      byteArray5[2] = (byte)0;
      byteArray5[3] = (byte) (-48);
      byteArray5[4] = (byte)0;
      byteArray5[5] = (byte)19;
      byteArray5[6] = (byte)0;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[6];
      byteArray6[0] = (byte) (-48);
      byteArray6[1] = (byte) (-48);
      byteArray6[2] = (byte) (-112);
      byteArray6[3] = (byte)5;
      byteArray6[4] = (byte)0;
      byteArray6[5] = (byte) (-48);
      byteArray0[5] = byteArray6;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[8][9];
      linkedList0.add(byteArray0);
      fBCachedFetcher0.relative((byte)0);
      fBCachedFetcher0.relative((byte)0);
      fBCachedFetcher0.afterLast();
      assertEquals(0, fBCachedFetcher0.getFetchSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.setFetchSize((-921));
      byte[][] byteArray0 = new byte[8][9];
      linkedList0.add(byteArray0);
      fBCachedFetcher0.relative((byte)5);
      fBCachedFetcher0.relative((-1860));
      fBCachedFetcher0.isAfterLast();
      assertEquals((-921), fBCachedFetcher0.getFetchSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.first();
      fBCachedFetcher0.close();
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean0 = fBCachedFetcher0.absolute((-1842));
      assertFalse(boolean0);
      
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][4];
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      linkedList1.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.relative((byte) (-82));
      boolean boolean0 = fBCachedFetcher0.isFirst();
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][4];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[2] = (byte) (-82);
      linkedList0.add(byteArray0);
      byteArray1[2] = (byte) (-82);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add(byteArray0);
      linkedList1.add(byteArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray2 = new byte[0][6];
      linkedList1.add(byteArray2);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.first();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.relative(815);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.last();
      fBCachedFetcher0.first();
      fBCachedFetcher0.deleteRow();
      assertTrue(fBCachedFetcher0.isLast());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      byte[][] byteArray0 = new byte[8][6];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)14;
      byteArray1[1] = (byte) (-68);
      byteArray1[2] = (byte)76;
      byteArray1[3] = (byte)115;
      byteArray1[4] = (byte)1;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte) (-68);
      byteArray3[1] = (byte)76;
      byteArray3[2] = (byte)39;
      byteArray3[3] = (byte) (-42);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[0];
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[4];
      byteArray5[0] = (byte)39;
      byteArray5[1] = (byte) (-68);
      byteArray5[2] = (byte) (-68);
      byteArray5[3] = (byte)14;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[3];
      byteArray6[0] = (byte)14;
      byteArray6[1] = (byte)76;
      byteArray6[2] = (byte)115;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[4];
      byteArray7[0] = (byte) (-68);
      byteArray7[1] = (byte) (-8);
      byteArray7[2] = (byte)1;
      byteArray7[3] = (byte) (-68);
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[7];
      byteArray8[0] = (byte)39;
      byteArray8[1] = (byte)76;
      byteArray8[2] = (byte) (-42);
      byteArray8[3] = (byte) (-68);
      byteArray8[4] = (byte) (-42);
      byteArray8[5] = (byte)115;
      byteArray8[6] = (byte)33;
      byteArray0[7] = byteArray8;
      fBCachedFetcher0.insertRow(byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][1];
      boolean boolean0 = linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean1 = fBCachedFetcher0.isEmpty();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isAfterLast();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][2];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-18);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[0];
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[0];
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[8];
      byteArray5[0] = (byte) (-18);
      byteArray5[1] = (byte) (-18);
      byteArray5[2] = (byte) (-18);
      byteArray5[3] = (byte) (-18);
      byteArray5[4] = (byte) (-18);
      byteArray5[5] = (byte) (-18);
      byteArray5[6] = (byte) (-18);
      byteArray5[7] = (byte) (-18);
      byteArray0[4] = byteArray5;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.updateRow(byteArray0);
      assertFalse(fBCachedFetcher0.isLast());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isBeforeFirst();
      byte[][] byteArray0 = new byte[0][9];
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[8][9];
      linkedList0.add(byteArray0);
      linkedList0.add(byteArray0);
      fBCachedFetcher0.relative((byte)5);
      fBCachedFetcher0.relative((-1860));
      boolean boolean0 = fBCachedFetcher0.last();
      assertFalse(boolean0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.next();
      assertFalse(boolean0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray0 = new byte[5][7];
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)78;
      byteArray1[1] = (byte)17;
      byteArray1[2] = (byte) (-119);
      byteArray1[3] = (byte) (-41);
      byteArray1[4] = (byte)95;
      byteArray1[5] = (byte) (-57);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-57);
      byteArray2[1] = (byte)78;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[4];
      byteArray3[0] = (byte)95;
      byteArray3[1] = (byte)78;
      byteArray3[2] = (byte)95;
      byteArray3[3] = (byte)95;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)95;
      byteArray4[1] = (byte) (-41);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[1];
      byteArray5[0] = (byte) (-119);
      byteArray0[4] = byteArray5;
      linkedList0.add(byteArray0);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.isBeforeFirst();
      boolean boolean0 = fBCachedFetcher0.next();
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][2];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-2);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-2);
      byteArray2[1] = (byte) (-2);
      byteArray2[2] = (byte) (-2);
      byteArray2[3] = (byte) (-2);
      byteArray2[4] = (byte) (-2);
      byteArray2[5] = (byte) (-2);
      byteArray2[6] = (byte) (-2);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte) (-21);
      byteArray3[1] = (byte) (-2);
      byteArray3[2] = (byte) (-2);
      byteArray3[3] = (byte) (-2);
      byteArray3[4] = (byte) (-2);
      byteArray3[5] = (byte) (-2);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte) (-2);
      byteArray4[1] = (byte)2;
      byteArray4[2] = (byte) (-21);
      byteArray4[3] = (byte) (-2);
      byteArray4[4] = (byte) (-21);
      byteArray0[3] = byteArray4;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[7][3];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)105;
      byteArray1[1] = (byte) (-42);
      byteArray1[2] = (byte)40;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[3];
      byteArray3[0] = (byte)40;
      byteArray3[1] = (byte)105;
      byteArray3[2] = (byte)40;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)105;
      byteArray4[1] = (byte)40;
      byteArray4[2] = (byte)40;
      byteArray4[3] = (byte)40;
      byteArray4[4] = (byte)71;
      byteArray4[5] = (byte) (-119);
      byteArray4[6] = (byte) (-42);
      byteArray4[7] = (byte)105;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[6];
      byteArray5[0] = (byte)40;
      byteArray5[1] = (byte) (-119);
      byteArray5[2] = (byte) (-119);
      byteArray5[3] = (byte) (-41);
      byteArray5[4] = (byte)71;
      byteArray5[5] = (byte)105;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[7];
      byteArray6[0] = (byte) (-119);
      byteArray6[1] = (byte)64;
      byteArray6[2] = (byte)105;
      byteArray6[3] = (byte)105;
      byteArray6[4] = (byte)40;
      byteArray6[5] = (byte) (-41);
      byteArray6[6] = (byte)105;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[5];
      byteArray7[0] = (byte)71;
      byteArray7[1] = (byte) (-119);
      byteArray7[2] = (byte) (-42);
      byteArray7[3] = (byte) (-41);
      byteArray7[4] = (byte)64;
      byteArray0[6] = byteArray7;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[8][9];
      linkedList0.add(byteArray0);
      fBCachedFetcher0.relative((byte)0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher1.isAfterLast();
      // Undeclared exception!
      try { 
        fBCachedFetcher1.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[8][9];
      linkedList0.addFirst(byteArray0);
      fBCachedFetcher0.beforeFirst();
      linkedList0.add(byteArray0);
      fBCachedFetcher0.relative((byte) (-112));
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher1.relative(1673);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[8][9];
      linkedList0.add(byteArray0);
      fBCachedFetcher0.relative((byte)5);
      boolean boolean0 = fBCachedFetcher0.relative((-1860));
      boolean boolean1 = fBCachedFetcher0.isAfterLast();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.close();
      assertTrue(fBCachedFetcher0.isLast());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.addAll((Collection<? extends byte[][]>) linkedList1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.close();
      boolean boolean0 = fBCachedFetcher0.isEmpty();
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[8][9];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-68);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)5;
      byteArray1[3] = (byte)0;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)5;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-68);
      byteArray2[5] = (byte)0;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-68);
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)5;
      byteArray3[4] = (byte) (-68);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte)5;
      byteArray4[1] = (byte) (-68);
      byteArray4[2] = (byte) (-68);
      byteArray4[3] = (byte) (-68);
      byteArray4[4] = (byte)0;
      byteArray4[5] = (byte)0;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte) (-68);
      byteArray5[2] = (byte)5;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[3];
      byteArray6[0] = (byte)5;
      byteArray6[1] = (byte)0;
      byteArray6[2] = (byte)0;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[5];
      byteArray7[0] = (byte) (-68);
      byteArray7[1] = (byte)0;
      byteArray7[2] = (byte)5;
      byteArray7[3] = (byte)0;
      byteArray7[4] = (byte) (-68);
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[3];
      byteArray8[0] = (byte)5;
      byteArray8[1] = (byte) (-68);
      byteArray8[2] = (byte)5;
      byteArray0[7] = byteArray8;
      linkedList0.add(byteArray0);
      fBCachedFetcher0.relative(1794);
      boolean boolean0 = fBCachedFetcher0.relative(1794);
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][4];
      byte[] byteArray1 = new byte[3];
      byteArray1[2] = (byte) (-82);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add(byteArray0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      linkedList1.add(byteArray0);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.first();
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.setFetchSize(587);
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.absolute(587);
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertEquals(587, fBCachedFetcher0.getFetchSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      IscDbHandle iscDbHandle0 = javaGDSImpl0.createIscDbHandle();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBuffer0, iscDbHandle0, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher(gDSHelper0, 16384, 1, isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.setFetchSize((-2237));
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals((-2237), int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][4];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-82);
      byteArray1[2] = (byte)125;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      LinkedBlockingDeque<byte[][]> linkedBlockingDeque0 = new LinkedBlockingDeque<byte[][]>();
      linkedList0.addAll((Collection<? extends byte[][]>) linkedBlockingDeque0);
      byteArray2[1] = (byte)125;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)125;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)125;
      byteArray2[7] = (byte)0;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[0];
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte) (-82);
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)125;
      byteArray0[3] = byteArray4;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      linkedList1.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.absolute((byte)125);
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[8][9];
      linkedList0.add(byteArray0);
      fBCachedFetcher0.relative((byte)0);
      boolean boolean0 = fBCachedFetcher0.relative(1794);
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      byte[][] byteArray0 = new byte[8][9];
      linkedList0.addFirst(byteArray0);
      linkedList0.add(byteArray0);
      boolean boolean0 = fBCachedFetcher0.relative((byte)5);
      fBCachedFetcher0.relative((-1860));
      boolean boolean1 = fBCachedFetcher0.isAfterLast();
      assertTrue(boolean1 == boolean0);
      
      fBCachedFetcher0.beforeFirst();
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][0];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)0;
      byteArray0[1] = byteArray2;
      linkedList0.add(byteArray0);
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)0;
      byteArray0[2] = byteArray3;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.setFetchSize(7);
      assertEquals(7, fBCachedFetcher0.getFetchSize());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher1.setFetchSize(253);
      fBCachedFetcher1.isEmpty();
      fBCachedFetcher0.first();
      boolean boolean0 = fBCachedFetcher1.previous();
      assertEquals(253, fBCachedFetcher1.getFetchSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[7][7];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)39;
      byteArray1[2] = (byte) (-127);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-127);
      byteArray2[2] = (byte) (-127);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte) (-127);
      byteArray2[5] = (byte) (-127);
      byteArray2[6] = (byte) (-127);
      byteArray2[7] = (byte)44;
      byteArray2[8] = (byte)39;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = (byte) (-127);
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)44;
      byteArray3[3] = (byte)39;
      byteArray3[4] = (byte) (-29);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)39;
      byteArray4[2] = (byte)123;
      byteArray4[3] = (byte)86;
      byteArray4[4] = (byte) (-127);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[5];
      byteArray5[0] = (byte)0;
      byteArray5[1] = (byte)86;
      byteArray5[2] = (byte) (-127);
      byteArray5[3] = (byte)0;
      byteArray5[4] = (byte)44;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[8];
      byteArray6[0] = (byte)0;
      byteArray6[1] = (byte)44;
      byteArray6[2] = (byte)39;
      byteArray6[3] = (byte)0;
      byteArray6[4] = (byte) (-120);
      byteArray6[5] = (byte)86;
      byteArray6[6] = (byte)39;
      byteArray6[7] = (byte)44;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[6];
      byteArray7[0] = (byte)86;
      byteArray7[1] = (byte) (-120);
      byteArray7[2] = (byte)123;
      byteArray7[3] = (byte) (-127);
      byteArray7[4] = (byte)0;
      byteArray7[5] = (byte)123;
      byteArray0[6] = byteArray7;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][2];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)127;
      byteArray2[1] = (byte)100;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-33);
      byteArray2[4] = (byte) (-119);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte) (-119);
      byteArray3[1] = (byte) (-119);
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte) (-119);
      byteArray3[4] = (byte) (-50);
      byteArray3[5] = (byte)127;
      byteArray3[6] = (byte) (-119);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte) (-119);
      byteArray4[1] = (byte)100;
      byteArray4[2] = (byte)127;
      byteArray4[3] = (byte) (-119);
      byteArray0[3] = byteArray4;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.relative((byte)0);
      fBCachedFetcher0.absolute(530);
      fBCachedFetcher0.first();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow((byte[][]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[6][4];
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add(byteArray0);
      FBResultSet fBResultSet2 = new FBResultSet(fBResultSet1.xsqlvars, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet2);
      fBCachedFetcher0.first();
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isFirst());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isFirst();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][4];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[2] = (byte) (-82);
      linkedList0.add(byteArray0);
      byteArray1[2] = (byte) (-82);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray2 = new byte[0][6];
      linkedList0.add(byteArray2);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.first();
      fBCachedFetcher0.insertRow(byteArray0);
      assertTrue(fBCachedFetcher0.isFirst());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][4];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      linkedList0.add(byteArray0);
      byteArray1[2] = (byte) (-82);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add(byteArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      linkedList1.add(byteArray0);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.first();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow(byteArray0);
      byte[][] byteArray2 = new byte[3][7];
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte) (-82);
      byteArray3[1] = (byte) (-82);
      byteArray2[0] = byteArray3;
      byte[] byteArray4 = new byte[8];
      byteArray4[0] = (byte)0;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)0;
      byteArray4[4] = (byte) (-82);
      byteArray4[5] = (byte)0;
      byteArray4[6] = (byte) (-95);
      byteArray4[7] = (byte)125;
      byteArray2[1] = byteArray4;
      byteArray2[2] = byteArray1;
      fBCachedFetcher0.updateRow(byteArray2);
      assertTrue(fBCachedFetcher0.isFirst());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][4];
      byte[] byteArray1 = new byte[3];
      byteArray1[2] = (byte) (-82);
      linkedList0.add(byteArray0);
      byteArray1[2] = (byte) (-82);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add(byteArray0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      linkedList1.add(byteArray0);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.first();
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.relative(815);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.insertRow(byteArray0);
      fBCachedFetcher0.isBeforeFirst();
      fBCachedFetcher0.insertRow(byteArray0);
      assertTrue(fBCachedFetcher0.isFirst());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][4];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-82);
      linkedList0.add(byteArray0);
      byteArray1[2] = (byte) (-34);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-34);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-34);
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte) (-34);
      byteArray0[1] = byteArray2;
      byteArray0[2] = byteArray1;
      byte[] byteArray3 = new byte[6];
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte) (-34);
      byteArray0[3] = byteArray3;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.next();
      fBCachedFetcher0.first();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.relative((byte) (-34));
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.getRowNum();
      boolean boolean0 = fBCachedFetcher0.last();
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][4];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-82);
      linkedList0.add(byteArray0);
      byteArray1[2] = (byte) (-34);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-34);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte) (-34);
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte) (-34);
      byteArray0[1] = byteArray2;
      byteArray0[2] = byteArray1;
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte) (-82);
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte) (-34);
      byteArray0[3] = byteArray3;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      linkedList1.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.first();
      fBCachedFetcher0.deleteRow();
      boolean boolean0 = fBCachedFetcher0.relative((byte)0);
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][4];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-82);
      byteArray1[2] = (byte)125;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)125;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)125;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)125;
      byteArray2[7] = (byte)0;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[0];
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte) (-82);
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)125;
      byteArray0[3] = byteArray4;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      linkedList1.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.first();
      fBCachedFetcher0.deleteRow();
      assertTrue(fBCachedFetcher0.isAfterLast());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[5][4];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[2] = (byte) (-82);
      linkedList0.add(byteArray0);
      byteArray1[2] = (byte) (-82);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add(byteArray0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray2 = new byte[0][6];
      linkedList1.add(byteArray2);
      LinkedList<byte[][]> linkedList3 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      fBCachedFetcher0.first();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.relative(815);
      fBCachedFetcher0.previous();
      int int0 = fBCachedFetcher0.getRowNum();
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[4][4];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-82);
      byteArray1[2] = (byte)125;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)125;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)125;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)125;
      byteArray2[7] = (byte)0;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[0];
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[4];
      byteArray4[0] = (byte) (-82);
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)125;
      byteArray0[3] = byteArray4;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.next();
      boolean boolean0 = fBCachedFetcher0.first();
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(boolean0);
  }
}
