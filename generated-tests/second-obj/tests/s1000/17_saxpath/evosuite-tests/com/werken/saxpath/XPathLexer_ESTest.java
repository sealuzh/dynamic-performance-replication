/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:34:56 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      xPathLexer0.consume(2544);
      assertNull(xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.mod();
      xPathLexer0.or();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.literal();
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.or();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/g;6i2x3R[}N");
      xPathLexer0.comma();
      Token token0 = xPathLexer0.equals();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.rightParen();
      token0.toString();
      xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?;`A8}?~$&/##");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("?", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("`A8}?~$&/##", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Rk");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('W');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?;`A8}?~$&/##");
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1549));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y\u0006V");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("y", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      boolean boolean0 = xPathLexer0.isIdentifierChar('-');
      assertTrue(boolean0);
      
      xPathLexer0.currentPosition();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.notEquals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("oiawd,24vV&z{A7.P");
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      String string0 = "t:ZS2H}K||:7~";
      xPathLexer0.setXPath("t:ZS2H}K||:7~");
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      String string1 = null;
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.setXPath(",ZXe2\"J@&^52|9bGcU");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer1.rightParen();
      xPathLexer0.operatorName();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L(T$XAEdF_I'");
      xPathLexer0.minus();
      Token token0 = xPathLexer0.star();
      token0.toString();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("L(T$XAEdF_I'");
      xPathLexer1.nextToken();
      xPathLexer1.equals();
      String string0 = null;
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("A=]/Z;p");
      xPathLexer0.or();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("A", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("]", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.minus();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.colon();
      assertEquals(" ", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(1, token3.getTokenType());
      assertEquals("(", token3.getTokenText());
      
      xPathLexer0.setXPath("[ (");
      xPathLexer0.and();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("[", token4.getTokenText());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals(" (", token5.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('A');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L(T$XAEdF_I'");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("L", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals("(", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("T", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.whitespace();
      String string0 = token4.toString();
      assertEquals("[ (-2) ()", string0);
      
      char char0 = xPathLexer0.LA(10);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h)");
      xPathLexer0.number();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L(T$XAEdF_I'");
      xPathLexer0.minus();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token1.toString();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.setPreviousToken(token1);
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.setXPath(") (");
      xPathLexer1.or();
      Token token2 = xPathLexer1.and();
      assertNull(token2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o\u0003iawd,241V&z{A7.P");
      xPathLexer0.div();
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.div();
      token0.toString();
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.minus();
      xPathLexer0.identifier();
      xPathLexer0.mod();
      xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      Token token1 = xPathLexer1.leftParen();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/g;6i2x3R[}N");
      xPathLexer0.comma();
      xPathLexer0.plus();
      xPathLexer0.equals();
      xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      xPathLexer0.rightParen();
      xPathLexer0.consume(73);
      assertEquals("/g;6i2x3R[}N", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"@7) eE|/;");
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.dollar();
      token1.toString();
      token1.toString();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.comma();
      xPathLexer0.currentPosition();
      xPathLexer0.notEquals();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      assertEquals("\"@7) eE|/;", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("Q");
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/g;6i2x3R[}N");
      Token token0 = xPathLexer0.plus();
      assertEquals("/", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("g", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.pipe();
      assertEquals(";", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      assertEquals("6", token3.getTokenText());
      
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.rightParen();
      assertEquals("i", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("*mr_@F");
      xPathLexer0.setXPath("*mr_@F");
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.or();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("*", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.setXPath(":<Qp,/?LG@]^n3G#+qh");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(":", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("<Q", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("p", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(":<Qp,/?LG@]^n3G#+qh");
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("*mr_@F");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.hasMoreChars();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(",", token5.getTokenText());
      
      xPathLexer1.or();
      Token token6 = xPathLexer2.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("*m", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?;`A8}?~$&/##");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(";`A8}?~$&/##", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("^c@(1jBK");
      xPathLexer0.minus();
      xPathLexer1.at();
      xPathLexer1.colon();
      xPathLexer1.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("#\"JMP");
      xPathLexer1.div();
      xPathLexer1.colon();
      xPathLexer0.slashes();
      XPathLexer xPathLexer2 = new XPathLexer(">frr@d>w");
      xPathLexer2.at();
      xPathLexer2.leftBracket();
      xPathLexer1.nextToken();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      xPathLexer3.colon();
      xPathLexer2.colon();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.dots();
      XPathLexer xPathLexer2 = new XPathLexer(" !.7weq[] =");
      xPathLexer2.nextToken();
      Token token0 = xPathLexer1.pipe();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<?*&");
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "L(T$XAEdF_I'";
      XPathLexer xPathLexer0 = new XPathLexer("L(T$XAEdF_I'");
      xPathLexer0.doubleColon();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("L(T$XAEdF_I'");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer3.colon();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("Hn!rNa]_~i/X*");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer1.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("H", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("n", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("");
      boolean boolean0 = xPathLexer2.hasMoreChars();
      assertFalse(boolean0);
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7");
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath(") (");
      xPathLexer0.minus();
      Token token0 = xPathLexer0.plus();
      xPathLexer0.endPosition();
      xPathLexer0.equals();
      token0.toString();
      xPathLexer0.identifierOrOperatorName();
      token0.toString();
      xPathLexer0.LA(3);
      xPathLexer0.consume();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierStartChar('\uFFFF');
      xPathLexer0.getXPath();
      xPathLexer0.setXPath(") (");
      assertEquals(") (", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L(T$EdFI'");
      Token token0 = xPathLexer0.minus();
      assertEquals("L", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (20) (()", string0);
      
      Token token2 = xPathLexer0.not();
      Token token3 = xPathLexer0.number();
      assertEquals("", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('B');
      assertTrue(boolean0);
      
      xPathLexer0.setPreviousToken(token2);
      assertEquals(23, token2.getTokenType());
      assertEquals("T", token2.getTokenText());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("d", token5.getTokenText());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      assertEquals("F", token6.getTokenText());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals("I", token7.getTokenText());
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("", token8.getTokenText());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("Hn!rNa]_~i/X*");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("H", token1.getTokenText());
      
      Token token2 = xPathLexer1.colon();
      assertEquals("n", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(23, token3.getTokenType());
      assertEquals("!", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer1.nextToken();
      assertEquals("rNa]_~i/X*", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      boolean boolean0 = xPathLexer2.hasMoreChars();
      assertFalse(boolean0);
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer1.number();
      assertEquals(30, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("-_rb/xhR`g]V mqE");
      Token token0 = xPathLexer0.star();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (20) (-)", string0);
      
      Token token1 = xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.at();
      token2.toString();
      String string1 = token1.toString();
      assertEquals("[ (3) (_)", string1);
      
      String string2 = token2.toString();
      assertEquals("[ (16) (r)", string2);
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("b", token3.getTokenText());
      
      xPathLexer0.setXPath("[ (3) (_)");
      xPathLexer0.and();
      char char0 = xPathLexer0.LA(118);
      assertEquals('\uFFFF', char0);
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.consume(118);
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("z9Fga&wlP:B]^?vap");
      XPathLexer xPathLexer3 = new XPathLexer();
      boolean boolean0 = xPathLexer2.isIdentifierChar('_');
      assertTrue(boolean0);
      
      Token token5 = xPathLexer2.notEquals();
      assertEquals("z9", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L(T$XAEdF_I'");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("L", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      String string0 = token1.toString();
      assertEquals("[ (20) (()", string0);
      
      Token token2 = xPathLexer0.not();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('`');
      assertFalse(boolean0);
      
      Token token4 = xPathLexer0.identifier();
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.setPreviousToken(token2);
      assertEquals("T", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.mod();
      xPathLexer0.rightBracket();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("X", token5.getTokenText());
      
      Token token6 = xPathLexer0.comma();
      assertEquals("A", token6.getTokenText());
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals("E", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals("d", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals("_I'", token10.getTokenText());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("BRndg#9u");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("BRndg", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer1.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      Token token4 = xPathLexer2.rightBracket();
      assertEquals(4, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('.');
      assertTrue(boolean0);
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h)");
      xPathLexer0.number();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.getPreviousToken();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(3, token1.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      int int1 = xPathLexer0.currentPosition();
      assertEquals(2, int1);
      
      xPathLexer0.getXPath();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("vI0o%G@f$c");
      Token token0 = xPathLexer0.equals();
      assertEquals("v", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("I0o", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/g;6i2x3R[}N");
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      xPathLexer0.setXPath("");
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<A*&");
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("?pcA,^:5ZXMG1[P)au");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.isIdentifierChar('F');
      xPathLexer0.whitespace();
      xPathLexer1.at();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.number();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("<A*&");
      xPathLexer2.slashes();
      xPathLexer1.mod();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.colon();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.and();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('`');
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      xPathLexer0.setXPath("k5B;");
      xPathLexer0.and();
      char char0 = xPathLexer0.LA(122);
      assertEquals('\uFFFF', char0);
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      assertNotSame(token7, token6);
      
      xPathLexer0.consume(122);
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer0.setXPath("");
      boolean boolean1 = xPathLexer0.isIdentifierChar('`');
      assertTrue(boolean1 == boolean0);
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer1 = new XPathLexer("#o2u&P~~m");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.colon();
      Token token2 = xPathLexer1.slashes();
      assertEquals("#", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer1.leftBracket();
      Token token5 = xPathLexer1.nextToken();
      assertEquals(30, token5.getTokenType());
      assertEquals("2", token5.getTokenText());
      
      Token token6 = xPathLexer1.leftParen();
      assertEquals("u", token6.getTokenText());
      assertEquals(1, token6.getTokenType());
      
      xPathLexer0.colon();
      Token token7 = xPathLexer1.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals("&", token7.getTokenText());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.setXPath("#\"JVMP");
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals("#", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer3.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      xPathLexer2.consume();
      xPathLexer1.nextToken();
      Token token10 = xPathLexer1.plus();
      assertEquals(5, token10.getTokenType());
      assertEquals("P", token10.getTokenText());
      
      Token token11 = xPathLexer0.minus();
      assertEquals("\"", token11.getTokenText());
      assertEquals(6, token11.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('J');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("p)%0uEU03");
      xPathLexer1.and();
      xPathLexer1.pipe();
      xPathLexer1.plus();
      xPathLexer0.leftBracket();
      xPathLexer1.nextToken();
      xPathLexer1.setXPath("");
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer1.consume();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer("p)%0uEU03");
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer1.setXPath("K/;Ryr]CO8Qs4EJM5j");
      xPathLexer1.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("<+;{WC");
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer3.leftBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("^2Ij[");
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.number();
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      xPathLexer0.setXPath("^2Ij[");
      String string0 = ",640/<Jua|kE-sw";
      XPathLexer xPathLexer1 = new XPathLexer(",640/<Jua|kE-sw");
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("-_rb/xhR`g]V mqE");
      XPathLexer xPathLexer1 = new XPathLexer("l'|N4g!f");
      xPathLexer1.nextToken();
      xPathLexer1.equals();
      xPathLexer1.at();
      xPathLexer1.colon();
      xPathLexer1.relationalOperator();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("@PV:OT},6}&bMWPICq");
      xPathLexer2.hasMoreChars();
      XPathLexer xPathLexer3 = new XPathLexer();
      assertFalse(xPathLexer3.equals((Object)xPathLexer1));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o\u0003iawd,241V&z{A7.P");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      
      token0.toString();
      token0.toString();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(",", token1.getTokenText());
      assertEquals(1, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      token0.toString();
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("2", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer1.operatorName();
      String string0 = token0.toString();
      assertEquals("[ (15) (o\u0003iawd)", string0);
      
      xPathLexer1.setXPath("9PyP=eHf|ce:#e");
      Token token3 = xPathLexer0.pipe();
      assertEquals("4", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      String string1 = token4.toString();
      assertEquals("[ (21) (1)", string1);
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals(30, token5.getTokenType());
      assertEquals("9", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.consume();
      Token token6 = xPathLexer2.comma();
      assertEquals(32, token6.getTokenType());
      
      xPathLexer2.identifier();
      XPathLexer xPathLexer3 = new XPathLexer("IG");
      char char0 = xPathLexer2.LA(318);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?3>'~1HsJK$N4U:$v5(");
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.div();
      Token token0 = xPathLexer0.plus();
      assertEquals("3", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals("?3>'~1HsJK$N4U:$v5(", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(">", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("-_rb/xhR`g]V mqE");
      XPathLexer xPathLexer1 = new XPathLexer("l'|N4g!f");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer1.equals();
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("|N", token1.getTokenText());
      
      Token token2 = xPathLexer1.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("4", token2.getTokenText());
      
      Token token3 = xPathLexer1.at();
      assertEquals("g", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer1.colon();
      assertEquals("!", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer1.nextToken();
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer1.getPreviousToken();
      assertEquals("f", token5.getTokenText());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals("-", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o\u0003iawd,241V&z{A7.P");
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("v^wWs%JT=%4CJ");
      xPathLexer0.comma();
      xPathLexer0.isIdentifierChar('x');
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.at();
      xPathLexer1.setXPath("");
      XPathLexer xPathLexer3 = new XPathLexer();
      String string0 = null;
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Gx!q:qp/H");
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.equals();
      xPathLexer0.setXPath("/=Ix@$=X5");
      String string0 = "\"Ro77!UfRkJp+gp";
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oiawd,24vV&z{A7.P");
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (26) (o)", string0);
      
      xPathLexer0.and();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.comma();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("w", token2.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.comma();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(",", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals("2", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("wSEY:*Jb[~>#ee]cY&");
      xPathLexer1.at();
      xPathLexer1.colon();
      xPathLexer0.relationalOperator();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.pipe();
      xPathLexer2.hasMoreChars();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.slashes();
      xPathLexer2.isIdentifierChar('=');
      Token token0 = xPathLexer3.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Hn!rNa]_~i/X*");
      xPathLexer0.at();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.and();
      xPathLexer0.consume(60);
      xPathLexer0.setXPath("Hn!rNa]_~i/X*");
      xPathLexer0.endPosition();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("2j");
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("+;k@[#2e3:x7]cH");
      Token token0 = xPathLexer0.identifier();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("[ (15) ()");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer1.leftBracket();
      xPathLexer2.colon();
      xPathLexer1.mod();
      xPathLexer1.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.mod();
      xPathLexer3.plus();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer2.equals();
      xPathLexer2.nextToken();
      xPathLexer0.getPreviousToken();
      boolean boolean0 = xPathLexer1.isIdentifierChar('j');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("Hn!rNa]_~i/X*");
      xPathLexer0.minus();
      xPathLexer1.at();
      xPathLexer1.colon();
      xPathLexer1.div();
      xPathLexer1.nextToken();
      xPathLexer0.leftParen();
      xPathLexer1.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifier();
      xPathLexer0.whitespace();
      xPathLexer1.and();
      xPathLexer1.at();
      xPathLexer1.leftBracket();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.number();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      String string0 = " !.7weq[] =";
      XPathLexer xPathLexer2 = new XPathLexer(" !.7weq[] =");
      xPathLexer2.nextToken();
      xPathLexer2.mod();
      Token token1 = xPathLexer2.nextToken();
      xPathLexer2.plus();
      Token token2 = xPathLexer2.not();
      token2.toString();
      xPathLexer2.nextToken();
      token1.toString();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("-_rb/xhR`g]V mqE");
      XPathLexer xPathLexer1 = new XPathLexer("l'|N4g!f");
      xPathLexer1.equals();
      xPathLexer1.at();
      xPathLexer1.colon();
      xPathLexer1.relationalOperator();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("@PV:OT},6}&bMWPICq");
      xPathLexer2.hasMoreChars();
      XPathLexer xPathLexer3 = new XPathLexer();
      assertFalse(xPathLexer3.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("U>9S$g$76f$YBi|[");
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.leftParen();
      xPathLexer1.not();
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer("e5>?HK^4d`1|}cVh");
      xPathLexer2.comma();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.minus();
      xPathLexer2.leftParen();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.notEquals();
      xPathLexer2.endPosition();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token0 = xPathLexer3.equals();
      xPathLexer5.literal();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.identifierOrOperatorName();
      xPathLexer3.mod();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token1 = xPathLexer5.relationalOperator();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(" >|'");
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume((-47));
      token0.toString();
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oiawd,24vV&z{A7.P");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("o", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      xPathLexer0.whitespace();
      String string0 = token1.toString();
      assertEquals("[ (-2) ()", string0);
      
      xPathLexer0.and();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("w", token2.getTokenText());
      
      xPathLexer0.comma();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(",", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("\"JP");
      xPathLexer1.div();
      xPathLexer1.colon();
      xPathLexer0.slashes();
      XPathLexer xPathLexer2 = new XPathLexer(">frr@d2>");
      xPathLexer2.at();
      xPathLexer2.leftBracket();
      xPathLexer1.nextToken();
      xPathLexer2.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      xPathLexer3.colon();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("H~zjIfEE(qlff.");
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("H~zjIfEE(qlff.");
      xPathLexer4.and();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer0.at();
      xPathLexer2.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer("H~zjIfEE(qlff.");
      Token token4 = xPathLexer6.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals("H", token4.getTokenText());
      
      xPathLexer3.consume();
      Token token5 = xPathLexer6.doubleColon();
      assertEquals("~z", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer4.setXPath("H~zjIfEE(qlff.");
      boolean boolean0 = xPathLexer6.isIdentifierChar('e');
      assertTrue(boolean0);
      
      Token token7 = xPathLexer2.pipe();
      assertEquals(17, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("U>9S$g$76f$Yi|[");
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.currentPosition();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("7");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.plus();
      xPathLexer1.colon();
      xPathLexer3.rightParen();
      Token token1 = xPathLexer1.mod();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("oiawd,24vV&z{A7.P");
      xPathLexer0.and();
      Token token0 = xPathLexer0.comma();
      assertEquals("o", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals("i", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals(",", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">'~1HsJK$CN4U:$v(");
      Token token0 = xPathLexer0.plus();
      assertEquals(">", token0.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.colon();
      assertEquals("~", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.slashes();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("H", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token4 = xPathLexer1.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer1.pipe();
      Token token5 = xPathLexer0.comma();
      assertEquals("$", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.consume();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("C", token6.getTokenText());
      
      xPathLexer0.hasMoreChars();
      Token token7 = xPathLexer0.slashes();
      assertEquals("N", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";.Jc?j8o~Za:");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.dots();
      assertEquals(";.", token0.getTokenText());
      assertEquals(14, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals("J", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.and();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("c?", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Ffmb{=vN");
      xPathLexer0.colon();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o\u0003iawd,241V&z{A7.P");
      xPathLexer0.relationalOperator();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.pipe();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.consume(11);
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("sfV\"`!\"d]+i6a*Rh6A");
      xPathLexer2.notEquals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer1.relationalOperator();
      xPathLexer0.setXPath("<>w=R#9E");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("<", token1.getTokenText());
      assertEquals(7, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.identifier();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      String string0 = "t:ZS2H}K||:7~";
      xPathLexer0.setXPath("t:ZS2H}K||:7~");
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer0.star();
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("!QoMLU{emi|");
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer0.leftBracket();
      xPathLexer2.colon();
      xPathLexer2.mod();
      xPathLexer1.plus();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer("!QoMLU{emi|");
      xPathLexer1.comma();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.number();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token0 = xPathLexer2.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "<>wR#9t";
      xPathLexer0.setXPath("<>wR#9t");
      Token token0 = xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.setXPath("[ (7) (<)");
      xPathLexer0.notEquals();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      String string1 = null;
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/g;6i2x3R[}N");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("/", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("g", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.leftParen();
      assertEquals(1, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.mod();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("/g;6i2x3R[}N");
      char char0 = xPathLexer2.LA(10);
      assertEquals('\uFFFF', char0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[8/pH?0_'`6");
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.star();
      xPathLexer0.notEquals();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.equals();
      token0.toString();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("c");
      xPathLexer0.setXPath("c");
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.div();
      xPathLexer0.currentPosition();
      xPathLexer0.equals();
      xPathLexer0.consume();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.star();
      xPathLexer0.rightBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer(" !.7weq[] =");
      xPathLexer2.nextToken();
      xPathLexer2.mod();
      xPathLexer2.nextToken();
      Token token0 = xPathLexer0.rightBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("o\".|T7=G?=`?Qr@{k");
      xPathLexer1.setXPath("o\".|T7=G?=`?Qr@{k");
      Token token0 = xPathLexer1.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("o", token0.getTokenText());
      
      xPathLexer1.endPosition();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer1.setXPath("yCZ.V");
      Token token2 = xPathLexer1.colon();
      assertEquals("y", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("CZ.V", token3.getTokenText());
      
      xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.dots();
      xPathLexer3.and();
      xPathLexer3.isIdentifierChar('K');
      Token token6 = xPathLexer2.dots();
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=-rG^Z#$\"'>");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer(")");
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("ADgS\"-`Ihu;}J:X) <u");
      xPathLexer0.comma();
      xPathLexer1.setXPath("");
      xPathLexer1.consume();
      assertFalse(xPathLexer1.equals((Object)xPathLexer3));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("?;`A8}?~$&/##");
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.leftParen();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1549));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.notEquals();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.plus();
      xPathLexer1.or();
      xPathLexer0.number();
      xPathLexer0.hasMoreChars();
      String string0 = " !.7Yweq[]=";
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer(" !.7Yweq[]=");
      xPathLexer2.nextToken();
      xPathLexer2.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.consume((-1));
      xPathLexer3.dollar();
      xPathLexer1.literal();
      xPathLexer2.nextToken();
      xPathLexer2.plus();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.leftBracket();
      xPathLexer0.dots();
      xPathLexer4.leftBracket();
      xPathLexer2.dots();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token0 = xPathLexer5.comma();
      XPathLexer xPathLexer6 = new XPathLexer(" !.7Yweq[]=");
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer0.equals();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer0.setXPath("o*ZIKaVp2'");
      xPathLexer0.setXPath("vyZ!#|");
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      assertEquals("v", token9.getTokenText());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.consume();
      Token token11 = xPathLexer1.pipe();
      assertEquals(17, token11.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      Token token12 = xPathLexer0.plus();
      assertEquals(5, token12.getTokenType());
      assertEquals("#", token12.getTokenText());
      
      Token token13 = xPathLexer2.leftParen();
      assertEquals(1, token13.getTokenType());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("-_rb/xhR`g]V mqE");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.equals();
      xPathLexer1.slashes();
      xPathLexer1.colon();
      xPathLexer1.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer1.hasMoreChars();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.getPreviousToken();
      xPathLexer0.setXPath("W>.WsbO");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      xPathLexer0.setXPath("[ (17) (>)");
      Token token1 = xPathLexer0.leftParen();
      xPathLexer0.div();
      xPathLexer0.consume(641);
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("[ (17) (>)");
      Token token2 = xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token1);
      xPathLexer2.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("l'|N4g!f");
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("@PV:OT},6}&bMWPICq");
      xPathLexer1.hasMoreChars();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("l'|N4g!f");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.equals();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("|N", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      xPathLexer0.equals();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("g", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("!", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.equals();
      assertEquals("f", token4.getTokenText());
      assertEquals(21, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".>@-O0U-w`=gEBl");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.minus();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(">", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (6) (.)", string0);
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      Token token3 = xPathLexer0.nextToken();
      assertEquals(16, token3.getTokenType());
      assertEquals("@", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("-", token4.getTokenText());
      
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.leftParen();
      assertEquals("`", token5.getTokenText());
      assertEquals(1, token5.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.consume();
      xPathLexer0.mod();
      Token token7 = xPathLexer2.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.identifierOrOperatorName();
      Token token8 = xPathLexer2.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer3.rightParen();
      assertEquals(2, token9.getTokenType());
      
      xPathLexer1.mod();
      Token token10 = xPathLexer3.identifier();
      assertEquals(15, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.endPosition();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.currentPosition();
      xPathLexer0.getXPath();
      xPathLexer0.comma();
      xPathLexer0.number();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.mod();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L(T$XAEdF_I'");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      xPathLexer0.consume();
      xPathLexer0.notEquals();
      xPathLexer0.leftParen();
      xPathLexer0.and();
      xPathLexer0.setXPath("");
      xPathLexer0.div();
      xPathLexer0.at();
      xPathLexer0.star();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.pipe();
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.literal();
      xPathLexer0.consume(616);
      xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("-_rb/xhR`g]V mqE");
      XPathLexer xPathLexer1 = new XPathLexer("-_rb/xhR`g]V mqE");
      xPathLexer1.equals();
      xPathLexer1.slashes();
      xPathLexer1.colon();
      xPathLexer1.slashes();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.hasMoreChars();
      XPathLexer xPathLexer3 = new XPathLexer();
      assertNull(xPathLexer3.getXPath());
  }
}
